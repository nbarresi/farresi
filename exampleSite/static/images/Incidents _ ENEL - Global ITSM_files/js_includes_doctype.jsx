/*! RESOURCE: /scripts/doctype/js_includes_doctype.js */
/*! RESOURCE: /scripts/lib/prototype.min.js */
var Prototype={Version:"1.7.3",Browser:(function(){var b=navigator.userAgent;var a=Object.prototype.toString.call(window.opera)=="[object Opera]";return{IE:!!window.attachEvent&&!a,Opera:a,WebKit:b.indexOf("AppleWebKit/")>-1,Gecko:b.indexOf("Gecko")>-1&&b.indexOf("KHTML")===-1,MobileSafari:/Apple.*Mobile/.test(b)}})(),BrowserFeatures:{XPath:!!document.evaluate,SelectorsAPI:!!document.querySelector,ElementExtensions:(function(){var a=window.Element||window.HTMLElement;return !!(a&&a.prototype)})(),SpecificElementExtensions:(function(){if(typeof window.HTMLDivElement!=="undefined"){return true}var c=document.createElement("div"),b=document.createElement("form"),a=false;if(c.__proto__&&(c.__proto__!==b.__proto__)){a=true}c=b=null;return a})()},ScriptFragment:"<script[^>]*>([\\S\\s]*?)<\/script\\s*>",JSONFilter:/^\/\*-secure-([\s\S]*)\*\/\s*$/,emptyFunction:function(){},K:function(a){return a}};if(Prototype.Browser.MobileSafari){Prototype.BrowserFeatures.SpecificElementExtensions=false}var Class=(function(){var d=(function(){for(var e in {toString:1}){if(e==="toString"){return false}}return true})();function a(){}function b(){var h=null,g=$A(arguments);if(Object.isFunction(g[0])){h=g.shift()}function e(){this.initialize.apply(this,arguments)}Object.extend(e,Class.Methods);e.superclass=h;e.subclasses=[];if(h){a.prototype=h.prototype;e.prototype=new a;h.subclasses.push(e)}for(var f=0,j=g.length;f<j;f++){e.addMethods(g[f])}if(!e.prototype.initialize){e.prototype.initialize=Prototype.emptyFunction}e.prototype.constructor=e;return e}function c(l){var g=this.superclass&&this.superclass.prototype,f=Object.keys(l);if(d){if(l.toString!=Object.prototype.toString){f.push("toString")}if(l.valueOf!=Object.prototype.valueOf){f.push("valueOf")}}for(var e=0,h=f.length;e<h;e++){var k=f[e],j=l[k];if(g&&Object.isFunction(j)&&j.argumentNames()[0]=="$super"){var m=j;j=(function(i){return function(){return g[i].apply(this,arguments)}})(k).wrap(m);j.valueOf=(function(i){return function(){return i.valueOf.call(i)}})(m);j.toString=(function(i){return function(){return i.toString.call(i)}})(m)}this.prototype[k]=j}return this}return{create:b,Methods:{addMethods:c}}})();(function(){var y=Object.prototype.toString,k=Object.prototype.hasOwnProperty,z="Null",B="Undefined",K="Boolean",w="Number",v="String",I="Object",i="[object Function]",d="[object Boolean]",j="[object Number]",f="[object String]",b="[object Array]",H="[object Date]",e=window.JSON&&typeof JSON.stringify==="function"&&JSON.stringify(0)==="0"&&typeof JSON.stringify(Prototype.K)==="undefined";var q=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"];var a=(function(){for(var L in {toString:1}){if(L==="toString"){return false}}return true})();function D(M){switch(M){case null:return z;case (void 0):return B}var L=typeof M;switch(L){case"boolean":return K;case"number":return w;case"string":return v}return I}function h(L,N){for(var M in N){L[M]=N[M]}return L}function l(L){try{if(o(L)){return"undefined"}if(L===null){return"null"}return L.inspect?L.inspect():String(L)}catch(M){if(M instanceof RangeError){return"..."}throw M}}function A(L){return m("",{"":L},[])}function m(U,R,S){var T=R[U];if(D(T)===I&&typeof T.toJSON==="function"){T=T.toJSON(U)}var N=y.call(T);switch(N){case j:case d:case f:T=T.valueOf()}switch(T){case null:return"null";case true:return"true";case false:return"false"}var Q=typeof T;switch(Q){case"string":return T.inspect(true);case"number":return isFinite(T)?String(T):"null";case"object":for(var M=0,L=S.length;M<L;M++){if(S[M]===T){throw new TypeError("Cyclic reference to '"+T+"' in object")}}S.push(T);var P=[];if(N===b){for(var M=0,L=T.length;M<L;M++){var O=m(M,T,S);P.push(typeof O==="undefined"?"null":O)}P="["+P.join(",")+"]"}else{var V=Object.keys(T);for(var M=0,L=V.length;M<L;M++){var U=V[M],O=m(U,T,S);if(typeof O!=="undefined"){P.push(U.inspect(true)+":"+O)}}P="{"+P.join(",")+"}"}S.pop();return P}}function J(L){return JSON.stringify(L)}function C(L){return $H(L).toQueryString()}function p(L){return L&&L.toHTML?L.toHTML():String.interpret(L)}function x(L){if(D(L)!==I){throw new TypeError()}var N=[];for(var O in L){if(k.call(L,O)){N.push(O)}}if(a){for(var M=0;O=q[M];M++){if(k.call(L,O)){N.push(O)}}}return N}function G(L){var M=[];for(var N in L){M.push(L[N])}return M}function s(L){return h({},L)}function E(L){return !!(L&&L.nodeType==1)}function u(L){return y.call(L)===b}var c=(typeof Array.isArray=="function")&&Array.isArray([])&&!Array.isArray({});if(c){u=Array.isArray}function r(L){return L instanceof Hash}function n(L){return y.call(L)===i}function g(L){return y.call(L)===f}function F(L){return y.call(L)===j}function t(L){return y.call(L)===H}function o(L){return typeof L==="undefined"}h(Object,{extend:h,inspect:l,toJSON:e?J:A,toQueryString:C,toHTML:p,keys:Object.keys||x,values:G,clone:s,isElement:E,isArray:u,isHash:r,isFunction:n,isString:g,isNumber:F,isDate:t,isUndefined:o})})();Object.extend(Function.prototype,(function(){var l=Array.prototype.slice;function d(p,m){var o=p.length,n=m.length;while(n--){p[o+n]=m[n]}return p}function j(n,m){n=l.call(n,0);return d(n,m)}function g(){var m=this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g,"").replace(/\s+/g,"").split(",");return m.length==1&&!m[0]?[]:m}function h(o){if(arguments.length<2&&Object.isUndefined(arguments[0])){return this}if(!Object.isFunction(this)){throw new TypeError("The object is not callable.")}var q=function(){};var m=this,n=l.call(arguments,1);var p=function(){var r=j(n,arguments);var s=this instanceof p?this:o;return m.apply(s,r)};q.prototype=this.prototype;p.prototype=new q();return p}function f(o){var m=this,n=l.call(arguments,1);return function(q){var p=d([q||window.event],n);return m.apply(o,p)}}function k(){if(!arguments.length){return this}var m=this,n=l.call(arguments,0);return function(){var o=j(n,arguments);return m.apply(this,o)}}function e(o){var m=this,n=l.call(arguments,1);o=o*1000;return window.setTimeout(function(){return m.apply(m,n)},o)}function a(){var m=d([0.01],arguments);return this.delay.apply(this,m)}function c(n){var m=this;return function(){var o=d([m.bind(this)],arguments);return n.apply(this,o)}}function b(){if(this._methodized){return this._methodized}var m=this;return this._methodized=function(){var n=d([this],arguments);return m.apply(null,n)}}var i={argumentNames:g,bindAsEventListener:f,curry:k,delay:e,defer:a,wrap:c,methodize:b};if(!Function.prototype.bind){i.bind=h}return i})());(function(c){function b(){return this.getUTCFullYear()+"-"+(this.getUTCMonth()+1).toPaddedString(2)+"-"+this.getUTCDate().toPaddedString(2)+"T"+this.getUTCHours().toPaddedString(2)+":"+this.getUTCMinutes().toPaddedString(2)+":"+this.getUTCSeconds().toPaddedString(2)+"Z"}function a(){return this.toISOString()}if(!c.toISOString){c.toISOString=b}if(!c.toJSON){c.toJSON=a}})(Date.prototype);RegExp.prototype.match=RegExp.prototype.test;RegExp.escape=function(a){return String(a).replace(/([.*+?^=!:()|[\]\/\\])/g,"\\$1")};var PeriodicalExecuter=Class.create({initialize:function(b,a){this.callback=b;this.frequency=a;this.currentlyExecuting=false;this.registerCallback()},registerCallback:function(){this.timer=setInterval(this.onTimerEvent.bind(this),this.frequency*1000)},execute:function(){this.callback(this)},stop:function(){if(!this.timer){return}clearInterval(this.timer);this.timer=null},onTimerEvent:function(){if(!this.currentlyExecuting){try{this.currentlyExecuting=true;this.execute();this.currentlyExecuting=false}catch(a){this.currentlyExecuting=false;throw a}}}});Object.extend(String,{interpret:function(a){return a==null?"":String(a)},specialChar:{"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r","\\":"\\\\"}});Object.extend(String.prototype,(function(){var NATIVE_JSON_PARSE_SUPPORT=window.JSON&&typeof JSON.parse==="function"&&JSON.parse('{"test": true}').test;function prepareReplacement(replacement){if(Object.isFunction(replacement)){return replacement}var template=new Template(replacement);return function(match){return template.evaluate(match)}}function isNonEmptyRegExp(regexp){return regexp.source&&regexp.source!=="(?:)"}function gsub(pattern,replacement){var result="",source=this,match;replacement=prepareReplacement(replacement);if(Object.isString(pattern)){pattern=RegExp.escape(pattern)}if(!(pattern.length||isNonEmptyRegExp(pattern))){replacement=replacement("");return replacement+source.split("").join(replacement)+replacement}while(source.length>0){match=source.match(pattern);if(match&&match[0].length>0){result+=source.slice(0,match.index);result+=String.interpret(replacement(match));source=source.slice(match.index+match[0].length)}else{result+=source,source=""}}return result}function sub(pattern,replacement,count){replacement=prepareReplacement(replacement);count=Object.isUndefined(count)?1:count;return this.gsub(pattern,function(match){if(--count<0){return match[0]}return replacement(match)})}function scan(pattern,iterator){this.gsub(pattern,iterator);return String(this)}function truncate(length,truncation){length=length||30;truncation=Object.isUndefined(truncation)?"...":truncation;return this.length>length?this.slice(0,length-truncation.length)+truncation:String(this)}function strip(){return this.replace(/^\s+/,"").replace(/\s+$/,"")}function stripTags(){return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?(\/)?>|<\/\w+>/gi,"")}function stripScripts(){return this.replace(new RegExp(Prototype.ScriptFragment,"img"),"")}function extractScripts(){var matchAll=new RegExp(Prototype.ScriptFragment,"img"),matchOne=new RegExp(Prototype.ScriptFragment,"im");return(this.match(matchAll)||[]).map(function(scriptTag){return(scriptTag.match(matchOne)||["",""])[1]})}function evalScripts(){return this.extractScripts().map(function(script){return eval(script)})}function escapeHTML(){return this.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function unescapeHTML(){return this.stripTags().replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">")}function toQueryParams(separator){var match=this.strip().match(/([^?#]*)(#.*)?$/);if(!match){return{}}return match[1].split(separator||"&").inject({},function(hash,pair){if((pair=pair.split("="))[0]){var key=decodeURIComponent(pair.shift()),value=pair.length>1?pair.join("="):pair[0];if(value!=undefined){value=value.gsub("+"," ");value=decodeURIComponent(value)}if(key in hash){if(!Object.isArray(hash[key])){hash[key]=[hash[key]]}hash[key].push(value)}else{hash[key]=value}}return hash})}function toArray(){return this.split("")}function succ(){return this.slice(0,this.length-1)+String.fromCharCode(this.charCodeAt(this.length-1)+1)}function times(count){return count<1?"":new Array(count+1).join(this)}function camelize(){return this.replace(/-+(.)?/g,function(match,chr){return chr?chr.toUpperCase():""})}function capitalize(){return this.charAt(0).toUpperCase()+this.substring(1).toLowerCase()}function underscore(){return this.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/-/g,"_").toLowerCase()}function dasherize(){return this.replace(/_/g,"-")}function inspect(useDoubleQuotes){var escapedString=this.replace(/[\x00-\x1f\\]/g,function(character){if(character in String.specialChar){return String.specialChar[character]}return"\\u00"+character.charCodeAt().toPaddedString(2,16)});if(useDoubleQuotes){return'"'+escapedString.replace(/"/g,'\\"')+'"'}return"'"+escapedString.replace(/'/g,"\\'")+"'"}function unfilterJSON(filter){return this.replace(filter||Prototype.JSONFilter,"$1")}function isJSON(){var str=this;if(str.blank()){return false}str=str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@");str=str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]");str=str.replace(/(?:^|:|,)(?:\s*\[)+/g,"");return(/^[\],:{}\s]*$/).test(str)}function evalJSON(sanitize){var json=this.unfilterJSON(),cx=/[\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff\u0000]/g;if(cx.test(json)){json=json.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})}try{if(!sanitize||json.isJSON()){return eval("("+json+")")}}catch(e){}throw new SyntaxError("Badly formed JSON string: "+this.inspect())}function parseJSON(){var json=this.unfilterJSON();return JSON.parse(json)}function include(pattern){return this.indexOf(pattern)>-1}function startsWith(pattern,position){position=Object.isNumber(position)?position:0;return this.lastIndexOf(pattern,position)===position}function endsWith(pattern,position){pattern=String(pattern);position=Object.isNumber(position)?position:this.length;if(position<0){position=0}if(position>this.length){position=this.length}var d=position-pattern.length;return d>=0&&this.indexOf(pattern,d)===d}function empty(){return this==""}function blank(){return/^\s*$/.test(this)}function interpolate(object,pattern){return new Template(this,pattern).evaluate(object)}return{gsub:gsub,sub:sub,scan:scan,truncate:truncate,strip:String.prototype.trim||strip,stripTags:stripTags,stripScripts:stripScripts,extractScripts:extractScripts,evalScripts:evalScripts,escapeHTML:escapeHTML,unescapeHTML:unescapeHTML,toQueryParams:toQueryParams,parseQuery:toQueryParams,toArray:toArray,succ:succ,times:times,camelize:camelize,capitalize:capitalize,underscore:underscore,dasherize:dasherize,inspect:inspect,unfilterJSON:unfilterJSON,isJSON:isJSON,evalJSON:NATIVE_JSON_PARSE_SUPPORT?parseJSON:evalJSON,include:include,startsWith:String.prototype.startsWith||startsWith,endsWith:String.prototype.endsWith||endsWith,empty:empty,blank:blank,interpolate:interpolate}})());var Template=Class.create({initialize:function(a,b){this.template=a.toString();this.pattern=b||Template.Pattern},evaluate:function(a){if(a&&Object.isFunction(a.toTemplateReplacements)){a=a.toTemplateReplacements()}return this.template.gsub(this.pattern,function(d){if(a==null){return(d[1]+"")}var f=d[1]||"";if(f=="\\"){return d[2]}var b=a,g=d[3],e=/^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;d=e.exec(g);if(d==null){return f}while(d!=null){var c=d[1].startsWith("[")?d[2].replace(/\\\\]/g,"]"):d[1];b=b[c];if(null==b||""==d[3]){break}g=g.substring("["==d[3]?d[1].length:d[0].length);d=e.exec(g)}return f+String.interpret(b)})}});Template.Pattern=/(^|.|\r|\n)(#\{(.*?)\})/;var $break={};var Enumerable=(function(){function c(x,w){try{this._each(x,w)}catch(y){if(y!=$break){throw y}}return this}function r(z,y,x){var w=-z,A=[],B=this.toArray();if(z<1){return B}while((w+=z)<B.length){A.push(B.slice(w,w+z))}return A.collect(y,x)}function b(y,x){y=y||Prototype.K;var w=true;this.each(function(A,z){w=w&&!!y.call(x,A,z,this);if(!w){throw $break}},this);return w}function i(y,x){y=y||Prototype.K;var w=false;this.each(function(A,z){if(w=!!y.call(x,A,z,this)){throw $break}},this);return w}function j(y,x){y=y||Prototype.K;var w=[];this.each(function(A,z){w.push(y.call(x,A,z,this))},this);return w}function t(y,x){var w;this.each(function(A,z){if(y.call(x,A,z,this)){w=A;throw $break}},this);return w}function h(y,x){var w=[];this.each(function(A,z){if(y.call(x,A,z,this)){w.push(A)}},this);return w}function g(z,y,x){y=y||Prototype.K;var w=[];if(Object.isString(z)){z=new RegExp(RegExp.escape(z))}this.each(function(B,A){if(z.match(B)){w.push(y.call(x,B,A,this))}},this);return w}function a(w){if(Object.isFunction(this.indexOf)&&this.indexOf(w)!=-1){return true}var x=false;this.each(function(y){if(y==w){x=true;throw $break}});return x}function q(x,w){w=Object.isUndefined(w)?null:w;return this.eachSlice(x,function(y){while(y.length<x){y.push(w)}return y})}function l(w,y,x){this.each(function(A,z){w=y.call(x,w,A,z,this)},this);return w}function v(x){var w=$A(arguments).slice(1);return this.map(function(y){return y[x].apply(y,w)})}function p(y,x){y=y||Prototype.K;var w;this.each(function(A,z){A=y.call(x,A,z,this);if(w==null||A>=w){w=A}},this);return w}function n(y,x){y=y||Prototype.K;var w;this.each(function(A,z){A=y.call(x,A,z,this);if(w==null||A<w){w=A}},this);return w}function e(z,x){z=z||Prototype.K;var y=[],w=[];this.each(function(B,A){(z.call(x,B,A,this)?y:w).push(B)},this);return[y,w]}function f(x){var w=[];this.each(function(y){w.push(y[x])});return w}function d(y,x){var w=[];this.each(function(A,z){if(!y.call(x,A,z,this)){w.push(A)}},this);return w}function m(x,w){return this.map(function(z,y){return{value:z,criteria:x.call(w,z,y,this)}},this).sort(function(B,A){var z=B.criteria,y=A.criteria;return z<y?-1:z>y?1:0}).pluck("value")}function o(){return this.map()}function s(){var x=Prototype.K,w=$A(arguments);if(Object.isFunction(w.last())){x=w.pop()}var y=[this].concat(w).map($A);return this.map(function(A,z){return x(y.pluck(z))})}function k(){return this.toArray().length}function u(){return"#<Enumerable:"+this.toArray().inspect()+">"}return{each:c,eachSlice:r,all:b,every:b,any:i,some:i,collect:j,map:j,detect:t,findAll:h,select:h,filter:h,grep:g,include:a,member:a,inGroupsOf:q,inject:l,invoke:v,max:p,min:n,partition:e,pluck:f,reject:d,sortBy:m,toArray:o,entries:o,zip:s,size:k,inspect:u,find:t}})();function $A(c){if(!c){return[]}if("toArray" in Object(c)){return c.toArray()}var b=c.length||0,a=new Array(b);while(b--){a[b]=c[b]}return a}function $w(a){if(!Object.isString(a)){return[]}a=a.strip();return a?a.split(/\s+/):[]}Array.from=$A;(function(){var v=Array.prototype,o=v.slice,q=v.forEach;function b(B,A){for(var z=0,C=this.length>>>0;z<C;z++){if(z in this){B.call(A,this[z],z,this)}}}if(!q){q=b}function n(){this.length=0;return this}function d(){return this[0]}function g(){return this[this.length-1]}function k(){return this.select(function(z){return z!=null})}function y(){return this.inject([],function(A,z){if(Object.isArray(z)){return A.concat(z.flatten())}A.push(z);return A})}function j(){var z=o.call(arguments,0);return this.select(function(A){return !z.include(A)})}function f(z){return(z===false?this.toArray():this)._reverse()}function m(z){return this.inject([],function(C,B,A){if(0==A||(z?C.last()!=B:!C.include(B))){C.push(B)}return C})}function r(z){return this.uniq().findAll(function(A){return z.indexOf(A)!==-1})}function t(){return o.call(this,0)}function l(){return this.length}function w(){return"["+this.map(Object.inspect).join(", ")+"]"}function a(C,A){if(this==null){throw new TypeError()}var D=Object(this),B=D.length>>>0;if(B===0){return -1}A=Number(A);if(isNaN(A)){A=0}else{if(A!==0&&isFinite(A)){A=(A>0?1:-1)*Math.floor(Math.abs(A))}}if(A>B){return -1}var z=A>=0?A:Math.max(B-Math.abs(A),0);for(;z<B;z++){if(z in D&&D[z]===C){return z}}return -1}function p(C,A){if(this==null){throw new TypeError()}var D=Object(this),B=D.length>>>0;if(B===0){return -1}if(!Object.isUndefined(A)){A=Number(A);if(isNaN(A)){A=0}else{if(A!==0&&isFinite(A)){A=(A>0?1:-1)*Math.floor(Math.abs(A))}}}else{A=B}var z=A>=0?Math.min(A,B-1):B-Math.abs(A);for(;z>=0;z--){if(z in D&&D[z]===C){return z}}return -1}function c(G){var E=[],F=o.call(arguments,0),H,A=0;F.unshift(this);for(var D=0,z=F.length;D<z;D++){H=F[D];if(Object.isArray(H)&&!("callee" in H)){for(var C=0,B=H.length;C<B;C++){if(C in H){E[A]=H[C]}A++}}else{E[A++]=H}}E.length=A;return E}function s(z){return function(){if(arguments.length===0){return z.call(this,Prototype.K)}else{if(arguments[0]===undefined){var A=o.call(arguments,1);A.unshift(Prototype.K);return z.apply(this,A)}else{return z.apply(this,arguments)}}}}function u(D){if(this==null){throw new TypeError()}D=D||Prototype.K;var z=Object(this);var C=[],B=arguments[1],F=0;for(var A=0,E=z.length>>>0;A<E;A++){if(A in z){C[F]=D.call(B,z[A],A,z)}F++}C.length=F;return C}if(v.map){u=s(Array.prototype.map)}function h(D){if(this==null||!Object.isFunction(D)){throw new TypeError()}var z=Object(this);var C=[],B=arguments[1],F;for(var A=0,E=z.length>>>0;A<E;A++){if(A in z){F=z[A];if(D.call(B,F,A,z)){C.push(F)}}}return C}if(v.filter){h=Array.prototype.filter}function i(C){if(this==null){throw new TypeError()}C=C||Prototype.K;var B=arguments[1];var z=Object(this);for(var A=0,D=z.length>>>0;A<D;A++){if(A in z&&C.call(B,z[A],A,z)){return true}}return false}if(v.some){i=s(Array.prototype.some)}function x(C){if(this==null){throw new TypeError()}C=C||Prototype.K;var B=arguments[1];var z=Object(this);for(var A=0,D=z.length>>>0;A<D;A++){if(A in z&&!C.call(B,z[A],A,z)){return false}}return true}if(v.every){x=s(Array.prototype.every)}Object.extend(v,Enumerable);if(v.entries===Enumerable.entries){delete v.entries}if(!v._reverse){v._reverse=v.reverse}Object.extend(v,{_each:q,map:u,collect:u,select:h,filter:h,findAll:h,some:i,any:i,every:x,all:x,clear:n,first:d,last:g,compact:k,flatten:y,without:j,reverse:f,uniq:m,intersect:r,clone:t,toArray:t,size:l,inspect:w});var e=(function(){return[].concat(arguments)[0][0]!==1})(1,2);if(e){v.concat=c}if(!v.indexOf){v.indexOf=a}if(!v.lastIndexOf){v.lastIndexOf=p}})();function $H(a){return new Hash(a)}var Hash=Class.create(Enumerable,(function(){function e(p){this._object=Object.isHash(p)?p.toObject():Object.clone(p)}function f(s,r){var q=0;for(var p in this._object){var t=this._object[p],u=[p,t];u.key=p;u.value=t;s.call(r,u,q);q++}}function j(p,q){return this._object[p]=q}function c(p){if(this._object[p]!==Object.prototype[p]){return this._object[p]}}function m(p){var q=this._object[p];delete this._object[p];return q}function o(){return Object.clone(this._object)}function n(){return this.pluck("key")}function l(){return this.pluck("value")}function g(q){var p=this.detect(function(r){return r.value===q});return p&&p.key}function i(p){return this.clone().update(p)}function d(p){return new Hash(p).inject(this,function(q,r){q.set(r.key,r.value);return q})}function b(p,q){if(Object.isUndefined(q)){return p}q=String.interpret(q);q=q.gsub(/(\r)?\n/,"\r\n");q=encodeURIComponent(q);q=q.gsub(/%20/,"+");return p+"="+q}function a(){return this.inject([],function(t,w){var s=encodeURIComponent(w.key),q=w.value;if(q&&typeof q=="object"){if(Object.isArray(q)){var v=[];for(var r=0,p=q.length,u;r<p;r++){u=q[r];v.push(b(s,u))}return t.concat(v)}}else{t.push(b(s,q))}return t}).join("&")}function k(){return"#<Hash:{"+this.map(function(p){return p.map(Object.inspect).join(": ")}).join(", ")+"}>"}function h(){return new Hash(this)}return{initialize:e,_each:f,set:j,get:c,unset:m,toObject:o,toTemplateReplacements:o,keys:n,values:l,index:g,merge:i,update:d,toQueryString:a,inspect:k,toJSON:o,clone:h}})());Hash.from=$H;Object.extend(Number.prototype,(function(){function d(){return this.toPaddedString(2,16)}function b(){return this+1}function h(j,i){$R(0,this,true).each(j,i);return this}function g(k,j){var i=this.toString(j||10);return"0".times(k-i.length)+i}function a(){return Math.abs(this)}function c(){return Math.round(this)}function e(){return Math.ceil(this)}function f(){return Math.floor(this)}return{toColorPart:d,succ:b,times:h,toPaddedString:g,abs:a,round:c,ceil:e,floor:f}})());function $R(c,a,b){return new ObjectRange(c,a,b)}var ObjectRange=Class.create(Enumerable,(function(){function b(f,d,e){this.start=f;this.end=d;this.exclusive=e}function c(f,e){var g=this.start,d;for(d=0;this.include(g);d++){f.call(e,g,d);g=g.succ()}}function a(d){if(d<this.start){return false}if(this.exclusive){return d<this.end}return d<=this.end}return{initialize:b,_each:c,include:a}})());var Abstract={};var Try={these:function(){var c;for(var b=0,d=arguments.length;b<d;b++){var a=arguments[b];try{c=a();break}catch(f){}}return c}};var Ajax={getTransport:function(){return Try.these(function(){return new XMLHttpRequest()},function(){return new ActiveXObject("Msxml2.XMLHTTP")},function(){return new ActiveXObject("Microsoft.XMLHTTP")})||false},activeRequestCount:0};Ajax.Responders={responders:[],_each:function(b,a){this.responders._each(b,a)},register:function(a){if(!this.include(a)){this.responders.push(a)}},unregister:function(a){this.responders=this.responders.without(a)},dispatch:function(d,b,c,a){this.each(function(f){if(Object.isFunction(f[d])){try{f[d].apply(f,[b,c,a])}catch(g){}}})}};Object.extend(Ajax.Responders,Enumerable);Ajax.Responders.register({onCreate:function(){Ajax.activeRequestCount++},onComplete:function(){Ajax.activeRequestCount--}});Ajax.Base=Class.create({initialize:function(a){this.options={method:"post",asynchronous:true,contentType:"application/x-www-form-urlencoded",encoding:"UTF-8",parameters:"",evalJSON:true,evalJS:true};Object.extend(this.options,a||{});this.options.method=this.options.method.toLowerCase();if(Object.isHash(this.options.parameters)){this.options.parameters=this.options.parameters.toObject()}}});Ajax.Request=Class.create(Ajax.Base,{_complete:false,initialize:function($super,b,a){$super(a);this.transport=Ajax.getTransport();this.request(b)},request:function(b){this.url=b;this.method=this.options.method;var d=Object.isString(this.options.parameters)?this.options.parameters:Object.toQueryString(this.options.parameters);if(!["get","post"].include(this.method)){d+=(d?"&":"")+"_method="+this.method;this.method="post"}if(d&&this.method==="get"){this.url+=(this.url.include("?")?"&":"?")+d}this.parameters=d.toQueryParams();try{var a=new Ajax.Response(this);if(this.options.onCreate){this.options.onCreate(a)}Ajax.Responders.dispatch("onCreate",this,a);this.transport.open(this.method.toUpperCase(),this.url,this.options.asynchronous);if(this.options.asynchronous){this.respondToReadyState.bind(this).defer(1)}this.transport.onreadystatechange=this.onStateChange.bind(this);this.setRequestHeaders();this.body=this.method=="post"?(this.options.postBody||d):null;this.transport.send(this.body);if(!this.options.asynchronous&&this.transport.overrideMimeType){this.onStateChange()}}catch(c){this.dispatchException(c)}},onStateChange:function(){var a=this.transport.readyState;if(a>1&&!((a==4)&&this._complete)){this.respondToReadyState(this.transport.readyState)}},setRequestHeaders:function(){var e={"X-Requested-With":"XMLHttpRequest","X-Prototype-Version":Prototype.Version,Accept:"text/javascript, text/html, application/xml, text/xml, */*"};if(this.method=="post"){e["Content-type"]=this.options.contentType+(this.options.encoding?"; charset="+this.options.encoding:"");if(this.transport.overrideMimeType&&(navigator.userAgent.match(/Gecko\/(\d{4})/)||[0,2005])[1]<2005){e.Connection="close"}}if(typeof this.options.requestHeaders=="object"){var c=this.options.requestHeaders;if(Object.isFunction(c.push)){for(var b=0,d=c.length;b<d;b+=2){e[c[b]]=c[b+1]}}else{$H(c).each(function(f){e[f.key]=f.value})}}for(var a in e){if(e[a]!=null){this.transport.setRequestHeader(a,e[a])}}},success:function(){var a=this.getStatus();return !a||(a>=200&&a<300)||a==304},getStatus:function(){try{if(this.transport.status===1223){return 204}return this.transport.status||0}catch(a){return 0}},respondToReadyState:function(a){var c=Ajax.Request.Events[a],b=new Ajax.Response(this);if(c=="Complete"){try{this._complete=true;(this.options["on"+b.status]||this.options["on"+(this.success()?"Success":"Failure")]||Prototype.emptyFunction)(b,b.headerJSON)}catch(d){this.dispatchException(d)}var f=b.getHeader("Content-type");if(this.options.evalJS=="force"||(this.options.evalJS&&this.isSameOrigin()&&f&&f.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i))){this.evalResponse()}}try{(this.options["on"+c]||Prototype.emptyFunction)(b,b.headerJSON);Ajax.Responders.dispatch("on"+c,this,b,b.headerJSON)}catch(d){this.dispatchException(d)}if(c=="Complete"){this.transport.onreadystatechange=Prototype.emptyFunction}},isSameOrigin:function(){var a=this.url.match(/^\s*https?:\/\/[^\/]*/);return !a||(a[0]=="#{protocol}//#{domain}#{port}".interpolate({protocol:location.protocol,domain:document.domain,port:location.port?":"+location.port:""}))},getHeader:function(a){try{return this.transport.getResponseHeader(a)||null}catch(b){return null}},evalResponse:function(){try{return eval((this.transport.responseText||"").unfilterJSON())}catch(e){this.dispatchException(e)}},dispatchException:function(a){(this.options.onException||Prototype.emptyFunction)(this,a);Ajax.Responders.dispatch("onException",this,a)}});Ajax.Request.Events=["Uninitialized","Loading","Loaded","Interactive","Complete"];Ajax.Response=Class.create({initialize:function(c){this.request=c;var d=this.transport=c.transport,a=this.readyState=d.readyState;if((a>2&&!Prototype.Browser.IE)||a==4){this.status=this.getStatus();this.statusText=this.getStatusText();this.responseText=String.interpret(d.responseText);this.headerJSON=this._getHeaderJSON()}if(a==4){var b=d.responseXML;this.responseXML=Object.isUndefined(b)?null:b;this.responseJSON=this._getResponseJSON()}},status:0,statusText:"",getStatus:Ajax.Request.prototype.getStatus,getStatusText:function(){try{return this.transport.statusText||""}catch(a){return""}},getHeader:Ajax.Request.prototype.getHeader,getAllHeaders:function(){try{return this.getAllResponseHeaders()}catch(a){return null}},getResponseHeader:function(a){return this.transport.getResponseHeader(a)},getAllResponseHeaders:function(){return this.transport.getAllResponseHeaders()},_getHeaderJSON:function(){var a=this.getHeader("X-JSON");if(!a){return null}try{a=decodeURIComponent(escape(a))}catch(b){}try{return a.evalJSON(this.request.options.sanitizeJSON||!this.request.isSameOrigin())}catch(b){this.request.dispatchException(b)}},_getResponseJSON:function(){var a=this.request.options;if(!a.evalJSON||(a.evalJSON!="force"&&!(this.getHeader("Content-type")||"").include("application/json"))||this.responseText.blank()){return null}try{return this.responseText.evalJSON(a.sanitizeJSON||!this.request.isSameOrigin())}catch(b){this.request.dispatchException(b)}}});Ajax.Updater=Class.create(Ajax.Request,{initialize:function($super,a,c,b){this.container={success:(a.success||a),failure:(a.failure||(a.success?null:a))};b=Object.clone(b);var d=b.onComplete;b.onComplete=(function(e,f){this.updateContent(e.responseText);if(Object.isFunction(d)){d(e,f)}}).bind(this);$super(c,b)},updateContent:function(d){var c=this.container[this.success()?"success":"failure"],a=this.options;if(!a.evalScripts){d=d.stripScripts()}if(c=$(c)){if(a.insertion){if(Object.isString(a.insertion)){var b={};b[a.insertion]=d;c.insert(b)}else{a.insertion(c,d)}}else{c.update(d)}}}});Ajax.PeriodicalUpdater=Class.create(Ajax.Base,{initialize:function($super,a,c,b){$super(b);this.onComplete=this.options.onComplete;this.frequency=(this.options.frequency||2);this.decay=(this.options.decay||1);this.updater={};this.container=a;this.url=c;this.start()},start:function(){this.options.onComplete=this.updateComplete.bind(this);this.onTimerEvent()},stop:function(){this.updater.options.onComplete=undefined;clearTimeout(this.timer);(this.onComplete||Prototype.emptyFunction).apply(this,arguments)},updateComplete:function(a){if(this.options.decay){this.decay=(a.responseText==this.lastText?this.decay*this.options.decay:1);this.lastText=a.responseText}this.timer=this.onTimerEvent.bind(this).delay(this.decay*this.frequency)},onTimerEvent:function(){this.updater=new Ajax.Updater(this.container,this.url,this.options)}});(function(a8){var aE;var a1=Array.prototype.slice;var av=document.createElement("div");function aZ(bp){if(arguments.length>1){for(var F=0,br=[],bq=arguments.length;F<bq;F++){br.push(aZ(arguments[F]))}return br}if(Object.isString(bp)){bp=document.getElementById(bp)}return aF.extend(bp)}a8.$=aZ;if(!a8.Node){a8.Node={}}if(!a8.Node.ELEMENT_NODE){Object.extend(a8.Node,{ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12})}var r={};function aQ(F,i){if(F==="select"){return false}if("type" in i){return false}return true}var d=(function(){try{var i=document.createElement('<input name="x">');return i.tagName.toLowerCase()==="input"&&i.name==="x"}catch(F){return false}})();var aI=a8.Element;function aF(F,i){i=i||{};F=F.toLowerCase();if(d&&i.name){F="<"+F+' name="'+i.name+'">';delete i.name;return aF.writeAttribute(document.createElement(F),i)}if(!r[F]){r[F]=aF.extend(document.createElement(F))}var bp=aQ(F,i)?r[F].cloneNode(false):document.createElement(F);return aF.writeAttribute(bp,i)}a8.Element=aF;Object.extend(a8.Element,aI||{});if(aI){a8.Element.prototype=aI.prototype}aF.Methods={ByTag:{},Simulated:{}};var a3={};var H={id:"id",className:"class"};function ba(F){F=aZ(F);var i="<"+F.tagName.toLowerCase();var bp,br;for(var bq in H){bp=H[bq];br=(F[bq]||"").toString();if(br){i+=" "+bp+"="+br.inspect(true)}}return i+">"}a3.inspect=ba;function v(i){return aZ(i).getStyle("display")!=="none"}function ax(F,i){F=aZ(F);if(typeof i!=="boolean"){i=!aF.visible(F)}aF[i?"show":"hide"](F);return F}function aH(i){i=aZ(i);i.style.display="none";return i}function j(i){i=aZ(i);i.style.display="";return i}Object.extend(a3,{visible:v,toggle:ax,hide:aH,show:j});function ad(i){i=aZ(i);i.parentNode.removeChild(i);return i}var aT=(function(){var i=document.createElement("select"),F=true;i.innerHTML='<option value="test">test</option>';if(i.options&&i.options[0]){F=i.options[0].nodeName.toUpperCase()!=="OPTION"}i=null;return F})();var I=(function(){try{var i=document.createElement("table");if(i&&i.tBodies){i.innerHTML="<tbody><tr><td>test</td></tr></tbody>";var bp=typeof i.tBodies[0]=="undefined";i=null;return bp}}catch(F){return true}})();var a2=(function(){try{var i=document.createElement("div");i.innerHTML="<link />";var bp=(i.childNodes.length===0);i=null;return bp}catch(F){return true}})();var x=aT||I||a2;var aq=(function(){var i=document.createElement("script"),bp=false;try{i.appendChild(document.createTextNode(""));bp=!i.firstChild||i.firstChild&&i.firstChild.nodeType!==3}catch(F){bp=true}i=null;return bp})();function O(br,bt){br=aZ(br);var bu=br.getElementsByTagName("*"),bq=bu.length;while(bq--){Z(bu[bq])}if(bt&&bt.toElement){bt=bt.toElement()}if(Object.isElement(bt)){return br.update().insert(bt)}bt=Object.toHTML(bt);var bp=br.tagName.toUpperCase();if(bp==="SCRIPT"&&aq){br.text=bt;return br}if(x){if(bp in L.tags){while(br.firstChild){br.removeChild(br.firstChild)}var F=t(bp,bt.stripScripts());for(var bq=0,bs;bs=F[bq];bq++){br.appendChild(bs)}}else{if(a2&&Object.isString(bt)&&bt.indexOf("<link")>-1){while(br.firstChild){br.removeChild(br.firstChild)}var F=t(bp,bt.stripScripts(),true);for(var bq=0,bs;bs=F[bq];bq++){br.appendChild(bs)}}else{br.innerHTML=bt.stripScripts()}}}else{br.innerHTML=bt.stripScripts()}bt.evalScripts.bind(bt).defer();return br}function ah(F,bp){F=aZ(F);if(bp&&bp.toElement){bp=bp.toElement()}else{if(!Object.isElement(bp)){bp=Object.toHTML(bp);var i=F.ownerDocument.createRange();i.selectNode(F);bp.evalScripts.bind(bp).defer();bp=i.createContextualFragment(bp.stripScripts())}}F.parentNode.replaceChild(bp,F);return F}var L={before:function(i,F){i.parentNode.insertBefore(F,i)},top:function(i,F){i.insertBefore(F,i.firstChild)},bottom:function(i,F){i.appendChild(F)},after:function(i,F){i.parentNode.insertBefore(F,i.nextSibling)},tags:{TABLE:["<table>","</table>",1],TBODY:["<table><tbody>","</tbody></table>",2],TR:["<table><tbody><tr>","</tr></tbody></table>",3],TD:["<table><tbody><tr><td>","</td></tr></tbody></table>",4],SELECT:["<select>","</select>",1]}};var aJ=L.tags;Object.extend(aJ,{THEAD:aJ.TBODY,TFOOT:aJ.TBODY,TH:aJ.TD});function ao(bp,bs){bp=aZ(bp);if(bs&&bs.toElement){bs=bs.toElement()}if(Object.isElement(bs)){bp.parentNode.replaceChild(bs,bp);return bp}bs=Object.toHTML(bs);var br=bp.parentNode,F=br.tagName.toUpperCase();if(F in L.tags){var bt=aF.next(bp);var i=t(F,bs.stripScripts());br.removeChild(bp);var bq;if(bt){bq=function(bu){br.insertBefore(bu,bt)}}else{bq=function(bu){br.appendChild(bu)}}i.each(bq)}else{bp.outerHTML=bs.stripScripts()}bs.evalScripts.bind(bs).defer();return bp}if("outerHTML" in document.documentElement){ah=ao}function a7(i){if(Object.isUndefined(i)||i===null){return false}if(Object.isString(i)||Object.isNumber(i)){return true}if(Object.isElement(i)){return true}if(i.toElement||i.toHTML){return true}return false}function bn(br,bt,F){F=F.toLowerCase();var bv=L[F];if(bt&&bt.toElement){bt=bt.toElement()}if(Object.isElement(bt)){bv(br,bt);return br}bt=Object.toHTML(bt);var bq=((F==="before"||F==="after")?br.parentNode:br).tagName.toUpperCase();var bu=t(bq,bt.stripScripts());if(F==="top"||F==="after"){bu.reverse()}for(var bp=0,bs;bs=bu[bp];bp++){bv(br,bs)}bt.evalScripts.bind(bt).defer()}function Q(F,bp){F=aZ(F);if(a7(bp)){bp={bottom:bp}}for(var i in bp){bn(F,bp[i],i)}return F}function u(F,bp,i){F=aZ(F);if(Object.isElement(bp)){aZ(bp).writeAttribute(i||{})}else{if(Object.isString(bp)){bp=new aF(bp,i)}else{bp=new aF("div",bp)}}if(F.parentNode){F.parentNode.replaceChild(bp,F)}bp.appendChild(F);return bp}function w(F){F=aZ(F);var bp=F.firstChild;while(bp){var i=bp.nextSibling;if(bp.nodeType===Node.TEXT_NODE&&!/\S/.test(bp.nodeValue)){F.removeChild(bp)}bp=i}return F}function a4(i){return aZ(i).innerHTML.blank()}function t(bs,br,bt){var bq=L.tags[bs],bu=av;var F=!!bq;if(!F&&bt){F=true;bq=["","",0]}if(F){bu.innerHTML="&#160;"+bq[0]+br+bq[1];bu.removeChild(bu.firstChild);for(var bp=bq[2];bp--;){bu=bu.firstChild}}else{bu.innerHTML=br}return $A(bu.childNodes)}function E(bq,F){if(!(bq=aZ(bq))){return}var bs=bq.cloneNode(F);if(!aY){bs._prototypeUID=aE;if(F){var br=aF.select(bs,"*"),bp=br.length;while(bp--){br[bp]._prototypeUID=aE}}}return aF.extend(bs)}function Z(F){var i=M(F);if(i){aF.stopObserving(F);if(!aY){F._prototypeUID=aE}delete aF.Storage[i]}}function bl(bp){var F=bp.length;while(F--){Z(bp[F])}}function at(br){var bq=br.length,bp,F;while(bq--){bp=br[bq];F=M(bp);delete aF.Storage[F];delete Event.cache[F]}}if(aY){bl=at}function m(bp){if(!(bp=aZ(bp))){return}Z(bp);var bq=bp.getElementsByTagName("*"),F=bq.length;while(F--){Z(bq[F])}return null}Object.extend(a3,{remove:ad,update:O,replace:ah,insert:Q,wrap:u,cleanWhitespace:w,empty:a4,clone:E,purge:m});function am(i,bp,bq){i=aZ(i);bq=bq||-1;var F=[];while(i=i[bp]){if(i.nodeType===Node.ELEMENT_NODE){F.push(aF.extend(i))}if(F.length===bq){break}}return F}function aL(i){return am(i,"parentNode")}function bm(i){return aF.select(i,"*")}function X(i){i=aZ(i).firstChild;while(i&&i.nodeType!==Node.ELEMENT_NODE){i=i.nextSibling}return aZ(i)}function bi(F){var i=[],bp=aZ(F).firstChild;while(bp){if(bp.nodeType===Node.ELEMENT_NODE){i.push(aF.extend(bp))}bp=bp.nextSibling}return i}function p(i){return am(i,"previousSibling")}function bh(i){return am(i,"nextSibling")}function aV(i){i=aZ(i);var bp=p(i),F=bh(i);return bp.reverse().concat(F)}function aR(F,i){F=aZ(F);if(Object.isString(i)){return Prototype.Selector.match(F,i)}return i.match(F)}function aW(F,bp,bq,i){F=aZ(F),bq=bq||0,i=i||0;if(Object.isNumber(bq)){i=bq,bq=null}while(F=F[bp]){if(F.nodeType!==1){continue}if(bq&&!Prototype.Selector.match(F,bq)){continue}if(--i>=0){continue}return aF.extend(F)}}function aa(F,bp,i){F=aZ(F);if(arguments.length===1){return aZ(F.parentNode)}return aW(F,"parentNode",bp,i)}function y(F,bq,i){if(arguments.length===1){return X(F)}F=aZ(F),bq=bq||0,i=i||0;if(Object.isNumber(bq)){i=bq,bq="*"}var bp=Prototype.Selector.select(bq,F)[i];return aF.extend(bp)}function h(F,bp,i){return aW(F,"previousSibling",bp,i)}function aB(F,bp,i){return aW(F,"nextSibling",bp,i)}function bb(i){i=aZ(i);var F=a1.call(arguments,1).join(", ");return Prototype.Selector.select(F,i)}function aD(bq){bq=aZ(bq);var bs=a1.call(arguments,1).join(", ");var bt=aF.siblings(bq),bp=[];for(var F=0,br;br=bt[F];F++){if(Prototype.Selector.match(br,bs)){bp.push(br)}}return bp}function D(F,i){F=aZ(F),i=aZ(i);if(!F||!i){return false}while(F=F.parentNode){if(F===i){return true}}return false}function B(F,i){F=aZ(F),i=aZ(i);if(!F||!i){return false}if(!i.contains){return D(F,i)}return i.contains(F)&&i!==F}function J(F,i){F=aZ(F),i=aZ(i);if(!F||!i){return false}return(F.compareDocumentPosition(i)&8)===8}var aM;if(av.compareDocumentPosition){aM=J}else{if(av.contains){aM=B}else{aM=D}}Object.extend(a3,{recursivelyCollect:am,ancestors:aL,descendants:bm,firstDescendant:X,immediateDescendants:bi,previousSiblings:p,nextSiblings:bh,siblings:aV,match:aR,up:aa,down:y,previous:h,next:aB,select:bb,adjacent:aD,descendantOf:aM,getElementsBySelector:bb,childElements:bi});var T=1;function aU(i){i=aZ(i);var F=aF.readAttribute(i,"id");if(F){return F}do{F="anonymous_element_"+T++}while(aZ(F));aF.writeAttribute(i,"id",F);return F}function a9(F,i){return aZ(F).getAttribute(i)}function K(F,i){F=aZ(F);var bp=aG.read;if(bp.values[i]){return bp.values[i](F,i)}if(bp.names[i]){i=bp.names[i]}if(i.include(":")){if(!F.attributes||!F.attributes[i]){return null}return F.attributes[i].value}return F.getAttribute(i)}function e(F,i){if(i==="title"){return F.title}return F.getAttribute(i)}var U=(function(){av.setAttribute("onclick",[]);var i=av.getAttribute("onclick");var F=Object.isArray(i);av.removeAttribute("onclick");return F})();if(U){a9=K}else{if(Prototype.Browser.Opera){a9=e}}function a0(bq,bp,bs){bq=aZ(bq);var F={},br=aG.write;if(typeof bp==="object"){F=bp}else{F[bp]=Object.isUndefined(bs)?true:bs}for(var i in F){bp=br.names[i]||i;bs=F[i];if(br.values[i]){bs=br.values[i](bq,bs);if(Object.isUndefined(bs)){continue}}if(bs===false||bs===null){bq.removeAttribute(bp)}else{if(bs===true){bq.setAttribute(bp,bp)}else{bq.setAttribute(bp,bs)}}}return bq}var a=(function(){if(!d){return false}var F=document.createElement('<input type="checkbox">');F.checked=true;var i=F.getAttributeNode("checked");return !i||!i.specified})();function Y(i,bp){bp=aG.has[bp]||bp;var F=aZ(i).getAttributeNode(bp);return !!(F&&F.specified)}function bg(i,F){if(F==="checked"){return i.checked}return Y(i,F)}a8.Element.Methods.Simulated.hasAttribute=a?bg:Y;function k(i){return new aF.ClassNames(i)}var V={};function f(F){if(V[F]){return V[F]}var i=new RegExp("(^|\\s+)"+F+"(\\s+|$)");V[F]=i;return i}function al(i,F){if(!(i=aZ(i))){return}var bp=i.className;if(bp.length===0){return false}if(bp===F){return true}return f(F).test(bp)}function o(i,F){if(!(i=aZ(i))){return}if(!al(i,F)){i.className+=(i.className?" ":"")+F}return i}function au(i,F){if(!(i=aZ(i))){return}i.className=i.className.replace(f(F)," ").strip();return i}function ae(F,bp,i){if(!(F=aZ(F))){return}if(Object.isUndefined(i)){i=!al(F,bp)}var bq=aF[i?"addClassName":"removeClassName"];return bq(F,bp)}var aG={};var aP="className",ar="for";av.setAttribute(aP,"x");if(av.className!=="x"){av.setAttribute("class","x");if(av.className==="x"){aP="class"}}var aK=document.createElement("label");aK.setAttribute(ar,"x");if(aK.htmlFor!=="x"){aK.setAttribute("htmlFor","x");if(aK.htmlFor==="x"){ar="htmlFor"}}aK=null;function ac(i,F){return i.getAttribute(F)}function g(i,F){return i.getAttribute(F,2)}function A(i,bp){var F=i.getAttributeNode(bp);return F?F.value:""}function bj(i,F){return aZ(i).hasAttribute(F)?F:null}av.onclick=Prototype.emptyFunction;var P=av.getAttribute("onclick");var aw;if(String(P).indexOf("{")>-1){aw=function(i,F){var bp=i.getAttribute(F);if(!bp){return null}bp=bp.toString();bp=bp.split("{")[1];bp=bp.split("}")[0];return bp.strip()}}else{if(P===""){aw=function(i,F){var bp=i.getAttribute(F);if(!bp){return null}return bp.strip()}}}aG.read={names:{"class":aP,className:aP,"for":ar,htmlFor:ar},values:{style:function(i){return i.style.cssText.toLowerCase()},title:function(i){return i.title}}};aG.write={names:{className:"class",htmlFor:"for",cellpadding:"cellPadding",cellspacing:"cellSpacing"},values:{checked:function(i,F){F=!!F;i.checked=F;return F?"checked":null},style:function(i,F){i.style.cssText=F?F:""}}};aG.has={names:{}};Object.extend(aG.write.names,aG.read.names);var a6=$w("colSpan rowSpan vAlign dateTime accessKey tabIndex encType maxLength readOnly longDesc frameBorder");for(var af=0,ag;ag=a6[af];af++){aG.write.names[ag.toLowerCase()]=ag;aG.has.names[ag.toLowerCase()]=ag}Object.extend(aG.read.values,{href:g,src:g,type:ac,action:A,disabled:bj,checked:bj,readonly:bj,multiple:bj,onload:aw,onunload:aw,onclick:aw,ondblclick:aw,onmousedown:aw,onmouseup:aw,onmouseover:aw,onmousemove:aw,onmouseout:aw,onfocus:aw,onblur:aw,onkeypress:aw,onkeydown:aw,onkeyup:aw,onsubmit:aw,onreset:aw,onselect:aw,onchange:aw});Object.extend(a3,{identify:aU,readAttribute:a9,writeAttribute:a0,classNames:k,hasClassName:al,addClassName:o,removeClassName:au,toggleClassName:ae});function W(i){if(i==="float"||i==="styleFloat"){return"cssFloat"}return i.camelize()}function bo(i){if(i==="float"||i==="cssFloat"){return"styleFloat"}return i.camelize()}function C(bp,bq){bp=aZ(bp);var bt=bp.style,F;if(Object.isString(bq)){bt.cssText+=";"+bq;if(bq.include("opacity")){var i=bq.match(/opacity:\s*(\d?\.?\d*)/)[1];aF.setOpacity(bp,i)}return bp}for(var bs in bq){if(bs==="opacity"){aF.setOpacity(bp,bq[bs])}else{var br=bq[bs];if(bs==="float"||bs==="cssFloat"){bs=Object.isUndefined(bt.styleFloat)?"cssFloat":"styleFloat"}bt[bs]=br}}return bp}function aO(F,bp){F=aZ(F);bp=W(bp);var bq=F.style[bp];if(!bq||bq==="auto"){var i=document.defaultView.getComputedStyle(F,null);bq=i?i[bp]:null}if(bp==="opacity"){return bq?parseFloat(bq):1}return bq==="auto"?null:bq}function s(i,F){switch(F){case"height":case"width":if(!aF.visible(i)){return null}var bp=parseInt(aO(i,F),10);if(bp!==i["offset"+F.capitalize()]){return bp+"px"}return aF.measure(i,F);default:return aO(i,F)}}function aj(i,F){i=aZ(i);F=bo(F);var bp=i.style[F];if(!bp&&i.currentStyle){bp=i.currentStyle[F]}if(F==="opacity"){if(!N){return be(i)}else{return bp?parseFloat(bp):1}}if(bp==="auto"){if((F==="width"||F==="height")&&aF.visible(i)){return aF.measure(i,F)+"px"}return null}return bp}function aA(i){return(i||"").replace(/alpha\([^\)]*\)/gi,"")}function ab(i){if(!i.currentStyle||!i.currentStyle.hasLayout){i.style.zoom=1}return i}var N=(function(){av.style.cssText="opacity:.55";return/^0.55/.test(av.style.opacity)})();function z(i,F){i=aZ(i);if(F==1||F===""){F=""}else{if(F<0.00001){F=0}}i.style.opacity=F;return i}function bf(i,bq){if(N){return z(i,bq)}i=ab(aZ(i));var bp=aF.getStyle(i,"filter"),F=i.style;if(bq==1||bq===""){bp=aA(bp);if(bp){F.filter=bp}else{F.removeAttribute("filter")}return i}if(bq<0.00001){bq=0}F.filter=aA(bp)+" alpha(opacity="+(bq*100)+")";return i}function bd(i){return aF.getStyle(i,"opacity")}function be(F){if(N){return bd(F)}var bp=aF.getStyle(F,"filter");if(bp.length===0){return 1}var i=(bp||"").match(/alpha\(opacity=(.*)\)/i);if(i&&i[1]){return parseFloat(i[1])/100}return 1}Object.extend(a3,{setStyle:C,getStyle:aO,setOpacity:z,getOpacity:bd});if("styleFloat" in av.style){a3.getStyle=aj;a3.setOpacity=bf;a3.getOpacity=be}var l=0;a8.Element.Storage={UID:1};function M(i){if(i===window){return 0}if(typeof i._prototypeUID==="undefined"){i._prototypeUID=aF.Storage.UID++}return i._prototypeUID}function c(i){if(i===window){return 0}if(i==document){return 1}return i.uniqueID}var aY=("uniqueID" in av);if(aY){M=c}function b(F){if(!(F=aZ(F))){return}var i=M(F);if(!aF.Storage[i]){aF.Storage[i]=$H()}return aF.Storage[i]}function a5(F,i,bp){if(!(F=aZ(F))){return}var bq=b(F);if(arguments.length===2){bq.update(i)}else{bq.set(i,bp)}return F}function aN(bp,F,i){if(!(bp=aZ(bp))){return}var br=b(bp),bq=br.get(F);if(Object.isUndefined(bq)){br.set(F,i);bq=i}return bq}Object.extend(a3,{getStorage:b,store:a5,retrieve:aN});var an={},aX=aF.Methods.ByTag,aC=Prototype.BrowserFeatures;if(!aC.ElementExtensions&&("__proto__" in av)){a8.HTMLElement={};a8.HTMLElement.prototype=av.__proto__;aC.ElementExtensions=true}function bc(i){if(typeof window.Element==="undefined"){return false}if(!d){return false}var bp=window.Element.prototype;if(bp){var br="_"+(Math.random()+"").slice(2),F=document.createElement(i);bp[br]="x";var bq=(F[br]!=="x");delete bp[br];F=null;return bq}return false}var ap=bc("object");function ak(F,i){for(var bq in i){var bp=i[bq];if(Object.isFunction(bp)&&!(bq in F)){F[bq]=bp.methodize()}}}var bk={};function ay(F){var i=M(F);return(i in bk)}function az(bp){if(!bp||ay(bp)){return bp}if(bp.nodeType!==Node.ELEMENT_NODE||bp==window){return bp}var i=Object.clone(an),F=bp.tagName.toUpperCase();if(aX[F]){Object.extend(i,aX[F])}ak(bp,i);bk[M(bp)]=true;return bp}function aS(F){if(!F||ay(F)){return F}var i=F.tagName;if(i&&(/^(?:object|applet|embed)$/i.test(i))){ak(F,aF.Methods);ak(F,aF.Methods.Simulated);ak(F,aF.Methods.ByTag[i.toUpperCase()])}return F}if(aC.SpecificElementExtensions){az=ap?aS:Prototype.K}function S(F,i){F=F.toUpperCase();if(!aX[F]){aX[F]={}}Object.extend(aX[F],i)}function q(F,bp,i){if(Object.isUndefined(i)){i=false}for(var br in bp){var bq=bp[br];if(!Object.isFunction(bq)){continue}if(!i||!(br in F)){F[br]=bq.methodize()}}}function ai(bq){var i;var bp={OPTGROUP:"OptGroup",TEXTAREA:"TextArea",P:"Paragraph",FIELDSET:"FieldSet",UL:"UList",OL:"OList",DL:"DList",DIR:"Directory",H1:"Heading",H2:"Heading",H3:"Heading",H4:"Heading",H5:"Heading",H6:"Heading",Q:"Quote",INS:"Mod",DEL:"Mod",A:"Anchor",IMG:"Image",CAPTION:"TableCaption",COL:"TableCol",COLGROUP:"TableCol",THEAD:"TableSection",TFOOT:"TableSection",TBODY:"TableSection",TR:"TableRow",TH:"TableCell",TD:"TableCell",FRAMESET:"FrameSet",IFRAME:"IFrame"};if(bp[bq]){i="HTML"+bp[bq]+"Element"}if(window[i]){return window[i]}i="HTML"+bq+"Element";if(window[i]){return window[i]}i="HTML"+bq.capitalize()+"Element";if(window[i]){return window[i]}var F=document.createElement(bq),br=F.__proto__||F.constructor.prototype;F=null;return br}function R(br){if(arguments.length===0){G()}if(arguments.length===2){var bt=br;br=arguments[1]}if(!bt){Object.extend(aF.Methods,br||{})}else{if(Object.isArray(bt)){for(var bs=0,bq;bq=bt[bs];bs++){S(bq,br)}}else{S(bt,br)}}var bp=window.HTMLElement?HTMLElement.prototype:aF.prototype;if(aC.ElementExtensions){q(bp,aF.Methods);q(bp,aF.Methods.Simulated,true)}if(aC.SpecificElementExtensions){for(var bq in aF.Methods.ByTag){var F=ai(bq);if(Object.isUndefined(F)){continue}q(F.prototype,aX[bq])}}Object.extend(aF,aF.Methods);Object.extend(aF,aF.Methods.Simulated);delete aF.ByTag;delete aF.Simulated;aF.extend.refresh();r={}}Object.extend(a8.Element,{extend:az,addMethods:R});if(az===Prototype.K){a8.Element.extend.refresh=Prototype.emptyFunction}else{a8.Element.extend.refresh=function(){if(Prototype.BrowserFeatures.ElementExtensions){return}Object.extend(an,aF.Methods);Object.extend(an,aF.Methods.Simulated);bk={}}}function G(){Object.extend(Form,Form.Methods);Object.extend(Form.Element,Form.Element.Methods);Object.extend(aF.Methods.ByTag,{FORM:Object.clone(Form.Methods),INPUT:Object.clone(Form.Element.Methods),SELECT:Object.clone(Form.Element.Methods),TEXTAREA:Object.clone(Form.Element.Methods),BUTTON:Object.clone(Form.Element.Methods)})}aF.addMethods(a3);function n(){av=null;r=null}if(window.attachEvent){window.attachEvent("onunload",n)}})(this);(function(){function k(G){var F=G.match(/^(\d+)%?$/i);if(!F){return null}return(Number(F[1])/100)}function y(G,H){G=$(G);var I=G.style[H];if(!I||I==="auto"){var F=document.defaultView.getComputedStyle(G,null);I=F?F[H]:null}if(H==="opacity"){return I?parseFloat(I):1}return I==="auto"?null:I}function B(F,G){var H=F.style[G];if(!H&&F.currentStyle){H=F.currentStyle[G]}return H}function r(H,G){var J=H.offsetWidth;var L=u(H,"borderLeftWidth",G)||0;var F=u(H,"borderRightWidth",G)||0;var I=u(H,"paddingLeft",G)||0;var K=u(H,"paddingRight",G)||0;return J-L-F-I-K}if(!Object.isUndefined(document.documentElement.currentStyle)&&!Prototype.Browser.Opera){y=B}function u(P,Q,G){var J=null;if(Object.isElement(P)){J=P;P=y(J,Q)}if(P===null||Object.isUndefined(P)){return null}if((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(P)){return window.parseFloat(P)}var K=P.include("%"),H=(G===document.viewport);if(/\d/.test(P)&&J&&J.runtimeStyle&&!(K&&H)){var F=J.style.left,O=J.runtimeStyle.left;J.runtimeStyle.left=J.currentStyle.left;J.style.left=P||0;P=J.style.pixelLeft;J.style.left=F;J.runtimeStyle.left=O;return P}if(J&&K){G=G||J.parentNode;var I=k(P),L=null;var N=Q.include("left")||Q.include("right")||Q.include("width");var M=Q.include("top")||Q.include("bottom")||Q.include("height");if(G===document.viewport){if(N){L=document.viewport.getWidth()}else{if(M){L=document.viewport.getHeight()}}}else{if(N){L=$(G).measure("width")}else{if(M){L=$(G).measure("height")}}}return(L===null)?0:L*I}return 0}function j(F){if(Object.isString(F)&&F.endsWith("px")){return F}return F+"px"}function m(F){while(F&&F.parentNode){var G=F.getStyle("display");if(G==="none"){return false}F=$(F.parentNode)}return true}var g=Prototype.K;if("currentStyle" in document.documentElement){g=function(F){if(!F.currentStyle.hasLayout){F.style.zoom=1}return F}}function i(F){if(F.include("border")){F=F+"-width"}return F.camelize()}Element.Layout=Class.create(Hash,{initialize:function($super,G,F){$super();this.element=$(G);Element.Layout.PROPERTIES.each(function(H){this._set(H,null)},this);if(F){this._preComputing=true;this._begin();Element.Layout.PROPERTIES.each(this._compute,this);this._end();this._preComputing=false}},_set:function(G,F){return Hash.prototype.set.call(this,G,F)},set:function(G,F){throw"Properties of Element.Layout are read-only."},get:function($super,G){var F=$super(G);return F===null?this._compute(G):F},_begin:function(){if(this._isPrepared()){return}var J=this.element;if(m(J)){this._setPrepared(true);return}var L={position:J.style.position||"",width:J.style.width||"",visibility:J.style.visibility||"",display:J.style.display||""};J.store("prototype_original_styles",L);var M=y(J,"position"),F=J.offsetWidth;if(F===0||F===null){J.style.display="block";F=J.offsetWidth}var G=(M==="fixed")?document.viewport:J.parentNode;var N={visibility:"hidden",display:"block"};if(M!=="fixed"){N.position="absolute"}J.setStyle(N);var H=J.offsetWidth,I;if(F&&(H===F)){I=r(J,G)}else{if(M==="absolute"||M==="fixed"){I=r(J,G)}else{var O=J.parentNode,K=$(O).getLayout();I=K.get("width")-this.get("margin-left")-this.get("border-left")-this.get("padding-left")-this.get("padding-right")-this.get("border-right")-this.get("margin-right")}}J.setStyle({width:I+"px"});this._setPrepared(true)},_end:function(){var G=this.element;var F=G.retrieve("prototype_original_styles");G.store("prototype_original_styles",null);G.setStyle(F);this._setPrepared(false)},_compute:function(G){var F=Element.Layout.COMPUTATIONS;if(!(G in F)){throw"Property not found."}return this._set(G,F[G].call(this,this.element))},_isPrepared:function(){return this.element.retrieve("prototype_element_layout_prepared",false)},_setPrepared:function(F){return this.element.store("prototype_element_layout_prepared",F)},toObject:function(){var F=$A(arguments);var G=(F.length===0)?Element.Layout.PROPERTIES:F.join(" ").split(" ");var H={};G.each(function(I){if(!Element.Layout.PROPERTIES.include(I)){return}var J=this.get(I);if(J!=null){H[I]=J}},this);return H},toHash:function(){var F=this.toObject.apply(this,arguments);return new Hash(F)},toCSS:function(){var F=$A(arguments);var H=(F.length===0)?Element.Layout.PROPERTIES:F.join(" ").split(" ");var G={};H.each(function(I){if(!Element.Layout.PROPERTIES.include(I)){return}if(Element.Layout.COMPOSITE_PROPERTIES.include(I)){return}var J=this.get(I);if(J!=null){G[i(I)]=J+"px"}},this);return G},inspect:function(){return"#<Element.Layout>"}});Object.extend(Element.Layout,{PROPERTIES:$w("height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height"),COMPOSITE_PROPERTIES:$w("padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height"),COMPUTATIONS:{height:function(H){if(!this._preComputing){this._begin()}var F=this.get("border-box-height");if(F<=0){if(!this._preComputing){this._end()}return 0}var I=this.get("border-top"),G=this.get("border-bottom");var K=this.get("padding-top"),J=this.get("padding-bottom");if(!this._preComputing){this._end()}return F-I-G-K-J},width:function(H){if(!this._preComputing){this._begin()}var G=this.get("border-box-width");if(G<=0){if(!this._preComputing){this._end()}return 0}var K=this.get("border-left"),F=this.get("border-right");var I=this.get("padding-left"),J=this.get("padding-right");if(!this._preComputing){this._end()}return G-K-F-I-J},"padding-box-height":function(G){var F=this.get("height"),I=this.get("padding-top"),H=this.get("padding-bottom");return F+I+H},"padding-box-width":function(F){var G=this.get("width"),H=this.get("padding-left"),I=this.get("padding-right");return G+H+I},"border-box-height":function(G){if(!this._preComputing){this._begin()}var F=G.offsetHeight;if(!this._preComputing){this._end()}return F},"border-box-width":function(F){if(!this._preComputing){this._begin()}var G=F.offsetWidth;if(!this._preComputing){this._end()}return G},"margin-box-height":function(G){var F=this.get("border-box-height"),H=this.get("margin-top"),I=this.get("margin-bottom");if(F<=0){return 0}return F+H+I},"margin-box-width":function(H){var G=this.get("border-box-width"),I=this.get("margin-left"),F=this.get("margin-right");if(G<=0){return 0}return G+I+F},top:function(F){var G=F.positionedOffset();return G.top},bottom:function(F){var I=F.positionedOffset(),G=F.getOffsetParent(),H=G.measure("height");var J=this.get("border-box-height");return H-J-I.top},left:function(F){var G=F.positionedOffset();return G.left},right:function(H){var J=H.positionedOffset(),I=H.getOffsetParent(),F=I.measure("width");var G=this.get("border-box-width");return F-G-J.left},"padding-top":function(F){return u(F,"paddingTop")},"padding-bottom":function(F){return u(F,"paddingBottom")},"padding-left":function(F){return u(F,"paddingLeft")},"padding-right":function(F){return u(F,"paddingRight")},"border-top":function(F){return u(F,"borderTopWidth")},"border-bottom":function(F){return u(F,"borderBottomWidth")},"border-left":function(F){return u(F,"borderLeftWidth")},"border-right":function(F){return u(F,"borderRightWidth")},"margin-top":function(F){return u(F,"marginTop")},"margin-bottom":function(F){return u(F,"marginBottom")},"margin-left":function(F){return u(F,"marginLeft")},"margin-right":function(F){return u(F,"marginRight")}}});if("getBoundingClientRect" in document.documentElement){Object.extend(Element.Layout.COMPUTATIONS,{right:function(G){var H=g(G.getOffsetParent());var I=G.getBoundingClientRect(),F=H.getBoundingClientRect();return(F.right-I.right).round()},bottom:function(G){var H=g(G.getOffsetParent());var I=G.getBoundingClientRect(),F=H.getBoundingClientRect();return(F.bottom-I.bottom).round()}})}Element.Offset=Class.create({initialize:function(G,F){this.left=G.round();this.top=F.round();this[0]=this.left;this[1]=this.top},relativeTo:function(F){return new Element.Offset(this.left-F.left,this.top-F.top)},inspect:function(){return"#<Element.Offset left: #{left} top: #{top}>".interpolate(this)},toString:function(){return"[#{left}, #{top}]".interpolate(this)},toArray:function(){return[this.left,this.top]}});function z(G,F){return new Element.Layout(G,F)}function d(F,G){return $(F).getLayout().get(G)}function q(F){return Element.getDimensions(F).height}function c(F){return Element.getDimensions(F).width}function s(G){G=$(G);var K=Element.getStyle(G,"display");if(K&&K!=="none"){return{width:G.offsetWidth,height:G.offsetHeight}}var H=G.style;var F={visibility:H.visibility,position:H.position,display:H.display};var J={visibility:"hidden",display:"block"};if(F.position!=="fixed"){J.position="absolute"}Element.setStyle(G,J);var I={width:G.offsetWidth,height:G.offsetHeight};Element.setStyle(G,F);return I}function p(F){F=$(F);function H(I){return n(I)?$(document.body):$(I)}if(h(F)||f(F)||o(F)||n(F)){return $(document.body)}var G=(Element.getStyle(F,"display")==="inline");if(!G&&F.offsetParent){return H(F.offsetParent)}while((F=F.parentNode)&&F!==document.body){if(Element.getStyle(F,"position")!=="static"){return H(F)}}return $(document.body)}function C(G){G=$(G);var F=0,H=0;if(G.parentNode){do{F+=G.offsetTop||0;H+=G.offsetLeft||0;G=G.offsetParent}while(G)}return new Element.Offset(H,F)}function w(G){G=$(G);var H=G.getLayout();var F=0,J=0;do{F+=G.offsetTop||0;J+=G.offsetLeft||0;G=G.offsetParent;if(G){if(o(G)){break}var I=Element.getStyle(G,"position");if(I!=="static"){break}}}while(G);J-=H.get("margin-left");F-=H.get("margin-top");return new Element.Offset(J,F)}function b(G){var F=0,H=0;do{if(G===document.body){var I=document.documentElement||document.body.parentNode||document.body;F+=!Object.isUndefined(window.pageYOffset)?window.pageYOffset:I.scrollTop||0;H+=!Object.isUndefined(window.pageXOffset)?window.pageXOffset:I.scrollLeft||0;break}else{F+=G.scrollTop||0;H+=G.scrollLeft||0;G=G.parentNode}}while(G);return new Element.Offset(H,F)}function A(J){var F=0,I=0,H=document.body;J=$(J);var G=J;do{F+=G.offsetTop||0;I+=G.offsetLeft||0;if(G.offsetParent==H&&Element.getStyle(G,"position")=="absolute"){break}}while(G=G.offsetParent);G=J;do{if(G!=H){F-=G.scrollTop||0;I-=G.scrollLeft||0}}while(G=G.parentNode);return new Element.Offset(I,F)}function x(F){F=$(F);if(Element.getStyle(F,"position")==="absolute"){return F}var J=p(F);var I=F.viewportOffset(),G=J.viewportOffset();var K=I.relativeTo(G);var H=F.getLayout();F.store("prototype_absolutize_original_styles",{position:F.getStyle("position"),left:F.getStyle("left"),top:F.getStyle("top"),width:F.getStyle("width"),height:F.getStyle("height")});F.setStyle({position:"absolute",top:K.top+"px",left:K.left+"px",width:H.get("width")+"px",height:H.get("height")+"px"});return F}function l(G){G=$(G);if(Element.getStyle(G,"position")==="relative"){return G}var F=G.retrieve("prototype_absolutize_original_styles");if(F){G.setStyle(F)}return G}function a(F){F=$(F);var G=Element.cumulativeOffset(F);window.scrollTo(G.left,G.top);return F}function v(G){G=$(G);var F=Element.getStyle(G,"position"),H={};if(F==="static"||!F){H.position="relative";if(Prototype.Browser.Opera){H.top=0;H.left=0}Element.setStyle(G,H);Element.store(G,"prototype_made_positioned",true)}return G}function t(F){F=$(F);var H=Element.getStorage(F),G=H.get("prototype_made_positioned");if(G){H.unset("prototype_made_positioned");Element.setStyle(F,{position:"",top:"",bottom:"",left:"",right:""})}return F}function e(G){G=$(G);var I=Element.getStorage(G),F=I.get("prototype_made_clipping");if(Object.isUndefined(F)){var H=Element.getStyle(G,"overflow");I.set("prototype_made_clipping",H);if(H!=="hidden"){G.style.overflow="hidden"}}return G}function D(F){F=$(F);var H=Element.getStorage(F),G=H.get("prototype_made_clipping");if(!Object.isUndefined(G)){H.unset("prototype_made_clipping");F.style.overflow=G||""}return F}function E(I,F,Q){Q=Object.extend({setLeft:true,setTop:true,setWidth:true,setHeight:true,offsetTop:0,offsetLeft:0},Q||{});var H=document.documentElement;F=$(F);I=$(I);var G,O,K,P={};if(Q.setLeft||Q.setTop){G=Element.viewportOffset(F);O=[0,0];if(Element.getStyle(I,"position")==="absolute"){var N=Element.getOffsetParent(I);if(N!==document.body){O=Element.viewportOffset(N)}}}function L(){var R=0,S=0;if(Object.isNumber(window.pageXOffset)){R=window.pageXOffset;S=window.pageYOffset}else{if(document.body&&(document.body.scrollLeft||document.body.scrollTop)){R=document.body.scrollLeft;S=document.body.scrollTop}else{if(H&&(H.scrollLeft||H.scrollTop)){R=H.scrollLeft;S=H.scrollTop}}}return{x:R,y:S}}var J=L();if(Q.setWidth||Q.setHeight){K=Element.getLayout(F)}if(Q.setLeft){P.left=(G[0]+J.x-O[0]+Q.offsetLeft)+"px"}if(Q.setTop){P.top=(G[1]+J.y-O[1]+Q.offsetTop)+"px"}var M=I.getLayout();if(Q.setWidth){P.width=K.get("width")+"px"}if(Q.setHeight){P.height=K.get("height")+"px"}return Element.setStyle(I,P)}if(Prototype.Browser.IE){p=p.wrap(function(H,G){G=$(G);if(h(G)||f(G)||o(G)||n(G)){return $(document.body)}var F=G.getStyle("position");if(F!=="static"){return H(G)}G.setStyle({position:"relative"});var I=H(G);G.setStyle({position:F});return I});w=w.wrap(function(I,G){G=$(G);if(!G.parentNode){return new Element.Offset(0,0)}var F=G.getStyle("position");if(F!=="static"){return I(G)}var H=G.getOffsetParent();if(H&&H.getStyle("position")==="fixed"){g(H)}G.setStyle({position:"relative"});var J=I(G);G.setStyle({position:F});return J})}else{if(Prototype.Browser.Webkit){C=function(G){G=$(G);var F=0,H=0;do{F+=G.offsetTop||0;H+=G.offsetLeft||0;if(G.offsetParent==document.body){if(Element.getStyle(G,"position")=="absolute"){break}}G=G.offsetParent}while(G);return new Element.Offset(H,F)}}}Element.addMethods({getLayout:z,measure:d,getWidth:c,getHeight:q,getDimensions:s,getOffsetParent:p,cumulativeOffset:C,positionedOffset:w,cumulativeScrollOffset:b,viewportOffset:A,absolutize:x,relativize:l,scrollTo:a,makePositioned:v,undoPositioned:t,makeClipping:e,undoClipping:D,clonePosition:E});function o(F){return F.nodeName.toUpperCase()==="BODY"}function n(F){return F.nodeName.toUpperCase()==="HTML"}function h(F){return F.nodeType===Node.DOCUMENT_NODE}function f(F){return F!==document.body&&!Element.descendantOf(F,document.body)}if("getBoundingClientRect" in document.documentElement){Element.addMethods({viewportOffset:function(F){F=$(F);if(f(F)){return new Element.Offset(0,0)}var G=F.getBoundingClientRect(),H=document.documentElement;return new Element.Offset(G.left-H.clientLeft,G.top-H.clientTop)}})}})();(function(){var c=Prototype.Browser.Opera&&(window.parseFloat(window.opera.version())<9.5);var f=null;function b(){if(f){return f}f=c?document.body:document.documentElement;return f}function d(){return{width:this.getWidth(),height:this.getHeight()}}function a(){return b().clientWidth}function g(){return b().clientHeight}function e(){var h=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft;var i=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;return new Element.Offset(h,i)}document.viewport={getDimensions:d,getWidth:a,getHeight:g,getScrollOffsets:e}})();window.$$=function(){var a=$A(arguments).join(", ");return Prototype.Selector.select(a,document)};Prototype.Selector=(function(){function a(){throw new Error('Method "Prototype.Selector.select" must be defined.')}function c(){throw new Error('Method "Prototype.Selector.match" must be defined.')}function d(l,m,h){h=h||0;var g=Prototype.Selector.match,k=l.length,f=0,j;for(j=0;j<k;j++){if(g(l[j],m)&&h==f++){return Element.extend(l[j])}}}function e(h){for(var f=0,g=h.length;f<g;f++){Element.extend(h[f])}return h}var b=Prototype.K;return{select:a,match:c,find:d,extendElements:(Element.extend===b)?b:e,extendElement:Element.extend}})();Prototype._original_property=window.Sizzle;(function(){function a(b){Prototype._actual_sizzle=b()}a.amd=true;if(typeof define!=="undefined"&&define.amd){Prototype._original_define=define;Prototype._actual_sizzle=null;window.define=a}})();
/*!
 * Sizzle CSS Selector Engine v1.10.18
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-02-05
 */
(function(av){var D,ay,t,M,P,ab,ax,aC,N,ac,ae,H,u,an,ai,aw,k,K,ap="sizzle"+-(new Date()),O=av.document,az=0,aj=0,d=F(),ao=F(),L=F(),J=function(i,e){if(i===e){ac=true}return 0},au=typeof undefined,V=1<<31,T=({}).hasOwnProperty,ar=[],at=ar.pop,R=ar.push,b=ar.push,s=ar.slice,j=ar.indexOf||function(aE){var aD=0,e=this.length;for(;aD<e;aD++){if(this[aD]===aE){return aD}}return -1},c="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",v="[\\x20\\t\\r\\n\\f]",a="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",Q=a.replace("w","w#"),al="\\["+v+"*("+a+")"+v+"*(?:([*^$|!~]?=)"+v+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+Q+")|)|)"+v+"*\\]",q=":("+a+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+al.replace(3,8)+")*)|.*)\\)|)",x=new RegExp("^"+v+"+|((?:^|[^\\\\])(?:\\\\.)*)"+v+"+$","g"),A=new RegExp("^"+v+"*,"+v+"*"),G=new RegExp("^"+v+"*([>+~]|"+v+")"+v+"*"),z=new RegExp("="+v+"*([^\\]'\"]*?)"+v+"*\\]","g"),X=new RegExp(q),Z=new RegExp("^"+Q+"$"),ah={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a.replace("w","w*")+")"),ATTR:new RegExp("^"+al),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+v+"*(even|odd|(([+-]|)(\\d*)n|)"+v+"*(?:([+-]|)"+v+"*(\\d+)|))"+v+"*\\)|)","i"),bool:new RegExp("^(?:"+c+")$","i"),needsContext:new RegExp("^"+v+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+v+"*((?:-\\d)?\\d*)"+v+"*\\)|)(?=[^-]|$)","i")},h=/^(?:input|select|textarea|button)$/i,r=/^h\d$/i,U=/^[^{]+\{\s*\[native \w/,W=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ag=/[+~]/,S=/'|\\/g,y=new RegExp("\\\\([\\da-f]{1,6}"+v+"?|("+v+")|.)","ig"),ak=function(e,aE,i){var aD="0x"+aE-65536;return aD!==aD||i?aE:aD<0?String.fromCharCode(aD+65536):String.fromCharCode(aD>>10|55296,aD&1023|56320)};try{b.apply((ar=s.call(O.childNodes)),O.childNodes);ar[O.childNodes.length].nodeType}catch(I){b={apply:ar.length?function(i,e){R.apply(i,s.call(e))}:function(aF,aE){var e=aF.length,aD=0;while((aF[e++]=aE[aD++])){}aF.length=e-1}}}function B(aK,aD,aO,aQ){var aP,aH,aI,aM,aN,aG,aF,e,aE,aL;if((aD?aD.ownerDocument||aD:O)!==H){ae(aD)}aD=aD||H;aO=aO||[];if(!aK||typeof aK!=="string"){return aO}if((aM=aD.nodeType)!==1&&aM!==9){return[]}if(an&&!aQ){if((aP=W.exec(aK))){if((aI=aP[1])){if(aM===9){aH=aD.getElementById(aI);if(aH&&aH.parentNode){if(aH.id===aI){aO.push(aH);return aO}}else{return aO}}else{if(aD.ownerDocument&&(aH=aD.ownerDocument.getElementById(aI))&&K(aD,aH)&&aH.id===aI){aO.push(aH);return aO}}}else{if(aP[2]){b.apply(aO,aD.getElementsByTagName(aK));return aO}else{if((aI=aP[3])&&ay.getElementsByClassName&&aD.getElementsByClassName){b.apply(aO,aD.getElementsByClassName(aI));return aO}}}}if(ay.qsa&&(!ai||!ai.test(aK))){e=aF=ap;aE=aD;aL=aM===9&&aK;if(aM===1&&aD.nodeName.toLowerCase()!=="object"){aG=n(aK);if((aF=aD.getAttribute("id"))){e=aF.replace(S,"\\$&")}else{aD.setAttribute("id",e)}e="[id='"+e+"'] ";aN=aG.length;while(aN--){aG[aN]=e+o(aG[aN])}aE=ag.test(aK)&&Y(aD.parentNode)||aD;aL=aG.join(",")}if(aL){try{b.apply(aO,aE.querySelectorAll(aL));return aO}catch(aJ){}finally{if(!aF){aD.removeAttribute("id")}}}}}return ax(aK.replace(x,"$1"),aD,aO,aQ)}function F(){var i=[];function e(aD,aE){if(i.push(aD+" ")>t.cacheLength){delete e[i.shift()]}return(e[aD+" "]=aE)}return e}function p(e){e[ap]=true;return e}function l(i){var aE=H.createElement("div");try{return !!i(aE)}catch(aD){return false}finally{if(aE.parentNode){aE.parentNode.removeChild(aE)}aE=null}}function aA(aD,aF){var e=aD.split("|"),aE=aD.length;while(aE--){t.attrHandle[e[aE]]=aF}}function f(i,e){var aE=e&&i,aD=aE&&i.nodeType===1&&e.nodeType===1&&(~e.sourceIndex||V)-(~i.sourceIndex||V);if(aD){return aD}if(aE){while((aE=aE.nextSibling)){if(aE===e){return -1}}}return i?1:-1}function C(e){return function(aD){var i=aD.nodeName.toLowerCase();return i==="input"&&aD.type===e}}function g(e){return function(aD){var i=aD.nodeName.toLowerCase();return(i==="input"||i==="button")&&aD.type===e}}function am(e){return p(function(i){i=+i;return p(function(aD,aH){var aF,aE=e([],aD.length,i),aG=aE.length;while(aG--){if(aD[(aF=aE[aG])]){aD[aF]=!(aH[aF]=aD[aF])}}})})}function Y(e){return e&&typeof e.getElementsByTagName!==au&&e}ay=B.support={};P=B.isXML=function(e){var i=e&&(e.ownerDocument||e).documentElement;return i?i.nodeName!=="HTML":false};ae=B.setDocument=function(aD){var e,aE=aD?aD.ownerDocument||aD:O,i=aE.defaultView;if(aE===H||aE.nodeType!==9||!aE.documentElement){return H}H=aE;u=aE.documentElement;an=!P(aE);if(i&&i!==i.top){if(i.addEventListener){i.addEventListener("unload",function(){ae()},false)}else{if(i.attachEvent){i.attachEvent("onunload",function(){ae()})}}}ay.attributes=l(function(aF){aF.className="i";return !aF.getAttribute("className")});ay.getElementsByTagName=l(function(aF){aF.appendChild(aE.createComment(""));return !aF.getElementsByTagName("*").length});ay.getElementsByClassName=U.test(aE.getElementsByClassName)&&l(function(aF){aF.innerHTML="<div class='a'></div><div class='a i'></div>";aF.firstChild.className="i";return aF.getElementsByClassName("i").length===2});ay.getById=l(function(aF){u.appendChild(aF).id=ap;return !aE.getElementsByName||!aE.getElementsByName(ap).length});if(ay.getById){t.find.ID=function(aH,aG){if(typeof aG.getElementById!==au&&an){var aF=aG.getElementById(aH);return aF&&aF.parentNode?[aF]:[]}};t.filter.ID=function(aG){var aF=aG.replace(y,ak);return function(aH){return aH.getAttribute("id")===aF}}}else{delete t.find.ID;t.filter.ID=function(aG){var aF=aG.replace(y,ak);return function(aI){var aH=typeof aI.getAttributeNode!==au&&aI.getAttributeNode("id");return aH&&aH.value===aF}}}t.find.TAG=ay.getElementsByTagName?function(aF,aG){if(typeof aG.getElementsByTagName!==au){return aG.getElementsByTagName(aF)}}:function(aF,aJ){var aK,aI=[],aH=0,aG=aJ.getElementsByTagName(aF);if(aF==="*"){while((aK=aG[aH++])){if(aK.nodeType===1){aI.push(aK)}}return aI}return aG};t.find.CLASS=ay.getElementsByClassName&&function(aG,aF){if(typeof aF.getElementsByClassName!==au&&an){return aF.getElementsByClassName(aG)}};aw=[];ai=[];if((ay.qsa=U.test(aE.querySelectorAll))){l(function(aF){aF.innerHTML="<select t=''><option selected=''></option></select>";if(aF.querySelectorAll("[t^='']").length){ai.push("[*^$]="+v+"*(?:''|\"\")")}if(!aF.querySelectorAll("[selected]").length){ai.push("\\["+v+"*(?:value|"+c+")")}if(!aF.querySelectorAll(":checked").length){ai.push(":checked")}});l(function(aG){var aF=aE.createElement("input");aF.setAttribute("type","hidden");aG.appendChild(aF).setAttribute("name","D");if(aG.querySelectorAll("[name=d]").length){ai.push("name"+v+"*[*^$|!~]?=")}if(!aG.querySelectorAll(":enabled").length){ai.push(":enabled",":disabled")}aG.querySelectorAll("*,:x");ai.push(",.*:")})}if((ay.matchesSelector=U.test((k=u.webkitMatchesSelector||u.mozMatchesSelector||u.oMatchesSelector||u.msMatchesSelector)))){l(function(aF){ay.disconnectedMatch=k.call(aF,"div");k.call(aF,"[s!='']:x");aw.push("!=",q)})}ai=ai.length&&new RegExp(ai.join("|"));aw=aw.length&&new RegExp(aw.join("|"));e=U.test(u.compareDocumentPosition);K=e||U.test(u.contains)?function(aG,aF){var aI=aG.nodeType===9?aG.documentElement:aG,aH=aF&&aF.parentNode;return aG===aH||!!(aH&&aH.nodeType===1&&(aI.contains?aI.contains(aH):aG.compareDocumentPosition&&aG.compareDocumentPosition(aH)&16))}:function(aG,aF){if(aF){while((aF=aF.parentNode)){if(aF===aG){return true}}}return false};J=e?function(aG,aF){if(aG===aF){ac=true;return 0}var aH=!aG.compareDocumentPosition-!aF.compareDocumentPosition;if(aH){return aH}aH=(aG.ownerDocument||aG)===(aF.ownerDocument||aF)?aG.compareDocumentPosition(aF):1;if(aH&1||(!ay.sortDetached&&aF.compareDocumentPosition(aG)===aH)){if(aG===aE||aG.ownerDocument===O&&K(O,aG)){return -1}if(aF===aE||aF.ownerDocument===O&&K(O,aF)){return 1}return N?(j.call(N,aG)-j.call(N,aF)):0}return aH&4?-1:1}:function(aG,aF){if(aG===aF){ac=true;return 0}var aM,aJ=0,aL=aG.parentNode,aI=aF.parentNode,aH=[aG],aK=[aF];if(!aL||!aI){return aG===aE?-1:aF===aE?1:aL?-1:aI?1:N?(j.call(N,aG)-j.call(N,aF)):0}else{if(aL===aI){return f(aG,aF)}}aM=aG;while((aM=aM.parentNode)){aH.unshift(aM)}aM=aF;while((aM=aM.parentNode)){aK.unshift(aM)}while(aH[aJ]===aK[aJ]){aJ++}return aJ?f(aH[aJ],aK[aJ]):aH[aJ]===O?-1:aK[aJ]===O?1:0};return aE};B.matches=function(i,e){return B(i,null,null,e)};B.matchesSelector=function(aD,aF){if((aD.ownerDocument||aD)!==H){ae(aD)}aF=aF.replace(z,"='$1']");if(ay.matchesSelector&&an&&(!aw||!aw.test(aF))&&(!ai||!ai.test(aF))){try{var i=k.call(aD,aF);if(i||ay.disconnectedMatch||aD.document&&aD.document.nodeType!==11){return i}}catch(aE){}}return B(aF,H,null,[aD]).length>0};B.contains=function(e,i){if((e.ownerDocument||e)!==H){ae(e)}return K(e,i)};B.attr=function(aD,e){if((aD.ownerDocument||aD)!==H){ae(aD)}var i=t.attrHandle[e.toLowerCase()],aE=i&&T.call(t.attrHandle,e.toLowerCase())?i(aD,e,!an):undefined;return aE!==undefined?aE:ay.attributes||!an?aD.getAttribute(e):(aE=aD.getAttributeNode(e))&&aE.specified?aE.value:null};B.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)};B.uniqueSort=function(aE){var aF,aG=[],e=0,aD=0;ac=!ay.detectDuplicates;N=!ay.sortStable&&aE.slice(0);aE.sort(J);if(ac){while((aF=aE[aD++])){if(aF===aE[aD]){e=aG.push(aD)}}while(e--){aE.splice(aG[e],1)}}N=null;return aE};M=B.getText=function(aG){var aF,aD="",aE=0,e=aG.nodeType;if(!e){while((aF=aG[aE++])){aD+=M(aF)}}else{if(e===1||e===9||e===11){if(typeof aG.textContent==="string"){return aG.textContent}else{for(aG=aG.firstChild;aG;aG=aG.nextSibling){aD+=M(aG)}}}else{if(e===3||e===4){return aG.nodeValue}}}return aD};t=B.selectors={cacheLength:50,createPseudo:p,match:ah,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){e[1]=e[1].replace(y,ak);e[3]=(e[4]||e[5]||"").replace(y,ak);if(e[2]==="~="){e[3]=" "+e[3]+" "}return e.slice(0,4)},CHILD:function(e){e[1]=e[1].toLowerCase();if(e[1].slice(0,3)==="nth"){if(!e[3]){B.error(e[0])}e[4]=+(e[4]?e[5]+(e[6]||1):2*(e[3]==="even"||e[3]==="odd"));e[5]=+((e[7]+e[8])||e[3]==="odd")}else{if(e[3]){B.error(e[0])}}return e},PSEUDO:function(i){var e,aD=!i[5]&&i[2];if(ah.CHILD.test(i[0])){return null}if(i[3]&&i[4]!==undefined){i[2]=i[4]}else{if(aD&&X.test(aD)&&(e=n(aD,true))&&(e=aD.indexOf(")",aD.length-e)-aD.length)){i[0]=i[0].slice(0,e);i[2]=aD.slice(0,e)}}return i.slice(0,3)}},filter:{TAG:function(i){var e=i.replace(y,ak).toLowerCase();return i==="*"?function(){return true}:function(aD){return aD.nodeName&&aD.nodeName.toLowerCase()===e}},CLASS:function(e){var i=d[e+" "];return i||(i=new RegExp("(^|"+v+")"+e+"("+v+"|$)"))&&d(e,function(aD){return i.test(typeof aD.className==="string"&&aD.className||typeof aD.getAttribute!==au&&aD.getAttribute("class")||"")})},ATTR:function(aD,i,e){return function(aF){var aE=B.attr(aF,aD);if(aE==null){return i==="!="}if(!i){return true}aE+="";return i==="="?aE===e:i==="!="?aE!==e:i==="^="?e&&aE.indexOf(e)===0:i==="*="?e&&aE.indexOf(e)>-1:i==="$="?e&&aE.slice(-e.length)===e:i==="~="?(" "+aE+" ").indexOf(e)>-1:i==="|="?aE===e||aE.slice(0,e.length+1)===e+"-":false}},CHILD:function(i,aF,aE,aG,aD){var aI=i.slice(0,3)!=="nth",e=i.slice(-4)!=="last",aH=aF==="of-type";return aG===1&&aD===0?function(aJ){return !!aJ.parentNode}:function(aP,aN,aS){var aJ,aV,aQ,aU,aR,aM,aO=aI!==e?"nextSibling":"previousSibling",aT=aP.parentNode,aL=aH&&aP.nodeName.toLowerCase(),aK=!aS&&!aH;if(aT){if(aI){while(aO){aQ=aP;while((aQ=aQ[aO])){if(aH?aQ.nodeName.toLowerCase()===aL:aQ.nodeType===1){return false}}aM=aO=i==="only"&&!aM&&"nextSibling"}return true}aM=[e?aT.firstChild:aT.lastChild];if(e&&aK){aV=aT[ap]||(aT[ap]={});aJ=aV[i]||[];aR=aJ[0]===az&&aJ[1];aU=aJ[0]===az&&aJ[2];aQ=aR&&aT.childNodes[aR];while((aQ=++aR&&aQ&&aQ[aO]||(aU=aR=0)||aM.pop())){if(aQ.nodeType===1&&++aU&&aQ===aP){aV[i]=[az,aR,aU];break}}}else{if(aK&&(aJ=(aP[ap]||(aP[ap]={}))[i])&&aJ[0]===az){aU=aJ[1]}else{while((aQ=++aR&&aQ&&aQ[aO]||(aU=aR=0)||aM.pop())){if((aH?aQ.nodeName.toLowerCase()===aL:aQ.nodeType===1)&&++aU){if(aK){(aQ[ap]||(aQ[ap]={}))[i]=[az,aU]}if(aQ===aP){break}}}}}aU-=aD;return aU===aG||(aU%aG===0&&aU/aG>=0)}}},PSEUDO:function(aE,aD){var e,i=t.pseudos[aE]||t.setFilters[aE.toLowerCase()]||B.error("unsupported pseudo: "+aE);if(i[ap]){return i(aD)}if(i.length>1){e=[aE,aE,"",aD];return t.setFilters.hasOwnProperty(aE.toLowerCase())?p(function(aH,aJ){var aG,aF=i(aH,aD),aI=aF.length;while(aI--){aG=j.call(aH,aF[aI]);aH[aG]=!(aJ[aG]=aF[aI])}}):function(aF){return i(aF,0,e)}}return i}},pseudos:{not:p(function(e){var i=[],aD=[],aE=ab(e.replace(x,"$1"));return aE[ap]?p(function(aG,aL,aJ,aH){var aK,aF=aE(aG,null,aH,[]),aI=aG.length;while(aI--){if((aK=aF[aI])){aG[aI]=!(aL[aI]=aK)}}}):function(aH,aG,aF){i[0]=aH;aE(i,null,aF,aD);return !aD.pop()}}),has:p(function(e){return function(i){return B(e,i).length>0}}),contains:p(function(e){return function(i){return(i.textContent||i.innerText||M(i)).indexOf(e)>-1}}),lang:p(function(e){if(!Z.test(e||"")){B.error("unsupported lang: "+e)}e=e.replace(y,ak).toLowerCase();return function(aD){var i;do{if((i=an?aD.lang:aD.getAttribute("xml:lang")||aD.getAttribute("lang"))){i=i.toLowerCase();return i===e||i.indexOf(e+"-")===0}}while((aD=aD.parentNode)&&aD.nodeType===1);return false}}),target:function(e){var i=av.location&&av.location.hash;return i&&i.slice(1)===e.id},root:function(e){return e===u},focus:function(e){return e===H.activeElement&&(!H.hasFocus||H.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===false},disabled:function(e){return e.disabled===true},checked:function(e){var i=e.nodeName.toLowerCase();return(i==="input"&&!!e.checked)||(i==="option"&&!!e.selected)},selected:function(e){if(e.parentNode){e.parentNode.selectedIndex}return e.selected===true},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling){if(e.nodeType<6){return false}}return true},parent:function(e){return !t.pseudos.empty(e)},header:function(e){return r.test(e.nodeName)},input:function(e){return h.test(e.nodeName)},button:function(i){var e=i.nodeName.toLowerCase();return e==="input"&&i.type==="button"||e==="button"},text:function(i){var e;return i.nodeName.toLowerCase()==="input"&&i.type==="text"&&((e=i.getAttribute("type"))==null||e.toLowerCase()==="text")},first:am(function(){return[0]}),last:am(function(e,i){return[i-1]}),eq:am(function(e,aD,i){return[i<0?i+aD:i]}),even:am(function(e,aE){var aD=0;for(;aD<aE;aD+=2){e.push(aD)}return e}),odd:am(function(e,aE){var aD=1;for(;aD<aE;aD+=2){e.push(aD)}return e}),lt:am(function(e,aF,aE){var aD=aE<0?aE+aF:aE;for(;--aD>=0;){e.push(aD)}return e}),gt:am(function(e,aF,aE){var aD=aE<0?aE+aF:aE;for(;++aD<aF;){e.push(aD)}return e})}};t.pseudos.nth=t.pseudos.eq;for(D in {radio:true,checkbox:true,file:true,password:true,image:true}){t.pseudos[D]=C(D)}for(D in {submit:true,reset:true}){t.pseudos[D]=g(D)}function aa(){}aa.prototype=t.filters=t.pseudos;t.setFilters=new aa();function n(aF,aK){var i,aG,aI,aJ,aH,aD,e,aE=ao[aF+" "];if(aE){return aK?0:aE.slice(0)}aH=aF;aD=[];e=t.preFilter;while(aH){if(!i||(aG=A.exec(aH))){if(aG){aH=aH.slice(aG[0].length)||aH}aD.push((aI=[]))}i=false;if((aG=G.exec(aH))){i=aG.shift();aI.push({value:i,type:aG[0].replace(x," ")});aH=aH.slice(i.length)}for(aJ in t.filter){if((aG=ah[aJ].exec(aH))&&(!e[aJ]||(aG=e[aJ](aG)))){i=aG.shift();aI.push({value:i,type:aJ,matches:aG});aH=aH.slice(i.length)}}if(!i){break}}return aK?aH.length:aH?B.error(aF):ao(aF,aD).slice(0)}function o(aF){var aE=0,aD=aF.length,e="";for(;aE<aD;aE++){e+=aF[aE].value}return e}function w(aF,aD,aE){var e=aD.dir,aG=aE&&e==="parentNode",i=aj++;return aD.first?function(aJ,aI,aH){while((aJ=aJ[e])){if(aJ.nodeType===1||aG){return aF(aJ,aI,aH)}}}:function(aL,aJ,aI){var aM,aK,aH=[az,i];if(aI){while((aL=aL[e])){if(aL.nodeType===1||aG){if(aF(aL,aJ,aI)){return true}}}}else{while((aL=aL[e])){if(aL.nodeType===1||aG){aK=aL[ap]||(aL[ap]={});if((aM=aK[e])&&aM[0]===az&&aM[1]===i){return(aH[2]=aM[2])}else{aK[e]=aH;if((aH[2]=aF(aL,aJ,aI))){return true}}}}}}}function aB(e){return e.length>1?function(aG,aF,aD){var aE=e.length;while(aE--){if(!e[aE](aG,aF,aD)){return false}}return true}:e[0]}function E(aD,aG,aF){var aE=0,e=aG.length;for(;aE<e;aE++){B(aD,aG[aE],aF)}return aF}function af(e,aD,aE,aF,aI){var aG,aL=[],aH=0,aJ=e.length,aK=aD!=null;for(;aH<aJ;aH++){if((aG=e[aH])){if(!aE||aE(aG,aF,aI)){aL.push(aG);if(aK){aD.push(aH)}}}}return aL}function m(aD,i,aF,aE,aG,e){if(aE&&!aE[ap]){aE=m(aE)}if(aG&&!aG[ap]){aG=m(aG,e)}return p(function(aR,aO,aJ,aQ){var aT,aP,aL,aK=[],aS=[],aI=aO.length,aH=aR||E(i||"*",aJ.nodeType?[aJ]:aJ,[]),aM=aD&&(aR||!i)?af(aH,aK,aD,aJ,aQ):aH,aN=aF?aG||(aR?aD:aI||aE)?[]:aO:aM;if(aF){aF(aM,aN,aJ,aQ)}if(aE){aT=af(aN,aS);aE(aT,[],aJ,aQ);aP=aT.length;while(aP--){if((aL=aT[aP])){aN[aS[aP]]=!(aM[aS[aP]]=aL)}}}if(aR){if(aG||aD){if(aG){aT=[];aP=aN.length;while(aP--){if((aL=aN[aP])){aT.push((aM[aP]=aL))}}aG(null,(aN=[]),aT,aQ)}aP=aN.length;while(aP--){if((aL=aN[aP])&&(aT=aG?j.call(aR,aL):aK[aP])>-1){aR[aT]=!(aO[aT]=aL)}}}}else{aN=af(aN===aO?aN.splice(aI,aN.length):aN);if(aG){aG(null,aO,aN,aQ)}else{b.apply(aO,aN)}}})}function aq(aI){var aD,aG,aE,aH=aI.length,aL=t.relative[aI[0].type],aM=aL||t.relative[" "],aF=aL?1:0,aJ=w(function(i){return i===aD},aM,true),aK=w(function(i){return j.call(aD,i)>-1},aM,true),e=[function(aO,aN,i){return(!aL&&(i||aN!==aC))||((aD=aN).nodeType?aJ(aO,aN,i):aK(aO,aN,i))}];for(;aF<aH;aF++){if((aG=t.relative[aI[aF].type])){e=[w(aB(e),aG)]}else{aG=t.filter[aI[aF].type].apply(null,aI[aF].matches);if(aG[ap]){aE=++aF;for(;aE<aH;aE++){if(t.relative[aI[aE].type]){break}}return m(aF>1&&aB(e),aF>1&&o(aI.slice(0,aF-1).concat({value:aI[aF-2].type===" "?"*":""})).replace(x,"$1"),aG,aF<aE&&aq(aI.slice(aF,aE)),aE<aH&&aq((aI=aI.slice(aE))),aE<aH&&o(aI))}e.push(aG)}}return aB(e)}function ad(aE,aD){var e=aD.length>0,aF=aE.length>0,i=function(aP,aJ,aO,aN,aS){var aK,aL,aQ,aU=0,aM="0",aG=aP&&[],aV=[],aT=aC,aI=aP||aF&&t.find.TAG("*",aS),aH=(az+=aT==null?1:Math.random()||0.1),aR=aI.length;if(aS){aC=aJ!==H&&aJ}for(;aM!==aR&&(aK=aI[aM])!=null;aM++){if(aF&&aK){aL=0;while((aQ=aE[aL++])){if(aQ(aK,aJ,aO)){aN.push(aK);break}}if(aS){az=aH}}if(e){if((aK=!aQ&&aK)){aU--}if(aP){aG.push(aK)}}}aU+=aM;if(e&&aM!==aU){aL=0;while((aQ=aD[aL++])){aQ(aG,aV,aJ,aO)}if(aP){if(aU>0){while(aM--){if(!(aG[aM]||aV[aM])){aV[aM]=at.call(aN)}}}aV=af(aV)}b.apply(aN,aV);if(aS&&!aP&&aV.length>0&&(aU+aD.length)>1){B.uniqueSort(aN)}}if(aS){az=aH;aC=aT}return aG};return e?p(i):i}ab=B.compile=function(e,aE){var aF,aD=[],aH=[],aG=L[e+" "];if(!aG){if(!aE){aE=n(e)}aF=aE.length;while(aF--){aG=aq(aE[aF]);if(aG[ap]){aD.push(aG)}else{aH.push(aG)}}aG=L(e,ad(aH,aD));aG.selector=e}return aG};ax=B.select=function(aE,e,aF,aI){var aG,aL,aD,aM,aJ,aK=typeof aE==="function"&&aE,aH=!aI&&n((aE=aK.selector||aE));aF=aF||[];if(aH.length===1){aL=aH[0]=aH[0].slice(0);if(aL.length>2&&(aD=aL[0]).type==="ID"&&ay.getById&&e.nodeType===9&&an&&t.relative[aL[1].type]){e=(t.find.ID(aD.matches[0].replace(y,ak),e)||[])[0];if(!e){return aF}else{if(aK){e=e.parentNode}}aE=aE.slice(aL.shift().value.length)}aG=ah.needsContext.test(aE)?0:aL.length;while(aG--){aD=aL[aG];if(t.relative[(aM=aD.type)]){break}if((aJ=t.find[aM])){if((aI=aJ(aD.matches[0].replace(y,ak),ag.test(aL[0].type)&&Y(e.parentNode)||e))){aL.splice(aG,1);aE=aI.length&&o(aL);if(!aE){b.apply(aF,aI);return aF}break}}}}(aK||ab(aE,aH))(aI,e,!an,aF,ag.test(aE)&&Y(e.parentNode)||e);return aF};ay.sortStable=ap.split("").sort(J).join("")===ap;ay.detectDuplicates=!!ac;ae();ay.sortDetached=l(function(e){return e.compareDocumentPosition(H.createElement("div"))&1});if(!l(function(e){e.innerHTML="<a href='#'></a>";return e.firstChild.getAttribute("href")==="#"})){aA("type|href|height|width",function(i,e,aD){if(!aD){return i.getAttribute(e,e.toLowerCase()==="type"?1:2)}})}if(!ay.attributes||!l(function(e){e.innerHTML="<input/>";e.firstChild.setAttribute("value","");return e.firstChild.getAttribute("value")===""})){aA("value",function(i,e,aD){if(!aD&&i.nodeName.toLowerCase()==="input"){return i.defaultValue}})}if(!l(function(e){return e.getAttribute("disabled")==null})){aA(c,function(i,e,aE){var aD;if(!aE){return i[e]===true?e.toLowerCase():(aD=i.getAttributeNode(e))&&aD.specified?aD.value:null}})}if(typeof define==="function"&&define.amd){define(function(){return B})}else{if(typeof module!=="undefined"&&module.exports){module.exports=B}else{av.Sizzle=B}}})(window);(function(){if(typeof Sizzle!=="undefined"){return}if(typeof define!=="undefined"&&define.amd){window.Sizzle=Prototype._actual_sizzle;window.define=Prototype._original_define;delete Prototype._actual_sizzle;delete Prototype._original_define}else{if(typeof module!=="undefined"&&module.exports){window.Sizzle=module.exports;module.exports={}}}})();(function(c){var d=Prototype.Selector.extendElements;function a(e,f){return d(c(e,f||document))}function b(f,e){return c.matches(e,[f]).length==1}Prototype.Selector.engine=c;Prototype.Selector.select=a;Prototype.Selector.match=b})(Sizzle);window.Sizzle=Prototype._original_property;delete Prototype._original_property;var Form={reset:function(a){a=$(a);a.reset();return a},serializeElements:function(h,d){if(typeof d!="object"){d={hash:!!d}}else{if(Object.isUndefined(d.hash)){d.hash=true}}var e,g,a=false,f=d.submit,b,c;if(d.hash){c={};b=function(i,j,k){if(j in i){if(!Object.isArray(i[j])){i[j]=[i[j]]}i[j]=i[j].concat(k)}else{i[j]=k}return i}}else{c="";b=function(i,k,j){if(!Object.isArray(j)){j=[j]}if(!j.length){return i}var l=encodeURIComponent(k).gsub(/%20/,"+");return i+(i?"&":"")+j.map(function(m){m=m.gsub(/(\r)?\n/,"\r\n");m=encodeURIComponent(m);m=m.gsub(/%20/,"+");return l+"="+m}).join("&")}}return h.inject(c,function(i,j){if(!j.disabled&&j.name){e=j.name;g=$(j).getValue();if(g!=null&&j.type!="file"&&(j.type!="submit"||(!a&&f!==false&&(!f||e==f)&&(a=true)))){i=b(i,e,g)}}return i})}};Form.Methods={serialize:function(b,a){return Form.serializeElements(Form.getElements(b),a)},getElements:function(e){var f=$(e).getElementsByTagName("*");var d,c=[],b=Form.Element.Serializers;for(var a=0;d=f[a];a++){if(b[d.tagName.toLowerCase()]){c.push(Element.extend(d))}}return c},getInputs:function(g,c,d){g=$(g);var a=g.getElementsByTagName("input");if(!c&&!d){return $A(a).map(Element.extend)}for(var e=0,h=[],f=a.length;e<f;e++){var b=a[e];if((c&&b.type!=c)||(d&&b.name!=d)){continue}h.push(Element.extend(b))}return h},disable:function(a){a=$(a);Form.getElements(a).invoke("disable");return a},enable:function(a){a=$(a);Form.getElements(a).invoke("enable");return a},findFirstElement:function(b){var c=$(b).getElements().findAll(function(d){return"hidden"!=d.type&&!d.disabled});var a=c.findAll(function(d){return d.hasAttribute("tabIndex")&&d.tabIndex>=0}).sortBy(function(d){return d.tabIndex}).first();return a?a:c.find(function(d){return/^(?:input|select|textarea)$/i.test(d.tagName)})},focusFirstElement:function(b){b=$(b);var a=b.findFirstElement();if(a){a.activate()}return b},request:function(b,a){b=$(b),a=Object.clone(a||{});var d=a.parameters,c=b.readAttribute("action")||"";if(c.blank()){c=window.location.href}a.parameters=b.serialize(true);if(d){if(Object.isString(d)){d=d.toQueryParams()}Object.extend(a.parameters,d)}if(b.hasAttribute("method")&&!a.method){a.method=b.method}return new Ajax.Request(c,a)}};Form.Element={focus:function(a){$(a).focus();return a},select:function(a){$(a).select();return a}};Form.Element.Methods={serialize:function(a){a=$(a);if(!a.disabled&&a.name){var b=a.getValue();if(b!=undefined){var c={};c[a.name]=b;return Object.toQueryString(c)}}return""},getValue:function(a){a=$(a);var b=a.tagName.toLowerCase();return Form.Element.Serializers[b](a)},setValue:function(a,b){a=$(a);var c=a.tagName.toLowerCase();Form.Element.Serializers[c](a,b);return a},clear:function(a){$(a).value="";return a},present:function(a){return $(a).value!=""},activate:function(a){a=$(a);try{a.focus();if(a.select&&(a.tagName.toLowerCase()!="input"||!(/^(?:button|reset|submit)$/i.test(a.type)))){a.select()}}catch(b){}return a},disable:function(a){a=$(a);a.disabled=true;return a},enable:function(a){a=$(a);a.disabled=false;return a}};var Field=Form.Element;var $F=Form.Element.Methods.getValue;Form.Element.Serializers=(function(){function b(h,i){switch(h.type.toLowerCase()){case"checkbox":case"radio":return f(h,i);default:return e(h,i)}}function f(h,i){if(Object.isUndefined(i)){return h.checked?h.value:null}else{h.checked=!!i}}function e(h,i){if(Object.isUndefined(i)){return h.value}else{h.value=i}}function a(k,n){if(Object.isUndefined(n)){return(k.type==="select-one"?c:d)(k)}var j,l,o=!Object.isArray(n);for(var h=0,m=k.length;h<m;h++){j=k.options[h];l=this.optionValue(j);if(o){if(l==n){j.selected=true;return}}else{j.selected=n.include(l)}}}function c(i){var h=i.selectedIndex;return h>=0?g(i.options[h]):null}function d(l){var h,m=l.length;if(!m){return null}for(var k=0,h=[];k<m;k++){var j=l.options[k];if(j.selected){h.push(g(j))}}return h}function g(h){return Element.hasAttribute(h,"value")?h.value:h.text}return{input:b,inputSelector:f,textarea:e,select:a,selectOne:c,selectMany:d,optionValue:g,button:e}})();Abstract.TimedObserver=Class.create(PeriodicalExecuter,{initialize:function($super,a,b,c){$super(c,b);this.element=$(a);this.lastValue=this.getValue()},execute:function(){var a=this.getValue();if(Object.isString(this.lastValue)&&Object.isString(a)?this.lastValue!=a:String(this.lastValue)!=String(a)){this.callback(this.element,a);this.lastValue=a}}});Form.Element.Observer=Class.create(Abstract.TimedObserver,{getValue:function(){return Form.Element.getValue(this.element)}});Form.Observer=Class.create(Abstract.TimedObserver,{getValue:function(){return Form.serialize(this.element)}});Abstract.EventObserver=Class.create({initialize:function(a,b){this.element=$(a);this.callback=b;this.lastValue=this.getValue();if(this.element.tagName.toLowerCase()=="form"){this.registerFormCallbacks()}else{this.registerCallback(this.element)}},onElementEvent:function(){var a=this.getValue();if(this.lastValue!=a){this.callback(this.element,a);this.lastValue=a}},registerFormCallbacks:function(){Form.getElements(this.element).each(this.registerCallback,this)},registerCallback:function(a){if(a.type){switch(a.type.toLowerCase()){case"checkbox":case"radio":Event.observe(a,"click",this.onElementEvent.bind(this));break;default:Event.observe(a,"change",this.onElementEvent.bind(this));break}}}});Form.Element.EventObserver=Class.create(Abstract.EventObserver,{getValue:function(){return Form.Element.getValue(this.element)}});Form.EventObserver=Class.create(Abstract.EventObserver,{getValue:function(){return Form.serialize(this.element)}});(function(D){var u=document.createElement("div");var d=document.documentElement;var k="onmouseenter" in d&&"onmouseleave" in d;var L={KEY_BACKSPACE:8,KEY_TAB:9,KEY_RETURN:13,KEY_ESC:27,KEY_LEFT:37,KEY_UP:38,KEY_RIGHT:39,KEY_DOWN:40,KEY_DELETE:46,KEY_HOME:36,KEY_END:35,KEY_PAGEUP:33,KEY_PAGEDOWN:34,KEY_INSERT:45};var A=function(X){return false};if(window.attachEvent){if(window.addEventListener){A=function(X){return !(X instanceof window.Event)}}else{A=function(X){return true}}}var O;function M(Y,X){return Y.which?(Y.which===X+1):(Y.button===X)}var W={0:1,1:4,2:2};function S(Y,X){return Y.button===W[X]}function P(Y,X){switch(X){case 0:return Y.which==1&&!Y.metaKey;case 1:return Y.which==2||(Y.which==1&&Y.metaKey);case 2:return Y.which==3;default:return false}}if(window.attachEvent){if(!window.addEventListener){O=S}else{O=function(Y,X){return A(Y)?S(Y,X):M(Y,X)}}}else{if(Prototype.Browser.WebKit){O=P}else{O=M}}function B(X){return O(X,0)}function i(X){return O(X,1)}function e(X){return O(X,2)}function o(X){return Element.extend(K(X))}function K(Z){Z=L.extend(Z);var Y=Z.target,X=Z.type,aa=Z.currentTarget;if(aa&&aa.tagName){if(X==="load"||X==="error"||(X==="click"&&aa.tagName.toLowerCase()==="input"&&aa.type==="radio")){Y=aa}}return Y.nodeType==Node.TEXT_NODE?Y.parentNode:Y}function j(Z,aa){var Y=K(Z),X=Prototype.Selector;if(!aa){return Element.extend(Y)}while(Y){if(Object.isElement(Y)&&X.match(Y,aa)){return Element.extend(Y)}Y=Y.parentNode}}function t(X){return{x:U(X),y:T(X)}}function U(Z){var Y=document.documentElement,X=document.body||{scrollLeft:0};return Z.pageX||(Z.clientX+(Y.scrollLeft||X.scrollLeft)-(Y.clientLeft||0))}function T(Z){var Y=document.documentElement,X=document.body||{scrollTop:0};return Z.pageY||(Z.clientY+(Y.scrollTop||X.scrollTop)-(Y.clientTop||0))}function r(X){L.extend(X);X.preventDefault();X.stopPropagation();X.stopped=true}L.Methods={isLeftClick:B,isMiddleClick:i,isRightClick:e,element:o,findElement:j,pointer:t,pointerX:U,pointerY:T,stop:r};var H=Object.keys(L.Methods).inject({},function(X,Y){X[Y]=L.Methods[Y].methodize();return X});if(window.attachEvent){function V(Y){var X;switch(Y.type){case"mouseover":case"mouseenter":X=Y.fromElement;break;case"mouseout":case"mouseleave":X=Y.toElement;break;default:return null}return Element.extend(X)}var Q={stopPropagation:function(){this.cancelBubble=true},preventDefault:function(){this.returnValue=false},inspect:function(){return"[object Event]"}};L.extend=function(Y,X){if(!Y){return false}if(!A(Y)){return Y}if(Y._extendedByPrototype){return Y}Y._extendedByPrototype=Prototype.emptyFunction;var Z=L.pointer(Y);Object.extend(Y,{target:Y.srcElement||X,relatedTarget:V(Y),pageX:Z.x,pageY:Z.y});Object.extend(Y,H);Object.extend(Y,Q);return Y}}else{L.extend=Prototype.K}if(window.addEventListener){L.prototype=window.Event.prototype||document.createEvent("HTMLEvents").__proto__;Object.extend(L.prototype,H)}var v={mouseenter:"mouseover",mouseleave:"mouseout"};function f(X){return v[X]||X}if(k){f=Prototype.K}function R(X){if(X===window){return 0}if(typeof X._prototypeUID==="undefined"){X._prototypeUID=Element.Storage.UID++}return X._prototypeUID}function I(X){if(X===window){return 0}if(X==document){return 1}return X.uniqueID}if("uniqueID" in u){R=I}function x(X){return X.include(":")}L._isCustomEvent=x;function z(Z,Y){var X=D.Event.cache;if(Object.isUndefined(Y)){Y=R(Z)}if(!X[Y]){X[Y]={element:Z}}return X[Y]}function E(Y,X){if(Object.isUndefined(X)){X=R(Y)}delete D.Event.cache[X]}function h(Z,ac,af){var X=z(Z);if(!X[ac]){X[ac]=[]}var ab=X[ac];var aa=ab.length;while(aa--){if(ab[aa].handler===af){return null}}var ad=R(Z);var Y=D.Event._createResponder(ad,ac,af);var ae={responder:Y,handler:af};ab.push(ae);return ae}function s(ac,Z,ad){var Y=z(ac);var X=Y[Z]||[];var ab=X.length,ae;while(ab--){if(X[ab].handler===ad){ae=X[ab];break}}if(ae){var aa=X.indexOf(ae);X.splice(aa,1)}if(X.length===0){delete Y[Z];if(Object.keys(Y).length===1&&("element" in Y)){E(ac)}}return ae}function c(Z,Y,aa){Z=$(Z);var ab=h(Z,Y,aa);if(ab===null){return Z}var X=ab.responder;if(x(Y)){p(Z,Y,X)}else{m(Z,Y,X)}return Z}function m(aa,Z,Y){var X=f(Z);if(aa.addEventListener){aa.addEventListener(X,Y,false)}else{aa.attachEvent("on"+X,Y)}}function p(Z,Y,X){if(Z.addEventListener){Z.addEventListener("dataavailable",X,false)}else{Z.attachEvent("ondataavailable",X);Z.attachEvent("onlosecapture",X)}}function J(Y,X,Z){Y=$(Y);var ab=!Object.isUndefined(Z),ac=!Object.isUndefined(X);if(!ac&&!ab){y(Y);return Y}if(!ab){G(Y,X);return Y}var aa=s(Y,X,Z);if(!aa){return Y}a(Y,X,aa.responder);return Y}function C(aa,Z,Y){var X=f(Z);if(aa.removeEventListener){aa.removeEventListener(X,Y,false)}else{aa.detachEvent("on"+X,Y)}}function b(Z,Y,X){if(Z.removeEventListener){Z.removeEventListener("dataavailable",X,false)}else{Z.detachEvent("ondataavailable",X);Z.detachEvent("onlosecapture",X)}}function y(ac){var ab=R(ac),Z=D.Event.cache[ab];if(!Z){return}E(ac,ab);var X,aa;for(var Y in Z){if(Y==="element"){continue}X=Z[Y];aa=X.length;while(aa--){a(ac,Y,X[aa].responder)}}}function G(ac,Z){var Y=z(ac);var X=Y[Z];if(X){delete Y[Z]}X=X||[];var ab=X.length;while(ab--){a(ac,Z,X[ab].responder)}for(var aa in Y){if(aa==="element"){continue}return}E(ac)}function a(Y,X,Z){if(x(X)){b(Y,X,Z)}else{C(Y,X,Z)}}function g(X){if(X!==document){return X}if(document.createEvent&&!X.dispatchEvent){return document.documentElement}return X}function w(aa,Z,Y,X){aa=g($(aa));if(Object.isUndefined(X)){X=true}Y=Y||{};var ab=N(aa,Z,Y,X);return L.extend(ab)}function l(aa,Z,Y,X){var ab=document.createEvent("HTMLEvents");ab.initEvent("dataavailable",X,true);ab.eventName=Z;ab.memo=Y;aa.dispatchEvent(ab);return ab}function n(aa,Z,Y,X){var ab=document.createEventObject();ab.eventType=X?"ondataavailable":"onlosecapture";ab.eventName=Z;ab.memo=Y;aa.fireEvent(ab.eventType,ab);return ab}var N=document.createEvent?l:n;L.Handler=Class.create({initialize:function(Z,Y,X,aa){this.element=$(Z);this.eventName=Y;this.selector=X;this.callback=aa;this.handler=this.handleEvent.bind(this)},start:function(){L.observe(this.element,this.eventName,this.handler);return this},stop:function(){L.stopObserving(this.element,this.eventName,this.handler);return this},handleEvent:function(Y){var X=L.findElement(Y,this.selector);if(X){this.callback.call(this.element,Y,X)}}});function F(Z,Y,X,aa){Z=$(Z);if(Object.isFunction(X)&&Object.isUndefined(aa)){aa=X,X=null}return new L.Handler(Z,Y,X,aa).start()}Object.extend(L,L.Methods);Object.extend(L,{fire:w,observe:c,stopObserving:J,on:F});Element.addMethods({fire:w,observe:c,stopObserving:J,on:F});Object.extend(document,{fire:w.methodize(),observe:c.methodize(),stopObserving:J.methodize(),on:F.methodize(),loaded:false});if(D.Event){Object.extend(window.Event,L)}else{D.Event=L}D.Event.cache={};function q(){D.Event.cache=null}if(window.attachEvent){window.attachEvent("onunload",q)}u=null;d=null})(this);(function(c){var g=document.documentElement;var b="onmouseenter" in g&&"onmouseleave" in g;function f(h){return !b&&(h==="mouseenter"||h==="mouseleave")}function d(i,h,j){if(Event._isCustomEvent(h)){return e(i,h,j)}if(f(h)){return a(i,h,j)}return function(l){if(!Event.cache){return}var k=Event.cache[i].element;Event.extend(l,k);j.call(k,l)}}function e(i,h,j){return function(m){var k=Event.cache[i];var l=k&&k.element;if(Object.isUndefined(m.eventName)){return false}if(m.eventName!==h){return false}Event.extend(m,l);j.call(l,m)}}function a(i,h,j){return function(m){var k=Event.cache[i].element;Event.extend(m,k);var l=m.relatedTarget;while(l&&l!==k){try{l=l.parentNode}catch(n){l=k}}if(l===k){return}j.call(k,m)}}c.Event._createResponder=d;g=null})(this);(function(a){var e;function b(){if(document.loaded){return}if(e){window.clearTimeout(e)}document.loaded=true;document.fire("dom:loaded")}function d(){if(document.readyState==="complete"){document.detachEvent("onreadystatechange",d);b()}}function c(){try{document.documentElement.doScroll("left")}catch(f){e=c.defer();return}b()}if(document.readyState==="complete"){b();return}if(document.addEventListener){document.addEventListener("DOMContentLoaded",b,false)}else{document.attachEvent("onreadystatechange",d);if(window==top){e=c.defer()}}Event.observe(window,"load",b)})(this);Element.addMethods();Hash.toQueryString=Object.toQueryString;var Toggle={display:Element.toggle};Element.addMethods({childOf:Element.Methods.descendantOf});var Insertion={Before:function(a,b){return Element.insert(a,{before:b})},Top:function(a,b){return Element.insert(a,{top:b})},Bottom:function(a,b){return Element.insert(a,{bottom:b})},After:function(a,b){return Element.insert(a,{after:b})}};var $continue=new Error('"throw $continue" is deprecated, use "return" instead');var Position={includeScrollOffsets:false,prepare:function(){this.deltaX=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;this.deltaY=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},within:function(b,a,c){if(this.includeScrollOffsets){return this.withinIncludingScrolloffsets(b,a,c)}this.xcomp=a;this.ycomp=c;this.offset=Element.cumulativeOffset(b);return(c>=this.offset[1]&&c<this.offset[1]+b.offsetHeight&&a>=this.offset[0]&&a<this.offset[0]+b.offsetWidth)},withinIncludingScrolloffsets:function(b,a,d){var c=Element.cumulativeScrollOffset(b);this.xcomp=a+c[0]-this.deltaX;this.ycomp=d+c[1]-this.deltaY;this.offset=Element.cumulativeOffset(b);return(this.ycomp>=this.offset[1]&&this.ycomp<this.offset[1]+b.offsetHeight&&this.xcomp>=this.offset[0]&&this.xcomp<this.offset[0]+b.offsetWidth)},overlap:function(b,a){if(!b){return 0}if(b=="vertical"){return((this.offset[1]+a.offsetHeight)-this.ycomp)/a.offsetHeight}if(b=="horizontal"){return((this.offset[0]+a.offsetWidth)-this.xcomp)/a.offsetWidth}},cumulativeOffset:Element.Methods.cumulativeOffset,positionedOffset:Element.Methods.positionedOffset,absolutize:function(a){Position.prepare();return Element.absolutize(a)},relativize:function(a){Position.prepare();return Element.relativize(a)},realOffset:Element.Methods.cumulativeScrollOffset,offsetParent:Element.Methods.getOffsetParent,page:Element.Methods.viewportOffset,clone:function(b,c,a){a=a||{};return Element.clonePosition(c,b,a)}};if(!document.getElementsByClassName){document.getElementsByClassName=function(b){function a(c){return c.blank()?null:"[contains(concat(' ', @class, ' '), ' "+c+" ')]"}b.getElementsByClassName=Prototype.BrowserFeatures.XPath?function(c,e){e=e.toString().strip();var d=/\s/.test(e)?$w(e).map(a).join(""):a(e);return d?document._getElementsByXPath(".//*"+d,c):[]}:function(e,f){f=f.toString().strip();var g=[],h=(/\s/.test(f)?$w(f):null);if(!h&&!f){return g}var c=$(e).getElementsByTagName("*");f=" "+f+" ";for(var d=0,k,j;k=c[d];d++){if(k.className&&(j=" "+k.className+" ")&&(j.include(f)||(h&&h.all(function(i){return !i.toString().blank()&&j.include(" "+i+" ")})))){g.push(Element.extend(k))}}return g};return function(d,c){return $(c||document.body).getElementsByClassName(d)}}(Element.Methods)}Element.ClassNames=Class.create();Element.ClassNames.prototype={initialize:function(a){this.element=$(a)},_each:function(b,a){this.element.className.split(/\s+/).select(function(c){return c.length>0})._each(b,a)},set:function(a){this.element.className=a},add:function(a){if(this.include(a)){return}this.set($A(this).concat(a).join(" "))},remove:function(a){if(!this.include(a)){return}this.set($A(this).without(a).join(" "))},toString:function(){return $A(this).join(" ")}};Object.extend(Element.ClassNames.prototype,Enumerable);(function(){window.Selector=Class.create({initialize:function(a){this.expression=a.strip()},findElements:function(a){return Prototype.Selector.select(this.expression,a)},match:function(a){return Prototype.Selector.match(a,this.expression)},toString:function(){return this.expression},inspect:function(){return"#<Selector: "+this.expression+">"}});Object.extend(Selector,{matchElements:function(f,g){var a=Prototype.Selector.match,d=[];for(var c=0,e=f.length;c<e;c++){var b=f[c];if(a(b,g)){d.push(Element.extend(b))}}return d},findElement:function(f,g,b){b=b||0;var a=0,d;for(var c=0,e=f.length;c<e;c++){d=f[c];if(Prototype.Selector.match(d,g)&&b===a++){return Element.extend(d)}}},findChildElements:function(b,c){var a=c.toArray().join(", ");return Prototype.Selector.select(a,b||document)}})})();
/*! RESOURCE: /scripts/lib/glide_updates/prototype.js */
Object.extendsObject = function() {
return Class.create.apply(null, arguments).prototype;
}
Prototype.ScriptFragmentDetailed = '<script(?:[^>]*type=\"([^>]*?)\")?(?:[^>]*src=\"([^>]*?)\")?[^>]*>([\\S\\s]*?)<\/script>';
var g_evalScriptCache = {};
Object.extend(String.prototype, (function() {
function extractScriptsDetailed() {
var matchAll = new RegExp(Prototype.ScriptFragmentDetailed, 'img');
var matchOne = new RegExp(Prototype.ScriptFragmentDetailed, 'im');
return (this.match(matchAll) || []).map(function(scriptTag) {
var m = scriptTag.match(matchOne) || [ '', '', '', '' ];
if (m[1] == 'application/xml')
return;
if (m[1] == 'text/html')
return;
if(m[1] == 'text/ng-template')
return;
return {
script: m[3],
src: m[2]
};
});
}
function evalScripts(evalGlobal) {
(function _executer(scripts) {
if (!scripts || scripts.length == 0)
return;
var script = scripts.shift();
if (!script)
return _executer(scripts);
if (script.src) {
if (!g_evalScriptCache[script.src]) {
g_evalScriptCache[script.src] = {
state : 'loading',
scripts : scripts
};
ajaxRequest(script.src,	null, true,	function(r) {
g_evalScriptCache[script.src].state = 'loaded';
var toEvalScripts = g_evalScriptCache[script.src].scripts;
if (r && r.responseText)
evalScript(r.responseText, evalGlobal);
return _executer(toEvalScripts);
});
}
else if (g_evalScriptCache[script.src].state == 'loading') {
g_evalScriptCache[script.src].scripts = g_evalScriptCache[script.src].scripts.concat(scripts);
return;
} else if (g_evalScriptCache[script.src].state == 'loaded')
return _executer(scripts);
} else {
if (script.script)
evalScript(script.script, evalGlobal);
return _executer(scripts);
}
})(this.extractScriptsDetailed());
}
return {
evalScripts: evalScripts,
extractScriptsDetailed: extractScriptsDetailed
};
})());
function evalScript(s, evalGlobal) {
if (s.length == 0)
return;
if (!evalGlobal)
return eval(s);
if (window.execScript)
return window.execScript(s);
return window.eval ? window.eval(s) : eval(s);
}
if (document.getElementsByClassName && typeof Element.Methods.getElementsByClassName === "function")
document.getElementsByClassName = function(instanceMethods) {
function iter(name) {
return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
}
instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ? function(element, className) {
className = className.toString().strip();
var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
} : function(element, className) {
className = className.toString().strip();
var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
if (!classNames && !className)
return elements;
if (Object.isString(element))
element = document.getElementById(element);
Element.extend(element);
var nodes = element.getElementsByTagName('*');
className = ' ' + className + ' ';
for (var i = 0, child, cn; child = nodes[i]; i++) {
if (child.className && (cn = ' ' + child.className + ' ')
&& (cn.include(className) || (classNames && classNames.all(function(name) {
return !name.toString().blank() && cn.include(' ' + name + ' ');
}))))
elements.push(Element.extend(child));
}
return elements;
};
return function(className, parentElement) {
return $(parentElement || document.body).getElementsByClassName(className);
};
}(Element.Methods);
Object.equals = function(o1, o2) {
var i1 = 0, i2 = 0;
for (var p in o1) {
if (!o1 || !o2 || typeof o1[p] !== typeof o2[p] || ((o1[p] === null) !== (o2[p] === null)))
return false;
switch (typeof o1[p]) {
case 'undefined':
if (typeof o2[p] != 'undefined')
return false;
break;
case 'object':
if (o1[p] !== null && o2[p] !== null && (o1[p].constructor.toString() !== o2[p].constructor.toString() || !Object.equals(o1[p], o2[p])))
return false;
break;
case 'function':
if (p != 'equals' && o1[p].toString() != o2[p].toString())
return false;
break;
default:
if (o1[p] !== o2[p])
return false;
}
i1++;
}
for (var p in o2) i2++;
if (i1 != i2)
return false;
return true;
}
document.viewport['getDimensions'] = function() {
var el = window.document.compatMode === 'CSS1Compat' && (!Prototype.Browser.Opera ||
window.parseFloat(window.opera.version()) < 9.5) ? window.document.documentElement : window.document.body;
return { width: el.clientWidth, height: el.clientHeight };
};
;
/*! RESOURCE: /scripts/lib/glide_updates/prototype.template.js */
var Template = Class.create({
initialize: function (template) {
this.template = template.toString();
this.pattern = /(^|.|\r|\n)(#\{((JS|HTML):)?(.*?)\})/;
},
evaluate: function (object) {
if (object && Object.isFunction(object.toTemplateReplacements))
object = object.toTemplateReplacements();
return this.template.gsub(this.pattern, function (match) {
if (object === null)
return (match[1] + '');
var before = match[1] || '';
if (before ==='\\')
return match[2];
var ctx = object, expr = match[5], escape = match[4],
pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;
match = pattern.exec(expr);
if (match === null)
return before;
while (match != null) {
var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
ctx = ctx[comp];
if (null === ctx || '' === match[3])
break;
expr = expr.substring('[' === match[3] ? match[1].length : match[0].length);
match = pattern.exec(expr);
}
ctx = ctx || '';
switch (escape || '') {
case 'HTML':
ctx = ctx.replace(/'/g, '&#39;').replace(/"/g, '&#34;').replace(/&(?![#|l|g])/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
break;
case 'JS':
ctx = ctx.replace(/'/g, '&#39;').replace(/"/g, '&#34;');
break;
}
return before + String.interpret(ctx);
});
}
});
var XMLTemplate = Class.create(Template, {
initialize: function ($super, id) {
var s = $(id);
$super(s && s.innerHTML ? s.innerHTML.replace(/%7B/g, '{').replace(/%7D/g, '}') : '');
},
toString: function () {
'XMLTemplate';
}
});
;
/*! RESOURCE: /scripts/lib/glide_updates/prototype.plugin.js */
var Plugin = (function() {
function create(name) {
var args = $A(arguments);
args.shift();
var klass = function(argumentArray) {
this.initialize.apply(this, argumentArray);
};
Object.extend(klass, Class.Methods);
Object.extend(klass.prototype, args[0] || {});
if (!klass.prototype.initialize)
klass.prototype.initialize = Prototype.emptyFunction;
klass.prototype.constructor = klass;
var methods = {};
methods[name] = function(elem) {
new klass(arguments);
return elem;
}.bind(this);
Element.addMethods(methods);
};
return {
create: create
};
})();
;
/*! RESOURCE: /scripts/lib/labjs/LAB.min.js */
/*! LAB.js (LABjs :: Loading And Blocking JavaScript)
    v2.0.3 (c) Kyle Simpson
    MIT License
*/
(function(o){var K=o.$LAB,y="UseLocalXHR",z="AlwaysPreserveOrder",u="AllowDuplicates",A="CacheBust",B="BasePath",C=/^[^?#]*\//.exec(location.href)[0],D=/^\w+\:\/\/\/?[^\/]+/.exec(C)[0],i=document.head||document.getElementsByTagName("head"),L=(o.opera&&Object.prototype.toString.call(o.opera)=="[object Opera]")||("MozAppearance"in document.documentElement.style),q=document.createElement("script"),E=typeof q.preload=="boolean",r=E||(q.readyState&&q.readyState=="uninitialized"),F=!r&&q.async===true,M=!r&&!F&&!L;function G(a){return Object.prototype.toString.call(a)=="[object Function]"}function H(a){return Object.prototype.toString.call(a)=="[object Array]"}function N(a,c){var b=/^\w+\:\/\//;if(/^\/\/\/?/.test(a)){a=location.protocol+a}else if(!b.test(a)&&a.charAt(0)!="/"){a=(c||"")+a}return b.test(a)?a:((a.charAt(0)=="/"?D:C)+a)}function s(a,c){for(var b in a){if(a.hasOwnProperty(b)){c[b]=a[b]}}return c}function O(a){var c=false;for(var b=0;b<a.scripts.length;b++){if(a.scripts[b].ready&&a.scripts[b].exec_trigger){c=true;a.scripts[b].exec_trigger();a.scripts[b].exec_trigger=null}}return c}function t(a,c,b,d){a.onload=a.onreadystatechange=function(){if((a.readyState&&a.readyState!="complete"&&a.readyState!="loaded")||c[b])return;a.onload=a.onreadystatechange=null;d()}}function I(a){a.ready=a.finished=true;for(var c=0;c<a.finished_listeners.length;c++){a.finished_listeners[c]()}a.ready_listeners=[];a.finished_listeners=[]}function P(d,f,e,g,h){setTimeout(function(){var a,c=f.real_src,b;if("item"in i){if(!i[0]){setTimeout(arguments.callee,25);return}i=i[0]}a=document.createElement("script");if(f.type)a.type=f.type;if(f.charset)a.charset=f.charset;if(h){if(r){e.elem=a;if(E){a.preload=true;a.onpreload=g}else{a.onreadystatechange=function(){if(a.readyState=="loaded")g()}}a.src=c}else if(h&&c.indexOf(D)==0&&d[y]){b=new XMLHttpRequest();b.onreadystatechange=function(){if(b.readyState==4){b.onreadystatechange=function(){};e.text=b.responseText+"\n//@ sourceURL="+c;g()}};b.open("GET",c);b.send()}else{a.type="text/cache-script";t(a,e,"ready",function(){i.removeChild(a);g()});a.src=c;i.insertBefore(a,i.firstChild)}}else if(F){a.async=false;t(a,e,"finished",g);a.src=c;i.insertBefore(a,i.firstChild)}else{t(a,e,"finished",g);a.src=c;i.insertBefore(a,i.firstChild)}},0)}function J(){var l={},Q=r||M,n=[],p={},m;l[y]=true;l[z]=false;l[u]=false;l[A]=false;l[B]="";function R(a,c,b){var d;function f(){if(d!=null){d=null;I(b)}}if(p[c.src].finished)return;if(!a[u])p[c.src].finished=true;d=b.elem||document.createElement("script");if(c.type)d.type=c.type;if(c.charset)d.charset=c.charset;t(d,b,"finished",f);if(b.elem){b.elem=null}else if(b.text){d.onload=d.onreadystatechange=null;d.text=b.text}else{d.src=c.real_src}i.insertBefore(d,i.firstChild);if(b.text){f()}}function S(c,b,d,f){var e,g,h=function(){b.ready_cb(b,function(){R(c,b,e)})},j=function(){b.finished_cb(b,d)};b.src=N(b.src,c[B]);b.real_src=b.src+(c[A]?((/\?.*$/.test(b.src)?"&_":"?_")+~~(Math.random()*1E9)+"="):"");if(!p[b.src])p[b.src]={items:[],finished:false};g=p[b.src].items;if(c[u]||g.length==0){e=g[g.length]={ready:false,finished:false,ready_listeners:[h],finished_listeners:[j]};P(c,b,e,((f)?function(){e.ready=true;for(var a=0;a<e.ready_listeners.length;a++){e.ready_listeners[a]()}e.ready_listeners=[]}:function(){I(e)}),f)}else{e=g[0];if(e.finished){j()}else{e.finished_listeners.push(j)}}}function v(){var e,g=s(l,{}),h=[],j=0,w=false,k;function T(a,c){a.ready=true;a.exec_trigger=c;x()}function U(a,c){a.ready=a.finished=true;a.exec_trigger=null;for(var b=0;b<c.scripts.length;b++){if(!c.scripts[b].finished)return}c.finished=true;x()}function x(){while(j<h.length){if(G(h[j])){try{h[j++]()}catch(err){}continue}else if(!h[j].finished){if(O(h[j]))continue;break}j++}if(j==h.length){w=false;k=false}}function V(){if(!k||!k.scripts){h.push(k={scripts:[],finished:true})}}e={script:function(){for(var f=0;f<arguments.length;f++){(function(a,c){var b;if(!H(a)){c=[a]}for(var d=0;d<c.length;d++){V();a=c[d];if(G(a))a=a();if(!a)continue;if(H(a)){b=[].slice.call(a);b.unshift(d,1);[].splice.apply(c,b);d--;continue}if(typeof a=="string")a={src:a};a=s(a,{ready:false,ready_cb:T,finished:false,finished_cb:U});k.finished=false;k.scripts.push(a);S(g,a,k,(Q&&w));w=true;if(g[z])e.wait()}})(arguments[f],arguments[f])}return e},wait:function(){if(arguments.length>0){for(var a=0;a<arguments.length;a++){h.push(arguments[a])}k=h[h.length-1]}else k=false;x();return e}};return{script:e.script,wait:e.wait,setOptions:function(a){s(a,g);return e}}}m={setGlobalDefaults:function(a){s(a,l);return m},setOptions:function(){return v().setOptions.apply(null,arguments)},script:function(){return v().script.apply(null,arguments)},wait:function(){return v().wait.apply(null,arguments)},queueScript:function(){n[n.length]={type:"script",args:[].slice.call(arguments)};return m},queueWait:function(){n[n.length]={type:"wait",args:[].slice.call(arguments)};return m},runQueue:function(){var a=m,c=n.length,b=c,d;for(;--b>=0;){d=n.shift();a=a[d.type].apply(null,d.args)}return a},noConflict:function(){o.$LAB=K;return m},sandbox:function(){return J()}};return m}o.$LAB=J();(function(a,c,b){if(document.readyState==null&&document[a]){document.readyState="loading";document[a](c,b=function(){document.removeEventListener(c,b,false);document.readyState="complete"},false)}})("addEventListener","DOMContentLoaded")})(this);
/*! RESOURCE: /scripts/ScriptLoader.js */
var ScriptLoader = {
getScripts: function(scripts, callback) {
if (!(scripts instanceof Array))
scripts = [ scripts ];
for (var i = 0; i < scripts.length; i++)
$LAB.queueScript(scripts[i]);
$LAB.queueWait(callback);
$LAB.runQueue();
}
};
;
/*! RESOURCE: /scripts/consts/GlideEvent.js */
var GlideEvent = {
WINDOW_CLICKED:					'glide:window_clicked',
WINDOW_BLURRED:					'glide:window_blurred',
WINDOW_FOCUSED:					'glide:window_focused',
IMAGE_PICKED:					'glide:image_picked',
NAV_MANAGER_LOADED:				'glide:nav_manager_loaded',
NAV_FORM_DIRTY_CANCEL_STAY:		'glide:nav_form_dirty_cancel_stay',
NAV_SYNC_LIST_WITH_FORM:		'glide:nav_sync_list_with_form',
NAV_LOAD_FORM_FROM_LIST:		'glide:nav_load_form_from_list',
NAV_SAVE_PREFERENCES:			'glide:nav_save_preferences',
NAV_UPDATE_EDGE_BUTTON_STATES:	'glide:nav_update_edge_button_states',
NAV_OPEN_URL:					'glide:nav_open_url',
NAV_ADD_BOOKMARK:				'glide:nav_add_bookmark',
NAV_REMOVE_BOOKMARK:			'glide:nav_remove_bookmark',
NAV_UPDATE_BOOKMARK:			'glide:nav_update_bookmark',
NAV_DRAGGING_BOOKMARK_START:	'glide:nav_dragging_bookmark_start',
NAV_DRAGGING_BOOKMARK_STOP:		'glide:nav_dragging_bookmark_stop',
NAV_HIDE_ALL_TOOLTIPS:			'glide:nav_hide_all_tooltips',
NAV_QUEUE_BOOKMARK_OPEN_FLYOUT:	'glide:nav_queue_bookmark_open_flyout',
NAV_OPEN_BOOKMARK:              'glide:nav_open_bookmark',
NAV_BOOKMARK_ADDED:				'glide:nav_bookmark_added',
NAV_BOOKMARK_REMOVED:			'glide:nav_bookmark_removed',
NAV_EAST_PANE_RESIZED:			'glide:nav_east_pane_resized',
NAV_ADD_FLYOUT:					'glide:nav_add_flyout',
NAV_REMOVE_FLYOUT:				'glide:nav_remove_flyout',
NAV_TOGGLE_FLYOUT:				'glide:nav_toggle_flyout',
NAV_HIDE_FLYOUTS:				'glide:nav_hide_flyouts',
NAV_PANE_CLICKED:				'glide:nav_window_clicked'
};
;
/*! RESOURCE: /scripts/functions/textutil.js */
function htmlEscape(s) {
return s.replace(/&/g,"&amp;").replace(/'/g,"&#39;").replace(/"/g,"&quot;").replace(/</g,"&#60;").replace(/>/g,"&#62;");
}
function htmlEscapeQuote(s) {
return s.replace(/'/g,"&#39;");
}
function htmlEscapeDoubleQuote(s) {
return s.replace(/"/g,"&quot;");
}
function loadXML(r) {
var xml = r.responseXML;
if (typeof xml != 'undefined')
return xml;
var dom = null;
if (window.DOMParser) {
try {
dom = (new DOMParser()).parseFromString(r, 'text/xml');
}
catch (e) { dom = null; }
} else if (window.ActiveXObject) {
try {
dom = new ActiveXObject('Microsoft.XMLDOM');
dom.async = false;
if (!dom.loadXML(r))
jslog('ERROR: ' + dom.parseError.reason + dom.parseError.srcText);
} catch (e) { dom = null; }
} else
jslog('ERROR: Cannot parse xml string - "' + r + '".');
return dom;
}
window.sanitizeHtml = function sanitizeHtml(text) {
if (!text)
return text;
var uriAttrs = 'background,cite,href,longdesc,src,xlink:href';
var htmlAttrs = 'abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +
'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +
'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +
'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +
'valign,value,vspace,width';
var svgAttrs = 'accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +
'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +
'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +
'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +
'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +
'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +
'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +
'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +
'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +
'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +
'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +
'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +
'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +
'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +
'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan';
var validAttrs = toMap([uriAttrs, svgAttrs.toLowerCase(), htmlAttrs]);
function toMap(attrs) {
var obj = {};
attrs.forEach(function(items) {
items.split(',').forEach(function(item) {
obj[item] = true;
});
});
return obj;
}
function sanitizeElement(elem) {
if (!elem || elem.nodeType !== Node.ELEMENT_NODE)
return;
var invalidAttrs = [];
for (var i=0; i<elem.attributes.length; i++) {
var attr = elem.attributes[i].nodeName;
if (validAttrs[attr.toLowerCase()] !== true)
invalidAttrs.push(attr);
}
invalidAttrs.forEach(function(attr) {
elem.removeAttribute(attr);
});
elem.childNodes.forEach(function(node) {
sanitizeElement(node);
});
}
text = text.replace(/(<script\b[^>]*>[\s\S]*?<\/script>)/gmi, "");
var xmlDoc = new DOMParser().parseFromString(text, "text/html");
var nodes = xmlDoc.documentElement.childNodes;
nodes.forEach(function(node) {
sanitizeElement(node);
});
return xmlDoc.getElementsByTagName('body')[0].innerHTML;
}
;
/*! RESOURCE: /scripts/doctype/functions_bootstrap14.js */
var userAgentLowerCase = navigator.userAgent.toLowerCase();
var isMSIE = userAgentLowerCase.indexOf("msie") >= 0;
var ie5 = false;
var isMSIE6 = false
var isMSIE7 = false;
var isMSIE8 = false;
var isMSIE9 = userAgentLowerCase.indexOf("msie 9") >= 0;
var isMSIE10 = userAgentLowerCase.indexOf("msie 10") >= 0;
var isMSIE11 = userAgentLowerCase.indexOf("rv:11.0") > 0;
var isEdge = userAgentLowerCase.indexOf("edge") >= 0;
var isChrome = userAgentLowerCase.indexOf("chrome") >= 0;
var isFirefox = userAgentLowerCase.indexOf("firefox") >= 0;
var isSafari = !isChrome && (userAgentLowerCase.indexOf("safari") >= 0);
var isSafari5 = false;
if (isSafari) {
try {
var reSafariVersion = new RegExp("version/([\\d\\.]{3,5}) safari/");
var results = reSafariVersion.exec( userAgentLowerCase );
if ( results.length > 0 ) {
var reMajor = new RegExp("([\\d]).");
var results = reMajor.exec(results[1]);
if ( results.length > 0 ) {
var mv = parseInt( results[1] );
isSafari5 = mv < 6;
}
}
} catch(e) { }
}
var isMacintosh = userAgentLowerCase.indexOf("macintosh") >= 0;
var isWebKit = navigator.userAgent.indexOf("WebKit") >= 0;
var isTouchDevice = navigator.userAgent.indexOf('iPhone') > -1 || navigator.userAgent.indexOf('iPad') > -1;
var GJSV = 1.0;
(function(){
var defined = {};
var waiting = {};
function listen(id, then) {
if(typeof id !== 'string')
listenMany(id, then);
if(defined[id]) {
return then( defined[id] );
}
if(!waiting[id]) {
waiting[id] = [];
}
waiting[id].push(then);
}
function emit(id, data) {
defined[id] = data;
var listeners = waiting[id];
if(!listeners) {
return;
}
for(var i = 0, l = listeners.length; i < l; i++) {
listeners[i](data);
}
waiting[id] = [];
}
function listenMany(dependencies, then) {
if(typeof dependencies.length === 'undefined') {
return;
}
var unDef = { isUndefined:true };
var resolved = [];
function resolve(dep, i) {
resolved[i] = dep;
for(var i = 0, l = resolved.length; i<l; i++) {
if(resolved[i] === unDef)
return;
}
then.apply(undefined, resolved);
};
dependencies.forEach(function(depId, idx) {
resolved[idx] = unDef;
listen(depId, function(dep) {
resolve(dep, idx);
});
});
}
window.CachedEvent = {
after: listen,
emit: emit
};
})();
var g_afterPageLoadedFunctions = [];
window.g_render_functions = window.g_render_functions || [];
window.g_load_functions = window.g_load_functions || [];
window.g_late_load_functions = window.g_late_load_functions || [];
function runBeforeRender() {
_runInlineScripts();
jslog("runBeforeRender");
for (var i = 0; i != g_render_functions.length; i++) {
var f = g_render_functions[i];
f.call();
}
}
function _runInlineScripts() {
var inlineScripts = $j('script[type="application/javascript-deferred"]');
jslog("running inline scripts, count: " + inlineScripts.length);
inlineScripts.each(function(index, item) {
var script = $j(item).text();
try {
$j.globalEval(script);
} catch (e) {
jslog("error in script " + script);
}
});
}
window.g_hasRunAfterAllLoaded = false;
function runAfterAllLoaded() {
if (g_hasRunAfterAllLoaded) {
jslog("Redundant call to runAfterAllLoaded");
return;
}
g_hasRunAfterAllLoaded = true;
var sw = new StopWatch();
jslog("runAfterAllLoaded, functions: " + g_load_functions.length);
for (var i = 0; i != g_load_functions.length; i++) {
var f = g_load_functions[i];
var t = new Date().getTime();
f.call();
t = new Date().getTime() - t;
if (t > 5000)
jslog("Time: " + t + " for: [" + i + "] " + f);
}
jslog("late load functions: " + g_late_load_functions.length);
for (var i = 0; i != g_late_load_functions.length; i++) {
var f = g_late_load_functions[i];
f.call();
}
window.self.loaded = true;
sw.jslog("runAfterAllLoaded finished");
}
function addLoadEvent(func) {
if (window.self.loaded) {
setTimeout(func, 0);
return;
}
g_load_functions.push(func);
}
function addLateLoadEvent(func) {
if (window.self.loaded) {
setTimeout(func, 0);
return;
}
g_late_load_functions.push(func);
}
function pageLoaded() {
CustomEvent.observe("body_clicked", contextMenuHide);
setMandatoryExplained.defer();
}
function addRenderEvent(func) {
if (isRenderEventRegistered(func))
return;
addRenderEventToArray(func);
}
function addRenderEventToArray(func) {
if (window.self.loaded) {
setTimeout(func, 0);
return;
}
g_render_functions.push(func);
}
function isRenderEventRegistered(func) {
var s = func.toString();
for(var i = 0; i < g_render_functions.length; i++)
if (g_render_functions[i].toString() == s)
return true;
return false;
}
function addRenderEventLogged(func, name, funcname) {
addRenderEventToArray(function() {
CustomEvent.fire('glide_optics_inspect_put_cs_context', funcname, 'load');
var sw = new StopWatch();
var __rtmr = new Date();
try {
func();
} catch(e) {
jslog('***************************************************');
jslog('A script has encountered an error in render events');
jslog(e);
jslog('Script ends. Continuing happily');
jslog('***************************************************');
}
CustomEvent.fire('page_timing', { name: 'CSOL', child: { description: name.substr(7), sys_id: g_event_handler_ids[funcname], source_table: 'sys_script_client' }, startTime: __rtmr, win: window });
sw.jslog(name);
CustomEvent.fire('glide_optics_inspect_pop_cs_context', funcname, 'load');
});
}
function addTopRenderEvent(func) {
if (window.self.loaded) {
setTimeout(func, 0);
return;
}
g_render_functions.unshift(func);
}
function addAfterPageLoadedEvent(func) {
if (window.self.loaded) {
setTimeout(func, 0);
return;
}
g_afterPageLoadedFunctions.push(func);
}
function runAfterPageLoadedEvents() {
jslog("after page loaded starting");
var sw = new StopWatch();
for (var i = 0; i != g_afterPageLoadedFunctions.length; i++) {
var f = g_afterPageLoadedFunctions[i];
f.call();
}
sw.jslog("after page loaded complete, functions called: " + g_afterPageLoadedFunctions.length);
g_afterPageLoadedFunctions = [];
}
addLateLoadEvent(function() {
setTimeout(runAfterPageLoadedEvents, 30);
});
function addUnloadEvent(func) {
Event.observe(window, 'unload', func, false);
}
function addTinymceLoadEvent(id, func) {
CachedEvent.after('tinyeditor_init.'+id, func);
}
function fireTinymceLoadEvent(id, ed) {
CachedEvent.emit('tinyeditor_init.'+id, ed);
}
function gel(id) {
if (typeof id != 'string')
return id;
return document.getElementById(id);
}
function cel(name, parent) {
var e = document.createElement(name);
if (arguments.length > 1)
parent.appendChild(e);
return e;
}
function rel(id) {
var e = gel(id);
if (e)
e.parentNode.removeChild(e);
}
function addChild(element) {
getFormContentParent().appendChild(element);
}
function inner(id, data) {
var el = gel(id);
if (el != null)
el.innerHTML = data;
}
function clearNodes(t) {
if (!t)
return;
while (t.hasChildNodes())
t.removeChild(t.childNodes[0]);
}
function getTopWindow() {
var topWindow = window.self;
try {
while (topWindow.GJSV && topWindow != topWindow.parent && topWindow.parent.GJSV) {
topWindow = topWindow.parent;
}
} catch (e) {}
return topWindow;
}
function inFrame() {
return getTopWindow() != window.self;
}
function getMainWindow() {
var topWindow = getTopWindow();
return topWindow['gsft_main'];
}
function getMainFormWindow() {
var topWindow = getTopWindow();
return topWindow['gsft_main_form'];
}
function getNavWindow() {
var topWindow = getTopWindow();
return topWindow['gsft_nav'];
}
function reloadWindow(win, preventStackClearance) {
var href = win.location.href;
var len = href.length;
if (href.endsWith('#') && len > 2) {
if (win.frames['iframe_live_feed']) {
href = href.substring(0, len-2);
} else {
href = href.substring(0, len-1);
}
}
href = addDomainParameters(href);
if (preventStackClearance) {
var url = new GlideURL(href);
url.setEncode(false);
url.deleteParam('sysparm_clear_stack');
href = url.getURL();
}
win.location.href = href;
}
function addDomainParameters(href) {
var url = new GlideURL(href);
if (url.getParam('sysparm_domain') == 'picker') {
url.deleteParam('sysparm_domain');
} else {
var domainElement = gel('sysparm_domain');
if (domainElement) {
if (domainElement.value != 'picker') {
url.addParam('sysparm_domain', domainElement.value);
var domainScope = gel('sysparm_domain_scope');
if (domainScope) {
url.addParam('sysparm_domain_scope', domainScope.value);
}
}
}
}
url.addParam('sysparm_nostack', 'true');
url.setEncode(false);
return url.getURL();
}
function addOnSubmitEvent(form, func, funcname) {
if (!form)
return;
var oldonsubmit = form.onsubmit;
if (typeof form.onsubmit != 'function')
form.onsubmit = func;
else {
form.onsubmit = function() {
var formFuncCalled = false;
try {
if (oldonsubmit() == false)
return false;
CustomEvent.fire('glide_optics_inspect_put_cs_context', funcname, 'submit');
formFuncCalled = true;
var returnvalue = func();
formFuncCalled = false;
CustomEvent.fire('glide_optics_inspect_pop_cs_context', funcname, 'submit');
if (returnvalue == false)
return false;
return true;
}
catch (ex) {
if (formFuncCalled)
CustomEvent.fire('glide_optics_inspect_pop_cs_context', funcname, 'load');
formFuncError("onSubmit", func, ex);
return false;
}
}
}
form = null;
}
function formFuncError(type, func, ex) {
var funcStr = func.toString();
funcStr = funcStr.replace(/onSubmit[a-fA-F0-9]{32}\(/, "onSubmit(");
var msg;
if (g_user.hasRole("client_script_admin"))
msg = type + " script error: " + ex.toString() + ":<br/>" + funcStr.replace(/\n/g, "<br/>").replace(/\s/g, "&nbsp;");
else
msg = "Submit canceled due to a script error - please contact your System Administrator";
g_form.addErrorMessage(msg);
CustomEvent.fire('glideform:script_error', type + " script error: " + ex.toString() + "\n" + funcStr);
}
function hide(element) {
var e = typeof element === "string" ? gel(element) : element;
if (!e)
return;
e.style.display = 'none';
_frameChanged();
}
function show(element) {
var e = typeof element === "string" ? gel(element) : element;
if (!e)
return;
if (e.tagName == "TR")
e.style.display = 'table-row';
else
e.style.display = 'block';
_frameChanged();
}
function hideObject(o, visibilityOnly) {
if (!o)
return;
o.style.visibility = "hidden";
if (!visibilityOnly)
o.style.display = "none";
_frameChanged();
}
function showObject(o, visibilityOnly) {
if (!o)
return;
o.style.visibility = "visible";
if (!visibilityOnly)
o.style.display = "block";
_frameChanged();
}
function showObjectInline(o) {
if (!o)
return;
o.style.visibility="visible";
o.style.display = "inline";
_frameChanged();
}
function showObjectInlineBlock(o) {
if (!o)
return;
o.style.visibility="visible";
o.style.display = "inline-block";
_frameChanged();
}
function focusFirstElement(form) {
try {
var e = findFirstEditableElement(form);
if (e) {
Field.activate(e);
triggerEvent(e, 'focus', true);
}
} catch (ex) {}
}
function findFirstEditableElement(form) {
var tags = ['input', 'select', 'textarea'];
var elements = form.getElementsByTagName('*');
for (var i = 0, n = elements.length; i < n; i++) {
var element = elements[i];
if (element.type == 'hidden')
continue;
var tagName = element.tagName.toLowerCase();
if (!tags.include(tagName))
continue;
element = $(element);
var formGroup = element.up('.form-group');
if (!element.disabled &&
(window.g_accessibility ? true : !element.readOnly) &&
element.style.visibility != 'hidden' &&
element.style.display != 'none' &&
element.offsetParent != null &&
formGroup &&
formGroup.style.display != 'none')
return element;
}
return null;
}
function triggerEvent(element, eventType, canBubble, memo) {
canBubble = (typeof(canBubble) == undefined) ? true : canBubble;
if (element && element.disabled && eventType == "change" && element.onchange) {
element.onchange.call(element);
return;
}
if (element.fireEvent) {
element.fireEvent('on' + eventType);
}  else {
var evt = document.createEvent('HTMLEvents');
evt.initEvent(eventType, canBubble, true);
evt.memo = memo;
element.dispatchEvent(evt, true);
}
}
var g_form_dirty_message;
function onWindowClose() {
if (typeof g_form == 'undefined')
return;
if (!g_form.submitted && g_form.modified) {
g_submitted = false;
setTimeout(function() {
CustomEvent.fireTop('glide:nav_form_dirty_cancel_stay', window);
}, 750);
return g_form_dirty_message;
}
g_form.submitted = false;
}
function jslog(msg, src, dateTime) {
try {
if (!src) {
var path = window.self.location.pathname;
src = path.substring(path.lastIndexOf('/') + 1);
}
if (window.self.opener && window != window.self.opener) {
if (window.self.opener.jslog) {
window.self.opener.jslog(msg, src, dateTime);
}
} else if (parent && parent.jslog && jslog != parent.jslog) {
parent.jslog(msg, src, dateTime);
} else if (parent.parent && parent.parent.jslog && jslog != parent.parent.jslog) {
parent.parent.jslog(msg, src, dateTime);
} else {
if (window.console && window.console.log)
console.log(msg);
}
} catch (e) {}
}
function getXMLIsland(name) {
var xml = gel(name);
if (xml == null)
return null;
xml = "<xml>" + xml.innerHTML + "</xml>";
xml = loadXML(xml);
return xml;
}
function lock(me, ref, edit_id, nonedit_id, current_value_id, update_id, keep_focus) {
if (me)
me.style.display = "none";
var unlock = gel(ref + '_unlock');
unlock.style.display = "";
var edit_span = gel(edit_id);
edit_span.style.display = "none";
var nonedit_span = gel(nonedit_id);
nonedit_span.style.display = "inline-block";
var current_value = gel(current_value_id);
var the_value = "";
if (current_value.options) {
for(var i=0; i<current_value.options.length ;i++) {
if (i > 0)
the_value += g_glide_list_separator;
the_value += current_value.options[i].text;
}
}
else
the_value = current_value.value;
var update_element = gel(update_id);
if (update_element.href) {
update_element.href = the_value;
update_element.style.removeProperty('display');
}
update_element.innerHTML = htmlEscape(the_value);
if (keep_focus)
unlock.focus();
}
function unlock(me, ref, edit_id, nonedit_id) {
if (me)
me.style.display = "none";
var unlock = gel(ref + '_lock');
if (unlock)
showObjectInlineBlock(unlock);
var edit_span = gel(edit_id);
edit_span.style.display = "";
var nonedit_span = gel(nonedit_id);
nonedit_span.style.display = "none";
var list_foc = gel("sys_display." + ref);
if (list_foc) {
try {
list_foc.focus();
} catch (e) {
}
}
}
function setMandatoryExplained(enforce) {
var showexp = gel('mandatory_explained');
if (!showexp)
return;
if (enforce || foundAMandatoryField())
showexp.style.display = "inline";
else
showexp.style.display = "none";
}
function foundAMandatoryField() {
var spanTags = document.getElementsByTagName('span');
if (!spanTags)
return false;
for (var c = 0, n = spanTags.length;c != n; ++c) {
var spanTag = spanTags[c];
var id = spanTag.id;
if (!id)
continue;
if (id.indexOf('status.') == 0) {
var mandatory = spanTag.getAttribute("mandatory") + "";
if (mandatory == 'true')
return true;
}
}
return false;
}
var _frameChangedTimer = null;
function _frameChanged() {
if (_frameChangedTimer)
clearTimeout(_frameChangedTimer);
_frameChangedTimer = setTimeout(function(){
_frameChangedTimer = null;
CustomEvent.fire('frame.resized');
CustomEvent.fire('refresh.event');
}, 300);
}
var _returnedValue = null;
var _returnedValueTimeout = null;
function getFormContentParent() {
if (_returnedValue) {
clearTimeout(_returnedValueTimeout);
_returnedValueTimeout = setTimeout(function() {
_returnedValue = null;
}, 2000);
return _returnedValue;
}
var glideOverlay = $(document.body).select("div.glide_overlay");
var exposeMask = $('glide_expose_mask');
var bsModal = document.querySelector('.modal.in');
var validFormElementCount = document.querySelectorAll('.modal.in input:not([type="hidden"])').length;
if (glideOverlay.length > 0 && exposeMask && exposeMask.visible())
_returnedValue = glideOverlay[0];
if (bsModal && validFormElementCount > 0)
return bsModal;
if (typeof g_section_contents == 'undefined' || !g_section_contents)
g_section_contents = $(document.body).select(".section_header_content_no_scroll");
if (g_section_contents.length > 0)
_returnedValue = g_section_contents[0];
else
_returnedValue = document.body;
return _returnedValue;
}
function addClassName(element, name) {
if (!element)
return;
$(element).addClassName(name);
}
function removeClassName(element, name) {
if (!element)
return;
$(element).removeClassName(name);
}
function hasClassName(element, name) {
if (!element)
return;
if (!element.hasClassName)
return;
return $(element).hasClassName(name);
}
function getIFrameDocument(iframe) {
return iframe.contentWindow ? iframe.contentWindow.document : (iframe.contentDocument || null);
}
function writeTitle(element, title) {
element.title = title;
if (element.alt)
element.alt = title;
if (element.getAttribute('disabled') == 'disabled')
element.style.pointerEvents = 'auto';
}
function writeDynamicTitle(element, title) {
element.setAttribute("data-dynamic-title", title);
}
function contextMenuHide(e) {
if (typeof contextHide === 'undefined')
return;
if (!isMSIE && e) {
if (isTouchDevice && !isTouchRightClick(e)) {
if (e.type == 'touchend' && $(e.target).up('.context_menu'))
return;
contextHide();
} else if (isLeftClick(e)) {
contextHide();
}
} else
contextHide();
}
function trim(s) {
return s.replace(/^\s+|\s+$/g,'');
}
function htmlEscape(s) {
return s.replace(/&/g, "&amp;").replace(/'/g, "&#39;").replace(/"/g,
"&quot;").replace(/</g, "&#60;").replace(/>/g, "&#62;");
}
function htmlEscapeQuote(s) {
return s.replace(/'/g, "&#39;");
}
function htmlEscapeDoubleQuote(s) {
return s.replace(/"/g, "&quot;");
}
function loadXML(r) {
var xml = r.responseXML;
if (typeof xml != 'undefined')
return xml;
var dom = null;
try {
dom = new DOMParser().parseFromString(r, 'text/xml');
} catch (e) {}
return dom;
}
if (!window.GwtDateTimePicker) {
window.GwtDateTimePicker = function(name, format, showTime) {
ScriptLoader.getScripts('scripts/classes/GwtDateTimePicker.js',function() {
new GwtDateTimePicker(name, format, showTime);
});
}
}
;
/*! RESOURCE: /scripts/functions/xmlhttp.js */
var isMicrosoftXMLHTTP = false;
var XML_HTTP = "xmlhttp.do";
function AJAXEvaluateSynchronously(expression) {
var ajax = new GlideAjax("AJAXEvaluator");
ajax.addParam("sysparm_expression", expression);
ajax.getXMLWait();
return ajax.getAnswer();
}
function AJAXEvaluate(expression, callbackAndArgs) {
var ajax = new GlideAjax("AJAXEvaluator");
ajax.addParam("sysparm_expression", expression);
ajax.getXML(AJAXEvaluateResponse, "", callbackAndArgs);
}
function AJAXEvaluateResponse(response, callbackAndArgs) {
var xml = response.responseXML;
var answer = xml.documentElement.getAttribute("answer");
if (callbackAndArgs != null) {
var callback = callbackAndArgs;
var args = new Array();
if (typeof callbackAndArgs != "function" && callbackAndArgs.length > 1) {
callback = callbackAndArgs.splice(0, 1)[0];
args = callbackAndArgs;
}
callback.call(answer, answer, response, args);
}
}
function AJAXFunction(func, args, callback, callbackArgs) {
for(var i = 0; i < args.length; i++) {
if (typeof args[i] == "function")
continue;
args[i] = args[i].replace(/"/g, "\\\"");
}
var expression = func + '("' + args.join('","') + '");';
var newArgs = new Array();
newArgs.push(callback);
newArgs = newArgs.concat(callbackArgs);
AJAXEvaluate(expression, newArgs);
}
function serverRequest(url, loadedFunction, args) {
ajaxRequest(url, null, true, loadedFunction, args);
}
function serverRequestWait(url, postString) {
var req = ajaxRequest(url, postString, false);
if (req.status == 200)
return req;
}
function serverRequestPost(url, postString, loadedFunction, args) {
ajaxRequest(url, postString, true, loadedFunction, args);
}
function ajaxRequest(url, postString, async, responseFunction, responseFunctionArgs) {
var req = getRequest();
showLoading();
if (req) {
if (async && (responseFunction != null))
req.onreadystatechange = function() { processReqChange(req, responseFunction, responseFunctionArgs); };
req.open((postString ? "POST" : "GET"), url, async);
if (typeof g_ck != 'undefined' && g_ck != "")
req.setRequestHeader('X-UserToken', g_ck);
if (postString) {
req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
req.send(postString);
} else {
if (isMicrosoftXMLHTTP)
req.send();
else
req.send(null);
}
}
if (!async)
hideLoading();
return req;
}
function getRequest() {
var req = null;
if (window.XMLHttpRequest) {
req = new XMLHttpRequest();
} else if (window.ActiveXObject) {
isMicrosoftXMLHTTP = true;
req = new ActiveXObject("Microsoft.XMLHTTP");
}
return req;
}
function processReqChange(r, docLoadedFunction, docLoadedFunctionArgs) {
if (r.readyState == 4) {
hideLoading();
if (r.status == 200) {
lastActivity = new Date();
docLoadedFunction(r, docLoadedFunctionArgs);
} else {
try {
window.status = "There was a problem retrieving the XML data: " + r.statusText;
} catch (e) { }
}
}
}
function showLoading() {
try {
CustomEvent.fireAll("ajax.loading.start");
} catch(e) {}
}
function hideLoading() {
try {
CustomEvent.fireAll("ajax.loading.end");
} catch(e) {}
}
;
/*! RESOURCE: /scripts/classes/event/GwtObservable.js */
var GwtObservable = Class.create({
initialize: function() {
this.events = {};
},
on: function(name, func) {
if (!func || typeof func != 'function')
return;
this.events = this.events || {};
if (!this.events[name])
this.events[name] = [];
this.events[name].push(func);
},
forward: function(name, element, func) {
GwtObservable.prototype.on.call(this, name, func);
Event.observe(element, name, function(e) {
this.fireEvent(e.type, this, e);
}.bind(this));
},
un: function(name, func) {
if (!this.events[name])
return;
var i = this.events[name].indexOf(func);
if(i !== -1)
this.events[name].splice(i, 1);
},
unAll: function(name) {
if (this.events[name])
delete this.events[name];
},
isFiring: function() {
return this._isFiring;
},
fireEvent: function() {
if (this.suppressEvents === true)
return true;
this.events = this.events || {};
var args = $A(arguments);
var name = args.shift();
var eventList = this.events[name];
if (!eventList)
return true;
var event = eventList.slice();
this._isFiring = true;
for (var i = 0, l = event.length; i < l; i++) {
var ev = event[i];
if (ev == null)
continue;
if (ev.apply(this, args) === false) {
this._isFiring = false;
return false;
}
}
this._isFiring = false;
return true;
},
toString: function() { return 'GwtObservable'; }
});
;
/*! RESOURCE: /scripts/doctype/CustomEventManager.js */
var NOW = NOW || {};
var CustomEventManager = (function (existingCustomEvent) {
"use strict";
var events = (existingCustomEvent && existingCustomEvent.events) || {};
var isFiringFlag = false;
var trace = false;
var suppressEvents = false;
var NOW_MSG = 'NOW.PostMessage';
function observe(eventName, fn){
if (trace)
jslog("$CustomEventManager observing: " + eventName);
on(eventName, fn);
}
function on(name, func) {
if (!func || typeof func !== 'function')
return;
if (typeof name === 'undefined')
return;
if (!events[name])
events[name] = [];
events[name].push(func);
}
function un(name, func) {
if (!events[name])
return;
var idx = -1;
for (var i = 0; i < events[name].length; i++) {
if (events[name][i] === func) {
idx = i;
break;
}
}
if (idx >= 0)
events[name].splice(idx, 1)
}
function unAll(name) {
if (events[name])
delete events[name];
}
function fire(eventName, args){
if (trace)
jslog("$CustomEventManager firing: " + eventName + " args: " + arguments.length);
return fireEvent.apply(null, arguments);
}
function fireUp(eventName, args){
var win = window;
while (win){
try {
if (win.CustomEvent.fireEvent.apply(null, arguments) === false)
return;
win = win.parent === win ? null : win.parent;
}catch(e){
return;
}
}
}
function fireEvent() {
if (suppressEvents)
return true;
var args = Array.prototype.slice.apply(arguments);
var name = args.shift();
var eventList = events[name];
if (!eventList)
return true;
var event = eventList.slice();
isFiringFlag = true;
for (var i = 0, l = event.length; i < l; i++) {
var ev = event[i];
if (!ev)
continue;
if (ev.apply(null, args) === false) {
isFiringFlag = false;
return false;
}
}
isFiringFlag = false;
return true;
}
function isFiring() {
return isFiringFlag;
}
function forward(name, element, func) {
on(name, func);
element.addEventListener(name, function(e) {
fireEvent(e.type, this, e);
}.bind(api));
}
function isOriginInWhiteList(origin, whitelistStr) {
if (!whitelistStr) {
return false;
}
var delimiterRegex = /[\n, ]/;
var whitelist = whitelistStr.split(delimiterRegex)
.filter(function(whiteListedOrigin) {
return whiteListedOrigin;
})
.map(function(whiteListedOrigin) {
return whiteListedOrigin.toLowerCase();
});
if (~whitelist.indexOf(origin.toLowerCase())) {
return true;
}
return false;
}
function shouldProcessMessage(sourceOrigin) {
if (!window.g_concourse_onmessage_enforce_same_origin || sourceOrigin === window.location.origin) {
return true;
}
return isOriginInWhiteList(sourceOrigin, window.g_concourse_onmessage_enforce_same_origin_whitelist);
}
function registerPostMessageEvent() {
if (NOW.registeredPostMessageEvent) {
return;
}
if (!window.postMessage) {
return;
}
window.addEventListener('message', function (event) {
if (!shouldProcessMessage(event.origin)) {
console.warn('Incoming message ignored due to origin mismatch.');
return;
}
var nowMessageJSON = event.data;
var nowMessage;
try {
nowMessage = JSON.parse(nowMessageJSON.toString());
} catch (e) {
return;
}
if (!nowMessage.type == NOW_MSG) {
return;
}
fire(nowMessage.eventName, nowMessage.args);
}, false);
NOW.registeredPostMessageEvent = true;
}
function doPostMessage(win, event, msg, targetOrigin) {
var nowMessage = {type: NOW_MSG, eventName: event, args: msg};
var nowMessageJSON;
if (!win || !win.postMessage) {
return
}
nowMessageJSON = JSON.stringify(nowMessage);
win.postMessage(nowMessageJSON, targetOrigin);
}
function fireTop(eventName, args){
if (trace)
jslog("$CustomEventManager firing: " + eventName + " args: " + arguments.length);
fireEvent.apply(null, arguments);
var t = getTopWindow();
if (t !== null && window !== t)
t.CustomEvent.fire(eventName, args);
}
function fireAll(eventName, args) {
if (trace)
jslog("$CustomEventManager firing: " + eventName + " args: " + arguments.length);
var topWindow = getTopWindow();
notifyAllFrom(topWindow);
function notifyAllFrom(rootFrame) {
var childFrame;
rootFrame.CustomEvent.fireEvent(eventName, args);
for (var i = 0; i < rootFrame.length; i++) {
try {
childFrame = rootFrame[i];
if (!childFrame)
continue;
if (childFrame.CustomEvent && typeof childFrame.CustomEvent.fireEvent === "function") {
notifyAllFrom(childFrame);
}
} catch(e) {
}
}
}
}
function fireToWindow(targetWindow, eventName, args, usePostMessage, targetOrigin) {
if (trace)
jslog("$CustomEventManager firing: " + eventName + " args: " + args.length);
if (usePostMessage) {
doPostMessage(targetWindow, eventName, args, targetOrigin);
} else {
targetWindow.CustomEvent.fireEvent(eventName, args);
}
}
function getTopWindow() {
var topWindow = window.self;
try {
while (topWindow.CustomEvent.fireEvent && topWindow !== topWindow.parent && topWindow.parent.CustomEvent.fireEvent) {
topWindow = topWindow.parent;
}
} catch (e) {}
return topWindow;
}
function isTopWindow() {
return getTopWindow() == window.self;
}
function jslog(msg, src, dateTime) {
try {
if (!src) {
var path = window.self.location.pathname;
src = path.substring(path.lastIndexOf('/') + 1);
}
if (window.self.opener && window != window.self.opener) {
if (window.self.opener.jslog) {
window.self.opener.jslog(msg, src, dateTime);
}
} else if (parent && parent.jslog && jslog != parent.jslog) {
parent.jslog(msg, src, dateTime);
} else {
if (window.console && window.console.log)
console.log(msg);
}
} catch (e) {
}
}
var api =  {
set trace(value) {
trace = !!value;
},
get trace() {
return trace;
},
set suppressEvents(value) {
suppressEvents = !!value;
},
get suppressEvents() {
return suppressEvents;
},
get events() {
return events;
},
set events(value) {
events = value;
},
on: on,
un: un,
unAll: unAll,
forward: forward,
isFiring: isFiring,
fireEvent: fireEvent,
observe: observe,
fire: fire,
fireTop: fireTop,
fireAll: fireAll,
fireToWindow: fireToWindow,
isTopWindow: isTopWindow,
fireUp: fireUp,
toString: function() { return 'CustomEventManager'; }
};
registerPostMessageEvent();
return api;
})(NOW.CustomEvent);
NOW.CustomEvent = CustomEventManager;
if (typeof CustomEvent !== "undefined") {
CustomEvent.observe = NOW.CustomEvent.observe.bind(NOW.CustomEvent);
CustomEvent.fire = NOW.CustomEvent.fire.bind(NOW.CustomEvent);
CustomEvent.fireUp = NOW.CustomEvent.fireUp.bind(NOW.CustomEvent);
CustomEvent.fireTop = NOW.CustomEvent.fireTop.bind(NOW.CustomEvent);
CustomEvent.fireAll = NOW.CustomEvent.fireAll.bind(NOW.CustomEvent);
CustomEvent.fireToWindow = NOW.CustomEvent.fireToWindow.bind(NOW.CustomEvent);
CustomEvent.on = NOW.CustomEvent.on.bind(NOW.CustomEvent);
CustomEvent.un = NOW.CustomEvent.un.bind(NOW.CustomEvent);
CustomEvent.unAll = NOW.CustomEvent.unAll.bind(NOW.CustomEvent);
CustomEvent.forward = NOW.CustomEvent.forward.bind(NOW.CustomEvent);
CustomEvent.isFiring = NOW.CustomEvent.isFiring.bind(NOW.CustomEvent);
CustomEvent.fireEvent = NOW.CustomEvent.fireEvent.bind(NOW.CustomEvent);
CustomEvent.events = NOW.CustomEvent.events;
CustomEvent.isTopWindow = NOW.CustomEvent.isTopWindow.bind(NOW.CustomEvent);
} else {
window.CustomEvent = NOW.CustomEvent;
}
;
/*! RESOURCE: /scripts/lib/jquery2_includes.js */
/*! RESOURCE: /scripts/lib/jquery/jquery_clean.js */
(function() {
if (!window.jQuery)
return;
if (!window.$j_glide)
window.$j = jQuery.noConflict();
if (window.$j_glide && jQuery != window.$j_glide) {
if (window.$j_glide)
jQuery.noConflict(true);
window.$j = window.$j_glide;
}
})();
;
/*! RESOURCE: /scripts/lib/jquery/jquery-2.2.3-legacy.min.js */
/*! jQuery v2.2.3-snc3-legacy | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="2.2.3-snc3-legacy",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?a<0?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(a<0?b:0);return this.pushStack(c>=0&&c<b?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);h<i;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],"__proto__"!==b&&g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){var b;if("object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype||{},"isPrototypeOf"))return!1;for(b in a);return void 0===b||k.call(a,b)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;(a=n.trim(a))&&(1===a.indexOf("use strict")?(b=d.createElement("script"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;d<c;d++)if(!1===b.call(a[d],d,a[d]))break}else for(d in a)if(!1===b.call(a[d],d,a[d]))break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;d<c;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;f<g;f++)(d=!b(a[f],f))!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;g<d;g++)null!=(e=b(a[g],g,c))&&h.push(e);else for(g in a)null!=(e=b(a[g],g,c))&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;if("string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a))return d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f},now:Date.now,support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"!==c&&!n.isWindow(a)&&("array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a)}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=fa(),z=fa(),A=fa(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;c<d;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:d<0?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(xa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ea(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+pa(r[h]);s=r.join(","),w=_.test(a)&&na(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function fa(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ga(a){return a[u]=!0,a}function ha(a){var b=n.createElement("div");try{return!!a(b)}catch(xa){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ia(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ja(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ka(a){return function(b){return"input"===b.nodeName.toLowerCase()&&b.type===a}}function la(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function ma(a){return ga(function(b){return b=+b,ga(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function na(a){return a&&void 0!==a.getElementsByTagName&&a}c=ea.support={},f=ea.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return!!b&&"HTML"!==b.nodeName},m=ea.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ha(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ha(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ha(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(void 0!==b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c=void 0!==a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return void 0!==b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){if(void 0!==b.getElementsByClassName&&p)return b.getElementsByClassName(a)},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ha(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ha(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ha(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d||(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ja(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ja(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},ea.matches=function(a,b){return ea(a,null,null,b)},ea.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(xa){}return ea(b,n,null,[a]).length>0},ea.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ea.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ea.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ea.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ea.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ea.selectors={cacheLength:50,createPseudo:ga,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ea.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ea.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||void 0!==a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ea.attr(d,a);return null==e?"!="===b:!b||(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b&&(e===c||e.slice(0,c.length+1)===c+"-"))}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),!1===t)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return(t-=e)===d||t%d==0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ea.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ga(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ga(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ga(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ga(function(a){return function(b){return ea(a,b).length>0}}),contains:ga(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ga(function(a){return V.test(a||"")||ea.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do{if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return(c=c.toLowerCase())===a||0===c.indexOf(a+"-")}while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return!1===a.disabled},disabled:function(a){return!0===a.disabled},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,!0===a.selected},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:ma(function(){return[0]}),last:ma(function(a,b){return[b-1]}),eq:ma(function(a,b,c){return[c<0?c+b:c]}),even:ma(function(a,b){for(var c=0;c<b;c+=2)a.push(c);return a}),odd:ma(function(a,b){for(var c=1;c<b;c+=2)a.push(c);return a}),lt:ma(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:ma(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ka(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=la(b);function oa(){}oa.prototype=d.filters=d.pseudos,d.setFilters=new oa,g=ea.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ea.error(a):z(a,i).slice(0)};function pa(a){for(var b=0,c=a.length,d="";b<c;b++)d+=a[b].value;return d}function qa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function ra(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function sa(a,b,c){for(var d=0,e=b.length;d<e;d++)ea(a,b[d],c);return c}function ta(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;h<i;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function ua(a,b,c,d,e,f){return d&&!d[u]&&(d=ua(d)),e&&!e[u]&&(e=ua(e,f)),ga(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||sa(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ta(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ta(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ta(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function va(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=qa(function(a){return a===b},h,!0),l=qa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];i<f;i++)if(c=d.relative[a[i].type])m=[qa(ra(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;e<f;e++)if(d.relative[a[e].type])break;return ua(i>1&&ra(m),i>1&&pa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,i<e&&va(a.slice(i,e)),e<f&&va(a=a.slice(e)),e<f&&pa(a))}m.push(c)}return ra(m)}function wa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ta(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&ea.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ga(f):f}return h=ea.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=va(b[c]),f[u]?d.push(f):e.push(f);f=A(a,wa(e,d)),f.selector=a}return f},i=ea.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(!(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0]))return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&na(b.parentNode)||b))){if(j.splice(i,1),!(a=f.length&&pa(j)))return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&na(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ha(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ha(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ia("type|href|height|width",function(a,b,c){if(!c)return a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ha(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ia("value",function(a,b,c){if(!c&&"input"===a.nodeName.toLowerCase())return a.defaultValue}),ha(function(a){return null==a.getAttribute("disabled")})||ia(K,function(a,b,c){var d;if(!c)return!0===a[b]?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ea}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;b<c;b++)if(n.contains(e[b],this))return!0}));for(b=0;b<c;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(!(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a))||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))}).prototype=n.fn,A=n(d);var C=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;a<c;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;d<e;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function E(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return E(a,"nextSibling")},prev:function(a){return E(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(D[a]||n.uniqueSort(e),C.test(a)&&e.reverse()),this.pushStack(e)}});var F=/\S+/g;function G(a){var b={};return n.each(a.match(F)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?G(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)!1===f[h].apply(c[0],c[1])&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function b(c){n.each(c,function(c,d){n.isFunction(d)?a.unique&&j.has(d)||f.push(d):d&&d.length&&"string"!==n.type(d)&&b(d)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),c<=h&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);b<d;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(!0===a?--n.readyWait:n.isReady)||(n.isReady=!0,!0!==a&&--n.readyWait>0||(H.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function I(){d.removeEventListener("DOMContentLoaded",I),a.removeEventListener("load",I),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener("DOMContentLoaded",I),a.addEventListener("load",I))),H.promise(b)},n.ready.promise();var J=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)J(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;h<i;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},K=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function L(){this.expando=n.expando+L.uid++}L.uid=1,L.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!K(a))return{};var b=a[this.expando];return b||(b={},K(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(F)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var M=new L,N=new L,O=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,P=/[A-Z]/g;function Q(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(P,"-$&").toLowerCase(),"string"==typeof(c=a.getAttribute(d))){try{c="true"===c||"false"!==c&&("null"===c?null:+c+""===c?+c:O.test(c)?n.parseJSON(c):c)
}catch(e){}N.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return N.hasData(a)||M.hasData(a)},data:function(a,b,c){return N.access(a,b,c)},removeData:function(a,b){N.remove(a,b)},_data:function(a,b,c){return M.access(a,b,c)},_removeData:function(a,b){M.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=N.get(f),1===f.nodeType&&!M.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),Q(f,d,e[d])));M.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){N.set(this,a)}):J(this,function(b){var c,d;if(f&&void 0===b){if(void 0!==(c=N.get(f,a)||N.get(f,a.replace(P,"-$&").toLowerCase())))return c;if(d=n.camelCase(a),void 0!==(c=N.get(f,d)))return c;if(void 0!==(c=Q(f,d,void 0)))return c}else d=n.camelCase(a),this.each(function(){var c=N.get(this,d);N.set(this,d,b),a.indexOf("-")>-1&&void 0!==c&&N.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){N.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=M.get(a,b),c&&(!d||n.isArray(c)?d=M.access(a,b,n.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return M.get(a,c)||M.access(a,c,{empty:n.Callbacks("once memory").add(function(){M.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)(c=M.get(f[g],a+"queueHooks"))&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var R=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,S=new RegExp("^(?:([+-])=|)("+R+")([a-z%]*)$","i"),T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function V(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&S.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do{f=f||".5",k/=f,n.style(a,b,k+j)}while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var W=/^(?:checkbox|radio)$/i,X=/<([\w:-]+)/,Y=/^$|\/(?:java|ecma)script/i;!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,b.innerHTML="<option></option>",l.option=!!b.lastChild}();var Z={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Z.tbody=Z.tfoot=Z.colgroup=Z.caption=Z.thead,Z.th=Z.td,l.option||(Z.optgroup=Z.option=[1,"<select multiple='multiple'>","</select>"]);function $(a,b){var c=void 0!==a.getElementsByTagName?a.getElementsByTagName(b||"*"):void 0!==a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function _(a,b){for(var c=0,d=a.length;c<d;c++)M.set(a[c],"globalEval",!b||M.get(b[c],"globalEval"))}var aa=/<|&#?\w+;/;function ba(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;o<p;o++)if((f=a[o])||0===f)if("object"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(aa.test(f)){g=g||l.appendChild(b.createElement("div")),h=(X.exec(f)||["",""])[1].toLowerCase(),i=Z[h]||Z._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=$(l.appendChild(f),"script"),j&&_(g),c){k=0;while(f=g[k++])Y.test(f.type||"")&&c.push(f)}return l}var ca=/^key/,da=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ea=/^([^.]*)(?:\.(.+)|)/;function fa(){return!0}function ga(){return!1}function ha(){try{return d.activeElement}catch(a){}}function ia(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ia(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),!1===e)e=ga;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=M.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return void 0!==n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(F)||[""],j=b.length;while(j--)h=ea.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&!1!==l.setup.call(a,d,p,g)||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=M.hasData(a)&&M.get(a);if(r&&(i=r.events)){b=(b||"").match(F)||[""],j=b.length;while(j--)if(h=ea.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&!1!==l.teardown.call(a,p,r.handle)||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&M.remove(a,"handle events")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(M.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||!1!==k.preDispatch.call(this,a)){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,void 0!==(d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i))&&!1===(a.result=d)&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(!0!==i.disabled||"click"!==a.type)){for(d=[],c=0;c<h;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=da.test(f)?this.mouseHooks:ca.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ha()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===ha()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&n.nodeName(this,"input"))return this.click(),!1},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){if(!(this instanceof n.Event))return new n.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&!1===a.returnValue?fa:ga):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),this[n.expando]=!0},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ga,isPropagationStopped:ga,isImmediatePropagationStopped:ga,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=fa,a&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=fa,a&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=fa,a&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ia(this,a,b,c,d)},one:function(a,b,c,d){return ia(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return!1!==b&&"function"!=typeof b||(c=b,b=void 0),!1===c&&(c=ga),this.each(function(){n.event.remove(this,a,c,b)})}});var ja=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ka=/<script|<style|<link/i,la=/checked\s*(?:[^=]|=\s*.checked.)/i,ma=/^true\/(.*)/,na=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function oa(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function pa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function qa(a){var b=ma.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ra(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(M.hasData(a)&&(f=M.access(a),g=M.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;c<d;c++)n.event.add(b,e,j[e][c])}N.hasData(a)&&(h=N.access(a),i=n.extend({},h),N.set(b,i))}}function sa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&W.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function ta(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&la.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ta(f,b,c,d)});if(o&&(e=ba(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map($(e,"script"),pa),i=h.length;m<o;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,$(j,"script"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,qa),m=0;m<i;m++)j=h[m],Y.test(j.type||"")&&!M.access(j,"globalEval")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(na,"")))}return a}function ua(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData($(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&_($(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ja,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=$(h),f=$(a),d=0,e=f.length;d<e;d++)sa(f[d],g[d]);if(b)if(c)for(f=f||$(a),g=g||$(h),d=0,e=f.length;d<e;d++)ra(f[d],g[d]);else ra(a,h);return g=$(h,"script"),g.length>0&&_(g,!i&&$(a,"script")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(K(c)){if(b=c[M.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[M.expando]=void 0}c[N.expando]&&(c[N.expando]=void 0)}}}),n.fn.extend({domManip:ta,detach:function(a){return ua(this,a,!0)},remove:function(a){return ua(this,a)},text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return ta(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){oa(this,a).appendChild(a)}})},prepend:function(){return ta(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=oa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ta(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ta(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData($(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null!=a&&a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!ka.test(a)&&!Z[(X.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;c<d;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData($(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ta(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData($(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;h<=f;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var va,wa={HTML:"block",BODY:"block"};function xa(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function ya(a){var b=d,c=wa[a];return c||(c=xa(a,b),"none"!==c&&c||(va=(va||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=va[0].contentDocument,b.write(),b.close(),c=xa(a,b),va.detach()),wa[a]=c),c}var za=/^margin/,Aa=new RegExp("^("+R+")(?!px)[a-z%]+$","i"),Ba=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Ca=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Da=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");function i(){h.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Da.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Da.removeChild(g)}h.style&&(h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h),n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement("div"));return c.style.cssText=h.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",h.style.width="1px",Da.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Da.removeChild(g),h.removeChild(c),b}}))}();function Ea(a,b,c){var d,e,f,g,h=a.style;return c=c||Ba(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Aa.test(g)&&za.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+"":g}function Fa(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ga=/^(none|table(?!-c[ea]).+)/,Ha={position:"absolute",visibility:"hidden",display:"block"},Ia={letterSpacing:"0",fontWeight:"400"},Ja=["Webkit","O","Moz","ms"],Ka=d.createElement("div").style;function La(a){if(a in Ka)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ja.length;while(c--)if((a=Ja[c]+b)in Ka)return a}function Ma(a,b,c){var d=S.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Na(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;f<4;f+=2)"margin"===c&&(g+=n.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+T[f]+"Width",!0,e))):(g+=n.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+T[f]+"Width",!0,e)));return g}function Oa(b,c,e){var f=!0,g="width"===c?b.offsetWidth:b.offsetHeight,h=Ba(b),i="border-box"===n.css(b,"boxSizing",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),g<=0||null==g){if(g=Ea(b,c,h),(g<0||null==g)&&(g=b.style[c]),Aa.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+Na(b,c,e||(i?"border":"content"),f,h)+"px"}function Pa(a,b){for(var c,d,e,f=[],g=0,h=a.length;g<h;g++)d=a[g],d.style&&(f[g]=M.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=M.access(d,"olddisplay",ya(d.nodeName)))):(e=U(d),"none"===c&&e||M.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;g<h;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Ea(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=La(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];f=typeof c,"string"===f&&(e=S.exec(c))&&e[1]&&(c=V(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c))}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=La(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Ea(a,b,d)),"normal"===e&&b in Ia&&(e=Ia[b]),""===c||c?(f=parseFloat(e),!0===c||isFinite(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){if(c)return Ga.test(n.css(a,"display"))&&0===a.offsetWidth?Ca(a,Ha,function(){return Oa(a,b,d)}):Oa(a,b,d)},set:function(a,c,d){var e,f=d&&Ba(a),g=d&&Na(a,b,d,"border-box"===n.css(a,"boxSizing",!1,f),f);return g&&(e=S.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=n.css(a,b)),Ma(a,c,g)}}}),n.cssHooks.marginLeft=Fa(l.reliableMarginLeft,function(a,b){if(b)return(parseFloat(Ea(a,"marginLeft"))||a.getBoundingClientRect().left-Ca(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px"}),n.cssHooks.marginRight=Fa(l.reliableMarginRight,function(a,b){if(b)return Ca(a,{display:"inline-block"},Ea,[a,"marginRight"])}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];d<4;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},za.test(a)||(n.cssHooks[a+b].set=Ma)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ba(a),e=b.length;g<e;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Pa(this,!0)},hide:function(){return Pa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?n(this).show():n(this).hide()})}});function Qa(a,b,c,d,e){return new Qa.prototype.init(a,b,c,d,e)}n.Tween=Qa,Qa.prototype={constructor:Qa,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Qa.propHooks[this.prop];return a&&a.get?a.get(this):Qa.propHooks._default.get(this)},run:function(a){var b,c=Qa.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Qa.propHooks._default.set(this),this}},Qa.prototype.init.prototype=Qa.prototype,Qa.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Qa.propHooks.scrollTop=Qa.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=Qa.prototype.init,n.fx.step={};var Ra,Sa,Ta=/^(?:toggle|show|hide)$/,Ua=/queueHooks$/;function Va(){return a.setTimeout(function(){Ra=void 0}),Ra=n.now()}function Wa(a,b){var c,d=0,e={height:a};for(b=b?1:0;d<4;d+=2-b)c=T[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Xa(a,b,c){for(var d,e=($a.tweeners[b]||[]).concat($a.tweeners["*"]),f=0,g=e.length;f<g;f++)if(d=e[f].call(c,b,a))return d}function Ya(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&U(a),q=M.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),"inline"===(k="none"===j?M.get(a,"olddisplay")||ya(a.nodeName):j)&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ta.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ya(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=M.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;M.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Xa(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Za(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),(g=n.cssHooks[d])&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function $a(a,b,c){var d,e,f=0,g=$a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Ra||Va(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;g<i;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),f<1&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Ra||Va(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;c<d;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Za(k,j.opts.specialEasing);f<g;f++)if(d=$a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Xa,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend($a,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return V(c.elem,a,S.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(F);for(var c,d=0,e=a.length;d<e;d++)c=a[d],$a.tweeners[c]=$a.tweeners[c]||[],$a.tweeners[c].unshift(b)},prefilters:[Ya],prefilter:function(a,b){b?$a.prefilters.unshift(a):$a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&!0!==d.queue||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=$a(this,n.extend({},a),f);(e||M.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||!1===f.queue?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&!1!==a&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=M.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Ua.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var b,c=M.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;b<g;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Wa(b,!0),a,d,e)}}),n.each({slideDown:Wa("show"),slideUp:Wa("hide"),slideToggle:Wa("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Ra=n.now();b<c.length;b++)(a=c[b])()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Ra=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Sa||(Sa=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Sa),Sa=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var _a,ab=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return void 0===a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?_a:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(F);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),_a={set:function(a,b,c){return!1===b?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=ab[b]||n.find.attr;ab[b]=function(a,b,d){var e,f;return d||(f=ab[b],ab[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,ab[b]=f),e}});var bb=/^(?:input|select|textarea|button)$/i,cb=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,
e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):bb.test(a.nodeName)||cb.test(a.nodeName)&&a.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var db=/[\t\r\n\f]/g;function eb(a){return a.getAttribute&&a.getAttribute("class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,eb(this)))});if("string"==typeof a&&a){b=a.match(F)||[];while(c=this[i++])if(e=eb(c),d=1===c.nodeType&&(" "+e+" ").replace(db," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,eb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(F)||[];while(c=this[i++])if(e=eb(c),d=1===c.nodeType&&(" "+e+" ").replace(db," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,eb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(F)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=eb(this),b&&M.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||!1===a?"":M.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+eb(c)+" ").replace(db," ").indexOf(b)>-1)return!0;return!1}});var fb=/\r/g,gb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),(b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()])&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return(b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()])&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(fb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(gb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||e<0,g=f?null:[],h=f?e+1:d.length,i=e<0?h:f?e:0;i<h;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){if(n.isArray(b))return a.checked=n.inArray(n(a).val(),b)>-1}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var hb=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!hb.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||!1!==o.trigger.apply(e,c))){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,hb.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(M.get(h,"events")||{})[b.type]&&M.get(h,"handle"),m&&m.apply(h,c),(m=l&&h[l])&&m.apply&&K(h)&&(b.result=m.apply(h,c),!1===b.result&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&!1!==o._default.apply(p.pop(),c)||!K(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];if(c)return n.event.trigger(a,b,c,!0)}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=M.access(d,b);e||d.addEventListener(a,c,!0),M.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=M.access(d,b)-1;e?M.access(d,b,e):(d.removeEventListener(a,c,!0),M.remove(d,b))}}});var ib=a.location,jb=n.now(),kb=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var lb=/#.*$/,mb=/([?&])_=[^&]*/,nb=/^(.*?):[ \t]*([^\r\n]*)$/gm,ob=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,pb=/^(?:GET|HEAD)$/,qb=/^\/\//,rb={},sb={},tb="*/".concat("*"),ub=d.createElement("a");ub.href=ib.href;function vb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(F)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function wb(a,b,c,d){var e={},f=a===sb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function xb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function yb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}if(f)return f!==i[0]&&i.unshift(f),c[f]}function zb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(a.crossDomain&&"script"===f)continue;if(!(g=j[i+" "+f]||j["* "+f]))for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){!0===g?g=j[e]:!0!==j[e]&&(f=h[0],k.unshift(h[1]));break}if(!0!==g)if(g&&a.throws)b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ib.href,type:"GET",isLocal:ob.test(ib.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":tb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?xb(xb(a,n.ajaxSettings),b):xb(n.ajaxSettings,a)},ajaxPrefilter:vb(rb),ajaxTransport:vb(sb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks("once memory"),s=m.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=nb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(v<2)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),y(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||ib.href)+"").replace(lb,"").replace(qb,ib.protocol+"//"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||"*").toLowerCase().match(F)||[""],null==m.crossDomain){j=d.createElement("a");try{j.href=m.url,j.href=j.href,m.crossDomain=ub.protocol+"//"+ub.host!=j.protocol+"//"+j.host}catch(z){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),wb(rb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0==n.active++&&n.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!pb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(kb.test(f)?"&":"?")+m.data,delete m.data),!1===m.cache&&(m.url=mb.test(f)?f.replace(mb,"$1_="+jb++):f+(kb.test(f)?"&":"?")+"_="+jb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&x.setRequestHeader("If-None-Match",n.etag[f])),(m.data&&m.hasContent&&!1!==m.contentType||c.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+tb+"; q=0.01":""):m.accepts["*"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(!1===m.beforeSend.call(o,x,m)||2===v))return x.abort();w="abort";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=wb(sb,m,c,x)){if(x.readyState=1,k&&p.trigger("ajaxSend",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort("timeout")},m.timeout));try{v=1,e.send(t,y)}catch(z){if(!(v<2))throw z;y(-1,z)}}else y(-1,"No Transport");function y(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||"",x.readyState=b>0?4:0,j=b>=200&&b<300||304===b,d&&(u=yb(m,x,d)),u=zb(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(n.lastModified[f]=w),(w=x.getResponseHeader("etag"))&&(n.etag[f]=w)),204===b||"HEAD"===m.type?y="nocontent":304===b?y="notmodified":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,!b&&y||(y="error",b<0&&(b=0))),x.status=b,x.statusText=(c||y)+"",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?"ajaxSuccess":"ajaxError",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger("ajaxComplete",[x,m]),--n.active||n.event.trigger("ajaxStop")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Ab=/%20/g,Bb=/\[\]$/,Cb=/\r?\n/g,Db=/^(?:submit|button|image|reset|file)$/i,Eb=/^(?:input|select|textarea|keygen)/i;function Fb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Bb.test(a)?d(a,e):Fb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Fb(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Fb(c,a[c],b,e);return d.join("&").replace(Ab,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Eb.test(this.nodeName)&&!Db.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Cb,"\r\n")}}):{name:b.name,value:c.replace(Cb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Gb={0:200,1223:204},Hb=n.ajaxSettings.xhr();l.cors=!!Hb&&"withCredentials"in Hb,l.ajax=Hb=!!Hb,n.ajaxTransport(function(b){var c,d;if(l.cors||Hb&&!b.crossDomain)return{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Gb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}}),n.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Ib=[],Jb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Ib.pop()||n.expando+"_"+jb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=!1!==b.jsonp&&(Jb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jb.test(b.data)&&"data");if(h||"jsonp"===b.dataTypes[0])return e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Jb,"$1"+e):!1!==b.jsonp&&(b.url+=(kb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Ib.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1);var e=x.exec(a),f=!c&&[],g=n.isFunction(d.implementation.createHTMLDocument)?d.implementation.createHTMLDocument(""):d;return b=b||g,e?[b.createElement(e[1])]:(e=ba([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Kb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Kb)return Kb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Lb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Lb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Da})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;n.fn[a]=function(d){return J(this,function(a,d,e){var f=Lb(a);if(void 0===e)return f?f[b]:a[d];f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e},a,d,arguments.length)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Fa(l.pixelPosition,function(a,c){if(c)return c=Ea(a,b),Aa.test(c)?n(a).position()[b]+"px":c})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(!0===d||!0===e?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Mb=a.jQuery,Nb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Nb),b&&a.jQuery===n&&(a.jQuery=Mb),n},b||(a.jQuery=a.$=n),n});
/*! RESOURCE: /scripts/lib/jquery/jquery_no_conflict.js */
(function() {
if (window.$j_glide) {
jQuery.noConflict(true);
window.jQuery = $j_glide;
}
window.$j = window.$j_glide = jQuery.noConflict();
})();
;
;
/*! RESOURCE: /scripts/lib/jquery/jquery_csrf.js */
(function($) {
setToken();
CustomEvent.observe('ck_updated', setToken);
function setToken() {
$.ajaxPrefilter(function(options) {
if (!options.crossDomain) {
if (!options.headers)
options.headers = {};
var token = window.g_ck || 'token_intentionally_left_blank';
options.headers['X-UserToken'] = token;
}
});
}
})(jQuery);
;
/*! RESOURCE: /scripts/jquery-ui-1.9.2.custom.js */
(function( $, undefined ) {
var uuid = 0,
runiqueId = /^ui-id-\d+$/;
$.ui = $.ui || {};
if ( $.ui.version ) {
return;
}
$.extend( $.ui, {
version: "1.9.2",
keyCode: {
BACKSPACE: 8,
COMMA: 188,
DELETE: 46,
DOWN: 40,
END: 35,
ENTER: 13,
ESCAPE: 27,
HOME: 36,
LEFT: 37,
NUMPAD_ADD: 107,
NUMPAD_DECIMAL: 110,
NUMPAD_DIVIDE: 111,
NUMPAD_ENTER: 108,
NUMPAD_MULTIPLY: 106,
NUMPAD_SUBTRACT: 109,
PAGE_DOWN: 34,
PAGE_UP: 33,
PERIOD: 190,
RIGHT: 39,
SPACE: 32,
TAB: 9,
UP: 38
}
});
$.fn.extend({
_focus: $.fn.focus,
focus: function( delay, fn ) {
return typeof delay === "number" ?
this.each(function() {
var elem = this;
setTimeout(function() {
$( elem ).focus();
if ( fn ) {
fn.call( elem );
}
}, delay );
}) :
this._focus.apply( this, arguments );
},
scrollParent: function() {
var scrollParent;
if (($.ui.ie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
scrollParent = this.parents().filter(function() {
return (/(relative|absolute|fixed)/).test($.css(this,'position')) && (/(auto|scroll)/).test($.css(this,'overflow')+$.css(this,'overflow-y')+$.css(this,'overflow-x'));
}).eq(0);
} else {
scrollParent = this.parents().filter(function() {
return (/(auto|scroll)/).test($.css(this,'overflow')+$.css(this,'overflow-y')+$.css(this,'overflow-x'));
}).eq(0);
}
return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
},
zIndex: function( zIndex ) {
if ( zIndex !== undefined ) {
return this.css( "zIndex", zIndex );
}
if ( this.length ) {
var elem = $( this[ 0 ] ), position, value;
while ( elem.length && elem[ 0 ] !== document ) {
position = elem.css( "position" );
if ( position === "absolute" || position === "relative" || position === "fixed" ) {
value = parseInt( elem.css( "zIndex" ), 10 );
if ( !isNaN( value ) && value !== 0 ) {
return value;
}
}
elem = elem.parent();
}
}
return 0;
},
uniqueId: function() {
return this.each(function() {
if ( !this.id ) {
this.id = "ui-id-" + (++uuid);
}
});
},
removeUniqueId: function() {
return this.each(function() {
if ( runiqueId.test( this.id ) ) {
$( this ).removeAttr( "id" );
}
});
}
});
function focusable( element, isTabIndexNotNaN ) {
var map, mapName, img,
nodeName = element.nodeName.toLowerCase();
if ( "area" === nodeName ) {
map = element.parentNode;
mapName = map.name;
if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
return false;
}
img = $( "img[usemap=#" + mapName + "]" )[0];
return !!img && visible( img );
}
return ( /input|select|textarea|button|object/.test( nodeName ) ?
!element.disabled :
"a" === nodeName ?
element.href || isTabIndexNotNaN :
isTabIndexNotNaN) &&
visible( element );
}
function visible( element ) {
return $.expr.filters.visible( element ) &&
!$( element ).parents().andSelf().filter(function() {
return $.css( this, "visibility" ) === "hidden";
}).length;
}
$.extend( $.expr[ ":" ], {
data: $.expr.createPseudo ?
$.expr.createPseudo(function( dataName ) {
return function( elem ) {
return !!$.data( elem, dataName );
};
}) :
function( elem, i, match ) {
return !!$.data( elem, match[ 3 ] );
},
focusable: function( element ) {
return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
},
tabbable: function( element ) {
var tabIndex = $.attr( element, "tabindex" ),
isTabIndexNaN = isNaN( tabIndex );
return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
}
});
$(function() {
var body = document.body,
div = body.appendChild( div = document.createElement( "div" ) );
$.extend( div.style, {
minHeight: "100px",
height: "auto",
padding: 0,
borderWidth: 0
});
$.support.minHeight = true;
$.support.selectstart = "onselectstart" in div;
body.removeChild( div ).style.display = "none";
});
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
$.each( [ "Width", "Height" ], function( i, name ) {
var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
type = name.toLowerCase(),
orig = {
innerWidth: $.fn.innerWidth,
innerHeight: $.fn.innerHeight,
outerWidth: $.fn.outerWidth,
outerHeight: $.fn.outerHeight
};
function reduce( elem, size, border, margin ) {
$.each( side, function() {
size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
if ( border ) {
size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
}
if ( margin ) {
size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
}
});
return size;
}
$.fn[ "inner" + name ] = function( size ) {
if ( size === undefined ) {
return orig[ "inner" + name ].call( this );
}
return this.each(function() {
$( this ).css( type, reduce( this, size ) + "px" );
});
};
$.fn[ "outer" + name] = function( size, margin ) {
if ( typeof size !== "number" ) {
return orig[ "outer" + name ].call( this, size );
}
return this.each(function() {
$( this).css( type, reduce( this, size, true, margin ) + "px" );
});
};
});
}
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
$.fn.removeData = (function( removeData ) {
return function( key ) {
if ( arguments.length ) {
return removeData.call( this, $.camelCase( key ) );
} else {
return removeData.call( this );
}
};
})( $.fn.removeData );
}
(function() {
var uaMatch = /msie ([\w.]+)/.exec( navigator.userAgent.toLowerCase() ) || [];
$.ui.ie = uaMatch.length ? true : false;
$.ui.ie6 = parseFloat( uaMatch[ 1 ], 10 ) === 6;
})();
$.fn.extend({
disableSelection: function() {
return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
".ui-disableSelection", function( event ) {
event.preventDefault();
});
},
enableSelection: function() {
return this.unbind( ".ui-disableSelection" );
}
});
$.extend( $.ui, {
plugin: {
add: function( module, option, set ) {
var i,
proto = $.ui[ module ].prototype;
for ( i in set ) {
proto.plugins[ i ] = proto.plugins[ i ] || [];
proto.plugins[ i ].push( [ option, set[ i ] ] );
}
},
call: function( instance, name, args ) {
var i,
set = instance.plugins[ name ];
if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
return;
}
for ( i = 0; i < set.length; i++ ) {
if ( instance.options[ set[ i ][ 0 ] ] ) {
set[ i ][ 1 ].apply( instance.element, args );
}
}
}
},
contains: $.contains,
hasScroll: function( el, a ) {
if ( $( el ).css( "overflow" ) === "hidden") {
return false;
}
var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
has = false;
if ( el[ scroll ] > 0 ) {
return true;
}
el[ scroll ] = 1;
has = ( el[ scroll ] > 0 );
el[ scroll ] = 0;
return has;
},
isOverAxis: function( x, reference, size ) {
return ( x > reference ) && ( x < ( reference + size ) );
},
isOver: function( y, x, top, left, height, width ) {
return $.ui.isOverAxis( y, top, height ) && $.ui.isOverAxis( x, left, width );
}
});
})( jQuery );
(function( $, undefined ) {
var uuid = 0,
slice = Array.prototype.slice,
_cleanData = $.cleanData;
$.cleanData = function( elems ) {
for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
try {
$( elem ).triggerHandler( "remove" );
} catch( e ) {}
}
_cleanData( elems );
};
$.widget = function( name, base, prototype ) {
var fullName, existingConstructor, constructor, basePrototype,
namespace = name.split( "." )[ 0 ];
name = name.split( "." )[ 1 ];
fullName = namespace + "-" + name;
if ( !prototype ) {
prototype = base;
base = $.Widget;
}
$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
return !!$.data( elem, fullName );
};
$[ namespace ] = $[ namespace ] || {};
existingConstructor = $[ namespace ][ name ];
constructor = $[ namespace ][ name ] = function( options, element ) {
if ( !this._createWidget ) {
return new constructor( options, element );
}
if ( arguments.length ) {
this._createWidget( options, element );
}
};
$.extend( constructor, existingConstructor, {
version: prototype.version,
_proto: $.extend( {}, prototype ),
_childConstructors: []
});
basePrototype = new base();
basePrototype.options = $.widget.extend( {}, basePrototype.options );
$.each( prototype, function( prop, value ) {
if ( $.isFunction( value ) ) {
prototype[ prop ] = (function() {
var _super = function() {
return base.prototype[ prop ].apply( this, arguments );
},
_superApply = function( args ) {
return base.prototype[ prop ].apply( this, args );
};
return function() {
var __super = this._super,
__superApply = this._superApply,
returnValue;
this._super = _super;
this._superApply = _superApply;
returnValue = value.apply( this, arguments );
this._super = __super;
this._superApply = __superApply;
return returnValue;
};
})();
}
});
constructor.prototype = $.widget.extend( basePrototype, {
widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
}, prototype, {
constructor: constructor,
namespace: namespace,
widgetName: name,
widgetBaseClass: fullName,
widgetFullName: fullName
});
if ( existingConstructor ) {
$.each( existingConstructor._childConstructors, function( i, child ) {
var childPrototype = child.prototype;
$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
});
delete existingConstructor._childConstructors;
} else {
base._childConstructors.push( constructor );
}
$.widget.bridge( name, constructor );
};
$.widget.extend = function( target ) {
var input = slice.call( arguments, 1 ),
inputIndex = 0,
inputLength = input.length,
key,
value;
for ( ; inputIndex < inputLength; inputIndex++ ) {
for ( key in input[ inputIndex ] ) {
value = input[ inputIndex ][ key ];
if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
if ( $.isPlainObject( value ) ) {
target[ key ] = $.isPlainObject( target[ key ] ) ?
$.widget.extend( {}, target[ key ], value ) :
$.widget.extend( {}, value );
} else {
target[ key ] = value;
}
}
}
}
return target;
};
$.widget.bridge = function( name, object ) {
var fullName = object.prototype.widgetFullName || name;
$.fn[ name ] = function( options ) {
var isMethodCall = typeof options === "string",
args = slice.call( arguments, 1 ),
returnValue = this;
options = !isMethodCall && args.length ?
$.widget.extend.apply( null, [ options ].concat(args) ) :
options;
if ( isMethodCall ) {
this.each(function() {
var methodValue,
instance = $.data( this, fullName );
if ( !instance ) {
return $.error( "cannot call methods on " + name + " prior to initialization; " +
"attempted to call method '" + options + "'" );
}
if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
return $.error( "no such method '" + options + "' for " + name + " widget instance" );
}
methodValue = instance[ options ].apply( instance, args );
if ( methodValue !== instance && methodValue !== undefined ) {
returnValue = methodValue && methodValue.jquery ?
returnValue.pushStack( methodValue.get() ) :
methodValue;
return false;
}
});
} else {
this.each(function() {
var instance = $.data( this, fullName );
if ( instance ) {
instance.option( options || {} )._init();
} else {
$.data( this, fullName, new object( options, this ) );
}
});
}
return returnValue;
};
};
$.Widget = function(  ) {};
$.Widget._childConstructors = [];
$.Widget.prototype = {
widgetName: "widget",
widgetEventPrefix: "",
defaultElement: "<div>",
options: {
disabled: false,
create: null
},
_createWidget: function( options, element ) {
element = $( element || this.defaultElement || this )[ 0 ];
this.element = $( element );
this.uuid = uuid++;
this.eventNamespace = "." + this.widgetName + this.uuid;
this.options = $.widget.extend( {},
this.options,
this._getCreateOptions(),
options );
this.bindings = $();
this.hoverable = $();
this.focusable = $();
if ( element !== this ) {
$.data( element, this.widgetName, this );
$.data( element, this.widgetFullName, this );
this._on( true, this.element, {
remove: function( event ) {
if ( event.target === element ) {
this.destroy();
}
}
});
this.document = $( element.style ?
element.ownerDocument :
element.document || element );
this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
}
this._create();
this._trigger( "create", null, this._getCreateEventData() );
this._init();
},
_getCreateOptions: $.noop,
_getCreateEventData: $.noop,
_create: $.noop,
_init: $.noop,
destroy: function() {
this._destroy();
this.element
.unbind( this.eventNamespace )
.removeData( this.widgetName )
.removeData( this.widgetFullName )
.removeData( $.camelCase( this.widgetFullName ) );
this.widget()
.unbind( this.eventNamespace )
.removeAttr( "aria-disabled" )
.removeClass(
this.widgetFullName + "-disabled " +
"ui-state-disabled" );
this.bindings.unbind( this.eventNamespace );
this.hoverable.removeClass( "ui-state-hover" );
this.focusable.removeClass( "ui-state-focus" );
},
_destroy: $.noop,
widget: function() {
return this.element;
},
option: function( key, value ) {
var options = key,
parts,
curOption,
i;
if ( arguments.length === 0 ) {
return $.widget.extend( {}, this.options );
}
if ( typeof key === "string" ) {
options = {};
parts = key.split( "." );
key = parts.shift();
if ( parts.length ) {
curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
for ( i = 0; i < parts.length - 1; i++ ) {
curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
curOption = curOption[ parts[ i ] ];
}
key = parts.pop();
if ( value === undefined ) {
return curOption[ key ] === undefined ? null : curOption[ key ];
}
curOption[ key ] = value;
} else {
if ( value === undefined ) {
return this.options[ key ] === undefined ? null : this.options[ key ];
}
options[ key ] = value;
}
}
this._setOptions( options );
return this;
},
_setOptions: function( options ) {
var key;
for ( key in options ) {
this._setOption( key, options[ key ] );
}
return this;
},
_setOption: function( key, value ) {
this.options[ key ] = value;
if ( key === "disabled" ) {
this.widget()
.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
.attr( "aria-disabled", value );
this.hoverable.removeClass( "ui-state-hover" );
this.focusable.removeClass( "ui-state-focus" );
}
return this;
},
enable: function() {
return this._setOption( "disabled", false );
},
disable: function() {
return this._setOption( "disabled", true );
},
_on: function( suppressDisabledCheck, element, handlers ) {
var delegateElement,
instance = this;
if ( typeof suppressDisabledCheck !== "boolean" ) {
handlers = element;
element = suppressDisabledCheck;
suppressDisabledCheck = false;
}
if ( !handlers ) {
handlers = element;
element = this.element;
delegateElement = this.widget();
} else {
element = delegateElement = $( element );
this.bindings = this.bindings.add( element );
}
$.each( handlers, function( event, handler ) {
function handlerProxy() {
if ( !suppressDisabledCheck &&
( instance.options.disabled === true ||
$( this ).hasClass( "ui-state-disabled" ) ) ) {
return;
}
return ( typeof handler === "string" ? instance[ handler ] : handler )
.apply( instance, arguments );
}
if ( typeof handler !== "string" ) {
handlerProxy.guid = handler.guid =
handler.guid || handlerProxy.guid || $.guid++;
}
var match = event.match( /^(\w+)\s*(.*)$/ ),
eventName = match[1] + instance.eventNamespace,
selector = match[2];
if ( selector ) {
delegateElement.delegate( selector, eventName, handlerProxy );
} else {
element.bind( eventName, handlerProxy );
}
});
},
_off: function( element, eventName ) {
eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
element.unbind( eventName ).undelegate( eventName );
},
_delay: function( handler, delay ) {
function handlerProxy() {
return ( typeof handler === "string" ? instance[ handler ] : handler )
.apply( instance, arguments );
}
var instance = this;
return setTimeout( handlerProxy, delay || 0 );
},
_hoverable: function( element ) {
this.hoverable = this.hoverable.add( element );
this._on( element, {
mouseenter: function( event ) {
$( event.currentTarget ).addClass( "ui-state-hover" );
},
mouseleave: function( event ) {
$( event.currentTarget ).removeClass( "ui-state-hover" );
}
});
},
_focusable: function( element ) {
this.focusable = this.focusable.add( element );
this._on( element, {
focusin: function( event ) {
$( event.currentTarget ).addClass( "ui-state-focus" );
},
focusout: function( event ) {
$( event.currentTarget ).removeClass( "ui-state-focus" );
}
});
},
_trigger: function( type, event, data ) {
var prop, orig,
callback = this.options[ type ];
data = data || {};
event = $.Event( event );
event.type = ( type === this.widgetEventPrefix ?
type :
this.widgetEventPrefix + type ).toLowerCase();
event.target = this.element[ 0 ];
orig = event.originalEvent;
if ( orig ) {
for ( prop in orig ) {
if ( !( prop in event ) ) {
event[ prop ] = orig[ prop ];
}
}
}
this.element.trigger( event, data );
return !( $.isFunction( callback ) &&
callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
event.isDefaultPrevented() );
}
};
$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
if ( typeof options === "string" ) {
options = { effect: options };
}
var hasOptions,
effectName = !options ?
method :
options === true || typeof options === "number" ?
defaultEffect :
options.effect || defaultEffect;
options = options || {};
if ( typeof options === "number" ) {
options = { duration: options };
}
hasOptions = !$.isEmptyObject( options );
options.complete = callback;
if ( options.delay ) {
element.delay( options.delay );
}
if ( hasOptions && $.effects && ( $.effects.effect[ effectName ] || $.uiBackCompat !== false && $.effects[ effectName ] ) ) {
element[ method ]( options );
} else if ( effectName !== method && element[ effectName ] ) {
element[ effectName ]( options.duration, options.easing, callback );
} else {
element.queue(function( next ) {
$( this )[ method ]();
if ( callback ) {
callback.call( element[ 0 ] );
}
next();
});
}
};
});
if ( $.uiBackCompat !== false ) {
$.Widget.prototype._getCreateOptions = function() {
return $.metadata && $.metadata.get( this.element[0] )[ this.widgetName ];
};
}
})( jQuery );
(function( $, undefined ) {
$.ui = $.ui || {};
var cachedScrollbarWidth,
max = Math.max,
abs = Math.abs,
round = Math.round,
rhorizontal = /left|center|right/,
rvertical = /top|center|bottom/,
roffset = /[\+\-]\d+%?/,
rposition = /^\w+/,
rpercent = /%$/,
_position = $.fn.position;
function getOffsets( offsets, width, height ) {
return [
parseInt( offsets[ 0 ], 10 ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
parseInt( offsets[ 1 ], 10 ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
];
}
function parseCss( element, property ) {
return parseInt( $.css( element, property ), 10 ) || 0;
}
$.position = {
scrollbarWidth: function() {
if ( cachedScrollbarWidth !== undefined ) {
return cachedScrollbarWidth;
}
var w1, w2,
div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
innerDiv = div.children()[0];
$( "body" ).append( div );
w1 = innerDiv.offsetWidth;
div.css( "overflow", "scroll" );
w2 = innerDiv.offsetWidth;
if ( w1 === w2 ) {
w2 = div[0].clientWidth;
}
div.remove();
return (cachedScrollbarWidth = w1 - w2);
},
getScrollInfo: function( within ) {
var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),
overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),
hasOverflowX = overflowX === "scroll" ||
( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
hasOverflowY = overflowY === "scroll" ||
( overflowY === "auto" && within.height < within.element[0].scrollHeight );
return {
width: hasOverflowX ? $.position.scrollbarWidth() : 0,
height: hasOverflowY ? $.position.scrollbarWidth() : 0
};
},
getWithinInfo: function( element ) {
var withinElement = $( element || window ),
isWindow = $.isWindow( withinElement[0] );
return {
element: withinElement,
isWindow: isWindow,
offset: withinElement.offset() || { left: 0, top: 0 },
scrollLeft: withinElement.scrollLeft(),
scrollTop: withinElement.scrollTop(),
width: isWindow ? withinElement.width() : withinElement.outerWidth(),
height: isWindow ? withinElement.height() : withinElement.outerHeight()
};
}
};
$.fn.position = function( options ) {
if ( !options || !options.of ) {
return _position.apply( this, arguments );
}
options = $.extend( {}, options );
var atOffset, targetWidth, targetHeight, targetOffset, basePosition,
target = $( options.of ),
within = $.position.getWithinInfo( options.within ),
scrollInfo = $.position.getScrollInfo( within ),
targetElem = target[0],
collision = ( options.collision || "flip" ).split( " " ),
offsets = {};
if ( targetElem.nodeType === 9 ) {
targetWidth = target.width();
targetHeight = target.height();
targetOffset = { top: 0, left: 0 };
} else if ( $.isWindow( targetElem ) ) {
targetWidth = target.width();
targetHeight = target.height();
targetOffset = { top: target.scrollTop(), left: target.scrollLeft() };
} else if ( targetElem.preventDefault ) {
options.at = "left top";
targetWidth = targetHeight = 0;
targetOffset = { top: targetElem.pageY, left: targetElem.pageX };
} else {
targetWidth = target.outerWidth();
targetHeight = target.outerHeight();
targetOffset = target.offset();
}
basePosition = $.extend( {}, targetOffset );
$.each( [ "my", "at" ], function() {
var pos = ( options[ this ] || "" ).split( " " ),
horizontalOffset,
verticalOffset;
if ( pos.length === 1) {
pos = rhorizontal.test( pos[ 0 ] ) ?
pos.concat( [ "center" ] ) :
rvertical.test( pos[ 0 ] ) ?
[ "center" ].concat( pos ) :
[ "center", "center" ];
}
pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";
horizontalOffset = roffset.exec( pos[ 0 ] );
verticalOffset = roffset.exec( pos[ 1 ] );
offsets[ this ] = [
horizontalOffset ? horizontalOffset[ 0 ] : 0,
verticalOffset ? verticalOffset[ 0 ] : 0
];
options[ this ] = [
rposition.exec( pos[ 0 ] )[ 0 ],
rposition.exec( pos[ 1 ] )[ 0 ]
];
});
if ( collision.length === 1 ) {
collision[ 1 ] = collision[ 0 ];
}
if ( options.at[ 0 ] === "right" ) {
basePosition.left += targetWidth;
} else if ( options.at[ 0 ] === "center" ) {
basePosition.left += targetWidth / 2;
}
if ( options.at[ 1 ] === "bottom" ) {
basePosition.top += targetHeight;
} else if ( options.at[ 1 ] === "center" ) {
basePosition.top += targetHeight / 2;
}
atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
basePosition.left += atOffset[ 0 ];
basePosition.top += atOffset[ 1 ];
return this.each(function() {
var collisionPosition, using,
elem = $( this ),
elemWidth = elem.outerWidth(),
elemHeight = elem.outerHeight(),
marginLeft = parseCss( this, "marginLeft" ),
marginTop = parseCss( this, "marginTop" ),
collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
position = $.extend( {}, basePosition ),
myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );
if ( options.my[ 0 ] === "right" ) {
position.left -= elemWidth;
} else if ( options.my[ 0 ] === "center" ) {
position.left -= elemWidth / 2;
}
if ( options.my[ 1 ] === "bottom" ) {
position.top -= elemHeight;
} else if ( options.my[ 1 ] === "center" ) {
position.top -= elemHeight / 2;
}
position.left += myOffset[ 0 ];
position.top += myOffset[ 1 ];
if ( !$.support.offsetFractions ) {
position.left = round( position.left );
position.top = round( position.top );
}
collisionPosition = {
marginLeft: marginLeft,
marginTop: marginTop
};
$.each( [ "left", "top" ], function( i, dir ) {
if ( $.ui.position[ collision[ i ] ] ) {
$.ui.position[ collision[ i ] ][ dir ]( position, {
targetWidth: targetWidth,
targetHeight: targetHeight,
elemWidth: elemWidth,
elemHeight: elemHeight,
collisionPosition: collisionPosition,
collisionWidth: collisionWidth,
collisionHeight: collisionHeight,
offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
my: options.my,
at: options.at,
within: within,
elem : elem
});
}
});
if ( $.fn.bgiframe ) {
elem.bgiframe();
}
if ( options.using ) {
using = function( props ) {
var left = targetOffset.left - position.left,
right = left + targetWidth - elemWidth,
top = targetOffset.top - position.top,
bottom = top + targetHeight - elemHeight,
feedback = {
target: {
element: target,
left: targetOffset.left,
top: targetOffset.top,
width: targetWidth,
height: targetHeight
},
element: {
element: elem,
left: position.left,
top: position.top,
width: elemWidth,
height: elemHeight
},
horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
};
if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
feedback.horizontal = "center";
}
if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
feedback.vertical = "middle";
}
if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
feedback.important = "horizontal";
} else {
feedback.important = "vertical";
}
options.using.call( this, props, feedback );
};
}
elem.offset( $.extend( position, { using: using } ) );
});
};
$.ui.position = {
fit: {
left: function( position, data ) {
var within = data.within,
withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
outerWidth = within.width,
collisionPosLeft = position.left - data.collisionPosition.marginLeft,
overLeft = withinOffset - collisionPosLeft,
overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
newOverRight;
if ( data.collisionWidth > outerWidth ) {
if ( overLeft > 0 && overRight <= 0 ) {
newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
position.left += overLeft - newOverRight;
} else if ( overRight > 0 && overLeft <= 0 ) {
position.left = withinOffset;
} else {
if ( overLeft > overRight ) {
position.left = withinOffset + outerWidth - data.collisionWidth;
} else {
position.left = withinOffset;
}
}
} else if ( overLeft > 0 ) {
position.left += overLeft;
} else if ( overRight > 0 ) {
position.left -= overRight;
} else {
position.left = max( position.left - collisionPosLeft, position.left );
}
},
top: function( position, data ) {
var within = data.within,
withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
outerHeight = data.within.height,
collisionPosTop = position.top - data.collisionPosition.marginTop,
overTop = withinOffset - collisionPosTop,
overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
newOverBottom;
if ( data.collisionHeight > outerHeight ) {
if ( overTop > 0 && overBottom <= 0 ) {
newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
position.top += overTop - newOverBottom;
} else if ( overBottom > 0 && overTop <= 0 ) {
position.top = withinOffset;
} else {
if ( overTop > overBottom ) {
position.top = withinOffset + outerHeight - data.collisionHeight;
} else {
position.top = withinOffset;
}
}
} else if ( overTop > 0 ) {
position.top += overTop;
} else if ( overBottom > 0 ) {
position.top -= overBottom;
} else {
position.top = max( position.top - collisionPosTop, position.top );
}
}
},
flip: {
left: function( position, data ) {
var within = data.within,
withinOffset = within.offset.left + within.scrollLeft,
outerWidth = within.width,
offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
collisionPosLeft = position.left - data.collisionPosition.marginLeft,
overLeft = collisionPosLeft - offsetLeft,
overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
myOffset = data.my[ 0 ] === "left" ?
-data.elemWidth :
data.my[ 0 ] === "right" ?
data.elemWidth :
0,
atOffset = data.at[ 0 ] === "left" ?
data.targetWidth :
data.at[ 0 ] === "right" ?
-data.targetWidth :
0,
offset = -2 * data.offset[ 0 ],
newOverRight,
newOverLeft;
if ( overLeft < 0 ) {
newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
position.left += myOffset + atOffset + offset;
}
}
else if ( overRight > 0 ) {
newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
position.left += myOffset + atOffset + offset;
}
}
},
top: function( position, data ) {
var within = data.within,
withinOffset = within.offset.top + within.scrollTop,
outerHeight = within.height,
offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
collisionPosTop = position.top - data.collisionPosition.marginTop,
overTop = collisionPosTop - offsetTop,
overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
top = data.my[ 1 ] === "top",
myOffset = top ?
-data.elemHeight :
data.my[ 1 ] === "bottom" ?
data.elemHeight :
0,
atOffset = data.at[ 1 ] === "top" ?
data.targetHeight :
data.at[ 1 ] === "bottom" ?
-data.targetHeight :
0,
offset = -2 * data.offset[ 1 ],
newOverTop,
newOverBottom;
if ( overTop < 0 ) {
newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
position.top += myOffset + atOffset + offset;
}
}
else if ( overBottom > 0 ) {
newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
position.top += myOffset + atOffset + offset;
}
}
}
},
flipfit: {
left: function() {
$.ui.position.flip.left.apply( this, arguments );
$.ui.position.fit.left.apply( this, arguments );
},
top: function() {
$.ui.position.flip.top.apply( this, arguments );
$.ui.position.fit.top.apply( this, arguments );
}
}
};
(function () {
var testElement, testElementParent, testElementStyle, offsetLeft, i,
body = document.getElementsByTagName( "body" )[ 0 ],
div = document.createElement( "div" );
testElement = document.createElement( body ? "div" : "body" );
testElementStyle = {
visibility: "hidden",
width: 0,
height: 0,
border: 0,
margin: 0,
background: "none"
};
if ( body ) {
$.extend( testElementStyle, {
position: "absolute",
left: "-1000px",
top: "-1000px"
});
}
for ( i in testElementStyle ) {
testElement.style[ i ] = testElementStyle[ i ];
}
testElement.appendChild( div );
testElementParent = body || document.documentElement;
testElementParent.insertBefore( testElement, testElementParent.firstChild );
div.style.cssText = "position: absolute; left: 10.7432222px;";
offsetLeft = $( div ).offset().left;
$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;
testElement.innerHTML = "";
testElementParent.removeChild( testElement );
})();
if ( $.uiBackCompat !== false ) {
(function( $ ) {
var _position = $.fn.position;
$.fn.position = function( options ) {
if ( !options || !options.offset ) {
return _position.call( this, options );
}
var offset = options.offset.split( " " ),
at = options.at.split( " " );
if ( offset.length === 1 ) {
offset[ 1 ] = offset[ 0 ];
}
if ( /^\d/.test( offset[ 0 ] ) ) {
offset[ 0 ] = "+" + offset[ 0 ];
}
if ( /^\d/.test( offset[ 1 ] ) ) {
offset[ 1 ] = "+" + offset[ 1 ];
}
if ( at.length === 1 ) {
if ( /left|center|right/.test( at[ 0 ] ) ) {
at[ 1 ] = "center";
} else {
at[ 1 ] = at[ 0 ];
at[ 0 ] = "center";
}
}
return _position.call( this, $.extend( options, {
at: at[ 0 ] + offset[ 0 ] + " " + at[ 1 ] + offset[ 1 ],
offset: undefined
} ) );
};
}( jQuery ) );
}
}( jQuery ) );
(function( $, undefined ) {
var requestIndex = 0;
$.widget( "ui.autocomplete", {
version: "1.9.2",
defaultElement: "<input>",
options: {
appendTo: "body",
autoFocus: false,
delay: 300,
minLength: 1,
position: {
my: "left top",
at: "left bottom",
collision: "none"
},
source: null,
change: null,
close: null,
focus: null,
open: null,
response: null,
search: null,
select: null
},
pending: 0,
_create: function() {
var suppressKeyPress, suppressKeyPressRepeat, suppressInput;
this.isMultiLine = this._isMultiLine();
this.valueMethod = this.element[ this.element.is( "input,textarea" ) ? "val" : "text" ];
this.isNewMenu = true;
this.element
.addClass( "ui-autocomplete-input" )
.attr( "autocomplete", "off" );
this._on( this.element, {
keydown: function( event ) {
if ( this.element.prop( "readOnly" ) ) {
suppressKeyPress = true;
suppressInput = true;
suppressKeyPressRepeat = true;
return;
}
suppressKeyPress = false;
suppressInput = false;
suppressKeyPressRepeat = false;
var keyCode = $.ui.keyCode;
switch( event.keyCode ) {
case keyCode.PAGE_UP:
suppressKeyPress = true;
this._move( "previousPage", event );
break;
case keyCode.PAGE_DOWN:
suppressKeyPress = true;
this._move( "nextPage", event );
break;
case keyCode.UP:
suppressKeyPress = true;
this._keyEvent( "previous", event );
break;
case keyCode.DOWN:
suppressKeyPress = true;
this._keyEvent( "next", event );
break;
case keyCode.ENTER:
case keyCode.NUMPAD_ENTER:
if ( this.menu.active ) {
suppressKeyPress = true;
event.preventDefault();
this.menu.select( event );
}
break;
case keyCode.TAB:
if ( this.menu.active ) {
this.menu.select( event );
}
break;
case keyCode.ESCAPE:
if ( this.menu.element.is( ":visible" ) ) {
this._value( this.term );
this.close( event );
event.preventDefault();
}
break;
default:
suppressKeyPressRepeat = true;
this._searchTimeout( event );
break;
}
},
keypress: function( event ) {
if ( suppressKeyPress ) {
suppressKeyPress = false;
event.preventDefault();
return;
}
if ( suppressKeyPressRepeat ) {
return;
}
var keyCode = $.ui.keyCode;
switch( event.keyCode ) {
case keyCode.PAGE_UP:
this._move( "previousPage", event );
break;
case keyCode.PAGE_DOWN:
this._move( "nextPage", event );
break;
case keyCode.UP:
this._keyEvent( "previous", event );
break;
case keyCode.DOWN:
this._keyEvent( "next", event );
break;
}
},
input: function( event ) {
if ( suppressInput ) {
suppressInput = false;
event.preventDefault();
return;
}
this._searchTimeout( event );
},
focus: function() {
this.selectedItem = null;
this.previous = this._value();
},
blur: function( event ) {
if ( this.cancelBlur ) {
delete this.cancelBlur;
return;
}
clearTimeout( this.searching );
this.close( event );
this._change( event );
}
});
this._initSource();
this.menu = $( "<ul>" )
.addClass( "ui-autocomplete" )
.appendTo( this.document.find( this.options.appendTo || "body" )[ 0 ] )
.menu({
input: $(),
role: null
})
.zIndex( this.element.zIndex() + 1 )
.hide()
.data( "menu" );
this._on( this.menu.element, {
mousedown: function( event ) {
event.preventDefault();
this.cancelBlur = true;
this._delay(function() {
delete this.cancelBlur;
});
var menuElement = this.menu.element[ 0 ];
if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
this._delay(function() {
var that = this;
this.document.one( "mousedown", function( event ) {
if ( event.target !== that.element[ 0 ] &&
event.target !== menuElement &&
!$.contains( menuElement, event.target ) ) {
that.close();
}
});
});
}
},
menufocus: function( event, ui ) {
if ( this.isNewMenu ) {
this.isNewMenu = false;
if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
this.menu.blur();
this.document.one( "mousemove", function() {
$( event.target ).trigger( event.originalEvent );
});
return;
}
}
var item = ui.item.data( "ui-autocomplete-item" ) || ui.item.data( "item.autocomplete" );
if ( false !== this._trigger( "focus", event, { item: item } ) ) {
if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
this._value( item.value );
}
} else {
this.liveRegion.text( item.value );
}
},
menuselect: function( event, ui ) {
var item = ui.item.data( "ui-autocomplete-item" ) || ui.item.data( "item.autocomplete" ),
previous = this.previous;
if ( this.element[0] !== this.document[0].activeElement ) {
this.element.focus();
this.previous = previous;
this._delay(function() {
this.previous = previous;
this.selectedItem = item;
});
}
if ( false !== this._trigger( "select", event, { item: item } ) ) {
this._value( item.value );
}
this.term = this._value();
this.close( event );
this.selectedItem = item;
}
});
this.liveRegion = $( "<span>", {
role: "status",
"aria-live": "polite"
})
.addClass( "ui-helper-hidden-accessible" )
.insertAfter( this.element );
if ( $.fn.bgiframe ) {
this.menu.element.bgiframe();
}
this._on( this.window, {
beforeunload: function() {
this.element.removeAttr( "autocomplete" );
}
});
},
_destroy: function() {
clearTimeout( this.searching );
this.element
.removeClass( "ui-autocomplete-input" )
.removeAttr( "autocomplete" );
this.menu.element.remove();
this.liveRegion.remove();
},
_setOption: function( key, value ) {
this._super( key, value );
if ( key === "source" ) {
this._initSource();
}
if ( key === "appendTo" ) {
this.menu.element.appendTo( this.document.find( value || "body" )[0] );
}
if ( key === "disabled" && value && this.xhr ) {
this.xhr.abort();
}
},
_isMultiLine: function() {
if ( this.element.is( "textarea" ) ) {
return true;
}
if ( this.element.is( "input" ) ) {
return false;
}
return this.element.prop( "isContentEditable" );
},
_initSource: function() {
var array, url,
that = this;
if ( $.isArray(this.options.source) ) {
array = this.options.source;
this.source = function( request, response ) {
response( $.ui.autocomplete.filter( array, request.term ) );
};
} else if ( typeof this.options.source === "string" ) {
url = this.options.source;
this.source = function( request, response ) {
if ( that.xhr ) {
that.xhr.abort();
}
that.xhr = $.ajax({
url: url,
data: request,
dataType: "json",
success: function( data ) {
response( data );
},
error: function() {
response( [] );
}
});
};
} else {
this.source = this.options.source;
}
},
_searchTimeout: function( event ) {
clearTimeout( this.searching );
this.searching = this._delay(function() {
if ( this.term !== this._value() ) {
this.selectedItem = null;
this.search( null, event );
}
}, this.options.delay );
},
search: function( value, event ) {
value = value != null ? value : this._value();
this.term = this._value();
if ( value.length < this.options.minLength ) {
return this.close( event );
}
if ( this._trigger( "search", event ) === false ) {
return;
}
return this._search( value );
},
_search: function( value ) {
this.pending++;
this.element.addClass( "ui-autocomplete-loading" );
this.cancelSearch = false;
this.source( { term: value }, this._response() );
},
_response: function() {
var that = this,
index = ++requestIndex;
return function( content ) {
if ( index === requestIndex ) {
that.__response( content );
}
that.pending--;
if ( !that.pending ) {
that.element.removeClass( "ui-autocomplete-loading" );
}
};
},
__response: function( content ) {
if ( content ) {
content = this._normalize( content );
}
this._trigger( "response", null, { content: content } );
if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
this._suggest( content );
this._trigger( "open" );
} else {
this._close();
}
},
close: function( event ) {
this.cancelSearch = true;
this._close( event );
},
_close: function( event ) {
if ( this.menu.element.is( ":visible" ) ) {
this.menu.element.hide();
this.menu.blur();
this.isNewMenu = true;
this._trigger( "close", event );
}
},
_change: function( event ) {
if ( this.previous !== this._value() ) {
this._trigger( "change", event, { item: this.selectedItem } );
}
},
_normalize: function( items ) {
if ( items.length && items[0].label && items[0].value ) {
return items;
}
return $.map( items, function( item ) {
if ( typeof item === "string" ) {
return {
label: item,
value: item
};
}
return $.extend({
label: item.label || item.value,
value: item.value || item.label
}, item );
});
},
_suggest: function( items ) {
var ul = this.menu.element
.empty()
.zIndex( this.element.zIndex() + 1 );
this._renderMenu( ul, items );
this.menu.refresh();
ul.show();
this._resizeMenu();
ul.position( $.extend({
of: this.element
}, this.options.position ));
if ( this.options.autoFocus ) {
this.menu.next();
}
},
_resizeMenu: function() {
var ul = this.menu.element;
ul.outerWidth( Math.max(
ul.width( "" ).outerWidth() + 1,
this.element.outerWidth()
) );
},
_renderMenu: function( ul, items ) {
var that = this;
$.each( items, function( index, item ) {
that._renderItemData( ul, item );
});
},
_renderItemData: function( ul, item ) {
return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
},
_renderItem: function( ul, item ) {
return $( "<li>" )
.append( $( "<a>" ).text( item.label ) )
.appendTo( ul );
},
_move: function( direction, event ) {
if ( !this.menu.element.is( ":visible" ) ) {
this.search( null, event );
return;
}
if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
this.menu.isLastItem() && /^next/.test( direction ) ) {
this._value( this.term );
this.menu.blur();
return;
}
this.menu[ direction ]( event );
},
widget: function() {
return this.menu.element;
},
_value: function() {
return this.valueMethod.apply( this.element, arguments );
},
_keyEvent: function( keyEvent, event ) {
if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
this._move( keyEvent, event );
event.preventDefault();
}
}
});
$.extend( $.ui.autocomplete, {
escapeRegex: function( value ) {
return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
},
filter: function(array, term) {
var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
return $.grep( array, function(value) {
return matcher.test( value.label || value.value || value );
});
}
});
$.widget( "ui.autocomplete", $.ui.autocomplete, {
options: {
messages: {
noResults: "No search results.",
results: function( amount ) {
return amount + ( amount > 1 ? " results are" : " result is" ) +
" available, use up and down arrow keys to navigate.";
}
}
},
__response: function( content ) {
var message;
this._superApply( arguments );
if ( this.options.disabled || this.cancelSearch ) {
return;
}
if ( content && content.length ) {
message = this.options.messages.results( content.length );
} else {
message = this.options.messages.noResults;
}
this.liveRegion.text( message );
}
});
}( jQuery ));
(function( $, undefined ) {
var mouseHandled = false;
$.widget( "ui.menu", {
version: "1.9.2",
defaultElement: "<ul>",
delay: 300,
options: {
icons: {
submenu: "ui-icon-carat-1-e"
},
menus: "ul",
position: {
my: "left top",
at: "right top"
},
role: "menu",
blur: null,
focus: null,
select: null
},
_create: function() {
this.activeMenu = this.element;
this.element
.uniqueId()
.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
.attr({
role: this.options.role,
tabIndex: 0
})
.bind( "click" + this.eventNamespace, $.proxy(function( event ) {
if ( this.options.disabled ) {
event.preventDefault();
}
}, this ));
if ( this.options.disabled ) {
this.element
.addClass( "ui-state-disabled" )
.attr( "aria-disabled", "true" );
}
this._on({
"mousedown .ui-menu-item > a": function( event ) {
event.preventDefault();
},
"click .ui-state-disabled > a": function( event ) {
event.preventDefault();
},
"click .ui-menu-item:has(a)": function( event ) {
var target = $( event.target ).closest( ".ui-menu-item" );
if ( !mouseHandled && target.not( ".ui-state-disabled" ).length ) {
mouseHandled = true;
this.select( event );
if ( target.has( ".ui-menu" ).length ) {
this.expand( event );
} else if ( !this.element.is( ":focus" ) ) {
this.element.trigger( "focus", [ true ] );
if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
clearTimeout( this.timer );
}
}
}
},
"mouseenter .ui-menu-item": function( event ) {
var target = $( event.currentTarget );
target.siblings().children( ".ui-state-active" ).removeClass( "ui-state-active" );
this.focus( event, target );
},
mouseleave: "collapseAll",
"mouseleave .ui-menu": "collapseAll",
focus: function( event, keepActiveItem ) {
var item = this.active || this.element.children( ".ui-menu-item" ).eq( 0 );
if ( !keepActiveItem ) {
this.focus( event, item );
}
},
blur: function( event ) {
this._delay(function() {
if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
this.collapseAll( event );
}
});
},
keydown: "_keydown"
});
this.refresh();
this._on( this.document, {
click: function( event ) {
if ( !$( event.target ).closest( ".ui-menu" ).length ) {
this.collapseAll( event );
}
mouseHandled = false;
}
});
},
_destroy: function() {
this.element
.removeAttr( "aria-activedescendant" )
.find( ".ui-menu" ).andSelf()
.removeClass( "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons" )
.removeAttr( "role" )
.removeAttr( "tabIndex" )
.removeAttr( "aria-labelledby" )
.removeAttr( "aria-expanded" )
.removeAttr( "aria-hidden" )
.removeAttr( "aria-disabled" )
.removeUniqueId()
.show();
this.element.find( ".ui-menu-item" )
.removeClass( "ui-menu-item" )
.removeAttr( "role" )
.removeAttr( "aria-disabled" )
.children( "a" )
.removeUniqueId()
.removeClass( "ui-corner-all ui-state-hover" )
.removeAttr( "tabIndex" )
.removeAttr( "role" )
.removeAttr( "aria-haspopup" )
.children().each( function() {
var elem = $( this );
if ( elem.data( "ui-menu-submenu-carat" ) ) {
elem.remove();
}
});
this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
},
_keydown: function( event ) {
var match, prev, character, skip, regex,
preventDefault = true;
function escape( value ) {
return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
}
switch ( event.keyCode ) {
case $.ui.keyCode.PAGE_UP:
this.previousPage( event );
break;
case $.ui.keyCode.PAGE_DOWN:
this.nextPage( event );
break;
case $.ui.keyCode.HOME:
this._move( "first", "first", event );
break;
case $.ui.keyCode.END:
this._move( "last", "last", event );
break;
case $.ui.keyCode.UP:
this.previous( event );
break;
case $.ui.keyCode.DOWN:
this.next( event );
break;
case $.ui.keyCode.LEFT:
this.collapse( event );
break;
case $.ui.keyCode.RIGHT:
if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
this.expand( event );
}
break;
case $.ui.keyCode.ENTER:
case $.ui.keyCode.SPACE:
this._activate( event );
break;
case $.ui.keyCode.ESCAPE:
this.collapse( event );
break;
default:
preventDefault = false;
prev = this.previousFilter || "";
character = String.fromCharCode( event.keyCode );
skip = false;
clearTimeout( this.filterTimer );
if ( character === prev ) {
skip = true;
} else {
character = prev + character;
}
regex = new RegExp( "^" + escape( character ), "i" );
match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
return regex.test( $( this ).children( "a" ).text() );
});
match = skip && match.index( this.active.next() ) !== -1 ?
this.active.nextAll( ".ui-menu-item" ) :
match;
if ( !match.length ) {
character = String.fromCharCode( event.keyCode );
regex = new RegExp( "^" + escape( character ), "i" );
match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
return regex.test( $( this ).children( "a" ).text() );
});
}
if ( match.length ) {
this.focus( event, match );
if ( match.length > 1 ) {
this.previousFilter = character;
this.filterTimer = this._delay(function() {
delete this.previousFilter;
}, 1000 );
} else {
delete this.previousFilter;
}
} else {
delete this.previousFilter;
}
}
if ( preventDefault ) {
event.preventDefault();
}
},
_activate: function( event ) {
if ( !this.active.is( ".ui-state-disabled" ) ) {
if ( this.active.children( "a[aria-haspopup='true']" ).length ) {
this.expand( event );
} else {
this.select( event );
}
}
},
refresh: function() {
var menus,
icon = this.options.icons.submenu,
submenus = this.element.find( this.options.menus );
submenus.filter( ":not(.ui-menu)" )
.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
.hide()
.attr({
role: this.options.role,
"aria-hidden": "true",
"aria-expanded": "false"
})
.each(function() {
var menu = $( this ),
item = menu.prev( "a" ),
submenuCarat = $( "<span>" )
.addClass( "ui-menu-icon ui-icon " + icon )
.data( "ui-menu-submenu-carat", true );
item
.attr( "aria-haspopup", "true" )
.prepend( submenuCarat );
menu.attr( "aria-labelledby", item.attr( "id" ) );
});
menus = submenus.add( this.element );
menus.children( ":not(.ui-menu-item):has(a)" )
.addClass( "ui-menu-item" )
.attr( "role", "presentation" )
.children( "a" )
.uniqueId()
.addClass( "ui-corner-all" )
.attr({
tabIndex: -1,
role: this._itemRole()
});
menus.children( ":not(.ui-menu-item)" ).each(function() {
var item = $( this );
if ( !/[^\-—–\s]/.test( item.text() ) ) {
item.addClass( "ui-widget-content ui-menu-divider" );
}
});
menus.children( ".ui-state-disabled" ).attr( "aria-disabled", "true" );
if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
this.blur();
}
},
_itemRole: function() {
return {
menu: "menuitem",
listbox: "option"
}[ this.options.role ];
},
focus: function( event, item ) {
var nested, focused;
this.blur( event, event && event.type === "focus" );
this._scrollIntoView( item );
this.active = item.first();
focused = this.active.children( "a" ).addClass( "ui-state-focus" );
if ( this.options.role ) {
this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
}
this.active
.parent()
.closest( ".ui-menu-item" )
.children( "a:first" )
.addClass( "ui-state-active" );
if ( event && event.type === "keydown" ) {
this._close();
} else {
this.timer = this._delay(function() {
this._close();
}, this.delay );
}
nested = item.children( ".ui-menu" );
if ( nested.length && ( /^mouse/.test( event.type ) ) ) {
this._startOpening(nested);
}
this.activeMenu = item.parent();
this._trigger( "focus", event, { item: item } );
},
_scrollIntoView: function( item ) {
var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
if ( this._hasScroll() ) {
borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
scroll = this.activeMenu.scrollTop();
elementHeight = this.activeMenu.height();
itemHeight = item.height();
if ( offset < 0 ) {
this.activeMenu.scrollTop( scroll + offset );
} else if ( offset + itemHeight > elementHeight ) {
this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
}
}
},
blur: function( event, fromFocus ) {
if ( !fromFocus ) {
clearTimeout( this.timer );
}
if ( !this.active ) {
return;
}
this.active.children( "a" ).removeClass( "ui-state-focus" );
this.active = null;
this._trigger( "blur", event, { item: this.active } );
},
_startOpening: function( submenu ) {
clearTimeout( this.timer );
if ( submenu.attr( "aria-hidden" ) !== "true" ) {
return;
}
this.timer = this._delay(function() {
this._close();
this._open( submenu );
}, this.delay );
},
_open: function( submenu ) {
var position = $.extend({
of: this.active
}, this.options.position );
clearTimeout( this.timer );
this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
.hide()
.attr( "aria-hidden", "true" );
submenu
.show()
.removeAttr( "aria-hidden" )
.attr( "aria-expanded", "true" )
.position( position );
},
collapseAll: function( event, all ) {
clearTimeout( this.timer );
this.timer = this._delay(function() {
var currentMenu = all ? this.element :
$( event && event.target ).closest( this.element.find( ".ui-menu" ) );
if ( !currentMenu.length ) {
currentMenu = this.element;
}
this._close( currentMenu );
this.blur( event );
this.activeMenu = currentMenu;
}, this.delay );
},
_close: function( startMenu ) {
if ( !startMenu ) {
startMenu = this.active ? this.active.parent() : this.element;
}
startMenu
.find( ".ui-menu" )
.hide()
.attr( "aria-hidden", "true" )
.attr( "aria-expanded", "false" )
.end()
.find( "a.ui-state-active" )
.removeClass( "ui-state-active" );
},
collapse: function( event ) {
var newItem = this.active &&
this.active.parent().closest( ".ui-menu-item", this.element );
if ( newItem && newItem.length ) {
this._close();
this.focus( event, newItem );
}
},
expand: function( event ) {
var newItem = this.active &&
this.active
.children( ".ui-menu " )
.children( ".ui-menu-item" )
.first();
if ( newItem && newItem.length ) {
this._open( newItem.parent() );
this._delay(function() {
this.focus( event, newItem );
});
}
},
next: function( event ) {
this._move( "next", "first", event );
},
previous: function( event ) {
this._move( "prev", "last", event );
},
isFirstItem: function() {
return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
},
isLastItem: function() {
return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
},
_move: function( direction, filter, event ) {
var next;
if ( this.active ) {
if ( direction === "first" || direction === "last" ) {
next = this.active
[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
.eq( -1 );
} else {
next = this.active
[ direction + "All" ]( ".ui-menu-item" )
.eq( 0 );
}
}
if ( !next || !next.length || !this.active ) {
next = this.activeMenu.children( ".ui-menu-item" )[ filter ]();
}
this.focus( event, next );
},
nextPage: function( event ) {
var item, base, height;
if ( !this.active ) {
this.next( event );
return;
}
if ( this.isLastItem() ) {
return;
}
if ( this._hasScroll() ) {
base = this.active.offset().top;
height = this.element.height();
this.active.nextAll( ".ui-menu-item" ).each(function() {
item = $( this );
return item.offset().top - base - height < 0;
});
this.focus( event, item );
} else {
this.focus( event, this.activeMenu.children( ".ui-menu-item" )
[ !this.active ? "first" : "last" ]() );
}
},
previousPage: function( event ) {
var item, base, height;
if ( !this.active ) {
this.next( event );
return;
}
if ( this.isFirstItem() ) {
return;
}
if ( this._hasScroll() ) {
base = this.active.offset().top;
height = this.element.height();
this.active.prevAll( ".ui-menu-item" ).each(function() {
item = $( this );
return item.offset().top - base + height > 0;
});
this.focus( event, item );
} else {
this.focus( event, this.activeMenu.children( ".ui-menu-item" ).first() );
}
},
_hasScroll: function() {
return this.element.outerHeight() < this.element.prop( "scrollHeight" );
},
select: function( event ) {
this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
var ui = { item: this.active };
if ( !this.active.has( ".ui-menu" ).length ) {
this.collapseAll( event, true );
}
this._trigger( "select", event, ui );
}
});
}( jQuery ));
;
/*! RESOURCE: /scripts/classes/ui/Point.js */
var Point = Class.create();
Point.prototype = {
initialize : function(x, y) {
this.x = x;
this.y = y;
},
getX: function() {
return this.x;
},
getY: function() {
return this.y;
}
}
;
/*! RESOURCE: /scripts/classes/util/CookieJar.js */
var CookieJar = Class.create({
appendString: "__CJ_",
initialize: function(options) {
this.options = {
expires: 3600,
path: '',
domain: '',
sameSite: '',
secure: ''
};
Object.extend(this.options, options || {});
if (this.options.expires != '') {
var date = new Date();
date = new Date(date.getTime() + (this.options.expires * 1000));
this.options.expires = '; Expires=' + date.toGMTString();
}
if (this.options.path != '') {
this.options.path = '; Path=' + escape(this.options.path);
}
if (this.options.domain != '') {
this.options.domain = '; Domain=' + escape(this.options.domain);
}
if (this.options.sameSite != '') {
this.options.sameSite = '; SameSite=' + escape(this.options.sameSite);
}
if (this.options.secure == 'secure') {
this.options.secure = '; Secure';
} else {
this.options.secure = '';
}
},
put: function(name, value) {
name = this.appendString + name;
cookie = this.options;
var type = typeof value;
switch(type) {
case 'undefined':
case 'function' :
case 'unknown'  : return false;
case 'boolean'  :
case 'string'   :
case 'number'   : value = String(value.toString());
}
var cookie_str = name + "=" + escape(Object.toJSON(value));
try {
document.cookie = cookie_str + cookie.expires + cookie.path + cookie.domain + cookie.sameSite + cookie.secure;
} catch (e) {
return false;
}
return true;
},
get: function(name) {
name = this.appendString + name;
var cookies = document.cookie.match(name + '=(.*?)(;|$)');
if (cookies) {
return (unescape(cookies[1])).evalJSON();
} else {
return null;
}
}
});
;
/*! RESOURCE: /scripts/list_filter.js */
var runFilterHandlers = {}
function setImage(element, src) {
element = $(element);
if (!element)
return;
element.src = src;
}
function swapImage(imgId, newSrc) {
return function () {setImage(imgId, newSrc);};
}
function setDisplay(element, display) {
var i = $(element);
i.style.display = display;
}
function runFilter(name, listId) {
if (queueFilters[name]) {
columnsGet(name, runFilterCallBack);
return;
}
runFilter0(name, listId);
}
function runFilterCallBack() {
queueFilters[mainFilterTable] = null;
runFilter0(mainFilterTable);
}
function runFilter0(name, listId) {
var filter = getFilter(name);
if (name.endsWith('.'))
name = name.substring(0, name.length - 1);
if (!runFilterHandlers[name])
return;
runFilterHandlers[name](name, filter, listId);
}
function saveFilterRadioChange() {
var div = gel('savefiltergroupref');
var grp = getMessage('Group');
if (getGroupSaveOption() == grp)
div.style.display = "inline";
else
div.style.display = "none";
}
function getFilterVisibility() {
var vis = getGroupSaveOption();
var me = getMessage('Me');
var eone = getMessage('Everyone');
var grp = getMessage('Group');
if (vis == me)
return vis;
if (vis == eone)
return "GLOBAL";
if (vis != grp)
return me;
var vis = '';
var e = gel('save_filter_ref_id').value;
var e = gel(e);
if (e)
vis = e.value;
if (!vis)
return me;
return vis;
}
function getGroupSaveOption() {
var rb = gel('MeRadio');
if (rb && rb.checked)
return rb.value;
rb = gel('EveryoneRadio');
if (rb && rb.checked)
return rb.value;
rb = gel('GroupRadio');
if (rb && rb.checked)
return rb.value;
return getMessage('Me');
}
;
/*! RESOURCE: /scripts/doctype/simpleStorage.js */
(function(root, factory) {
"use strict";
if (typeof define === 'function' && define.amd)
define(factory);
else
root.simpleStorage = factory();
}(this, function() {
"use strict";
var VERSION = "0.1.2",
_storage = false,
_storage_size = 0,
_storage_available = false,
_ttl_timeout = null;
function _init() {
window.localStorage.setItem("__simpleStorageInitTest", "tmpval");
window.localStorage.removeItem("__simpleStorageInitTest");
_load_storage();
_handleTTL();
_setupUpdateObserver();
if ("addEventListener" in window) {
window.addEventListener("pageshow", function(event) {
if (event.persisted) {
_reloadData();
}
}, false);
}
_storage_available = true;
}
function _setupUpdateObserver() {
if ("addEventListener" in window)
window.addEventListener("storage", _reloadData,false);
else
document.attachEvent("onstorage", _reloadData);
}
function _reloadData() {
try {
_load_storage();
} catch (E) {
_storage_available = false;
return;
}
_handleTTL();
}
function _load_storage() {
var source = localStorage.getItem("simpleStorage");
try {
_storage = JSON.parse(source) || {};
} catch (E) {
_storage = {};
}
_storage_size = _get_storage_size();
}
function _save() {
try {
localStorage.setItem("simpleStorage", JSON.stringify(_storage));
_storage_size = _get_storage_size();
} catch (E) {
return E;
}
return true;
}
function _get_storage_size() {
var source = localStorage.getItem("simpleStorage");
return source ? String(source).length : 0;
}
function _handleTTL(){
var curtime, i, len, expire, keys, nextExpire = Infinity, expiredKeysCount = 0;
clearTimeout(_ttl_timeout);
if (!_storage || !_storage.__simpleStorage_meta || !_storage.__simpleStorage_meta.TTL)
return;
curtime = +new Date();
keys = _storage.__simpleStorage_meta.TTL.keys || [];
expire = _storage.__simpleStorage_meta.TTL.expire || {};
for (i = 0, len = keys.length; i<len; i++){
if (expire[keys[i]] <= curtime){
expiredKeysCount++;
delete _storage[keys[i]];
delete expire[keys[i]];
}else{
if (expire[keys[i]] < nextExpire){
nextExpire = expire[keys[i]];
}
break;
}
}
if (nextExpire != Infinity){
_ttl_timeout = setTimeout(_handleTTL, Math.min(nextExpire - curtime, 0x7FFFFFFF));
}
if (expiredKeysCount){
keys.splice(0, expiredKeysCount);
_cleanMetaObject();
_save();
}
}
function _setTTL(key, ttl){
var curtime = +new Date(), i, len, added = false;
ttl = Number(ttl) || 0;
if (ttl !== 0){
if (_storage.hasOwnProperty(key)){
if (!_storage.__simpleStorage_meta)
_storage.__simpleStorage_meta = {};
if (!_storage.__simpleStorage_meta.TTL)
_storage.__simpleStorage_meta.TTL = {expire: {}, keys:[]};
_storage.__simpleStorage_meta.TTL.expire[key] = curtime + ttl;
if (_storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)){
for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i<len; i++){
if (_storage.__simpleStorage_meta.TTL.keys[i] == key){
_storage.__simpleStorage_meta.TTL.keys.splice(i);
}
}
}
for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i<len; i++){
if (_storage.__simpleStorage_meta.TTL.expire[_storage.__simpleStorage_meta.TTL.keys[i]] > curtime + ttl){
_storage.__simpleStorage_meta.TTL.keys.splice(i, 0, key);
}
}
if (!added)
_storage.__simpleStorage_meta.TTL.keys.push(key);
} else
return false;
} else {
if (_storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL){
if (_storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)){
delete _storage.__simpleStorage_meta.TTL.expire[key];
for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i<len; i++){
if (_storage.__simpleStorage_meta.TTL.keys[i] == key){
_storage.__simpleStorage_meta.TTL.keys.splice(i, 1);
break;
}
}
}
_cleanMetaObject();
}
}
clearTimeout(_ttl_timeout);
if (_storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL && _storage.__simpleStorage_meta.TTL.keys.length){
_ttl_timeout = setTimeout(_handleTTL, Math.min(Math.max(_storage.__simpleStorage_meta.TTL.expire[_storage.__simpleStorage_meta.TTL.keys[0]] - curtime, 0), 0x7FFFFFFF));
}
return true;
}
function _cleanMetaObject() {
var updated = false, hasProperties = false, i;
if (!_storage || !_storage.__simpleStorage_meta)
return updated;
if (_storage.__simpleStorage_meta.TTL && !_storage.__simpleStorage_meta.TTL.keys.length) {
delete _storage.__simpleStorage_meta.TTL;
updated = true;
}
for (i in _storage.__simpleStorage_meta) {
if (_storage.__simpleStorage_meta.hasOwnProperty(i)) {
hasProperties = true;
break;
}
}
if (!hasProperties) {
delete _storage.__simpleStorage_meta;
updated = true;
}
return updated;
}
try {
_init();
} catch (E) {}
return {
version : VERSION,
canUse : function() {
return !!_storage_available;
},
set : function(key, value, options) {
if (key == "__simpleStorage_meta")
return false;
if (!_storage)
return false;
if (typeof value == "undefined")
return this.deleteKey(key);
options = options || {};
try {
value = JSON.parse(JSON.stringify(value));
} catch (E) {
return E;
}
_storage[key] = value;
_setTTL(key, options.TTL || 0);
return _save();
},
get : function(key) {
if (!_storage)
return false;
if (_storage.hasOwnProperty(key)
&& key != "__simpleStorage_meta") {
if (this.getTTL(key)) {
return _storage[key];
}
}
},
deleteKey : function(key) {
if (!_storage)
return false;
if (key in _storage) {
delete _storage[key];
_setTTL(key, 0);
return _save();
}
return false;
},
setTTL : function(key, ttl) {
if (!_storage)
return false;
_setTTL(key, ttl);
return _save();
},
getTTL : function(key) {
if (!_storage)
return false;
if (_storage.hasOwnProperty(key)) {
if (_storage.__simpleStorage_meta
&& _storage.__simpleStorage_meta.TTL
&& _storage.__simpleStorage_meta.TTL.expire
&& _storage.__simpleStorage_meta.TTL.expire
.hasOwnProperty(key)) {
var ttl = Math.max(_storage.__simpleStorage_meta.TTL.expire[key] - (+new Date()) || 0, 0);
return ttl || false;
} else {
return Infinity;
}
}
return false;
},
flush : function() {
if (!_storage)
return false;
_storage = {};
_storage_size = 0;
try {
localStorage.removeItem("simpleStorage");
return true;
} catch (E) {
return E;
}
},
index : function() {
if (!_storage)
return false;
var index = [], i;
for (i in _storage) {
if (_storage.hasOwnProperty(i)
&& i != "__simpleStorage_meta") {
index.push(i);
}
}
return index;
},
storageSize : function() {
return _storage_size;
},
getStorage : function() {
return _storage;
}
};
}));
;
/*! RESOURCE: /scripts/doctype/GwtMessage14.js */
var GwtMessage = Class.create({
DEFAULT_LANGUAGE: "en",
PREFETCH_ENTRY_KEY : "PREFETCH_ENTRY_KEY",
initialize: function() {},
set: function(n, v) {
if (!v)
GwtMessage._messages[n] = true;
else
GwtMessage._messages[n] = v;
},
format: function(msg) {
if (!msg)
return "";
var str = msg;
for (var i = 1; i < arguments.length; i++) {
var paramIndex = i - 1;
var rx = new RegExp("\{[" + paramIndex + "]\}", "g");
str = str.replace(rx, arguments[i]);
}
return str;
},
getMessage: function(strVal) {
var valList = [];
valList.push(strVal);
var messages = this.getMessages(valList);
var msg = messages[strVal];
if (arguments.length > 1) {
var realArray = [].slice.call(arguments, 0);
realArray[0] = msg;
msg = this.format.apply(this, realArray);
}
return msg;
},
getMessages: function(resolveList) {
var pageMsgs = {};
var dataRequiringAjaxCall = [];
var results = {};
for (var i = 0; i < resolveList.length; i++) {
var v = GwtMessage._messages[resolveList[i]];
if (v === true)
pageMsgs[resolveList[i]] = resolveList[i];
else if (v)
pageMsgs[resolveList[i]] = v;
else
dataRequiringAjaxCall.push(resolveList[i]);
}
if (dataRequiringAjaxCall.length > 0) {
this._loadNewMessages(dataRequiringAjaxCall);
results = this._buildListFromCache(dataRequiringAjaxCall);
}
for (var key in pageMsgs)
results[key] = pageMsgs[key];
return results;
},
_loadNewMessages: function(resolveList) {
var cachedMessages = this._findCachedKeys(resolveList);
var keysToResolve = this._removeCachedEntries(resolveList, cachedMessages);
if (keysToResolve.length == 0)
return;
var ajax = new GlideAjax("SysMessageAjax");
ajax.addParam("sysparm_keys", keysToResolve.length);
ajax.addParam("sysparm_prefetch", this._shouldPrefetch() ? "true" : "false");
for (var i = 0; i < keysToResolve.length; i++) {
var keyVal = "key" + i;
ajax.addParam(keyVal, keysToResolve[i]);
}
var rxml = ajax.getXMLWait();
this._processResponse(rxml);
},
_removeCachedEntries: function(resolveList) {
var messagesToResolve = new Array();
for (var i = 0; i < resolveList.length; i++) {
var key = resolveList[i];
if (this._getCache().get(key))
continue;
messagesToResolve.push(key);
}
return messagesToResolve;
},
_processResponse: function(rxml) {
this._processItems(rxml, "preitem");
this._processItems(rxml, "item");
},
_shouldPrefetch : function() {
var pf = this._getCache().get(this._PREFETCH_ENTRY_KEY);
var now = new Date().getTime();
if (typeof pf == 'undefined' || (pf + 60000) < now) {
this._getCache().put(this._PREFETCH_ENTRY_KEY, now);
return true;
}
return false;
},
_processItems: function(xml, name) {
var items = xml.getElementsByTagName(name);
for (var i=0; i < items.length; i++) {
var key = items[i].getAttribute("key");
var value = items[i].getAttribute("value");
this.setMessage(key, value);
}
},
setMessage: function(key, msg) {
this._getCache().put(key, msg);
},
isDefaultLanguage: function() {
return this.getLanguage() == this.getDefaultLanguage();
},
getLanguage: function() {
return g_lang;
},
getDefaultLanguage: function() {
return this.DEFAULT_LANGUAGE;
},
_findCachedKeys: function(resolveList) {
var answer = new Array();
var cache = this._getCache();
for (var i =0; i< resolveList.length; i++) {
var key = resolveList[i];
var value = cache.get(key);
if (value)
answer.push(key);
}
return answer;
},
_buildListFromCache: function(resolveList) {
var answer = {};
var cache = this._getCache();
for (var i =0; i < resolveList.length; i++) {
var key = resolveList[i];
var value = cache.get(key);
answer[key] = value;
}
return answer;
},
_getCache: function() {
if (NOW.useSimpleStorage && simpleStorage.canUse()) {
var synch = simpleStorage.get("simpleStorageSynch");
if (NOW.simpleStorageSynch != synch) {
jslog("*** simpleStorageSynch, size: " + simpleStorage.storageSize());
simpleStorage.flush();
simpleStorage.set("simpleStorageSynch", NOW.simpleStorageSynch);
}
return {
put: function(key, value) {
return simpleStorage.set("MSG_" + NOW.language + "_" + key, value);
},
get : function(key) {
return simpleStorage.get("MSG_" + NOW.language + "_" + key);
}
}
}
try {
if (getTopWindow().g_cache_message)
return getTopWindow().g_cache_message;
} catch (e) { }
if (typeof(g_cache_message) != "undefined")
return g_cache_message;
g_cache_message = new GlideClientCache(500);
return g_cache_message;
},
fetch: function(resolveList, callback) {
var cachedMessages = this._findCachedKeys(resolveList);
var keysToResolve = this._removeCachedEntries(resolveList, cachedMessages);
if (keysToResolve.length == 0) {
var answer = this.getMessages(resolveList);
callback(answer);
return;
}
var ajax = new GlideAjax("SysMessageAjax");
ajax.addParam("sysparm_keys", keysToResolve.length);
ajax.addParam("sysparm_prefetch", this._shouldPrefetch() ? "true" : "false");
for (var i = 0; i < keysToResolve.length; i++) {
var keyVal = "key" + i;
ajax.addParam(keyVal, keysToResolve[i]);
}
ajax.getXML(this.fetched.bind(this), null, {
fn : callback,
list : resolveList
});
},
fetched: function(response, parms) {
this._processResponse(response.responseXML);
var answer = this.getMessages(parms.list);
parms.fn(answer);
}
});
GwtMessage._messages = {};
function getMessage(msg, callback) {
if (typeof callback == "function") {
if (typeof msg == "object")
new GwtMessage().fetch(msg, callback);
else
new GwtMessage().fetch([msg], function(o){callback(o[msg]);});
} else {
if (typeof msg == "object")
return new GwtMessage().getMessages(msg);
return new GwtMessage().getMessage(msg);
}
}
function getMessages(msgs) {
return new GwtMessage().getMessages(msgs);
}
;
/*! RESOURCE: /scripts/doctype/DynamicTranslation.js */
var GET_DYNAMIC_TRANSLATION = "/api/sn_dt/v1/dynamic_translation/get_dynamic_translation";
var GET_DYNAMIC_TRANSLATIONS = "/api/sn_dt/v1/dynamic_translation/get_dynamic_translations";
var GET_DETECTED_LANGUAGE = '/api/sn_dt/v1/dynamic_translation/get_detected_language';
var GET_DETECTED_LANGUAGES = '/api/sn_dt/v1/dynamic_translation/get_detected_languages';
var IS_ENABLED = "/api/sn_dt/v1/dynamic_translation/is_enabled";
function setSourceInParms(parms) {
parms = parms || {};
parms.event = parms.event || {};
parms.event.source = 'clientAPI';
return parms;
}
function isNotValidInputText(msg) {
return (typeof msg != 'string');
}
function isNotValidString(str) {
return ((str === null) || (typeof str !== 'string')) ? true : (str.trim().length === 0);
}
function isNotValidTranslator(translator) {
return ((translator != null) && (typeof translator != 'string'));
}
function isNotValidTargetLanguages(targetLanguages) {
if (!Array.isArray(targetLanguages) || (targetLanguages.length === 0)) {
return true;
}
for (var index = 0; index < targetLanguages.length; index++) {
if (isNotValidString(targetLanguages[index])) {
return true;
}
}
return false;
}
function isNotValidAdditionalParameters(additionalParameters) {
if (!Array.isArray(additionalParameters) || (additionalParameters.length === 0)) {
return true;
} else {
for (var index = 0; index < additionalParameters.length; index++) {
var additionalParameter = additionalParameters[index];
if (!additionalParameter || (additionalParameter.constructor != {}.constructor) || (Object.keys(additionalParameter).length != 2)) {
return true;
}
for (eachkey in additionalParameter) {
if (!(eachkey === 'parameterName' || eachkey === 'parameterValue') || isNotValidString(additionalParameter[eachkey])) {
return true;
}
}
}
}
return false;
}
function isNotValidTexts(texts) {
if (!Array.isArray(texts) || (texts.length === 0)) {
return true;
}
for (var index = 0; index < texts.length; index++) {
if (isNotValidInputText(texts[index])) {
return true;
}
}
return false;
}
var errorHandler = {
rejectErrorMessage: function(response) {
if (this.hasMultipleTexts) {
this.reject({
'code': this.code,
'message': response,
'status': 'Error'
});
} else {
this.reject({
'code': this.code,
'message': response
});
}
}
};
function validateOptionalParameters(parms, isTranslation, hasMultipleTexts) {
errorHandler['hasMultipleTexts'] = hasMultipleTexts;
if (parms.constructor != {}.constructor) {
errorHandler['code'] = '40006';
getMessage("Additional parameters are invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
return false;
}
if (isNotValidTranslator(parms.translator)) {
errorHandler['code'] = '40003';
getMessage("Translator (\"translator\" field) is invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
return false;
}
if (isTranslation) {
if ((parms.sourceLanguage != null) && isNotValidString(parms.sourceLanguage)) {
errorHandler['code'] = '40008';
getMessage("Source language (\"sourceLanguage\" field) is invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
return false;
}
if (parms.targetLanguages && isNotValidTargetLanguages(parms.targetLanguages)) {
errorHandler['code'] = '40007';
getMessage("Target languages (\"targetLanguages\" field) are invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
return false;
}
if (parms.additionalParameters && isNotValidAdditionalParameters(parms.additionalParameters)) {
errorHandler['code'] = '40006';
getMessage("Additional parameters are invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
return false;
}
}
return true;
}
function handleErrorResponse(response, hasMultipleTexts) {
errorHandler['hasMultipleTexts'] = hasMultipleTexts;
if (response.status === 400) {
errorHandler['code'] = '40001';
getMessage("Dynamic Translation plugin is not installed", errorHandler.rejectErrorMessage.bind(errorHandler));
} else {
errorHandler['code'] = '40051';
getMessage("Unknown error occurred", errorHandler.rejectErrorMessage.bind(errorHandler));
}
}
var DynamicTranslation = Class.create({
getTranslation: function(msg, parms) {
function getOnSuccessResponse(response) {
var successResponse = {
'translations': response.result.translations,
'translator': response.result.translator
};
if (response.result.detectedLanguage) {
successResponse['detectedLanguage'] = response.result.detectedLanguage;
}
return successResponse;
}
function getOnErrorResponse(response) {
return JSON.parse(response.result.errorMessage);
}
return new Promise(function(resolve, reject) {
errorHandler['reject'] = reject;
if (isNotValidInputText(msg)) {
errorHandler['code'] = '40000';
getMessage("Text is missing or invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
} else if (!parms || validateOptionalParameters(parms, true, false)) {
translationRequest = JSON.stringify({
'textToTranslate': msg,
'parms': setSourceInParms(parms)
});
$j.ajaxSetup({
headers: {
'Content-Type': 'application/json',
'Accept': 'application/json'
}
});
$j.post(GET_DYNAMIC_TRANSLATION, translationRequest, function(response) {
if (!response.result.isError)
resolve(getOnSuccessResponse(response));
else
reject(getOnErrorResponse(response));
})
.fail(function(response) {
handleErrorResponse(response, false);
});
}
});
},
getTranslations: function(msg, parms) {
function getOnSuccessResponse(response) {
var successResponse = {
'status': response.result.status,
'translations': response.result.translations,
'translator': response.result.translator
};
return successResponse;
}
function getOnErrorResponse(response) {
var errorDetails = JSON.parse(response.result.errorMessage);
var errorResponse = {
'status': errorDetails.status,
'code': errorDetails.code,
'message': errorDetails.message
};
if (errorDetails['translations']) {
errorResponse['translations'] = errorDetails['translations'];
}
return errorDetails;
}
return new Promise(function(resolve, reject) {
errorHandler['reject'] = reject;
if (!msg || isNotValidTexts(msg)) {
errorHandler['code'] = '40000';
errorHandler['hasMultipleTexts'] = true;
getMessage("Text is missing or invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
} else if (!parms || validateOptionalParameters(parms, true, true)) {
translationRequest = JSON.stringify({
'textsToTranslate': msg,
'parms': setSourceInParms(parms)
});
$j.ajaxSetup({
headers: {
'Content-Type': 'application/json',
'Accept': 'application/json'
}
});
$j.post(GET_DYNAMIC_TRANSLATIONS, translationRequest, function(response) {
if (!response.result.isError)
resolve(getOnSuccessResponse(response));
else
reject(getOnErrorResponse(response));
})
.fail(function(response) {
handleErrorResponse(response, true);
});
}
});
},
isTranslationEnabled: function(translator) {
var isEnabled = this.isEnabled;
return new Promise(function(resolve, reject) {
if (isNotValidTranslator(translator)) {
getMessage("Translator (\"translator\" field) is invalid", function(response) {
reject({
'code': '40003',
'message': response
});
});
} else {
var params = {
event: {
eventName: 'isTranslationEnabled'
},
translator: translator
};
isEnabled(params).then(function(response) {
resolve(response.translation);
}, function(response) {
reject(false);
});
}
});
},
getDetectedLanguage: function(text, parms) {
function getOnSuccessResponse(response) {
return {
'detectedLanguage': response.result.detectedLanguage,
'alternatives': response.result.alternatives,
'translator': response.result.translator
};
}
function getOnErrorResponse(response) {
return JSON.parse(response.result.errorMessage);
}
return new Promise(function(resolve, reject) {
errorHandler['reject'] = reject;
if (isNotValidInputText(text)) {
errorHandler['code'] = '40000';
getMessage("Text is missing or invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
} else if (!parms || validateOptionalParameters(parms, false, false)) {
detectionRequest = JSON.stringify({
'text': text,
'parms': setSourceInParms(parms)
});
$j.ajaxSetup({
headers: {
'Content-Type': 'application/json',
'Accept': 'application/json'
}
});
$j.post(GET_DETECTED_LANGUAGE, detectionRequest, function(response) {
if (!response.result.isError)
resolve(getOnSuccessResponse(response));
else
reject(getOnErrorResponse(response));
})
.fail(function(response) {
handleErrorResponse(response, false);
});
}
});
},
getDetectedLanguages: function(texts, parms) {
function getOnSuccessResponse(response) {
var successResponse = {
'status': response.result.status,
'detections': response.result.detections,
'translator': response.result.translator
};
return successResponse;
}
function getOnErrorResponse(response) {
var errorDetails = JSON.parse(response.result.errorMessage);
var errorResponse = {
'status': errorDetails.status,
'code': errorDetails.code,
'message': errorDetails.message
};
if (errorDetails['detections']) {
errorResponse['detections'] = errorDetails['detections'];
}
return errorDetails;
}
return new Promise(function(resolve, reject) {
errorHandler['reject'] = reject;
if (!texts || isNotValidTexts(texts)) {
errorHandler['code'] = '40000';
errorHandler['hasMultipleTexts'] = true;
getMessage("Text is missing or invalid", errorHandler.rejectErrorMessage.bind(errorHandler));
} else if (!parms || validateOptionalParameters(parms, false, true)) {
detectionRequest = JSON.stringify({
'texts': texts,
'parms': setSourceInParms(parms)
});
$j.ajaxSetup({
headers: {
'Content-Type': 'application/json',
'Accept': 'application/json'
}
});
$j.post(GET_DETECTED_LANGUAGES, detectionRequest, function(response) {
if (!response.result.isError)
resolve(getOnSuccessResponse(response));
else
reject(getOnErrorResponse(response));
})
.fail(function(response) {
handleErrorResponse(response, true);
});
}
});
},
isEnabled: function(parms) {
function isValidTranslator(translator) {
return (translator) && (typeof translator != 'string') ? false : true;
}
return new Promise(function(resolve, reject) {
var translator = (parms && (parms.constructor == {}.constructor)) ? parms.translator : parms;
if (isValidTranslator(translator)) {
parms = (typeof parms === 'string') ? {
'translator': translator
} : parms;
isEnabledRequest = JSON.stringify({
'parms': setSourceInParms(parms)
});
$j.ajaxSetup({
headers: {
'Content-Type': 'application/json',
'Accept': 'application/json'
}
});
$j.post(IS_ENABLED, isEnabledRequest, function(response) {
var res = response.result;
resolve(res);
})
.fail(function() {
resolve({
'translation': false,
'detection': false,
'batchTranslation': false,
'batchDetection': false
});
});
} else {
getMessage("Translator (\"translator\" field) is invalid", function(response) {
reject({
'code': '40003',
'message': response
});
});
}
});
}
});
DynamicTranslation.getTranslation = function(textToTranslate, parms) {
return new DynamicTranslation().getTranslation(textToTranslate, parms);
};
DynamicTranslation.getTranslations = function(textsToTranslate, parms) {
return new DynamicTranslation().getTranslations(textsToTranslate, parms);
};
DynamicTranslation.isTranslationEnabled = function(translator) {
return new DynamicTranslation().isTranslationEnabled(translator);
};
DynamicTranslation.getDetectedLanguage = function(text, parms) {
return new DynamicTranslation().getDetectedLanguage(text, parms);
};
DynamicTranslation.getDetectedLanguages = function(texts, parms) {
return new DynamicTranslation().getDetectedLanguages(texts, parms);
};
DynamicTranslation.isEnabled = function(parms) {
return new DynamicTranslation().isEnabled(parms);
};
;
/*! RESOURCE: /scripts/classes/GlideFilterDescription.js */
var GlideFilterDescription = Class.create({
initialize: function() {},
choices: null,
setParsedQuery: function(strVal) {
this.parsedQuery = strVal;
},
getParsedQuery: function() {
return this.parsedQuery;
},
setBaseLine: function(value) {
this.baseLine = value;
},
getBaseLine: function() {
return this.baseLine;
},
setMetaData: function(value) {
this.metaData = value;
},
getMetaData: function() {
return this.metaData;
},
setPreferenceParam: function(value) {
this.preference = value;
},
getPreferenceParam: function() {
return this.preference;
},
setExpanded: function(value) {
this.expanded = value;
},
getExpanded: function() {
return this.expanded;
},
setName: function(value) {
this.name = value;
},
getName: function() {
return this.name;
},
setFilter: function(value) {
this.filter = value;
},
getFilter: function() {
return this.filter;
},
setTableName: function(value) {
this.tableName = value;
},
getTableName: function() {
return this.tableName;
},
setPinned: function(value) {
this.pinned = value;
},
getPinned: function() {
return this.pinned;
},
setMainFilterTable: function(filterTable) {
this.mainFilterTable = filterTable;
},
getMainFilterTable: function() {
return this.mainFilterTable;
},
setPinnable: function(value) {
this.pinnable = value;
},
getPinnable: function() {
return this.pinnable;
},
setShowRelated: function(value) {
this.showRelated = value;
},
getShowRelated: function() {
return this.showRelated;
},
setChoiceListMap: function(value) {
this.choiceList = value;
},
getChoiceList: function(table) {
if (typeof this.choiceList == 'undefined')
return null;
return this.choiceList[table];
}
});
;
/*! RESOURCE: /scripts/classes/GlideFilterHandlers.js */
var GlideFilterHandler = Class.create({
MAP_OPEN: "$" + "{",
filterClass: "",
initialize: function(tableName, item, mappingId) {
this.maxValues = 0;
this.tableName = tableName;
this.item = item;
this.isRightOperandShowingRelatedFields = false;
this.lastOperator = null;
this.mappingId = mappingId;
},
destroy: function() {
if (this.tr) {
if (this.tr.operSel)
this.tr.operSel.onchange = null;
this.tr = null;
}
for (i = 0; i < this.inputCnt; i++) {
this.inputs[i].onkeypress = null;
this.inputs[i].onchange = null;
this.inputs[i] = null;
}
this.destroyMappingSupport();
},
create: function(tr, values, filterClass) {
this.tr = tr;
if (values && values.indexOf(this.MAP_OPEN) != -1) {
console.log("implement GlideFilterHandler#create mapping support");
}
this._setup(values);
this._init(values);
this._build(filterClass);
if (this.listenForOperChange)
this.tr.operSel.onchange = this._operOnChange.bind(this);
this.isRightOperandShowingRelatedFields = false;
this.lastOperator = this._getOperator();
},
_setup: function(values) {
},
getTableName: function() {
return this.tableName;
},
getFilterText: function(oper) {
return '';
},
_init: function(values) {
this._initValues(values);
this._initialMappingValue = values;
this._initInputs();
},
_initValues: function(values) {
var op = this._getOperator();
if (!values) {
this.values = [];
} else if (this.tr && this.tr.varType === "variables" && !this.userDateFormat) {
this.values = [ values ];
} else {
if (this.tr && this.tr.varType === "boolean") {
if (values === "0")
values = "false";
else if (values === "1")
values = "true";
}
this.values = values.split("@");
}
for (var i = this.values.length; i < this.maxValues; i++)
this.values[i] = "";
},
_initInputs: function() {
this.inputCnt = 0;
this.inputs = [];
for (var i = 0; i < this.maxValues; i++)
this.inputs[i] = null;
},
_clearValues: function() {
this.values = [];
for (var i = 0; i < this.maxValues; i++)
this.values[i] = "";
},
_isEmptyOper: function() {
var op = this._getOperator();
if (op == 'ISEMPTY' || op == 'ISNOTEMPTY' || op == 'ANYTHING' || op == 'EMPTYSTRING' || op == 'VALCHANGES') {
this._clearValues();
return true;
}
return false;
},
_getOperator: function() {
return getSelectedOption(this.tr.operSel).value;
},
_getInputValue: function(el) {
var value = "";
if (el == null)
return value;
if (el.tagName.toUpperCase() == "TEXTAREA")
return el.value;
if (el.tagName.toUpperCase() == "INPUT")
return this._escapeIfRequired(el.value);
var options = el.options;
if (el.multiple) {
var vals = [];
for (var i = 0; i < options.length; i++) {
if (options[i].selected)
vals.push(options[i].value);
}
return vals.join(",");
}
return options[el.selectedIndex].value;
},
_escapeIfRequired: function(value) {
if (this._getOperator() == "BETWEEN") {
if (value == null) {
for (var i = 0; i < this.values; i++)
this.values[i] = this._escape(this.values[i]);
return this.values;
}
return this._escape(value);
}
return value;
},
_escape: function (value) {
if (value == null)
return;
value = value.replace(/\\/g, "\\\\")
value = value.replace(/@/g, "\\@")
return value;
},
_unescapeIfRequired: function() {
if (this._getOperator() == "BETWEEN")
for (var i=0; i < this.values.length; i++)
this.values[i] = this._unescape(this.values[i]);
},
_unescape: function (value) {
return this._parseValues(value,'@')[0];
},
_addTextInput: function(type, td, label) {
if (!td)
td = this.tr.tdValue;
if (!this._isEmptyOper()) {
if (this.tr.tdMapping)
this.tr.tdMapping.show();
}
var associatedField = this.item && this.item.label;
var input = addTextInput(td, this.values[this.inputCnt], type, associatedField, label);
this.inputs[this.inputCnt] = input;
this.inputCnt++;
return input;
},
_addInvisibleTextInput: function(type, td) {
var input = $(this._addTextInput(type, td));
input.addClassName('sr-only');
input.setAttribute('disabled', 'disabled');
this.inputCnt--;
this.inputs.pop();
getMessage('No value needed', function(msg) {
input.value = msg;
});
},
_addBetweenTextInput: function(type, td) {
if (!td)
td = this.tr.tdValue;
var associatedField = this.item && this.item.label;
var input = addTextInput(td, this.values[this.inputCnt], type, associatedField);
this.inputs[this.inputCnt] = input;
this.inputCnt++;
return input;
},
_addTextArea: function() {
if (!this._isEmptyOper()) {
if (this.tr.tdMapping)
this.tr.tdMapping.show();
}
var associatedField = this.item && this.item.label;
var input = addTextArea(this.tr.tdValue, this.values[this.inputCnt], associatedField);
this.inputs[this.inputCnt] = input;
this.inputCnt++;
return input;
},
_addSelect: function(width, multi, size) {
var associatedField = this.item && this.item.label;
var s = _createFilterSelect(width, multi, associatedField);
this.tr.tdValue.setAttribute("data-value", associatedField);
this.tr.tdValue.appendChild(s);
this.inputs[this.inputCnt] = s;
this.inputCnt++;
return s;
},
_operOnChange: function() {
var lastOp = this.lastOperator;
this.lastOperator = this._getOperator();
if((fieldComparisonOperators.indexOf(lastOp) >= 0) != (fieldComparisonOperators.indexOf(this.lastOperator) >= 0) || lastOp == "DYNAMIC") {
this.inputCnt = 0;
this.input = [];
}
this.getValues();
this._unescapeIfRequired();
this._build();
},
_isTemplate: function() {
var t = this.tr;
while (t) {
t = findParentByTag(t, 'table');
if (t) {
var id = t.id + '';
if (id.indexOf('filters_table') != -1)
break;
}
}
if (!t)
return false;
return t.getAttribute('gsft_template') == 'true';
},
_renderDynamicOperandInput: function(op) {
if (typeof g_dynamic_filter_options == "undefined")
return false;
if (op != "DYNAMIC")
return false;
var addedReferenceInput = false;
var arr = g_dynamic_filter_options.split("##");
for (var i = 0; i < arr.length; i++) {
var aItem = arr[i];
if (aItem.length == 0)
continue;
var aItemArr = aItem.split("::");
if (aItemArr.length < 3)
continue;
var isExclusiveDynamic = typeof gtf_exclusive_dynamics != 'undefined' && gtf_exclusive_dynamics == "true";
if ( !isExclusiveDynamic && this.item && this.item.getReference() == aItemArr[2] || this.originalTableName == aItemArr[3] ) {
if (!addedReferenceInput)
var input = this._addSelect(180, false, 1);
var arrInput = [];
arrInput.push(aItemArr[1]);
var translated = getMessages(arrInput);
addOption(input, aItemArr[0], translated[aItemArr[1]], this.rightOperand == aItemArr[0]);
addedReferenceInput = true;
}
}
return addedReferenceInput;
},
setOriginalTable: function(tableNameFull) {
if (tableNameFull.indexOf(".") == -1)
this.originalTableName = tableNameFull;
else
this.originalTableName = tableNameFull.split(".")[1];
},
getValues: function() {
this._clearValues();
if (this.inputCnt == 0)
return "";
for (var i = 0; i < this.maxValues; i++)
this.values[i] = this._getInputValue(this.inputs[i]);
if (this._isMappingEnabled)
return this.getMappingValue();
if (this.inputCnt == 1)
return this.values[0];
else
return this.values.join("@");
},
_getFilterTable: function() {
if (this.tr && this.tr.conditionRow && this.tr.conditionRow.tableName) {
var conditionRowTableName = this.tr.conditionRow.tableName.split(".");
if (conditionRowTableName.length > 0 && conditionRowTableName[0]) {
return conditionRowTableName[0];
}
}
return firstTable;
},
_populateRightOperandChoices : function() {
var field = this.item.name;
var table = "";
if (typeof mainFilterTable == "undefined")
table = this._getFilterTable();
else
table = mainFilterTable;
var selection = this.values[0];
if (null != table && "" != table && null != field && "" != field) {
var s = this._addSelect(this.width, false, 1);
s.onchange = this.rightOperandfieldOnChange.bind(s, table,this);
var completeSelection = "";
if (selection)
completeSelection = table + '.' + selection;
else
completeSelection = table;
var showRelatedFields = "no";
if (this.isRightOperandShowingRelatedFields || (selection && selection.indexOf(".") >= 0))
showRelatedFields = "yes";
this.addChoices(s, completeSelection, "",
this._filterRightOperand, selection, null,
showRelatedFields, this.item);
if (null != selection)
this.selectRightOperand(s, selection);
}
},
selectRightOperand : function(select, selection) {
var o = getSelectedOption(select);
var options = select.options;
for (var i = 0; i < options.length; i++) {
var option = options[i];
if (null != option && option.value == selection) {
option.innerHTML = getFullLabel(option);
option.style.color = 'green';
option.wasSelected = 'true';
select.style.width = "240px";
option.selected = true;
select.selectedIndex = i;
break;
}
}
},
_getReportTable : function() {
return firstTable;
},
rightOperandfieldOnChange : function(table, t) {
var fieldName = this.value;
var idx = fieldName.indexOf("...");
var f = fieldName.substring(0, idx);
if (f != table)
f = table + "." + f;
f = f + ".";
if (idx != -1) {
if (fieldName == '...Show Related Fields...') {
t.isRightOperandShowingRelatedFields = true;
t.addChoices(this, f, "", t._filterRightOperand,
fieldName, null, "yes", t.item);
} else if (fieldName == '...Remove Related Fields...') {
t.isRightOperandShowingRelatedFields = false;
t.addChoices(this, f, "", t._filterRightOperand,
fieldName, null, "no", t.item);
}
else {
t.isRightOperandShowingRelatedFields = true;
t.addChoices(this, f, "", t._filterRightOperand,
fieldName, null, "yes", t.item);
}
return;
}
var o = getSelectedOption(this);
var fieldName = o.value;
var name = currentTable = getTableFromOption(o);
var options = this.options;
for (var i = 0; i < options.length; i++) {
var option = options[i];
if (optionWasSelected(option)) {
option.innerHTML = getNormalLabel(option);
option.style.color = 'black';
option.wasSelected = 'false';
break;
}
}
if (setup(name) == false)
return;
var tr = this.parentNode.parentNode;
o.normalLabel = o.innerHTML;
o.innerHTML = getFullLabel(o);
o.style.color = 'green';
o.wasSelected = 'true';
this.style.width = "240px";
},
addChoices : function(s, target, fValue, filterMethod, fieldName, filter, showRelated, leftOperandElement) {
var forFilter;
var onlyRestrictedFields;
if (filter) {
forFilter = filter.getOpsWanted();
onlyRestrictedFields = filter.onlyRestrictedFields;
}
var messages = getMessages(MESSAGES_CONDITION_RELATED_FILES);
while (s.length > 0)
s.remove(0);
var placeholder = false;
var selindex = 0;
var indentLabel = false;
var savedItems = new Object();
var savedLabels = new Array();
var labelPrefix = '';
var headersAdded = false;
var parts = target.split(".");
var tableName = parts[0];
var tableDef = getTableReference(tableName);
var extension = '';
var prefix = '';
if (parts.length > 1 && parts[1] != null && parts[1] != '') {
var o = null;
if (filterExpanded && parts.length > 2) {
var tableLabel = tableDef.getLabel();
if (tableLabel == null)
tableLabel = "Parent";
o = addOption(s, tableDef.getName() + "...", tableLabel
+ " " + messages['lowercase_fields'], false);
o.tableName = tableDef.getName();
o.style.color = 'blue';
}
if (parts[1] == PLACEHOLDERFIELD) {
o = addOption(s, PLACEHOLDER,
messages['-- choose field --'], true);
o.style.color = 'blue';
o.tableName = tableDef.getName();
o.fullLabel = messages['-- choose field --'];
placeholder = true;
}
var sPeriod = "";
var cname = '';
for (var i = 1; i < parts.length - 1; i++) {
var f = parts[i];
if (f == null || f == '')
break;
var elementDef = tableDef.getElement(parts[i]);
if (elementDef == null)
break;
var childTable = tableName;
if (elementDef.isReference()) {
childTable = elementDef.getReference();
if (elementDef.isExtensionElement())
extension = childTable;
else
extension = '';
} else {
if (fieldName != null && fieldName.indexOf("...") > -1) {
childTable = parts[0];
} else {
break;
}
}
var parentTable = (extension != '') ? extension : elementDef.getTable().getName();
var tableDef = getTableReference(childTable, parentTable);
if (cname.length)
cname = cname + ".";
cname += elementDef.getName();
sPeriod = "." + sPeriod;
var clabel = sPeriod + elementDef.getLabel() + "-->"
+ elementDef.getRefLabel() + " "
+ messages['lowercase_fields'];
if (s.length === 0) {
o = addOption(s, PLACEHOLDER,
messages['-- choose field --'], true);
o.style.color = 'blue';
o.tableName = tableDef.getName();
o.fullLabel = messages['-- choose field --'];
}
o = addOption(s, cname + "...", clabel, false);
o.tablename = tableDef.getName();
o.style.color = 'blue';
selindex++;
indentLabel = true;
headersAdded = true;
if (labelPrefix.length)
labelPrefix += ".";
labelPrefix += elementDef.getLabel();
if (prefix.length)
prefix += ".";
prefix += elementDef.getName();
}
}
columns = tableDef.getColumns();
queueColumns[tableDef.getName()] = columns;
var textIndex = false;
if (!noOps && !indentLabel) {
var root = columns.getElementsByTagName("xml");
if (root != null && root.length == 1) {
root = root[0];
textIndex = root.getAttribute("textIndex");
}
}
var items = (extension != '') ? tableDef.getTableElements(extension) : tableDef.getElements();
for (var i = 0; i < items.length; i++) {
var item = items[i];
var t = item.getName();
if (filterMethod != null && t != fValue) {
if (filterMethod(leftOperandElement, item,
this.isRightOperandShowingRelatedFields) == true) {
continue;
}
}
var t = item.getName();
if (prefix != '')
t = prefix + '.' + t;
if (!noOps && item.getAttribute("filterable") == "no" && !allowConditionsForJournal(item.getAttribute("type"), filter))
continue;
if (!item.canRead()) {
if (t != fValue) {
continue;
} else {
item.setCanRead('yes');
}
}
if (!item.isActive()) {
if (t != fValue) {
continue;
} else {
item.setActive('yes');
}
}
var label = item.getLabel();
if ((!elementDef || elementDef.getType() != "glide_var")
&& !item.isReference()) {
savedItems[label] = t;
savedLabels[savedLabels.length] = label;
}
if (item.isReference() && leftOperandElement.isReference()) {
if (item.getReference() == leftOperandElement.getReference()) {
savedItems[label] = t;
savedLabels[savedLabels.length] = label;
}
}
if (item.isReference() && !item.isRefRotated()
&& item.getType() != 'glide_list' && filterExpanded
&& showRelated == 'yes') {
label += "-->" + item.getRefLabel();
label += " " + messages['lowercase_fields'];
t += "...";
savedItems[label] = t;
savedLabels[savedLabels.length] = label;
}
}
items = tableDef.getExtensions();
for (var i = 0; i < items.length; i++) {
var item = items[i];
var label = item.getLabel() + " (+)";
t = item.getExtName() + "...";
if (prefix != '')
t = prefix + '.' + t;
savedItems[label] = t;
savedLabels[savedLabels.length] = label;
}
if (!onlyRestrictedFields
&& ((fValue == TEXTQUERY || textIndex)
&& filterMethod == null || forFilter)) {
o = addOption(s, TEXTQUERY, messages['Keywords'], (fValue == TEXTQUERY));
o.fullLabel = messages['Keywords'];
}
for (var i = 0; i < savedLabels.length; i++) {
var sname = savedLabels[i];
if (s.length === 0 && sname.includes("-->")) {
this._addPlaceholderOption(s, tableDef, messages);
}
var o = addOption(s, savedItems[sname], sname, savedItems[sname] == fValue);
o.tableName = tableDef.getName();
if (labelPrefix != '')
o.fullLabel = labelPrefix + "." + sname;
else
o.fullLabel = sname;
if (indentLabel) {
var yyy = o.innerHTML;
o.innerHTML = "&nbsp;&nbsp;&nbsp;" + yyy;
}
var v = o.value;
if (v.indexOf("...") != -1)
if (o.fullLabel.indexOf("(+)") == -1)
o.style.color = 'blue';
else
o.style.color = 'darkred';
}
if (filterExpanded && !onlyRestrictedFields) {
if (s.length === 0) {
this._addPlaceholderOption(s, tableDef, messages);
}
if (showRelated != 'yes') {
var o = addOption(s, "...Show Related Fields...", messages['Show Related Fields'], false);
o.style.color = 'blue';
} else {
var o = addOption(s, "...Remove Related Fields...",messages['Remove Related Fields'], false);
o.style.color = 'blue';
}
}
if (!placeholder && (s.selectedIndex == 0 && ((textIndex && fValue != TEXTQUERY) || headersAdded)))
s.selectedIndex = selindex;
if (s.selectedIndex >= 0) {
fValue = getSelectedOption(s).value;
}
return s;
},
_addPlaceholderOption: function(s, tableDef, messages) {
var o = addOption(s, PLACEHOLDER,
messages['-- choose field --'], true);
o.style.color = 'blue';
o.tableName = tableDef.getName();
o.fullLabel = messages['-- choose field --'];
},
_filterRightOperand : function(leftOperandElement, rightOperandElement, isRightOperandShowingRelatedFields) {
var filterOut = true;
if (null != leftOperandElement && null != rightOperandElement) {
var leftType = leftOperandElement.getType();
var rightType = rightOperandElement.getType();
if ('reference' != leftType) {
if ('reference' == rightType && isRightOperandShowingRelatedFields)
filterOut = false;
if (leftType == rightType)
filterOut = false;
} else {
if ('reference' == rightType)
filterOut = false;
}
}
return filterOut;
},
_renderRightOperandAsFieldList : function(operation) {
if ("SAMEAS" == operation || "NSAMEAS" == operation
|| "GT_FIELD" == operation || "LT_FIELD" == operation
|| "GT_OR_EQUALS_FIELD" == operation
|| "LT_OR_EQUALS_FIELD" == operation)
return true;
return false;
},
_addSameAsLabels : function(t, op) {
if (op == 'SAMEAS' || op == 'NSAMEAS') {
var ASMSG = getMessage('as');
var FROMMSG = getMessage('from');
var span = cel("span", t.tr.tdValue);
span.style.marginLeft = "3px";
span.style.marginRight = "5px";
if (op == 'SAMEAS')
span.innerHTML = ASMSG;
else
span.innerHTML = FROMMSG;
}
},
_parseValues : function(value, delimiter) {
var sb = "";
var parts = [];
if (value == null)
value = ""
var escapeChar = '\\';
var escaped = false;
for (var i = 0; i < value.length; i++) {
var checkChar = value.substr(i, 1);
if (!escaped) {
if (checkChar == escapeChar) {
escaped = true;
continue;
}
if (checkChar == delimiter) {
parts.push(sb);
sb = "";
continue;
}
} else
escaped = false;
sb += checkChar;
}
parts.push(sb);
return parts;
},
setFilterClass : function(filterClass) {
this.filterClass = filterClass;
},
getFilterClass : function() {
return this.filterClass;
},
initMappingSupport: function(shouldEnable, type, mappingMgr) {
var that = this;
var td = this.tr.tdMapping;
this._parentMappingMgr = mappingMgr;
if (!td || !mappingMgr)
return;
this.mappingType = type;
if (shouldEnable) {
td.innerHTML = '<input type="hidden" class="mapping_condition_input" >';
} else {
td.innerHTML = "";
}
this.mappingInput = td.querySelector(".mapping_condition_input");
var value = this._initialMappingValue || "";
this._initMappingValue(value);
this._initialMappingValue = null;
this._parentMappingMgr.initElement(this);
},
_initMappingValue: function(value) {
if (value.indexOf("{{") !== -1) {
this.setMappingValue(value);
this.activateMapping();
} else {
this.deactivateMapping();
}
},
destroyMappingSupport: function() {
if (this._parentMappingMgr && typeof this._parentMappingMgr.destroyElement === "function")
this._parentMappingMgr.destroyElement(this);
},
activateMapping: function() {
this._isMappingEnabled = true;
if (!this.tr)
return;
this.tr.tdValue.style.display = "none";
addClassName(this.tr.tdMapping, "active");
if (this._parentMappingMgr && typeof this._parentMappingMgr.notifyStateChange === "function")
this._parentMappingMgr.notifyStateChange(this);
},
deactivateMapping: function() {
this._isMappingEnabled = false;
if (!this.tr)
return;
this.tr.tdValue.style.display = "";
removeClassName(this.tr.tdMapping, "active");
if (this._parentMappingMgr && typeof this._parentMappingMgr.notifyStateChange === "function")
this._parentMappingMgr.notifyStateChange(this);
},
_getMappingInput: function() {
return this.tr.tdMapping.querySelector(".mapping_condition_input");
},
getMappingValue: function() {
return this._getMappingInput().value;
},
setMappingValue: function(value) {
this._getMappingInput().value = value;
},
type: "GlideFilterHandlers"
});
var GlideFilterString = Class.create(GlideFilterHandler, {
_setup : function(values) {
this.maxValues = 2;
this.listenForOperChange = true;
this.rightOperand = values;
},
_build : function() {
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
if (this.tr.tdMapping)
this.tr.tdMapping.hide();
return;
}
var op = this._getOperator();
if (this._renderDynamicOperandInput(op))
return;
if (this._renderRightOperandAsFieldList(op)) {
this._addSameAsLabels(this, op);
this._populateRightOperandChoices();
} else if (op == 'IN') {
var saveMe = useTextareas;
useTextareas = true;
var inp = this._addTextArea();
inp.style.width = '20em';
var v = this.values[this.inputCnt - 1];
if (this._isTemplate()) {
inp.value = v;
} else {
if (v) {
if (isMSIE)
v = v.replace(/,/g, '\n\r');
else
v = v.replace(/,/g, '\n');
inp.value = v;
}
}
useTextareas = saveMe;
} else if (op === "BETWEEN") {
this._addTextInput(null, null, 'First input value');
var txt = document.createTextNode(" " + getMessage('and') + " ");
this.tr.tdValue.appendChild(txt);
this._addTextInput(null, null, 'Second input value');
} else {
this._addTextInput();
}
},
_getInputValue : function(el) {
if (el == null)
return '';
if (!(el.tagName.toUpperCase() == "TEXTAREA"))
return GlideFilterHandler.prototype._getInputValue.call(this, el);
var value = el.value + '';
if (!this._isTemplate()) {
value = value.replace(/[\n\t]/g, ',');
value = value.replace(/\r/g, '');
}
return this._escapeIfRequired(value);
},
_initMappingValue: function(value) {
this.setMappingValue(value);
this.activateMapping();
},
getValues : function() {
this._clearValues();
if (this.inputCnt == 0)
return "";
for (var i = 0; i < this.maxValues; i++)
this.values[i] = this._getInputValue(this.inputs[i]);
if (this._isMappingEnabled)
return this.getMappingValue();
if (this.inputCnt == 1)
return this.values[0];
else {
this._escapeIfRequired();
return this.values.join("@");
}
},
_initInputs : function() {
if (this._getOperator() == "DYNAMIC") {
this.inputCnt = 1;
this.maxValues = 1;
} else
this.inputCnt = 0;
this.inputs = [];
for (var i = 0; i < this.maxValues; i++)
this.inputs[i] = null;
},
_initValues : function(values) {
var op = this._getOperator();
if (op == "BETWEEN") {
if (!values)
this.values = [];
else
this.values = this._parseValues(values, "@");
for (var i = this.values.length; i < this.maxValues; i++)
this.values[i] = "";
} else {
this.values = [];
this.values[0] = values;
}
},
type: "GlideFilterString"
});
var GlideFilterNumber = Class.create(GlideFilterString, {
_initValues : function(values) {
var op = this._getOperator();
if (op == "BETWEEN") {
if (!values)
this.values = [];
else
this.values = values.split("@");
for (var i = this.values.length; i < this.maxValues; i++)
this.values[i] = "";
} else {
this.values = [];
this.values[0] = values;
}
},
type: "GlideFilterNumber"
});
var GlideFilterDuration = Class.create(GlideFilterHandler, {
_setup: function(values) {
this.maxValues = 2;
var valueArray = this._parseValues (values, "@");
this.duration = new GlideDuration(valueArray[0],  this.item);
if (this._getOperator() == "BETWEEN") {
this.maxValues = 2;
if (valueArray.length > 1)
this.durationTo = new GlideDuration(valueArray[1],  this.item);
else
this.durationTo = new GlideDuration(valueArray[0],  this.item);
}
this.listenForOperChange = true;
},
destroy: function() {
if (this.tr)
this.tr.tdValue.innerHTML = "";
this.inputCnt = 0;
GlideFilterHandler.prototype.destroy.call(this);
},
_initValues: function(values) {
this.values = new Array();
this.values[0] = this.duration.getDays();
this.values[1] = this.duration.getHours();
this.values[2] = this.duration.getMinutes();
this.values[3] = this.duration.getSeconds();
this.inputCnt = 4;
if (this._getOperator() == "BETWEEN") {
this.values[4] = this.duration.getDays();
this.values[5] = this.duration.getHours();
this.values[6] = this.duration.getMinutes();
this.values[7] = this.duration.getSeconds();
this.inputCnt = 8;
}
},
getValues: function() {
this._clearValues();
if (this.inputCnt == 0)
return "";
var answer = this.duration.getValue();
this.values[0] = this.duration.getDays();
this.values[1] = this.duration.getHours();
this.values[2] = this.duration.getMinutes();
this.values[3] = this.duration.getSeconds();
if (this._isMappingEnabled)
return this.getMappingValue();
if (this._getOperator() == "BETWEEN") {
if (this.durationTo) {
var answer1 = this.durationTo.getValue();
this.values[4] = this.durationTo.getDays();
this.values[5] = this.durationTo.getHours();
this.values[6] = this.durationTo.getMinutes();
this.values[7] = this.durationTo.getSeconds();
return "javascript:gs.getDurationDate('" + answer + "')@javascript:gs.getDurationDate('" + answer1 + "')";
}
}
return "javascript:gs.getDurationDate('" + answer + "')";
},
_build: function() {
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
if (this.tr.tdMapping)
this.tr.tdMapping.hide();
return;
} else if (this.tr.tdMapping)
this.tr.tdMapping.show();
if(this._renderRightOperandAsFieldList(this._getOperator())) {
this._addSameAsLabels(this, this._getOperator());
this._populateRightOperandChoices();
} else {
this.inputCnt = 1;
this.duration.buildHTML(this.tr.tdValue);
if (this._getOperator() == "BETWEEN" && this.maxValues == 2) {
var txt = document.createTextNode(" " + getMessage('and') + " ");
this.tr.tdValue.appendChild(txt);
if (!this.durationTo)
this.durationTo = new GlideDuration();
this.durationTo.buildHTML(this.tr.tdValue);
}
}
},
type: "GlideFilterDuration"
});
var GlideFilterStringMulti = Class.create(GlideFilterString, {
_setup : function(values) {
this.maxValues = 1;
this.listenForOperChange = true;
this.rightOperand = values;
},
_build : function() {
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
return;
}
if (this._renderDynamicOperandInput(this._getOperator()))
return;
if (this._renderRightOperandAsFieldList(this._getOperator())) {
this._addSameAsLabels(this, this._getOperator());
this._populateRightOperandChoices();
} else
this._addTextArea();
},
type: "GlideFilterStringMulti"
});
var GlideFilterChoice = Class.create(GlideFilterHandler, {
_setup: function(values) {
this.maxValues = 2;
this.listenForOperChange = true;
},
setChoices: function(choices) {
this.choices = choices;
},
setWidth: function(width) {
this.width = width;
},
setMulti: function(multi) {
this.multi = multi;
},
setSize: function(size) {
this.size = size;
},
_build: function() {
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
if (this.tr.tdMapping)
this.tr.tdMapping.hide();
return;
}
if(this._renderRightOperandAsFieldList(this._getOperator())) {
this._addSameAsLabels(this, this._getOperator());
this._populateRightOperandChoices();
}else {
var s = this._addSelect(this.width, this.multi, this.size);
this._fillSelect();
}
},
_fillSelect: function(inputIndex) {
if (inputIndex == null)
inputIndex = 0;
if (!this._isEmptyOper() && this.tr.tdMapping)
this.tr.tdMapping.show();
var vars = {};
if (this.values[inputIndex]) {
var valSplit = this.values[inputIndex].split(',');
for (var i = 0; i < valSplit.length; i++) {
vars[valSplit[i]] = true;
}
}
var removeNone = false;
var oper = this._getOperator();
if ((oper == 'IN') || (oper == 'NOT IN'))
removeNone = true;
if (isMSIE && this.inputs[0].multiple) {
var isIE6 = /MSIE 6/.test(navigator.userAgent);
if (isIE6)
this.inputs[0].focus();
}
for (var i = 0; i < this.choices.length; i++) {
var option = this.choices[i];
if (option[0] == '' && removeNone)
continue;
var selected = (vars[option[0]] != null || this.values[inputIndex] == option[0]);
addOption(this.inputs[inputIndex], option[0], option[1], selected);
}
},
type: "GlideFilterChoice"
});
var GlideFilterChoiceDynamic = Class.create(GlideFilterChoice, {
_initValues: function(values) {
this.values = (typeof values !== "undefined") ? [values] : [];
},
_setup: function(values) {
this.size = 4;
this.maxValues = 2;
this.listenForOperChange = true;
},
setChoices: function(choices) {
this.choices = choices;
},
_initMappingValue: function(value) {
this.mappingType = 'choice';
if (value.indexOf("{{") !== -1) {
this.setMappingValue(value);
this.activateMapping();
} else {
this.deactivateMapping();
}
},
_build: function() {
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
if (this.tr.tdMapping)
this.tr.tdMapping.hide();
return;
}
var oper = this._getOperator();
if (this._renderRightOperandAsFieldList(oper)) {
this._addSameAsLabels(this, oper);
this._populateRightOperandChoices();
} else if ((oper == 'LIKE') || (oper == 'STARTSWITH') || (oper == 'ENDSWITH') || (oper == 'NOT LIKE')) {
if (this.prevOper && (this.prevOper != 'LIKE') && (this.prevOper != 'STARTSWITH') && (this.prevOper != 'ENDSWITH'))
this._clearValues();
this._addTextInput();
} else if ((oper == 'IN') || (oper == 'NOT IN')) {
this.multi = true;
var s = this._addSelect(this.width, this.multi, this.size);
if (!this.hasChoices) {
s.disabled = true;
this._getChoices();
} else
this._fillSelect();
} else if (oper == 'BETWEEN')	 {
this.multi = false;
if (Array.isArray(this.values) && this.values.length === 1)
this.values = this.values.join('').split("@");
var s = this._addSelect(this.width, this.multi, 1);
if (!this.hasChoices) {
s.disabled = true;
this._getChoices();
} else
this._fillSelect();
var txt = document.createTextNode(" " + getMessage('and') + " ");
this.tr.tdValue.appendChild(txt);
this.multi = false;
var s = this._addSelect(this.width, this.multi, 1);
if (!this.hasChoices) {
s.disabled = true;
this._getChoices();
} else
this._fillSelect(1);
} else {
this.multi = false;
var s = this._addSelect(this.width, this.multi, 1);
if (!this.hasChoices) {
s.disabled = true;
this._getChoices();
} else
this._fillSelect();
}
this.prevOper = oper;
},
_getChoices: function() {
if (typeof g_filter_description != 'undefined' && g_filter_description.getChoiceList(this.tr.tableField) != null) {
var response = loadXML(g_filter_description.getChoiceList(this.tr.tableField));
this._addChoices(response);
} else {
var ajax = new GlideAjax('PickList');
ajax.addParam('sysparm_chars', '*');
ajax.addParam('sysparm_nomax', 'true');
ajax.addParam('sysparm_name', this.tr.tableField);
var domain = gel('sysparm_domain');
if (domain)
ajax.addParam('sysparm_domain', domain.value);
if (this.tr.includeExtendedChoices === 'false')
ajax.addParam('sysparm_include_extended_choices', 'false');
var response = ajax.getXMLWait();
this._addChoices(response);
}
},
_addChoices : function(xml) {
if (!xml)
return;
var msg = new GwtMessage();
var select = this.inputs[0];
select.disabled = false;
select.options.length = 0;
this.choices = [];
this.hasChoices = true;
var root = xml.documentElement;
var dep = root.getAttribute("dependent");
var items = xml.getElementsByTagName("item");
var addNone = (root.getAttribute("include_none") === "false") ? false : true;
for (var i = 0; i < items.length; i++) {
var item = items[i];
if (item.getAttribute("value") == '')
addNone = false;
}
if (addNone)
this.choices[0] = [ '', msg.getMessage('-- None --') ];
for (var i = 0; i < items.length; i++) {
var item = items[i];
var v = item.getAttribute("value");
var l = item.getAttribute("label");
var option = [ v, l ];
this.choices.push(option);
}
if (dep != null) {
this.choices = this.choices
.sort(function(a, b) {
if ((a[1].toLowerCase() + "") < (b[1]
.toLowerCase() + "")) {
return -1;
}
if ((a[1].toLowerCase() + "") > (b[1]
.toLowerCase() + "")) {
return 1;
}
return 0;
});
for (var i = 0; i < this.choices.length - 1; i++) {
if (this.choices[i][1] == this.choices[i + 1][1])
i = this.amendLabel(i);
}
}
this._fillSelect();
},
amendLabel: function(i) {
var dupe = this.choices[i][1];
while (i < this.choices.length && this.choices[i][1] == dupe) {
var c = this.choices[i];
c[1] = c[1] + " - " + c[0];
i++;
}
return i-1;
},
type: "GlideFilterChoiceDynamic"
});
var GlideFilterSnapshotChoice = Class.create(GlideFilterChoiceDynamic, {
_getChoices: function() {
this._addChoices(this.item.attributes.options);
},
_addChoices: function(options) {
if (!options)
return;
var select = this.inputs[0];
select.disabled = false;
select.options.length = 0;
this.hasChoices = true;
this.choices = JSON.parse(options);
this._fillSelect();
},
type: "GlideFilterSnapshotChoice"
});
var GlideFilterCurrency = Class.create(GlideFilterString, {
initialize: function(tableName, item) {
GlideFilterHandler.prototype.initialize.call(this, tableName, item);
},
_operOnChange: function() {
var lastOp = this.lastOperator;
this.lastOperator = this._getOperator();
if((fieldComparisonOperators.indexOf(lastOp) >= 0) != (fieldComparisonOperators.indexOf(this.lastOperator) >= 0)) {
this.inputCnt = 0;
this.input = [];
}
this.getValues();
if (lastOp != 'BETWEEN' && this._getOperator() == 'BETWEEN') {
this.values[2] = this.values[1];
this.values[1] = '';
}
this._unescapeIfRequired();
this._build();
},
_setup: function(values) {
this.maxValues = 2;
this.id = this.tr.tableField + "." + guid();
this.listenForOperChange = true;
},
_build: function() {
GlideFilterString.prototype._build.call(this);
var s = this._addSelect(60, false, 1);
this._getCurrencies(s);
},
_getCurrencies: function(s) {
var currencies = new Array();
if (currencies.length != 0)
return currencies;
var ajax = new GlideAjax("CurrencyConverter");
ajax.addParam("sysparm_name", "getCurrencies");
ajax.getXMLAnswer(this._getCurrenciesResponse.bind(this), null, s);
},
_getCurrenciesResponse: function(answer, s) {
var values = answer;
var currencies = values.split(",");
var cache = this._getCache();
cache.put("currencies", values);
for (var i = 0; i < currencies.length; i++)
addOption(s, currencies[i], currencies[i]);
this.currency_widget = s;
this._parseValue();
},
_resolveFromCache:function() {
var cache = this._getCache();
var value = cache.get("currencies");
if (value)
return value.split(",");
return [];
},
_getCache:function() {
if (typeof(g_cache_currency) != "undefined")
return g_cache_currency;
g_cache_currency = new GlideClientCache(1);
return g_cache_currency;
},
_parseValue: function() {
if (this.inputs.length == 0)
return;
var processSelect = false;
var currency;
for (var i=0; i < this.inputs.length; i++) {
var v = this.inputs[i].value;
if (!v)
continue;
if (v.indexOf('javascript') < 0) {
if (v.match(/[A-Z]+[,;][0-9]+/g)) {
processSelect = true
var splitValue = v.split(/[,;]+/);
currency = splitValue[0];
this.inputs[i].value = splitValue[1];
}
continue;
}
processSelect = true;
var sa = v.split(';');
var first = sa[0].split('\'');
currency = first[first.length - 1];
var price = sa[sa.length - 1];
var priceIndex = price.indexOf('\'');
price = price.substring(0, priceIndex);
this.inputs[i].value = price;
}
if (!processSelect)
return;
var sel = new Select(this.currency_widget);
sel.selectValue(currency);
},
getValues: function() {
if (this._isMappingEnabled)
return this.getMappingValue();
if (!this.currency_widget)
return '';
var v = GlideFilterString.prototype.getValues.call(this);
var tn = this.item.table.tableName;
var fn = this.item.name;
var valList = v.split('@');
var fromVal = 'javascript:global.getCurrencyFilter(\'' + tn + '\',\'' + fn +'\', \'' + this.currency_widget.value + ';' + valList[0] + '\')'
if ((valList.length > 1 && this._getOperator() == 'BETWEEN') || (valList.length > 2))
return fromVal + '@javascript:global.getCurrencyFilter(\'' + tn + '\',\'' + fn +'\', \'' + this.currency_widget.value + ';' + valList[1] + '\')'
return fromVal;
},
destroy : function() {
GlideFilterString.prototype.destroy.call(this);
this.currency_widget = null;
},
type: "GlideFilterCurrency",
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideDuration.js */
var GlideDuration = Class.create({
MAX_UNIT_DAYS: 4,
MAX_UNIT_HOURS: 3,
MAX_UNIT_MINUTES: 2,
MAX_UNIT_SECONDS: 1,
initialize: function(value, item) {
this.values = new Array();
var gMessage = new GwtMessage();
var values = ["Days", "Hours", "Minutes", "Seconds"];
var answer = gMessage.getMessages(values);
this.daysMessage = answer["Days"];
this.hourMessage = answer["Hours"];
this.minutesMessage = answer["Minutes"];
this.secondsMessage = answer["Seconds"];
this.maxLevel = this.MAX_UNIT_DAYS;
if (item) {
this.item = item;
this.maxLevel = this._parseMaxUnit(this.item.getNamedAttribute('max_unit'));
}
if (value)
this.values = GlideDuration.parseDurationToParts(value);
for (var i = this.values.length; i < 4; i++)
this.values[i] = "0";
},
buildHTML: function(parent) {
this.parent = parent;
this.days = 0;
this.hour = 0;
this.minute = 0;
this.second = 0;
if (this.maxLevel == this.MAX_UNIT_DAYS) {
this._addSpan(this.daysMessage);
this.days = this._addInput("dur_day", this.getDays());
this.days.maxLength = "5";
this.days.style.marginRight = "5px";
}
else
this.hour = (this.getDays() * 24);
if (this.maxLevel >= this.MAX_UNIT_HOURS) {
this._addSpan(this.hourMessage);
this.hour = this._addInput("dur_hour", this.hour + parseInt(this.getHours(), 10));
if (this.maxLevel == this.MAX_UNIT_HOURS)
this.hour.maxLength = "7";
this._addSpan(":");
}
else
this.minute = ((this.hour + parseInt(this.getHours(),10)) * 60);
if (this.maxLevel == this.MAX_UNIT_MINUTES)
this._addSpan(this.minutesMessage);
if (this.maxLevel >= this.MAX_UNIT_MINUTES) {
this.minute = this._addInput("dur_min", this.minute + parseInt(this.getMinutes(), 10));
if (this.maxLevel == this.MAX_UNIT_MINUTES)
this.minute.maxLength = "9";
this._addSpan(":");
}
else
this.second = ((this.minute + parseInt(this.getMinutes(),10)) * 60);
if (this.maxLevel == this.MAX_UNIT_SECONDS)
this._addSpan(this.secondsMessage);
this.second = this._addInput("dur_sec", this.second + parseInt(this.getSeconds(), 10));
if (this.maxLevel == this.MAX_UNIT_SECONDS)
this.second.maxLength = "10";
},
_addInput: function (id, value) {
var ic = cel("input", this.parent);
ic.className = 'filerTableInput form-control';
ic.id = id;
ic.size = "2";
ic.maxLength = "2";
ic.value = value;
ic.setAttribute('aria-label', this.getAriaLabel(id));
return ic;
},
_addSpan: function(text) {
var sp = cel("label", this.parent);
sp.className = 'condition';
sp.innerHTML = text;
},
getDays: function() {
return this.values[0];
},
getHours: function() {
return this.values[1];
},
getMinutes: function() {
return this.values[2];
},
getSeconds: function() {
return this.values[3];
},
getValue: function() {
var day = 0;
var hour = 0;
var min = 0;
var sec = 0;
if (this.maxLevel == this.MAX_UNIT_DAYS)
day = parseInt(this.days.value, 10);
if (this.maxLevel >= this.MAX_UNIT_HOURS)
hour = parseInt(this.hour.value, 10);
if (this.maxLevel >= this.MAX_UNIT_MINUTES)
min = parseInt(this.minute.value, 10);
if (this.maxLevel >= this.MAX_UNIT_SECONDS)
sec = parseInt(this.second.value, 10);
if (sec >= 60) {
min += Math.floor(sec / 60);
sec = sec % 60;
}
if (min >= 60) {
hour += Math.floor(min / 60);
min = min % 60;
}
if (hour >= 24) {
day += Math.floor(hour / 24);
hour = hour % 24;
}
if (!day || day == null)
day = 0;
if (!hour || hour == null)
hour = 0;
if (!min || min == null)
min = 0;
if (!sec || sec == null)
sec = 0;
this.values[0] = day + '';
this.values[1] = hour + '';
this.values[2] = min + '';
this.values[3] = sec + '';
return day + " " + hour + ":" + min + ":" + sec;
},
_parseMaxUnit: function(max_unit) {
switch (max_unit) {
case 'hours':
maxLevel = this.MAX_UNIT_HOURS;
break;
case 'minutes':
maxLevel = this.MAX_UNIT_MINUTES;
break;
case 'seconds':
maxLevel = this.MAX_UNIT_SECONDS;
break;
default:
maxLevel = this.MAX_UNIT_DAYS;
}
return maxLevel;
},
getAriaLabel: function(id) {
var gMessage = new GwtMessage();
var label = '';
switch (id) {
case 'dur_day':
label = gMessage.getMessage('Days');
break;
case 'dur_hour':
label = gMessage.getMessage('Hours');
break;
case 'dur_min':
label = gMessage.getMessage('Minutes');
break;
case 'dur_sec':
label = gMessage.getMessage('Seconds');
break;
}
return label;
}
});
GlideDuration.parseDurationToParts = function(value) {
var MS_IN_DAY = 86400000;
if (value.indexOf("javascript:") == 0) {
var s = value.split("'");
value = s[1];
}
var parts = value.split(" ");
if (parts.length == 2) {
var times = parts[1].split(":");
for (var i=0; i < times.length; i++)
parts[1+i] = times[i];
var dateParts = parts[0].split("-");
if (dateParts.length == 3)
parts[0] = parseInt(Date.parse(dateParts[1] + '/' + dateParts[2] + '/' + dateParts[0] + ' 00:00:00 UTC')) / MS_IN_DAY;
} else if(parts.length === 1) {
var newPart = [];
newPart[0] = 0;
var times = value.split(":");
for (var i=0; i < times.length; i++)
newPart[1+i] = times[i];
parts = newPart;
}
return parts;
}
;
/*! RESOURCE: /scripts/classes/GlideFilterReference.js */
var GlideFilterReference = Class.create(GlideFilterHandler, {
_setup: function(values) {
this.maxValues = 1;
this.tableField = this.tr.tableField;
this.id = this.tableField + "." + guid();
this.listenForOperChange = true;
this.rightOperand = values;
},
_initValues: function(values) {
this.values = [];
if (values)
this.values[0] = values;
},
_build: function() {
clearNodes(this.tr.tdValue);
var inDoctypeMode = (document.documentElement.getAttribute('data-doctype') == 'true');
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
if (this.tr.tdMapping)
this.tr.tdMapping.hide();
return;
}
var op = this._getOperator();
var input = this._addTextInput("hidden");
input.id = this.id;
if (this._renderRightOperandAsFieldList(op)) {
this._addSameAsLabels(this, op);
this._populateRightOperandChoices();
return;
}
if (this._renderDynamicOperandInput(op))
return;
input = this._addTextInput();
input.id = "sys_display." + this.id;
input.onfocus = this._onFocus.bind(this);
input.onkeydown = this._onKeyDown.bindAsEventListener(this);
input.onkeypress = this._onKeyPress.bindAsEventListener(this);
input.onkeyup = this._onKeyUp.bindAsEventListener(this);
input.autocomplete = "off";
input.ac_columns = "";
input.ac_order_by = "";
if (inDoctypeMode) {
input.setAttribute("class", "pull-left form-control filter-reference-input");
input.setAttribute("style", "width: 80%");
}
setAttributeValue(input, 'autocomplete', 'off');
var displayValue = gel('fancy.' + this.values[0]);
if (displayValue && displayValue.value != '')
this.inputs[1].value = displayValue.value;
else if (this.values) {
this.inputs[1].value = this.values;
this._resolveReference();
}
var view = $$("[name='sysparm_view']")[0];
if (view && (view.value == "sys_ref_list"))
return;
if (inDoctypeMode) {
var btn = cel("button");
btn.setAttribute("class", "icon-search btn btn-default filerTableAction");
btn.setAttribute("aria-label", getMessage('Lookup using list'));
btn.setAttribute("title", getMessage('Lookup using list'));
btn.setAttribute("aria-haspopup", true);
btn.setAttribute("style", "margin-left: 2px");
btn.onclick = this._refListOpen.bindAsEventListener(this);
this.tr.tdValue.style.minWidth = "200px";
this.tr.tdValue.appendChild(btn);
} else {
var image = createImage("images/reference_list.gifx", "Lookup using list", this, this._refListOpen);
image.setAttribute("class", "filerTableAction");
this.tr.tdValue.appendChild(image);
}
},
_refListOpen: function() {
var target = this.id;
if (target.indexOf("IO:") > -1)
target = target.substring(target.indexOf("IO:"), target.length);
if (this.useRefQual && this.item.getRefQual())
reflistOpen(target, this.item.getName(), this.item.getReference(), null, false, null, this.item.getRefQual());
else {
var qualifier;
var reference = this.item.getReference();
if (!reference) {
reference = "sys_choice";
qualifier = "table=" + this.getTableName() + "^element=" + this.item.getName();
}
reflistOpen(target, this.item.getName(), reference, null, null, null, qualifier);
}
this._onRefListOpen();
return false;
},
_onRefListOpen: function () {
},
setUseRefQual: function(useRefQual) {
this.useRefQual = useRefQual;
},
getValues: function() {
this._clearValues();
if (this._isMappingEnabled)
return this.getMappingValue();
if (this._isEmptyOper())
return '';
var oper = this._getOperator();
var input = this.inputs[0];
if (this.inputCnt == 2) {
var userInput = this.inputs[1];
var userInputVal = userInput.value;
if (userInputVal != null && (userInputVal.indexOf("javascript:") > -1))
input = userInput;
else if (this._useDisplayValue(oper))
input = userInput;
else if (this.item.getType() == 'glide_list' && oper == "DYNAMIC")
input = userInput;
}
if (input) {
return input.value;
} else
return '';
},
_useDisplayValue: function(oper) {
return this.item.getType() != 'glide_list' && oper != '=' && oper != '!=' && oper != "CHANGESFROM" && oper != "CHANGESTO";
},
_resolveReference: function() {
if (this.values[0]) {
var ajax = new GlideAjax("ResolveRef");
ajax.addParam("sysparm_name", this.tableField);
ajax.addParam("sysparm_value", this.values[0]);
ajax.getXML(this._resolveReferenceResponse.bind(this));
}
},
_resolveReferenceResponse: function(request) {
if (!request)
return;
var xml = request.responseXML;
if (!xml)
return;
if (xml) {
var items = xml.getElementsByTagName("item");
if (items && items.length > 0 && items[0] && this.inputs[1])
this.inputs[1].value = items[0].getAttribute("label");
}
},
_onFocus: function(evt) {
if (!this.inputs[1].ac) {
var partialSearchFilterTypes = ',STARTSWITH,ENDSWITH,LIKE,NOT LIKE,';
var tdOper = this.inputs[1].up(1).tdOper;
var currentFilterType = (tdOper.firstElementChild || tdOper.children[0] || {}).value;
if (partialSearchFilterTypes.indexOf(','+currentFilterType+',') > -1)
this.inputs[1].setAttribute('is_filter_using_contains', 'true');
this.inputs[1].ac = new AJAXReferenceCompleter(this.inputs[1], this.id, '');
this.inputs[1].ac.elementName = this.tableField;
this.inputs[1].ac.clearDerivedFields = true;
if (this.useRefQual && this.item.getRefQual()) {
this.inputs[1].ac.setIgnoreRefQual(false);
this.inputs[1].ac.setRefQual(this.item.getRefQual());
} else {
this.inputs[1].ac.setIgnoreRefQual(true);
}
}
},
_onKeyDown: function(evt) {
return acReferenceKeyDown(this.inputs[1], evt);
},
_onKeyPress: function(evt) {
return acReferenceKeyPress(this.inputs[1], evt);
},
_onKeyUp: function(evt) {
return acReferenceKeyUp(this.inputs[1], evt);
},
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideFilterVariables.js */
var GlideFilterVariables = Class.create(GlideFilterHandler, {
_setup: function(values) {
this.maxValues = 1;
this.id = this.tr.tableField + "." + guid();
this.catID = "item_option_new.cat_item." + guid();
this.listenForOperChange = true;
this.rightOperand = values;
},
_initValues: function(values) {
this.values = [];
this.varValue = '';
if (values) {
this.values[0] = values.substring(0,32);
this.refQuery = values.substring(32);
var query = new GlideEncodedQuery(this.tableName, "IO:" + this.values[0] + this.refQuery, null);
query.parse();
var terms = query.getTerms();
var term = terms[0];
this.varOp = term.getOperator();
this.varValue = term.getValue();
}
},
_build: function() {
this.queryID = this.tr.tdValue.queryID;
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
return;
}
this._hideOperators();
var input = this._addTextInput("hidden");
input.id = this.id;
input = this._addTextInput();
input.id = "sys_display." + this.id;
input.onfocus = this._onFocus.bind(this);
input.onRefPick = this._onFocus.bind(this);
input.onkeydown = this._onKeyDown.bindAsEventListener(this);
input.onkeypress = this._onKeyPress.bindAsEventListener(this);
input.onkeyup = this._onKeyUp.bindAsEventListener(this);
input.autocomplete = "off";
input.data_completer = "AJAXTableCompleter";
input.ac_columns = "cat_item;category";
input.ac_order_by = "";
input.placeholder = getMessage("Select Variable");
setAttributeValue(input, 'autocomplete', 'off');
var displayValue = gel('fancy.' + this.values[0]);
if (displayValue && displayValue.value != '')
this.inputs[1].value = displayValue.value;
else if (this.values) {
this.inputs[1].value = this.values;
this._resolveReference();
}
if (document.documentElement.getAttribute('data-doctype') == 'true') {
var btn = cel("button");
btn.setAttribute("class", "icon-search btn btn-default filerTableAction");
btn.setAttribute("aria-label", getMessage('Lookup using list'));
btn.setAttribute("aria-haspopup", true);
btn.onclick = this._refListOpen.bindAsEventListener(this);
this.tr.tdValue.appendChild(btn);
} else {
var image = createImage("images/reference_list.gifx", "Lookup using list", this, this._refListOpen);
image.setAttribute("class", "filerTableAction")
this.tr.tdValue.appendChild(image);
}
this._buildCatItemReference();
this._makeCatItemFirst();
if (!this.values[0])
return;
this._getVariableType(this.values[0]);
},
_buildCatItemReference: function() {
var queryID = this.queryID;
td = this.tr.conditionRow.addTD(this.tr, queryID);
td.nowrap = true;
this.tr.catTD = td;
var input = this._addTextInput("hidden", td);
input.id = this.catID;
input = this._addTextInput("", td);
input.id = "sys_display." + this.catID;
input.onfocus = this._onFocusCat.bind(this);
input.onRefPick = this._onFocusCat.bind(this);
input.onkeydown = this._onKeyDownCat.bindAsEventListener(this);
input.onkeypress = this._onKeyPressCat.bindAsEventListener(this);
input.onkeyup = this._onKeyUpCat.bindAsEventListener(this);
input.autocomplete = "off";
input.data_completer = "AJAXTableCompleter";
input.ac_columns = "cat_item;category";
input.ac_order_by = "";
input.placeholder = getMessage("Select Item");
setAttributeValue(input, 'autocomplete', 'off');
if (document.documentElement.getAttribute('data-doctype') == 'true') {
var btn = cel("button");
btn.setAttribute("class", "icon-search btn btn-default filerTableAction");
btn.setAttribute("aria-label", getMessage('Lookup using list'));
btn.setAttribute("aria-haspopup", true);
btn.onclick = this._refListOpenCat.bindAsEventListener(this);
td.addClassName("form-inline");
td.appendChild(btn);
} else {
var image = createImage("images/reference_list.gifx", "Lookup using list", this, this._refListOpenCat);
image.setAttribute("class", "filerTableAction");
td.appendChild(image);
}
},
destroy: function() {
this.inputCnt = 0;
if (this.tr) {
this.tr.tdValue.innerHTML = "";
if (this.tr.variableID) {
this.tr.removeChild(this.tr.variableID);
this.tr.variableID = null;
}
if (this.tr.catTD) {
this.tr.removeChild(this.tr.catTD);
this.tr.catTD = null;
}
var td = this.tr.tdOper;
if (td)
td.style.display="inline";
}
GlideFilterHandler.prototype.destroy.call(this);
},
setOriginalTable: function(tableName) {
this.originalTableName = tableName;
},
_hideOperators: function() {
if (this.tr.tdOper)
this.tr.tdOper.style.display="none";
},
_refListOpen: function() {
if (this.values[2])
reflistOpen(this.id, this.item.getName(), this.item.getReference(), "", false, "", "cat_item="+this.variableRefQual);
else
reflistOpen(this.id, this.item.getName(), this.item.getReference());
return false;
},
_refListOpenCat: function() {
reflistOpen(this.catID, "cat_item", "sc_cat_item");
return false;
},
getValues: function() {
this._clearValues();
if (this._isMappingEnabled)
return this.getMappingValue();
var oper = this._getOperator();
var input = this.inputs[0];
if (input) {
return input.value;
} else
return '';
},
getFilterText: function(oper) {
if (!this.variableFilter)
return '';
return "variables." + this.getValues() + oper + this.variableFilter.getValues();
},
_useDisplayValue: function(oper) {
return this.item.getType() != 'glide_list' && oper != '=' && oper != '!=' && oper != "CHANGESFROM" && oper != "CHANGESTO";
},
_resolveReference: function() {
if (this.values[0]) {
var ajax = new GlideAjax("ResolveRef");
ajax.addParam("sysparm_name", this.tr.tableField);
ajax.addParam("sysparm_value", this.values[0]);
ajax.getXML(this._resolveReferenceResponse.bind(this));
}
},
_resolveReferenceResponse: function(request) {
if (!request)
return;
var xml = request.responseXML;
if (!xml)
return;
if (xml) {
var items = xml.getElementsByTagName("item");
if (items && items.length > 0 && items[0] && this.inputs[1])
this.inputs[1].value = items[0].getAttribute("label");
}
},
_resolveReferenceCat: function() {
if (this.values[2]) {
var ajax = new GlideAjax("ResolveRef");
ajax.addParam("sysparm_name", "item_option_new.cat_item");
ajax.addParam("sysparm_value", this.values[2]);
ajax.getXML(this._resolveReferenceResponseCat.bind(this));
}
},
_resolveReferenceResponseCat: function(request) {
if (!request)
return;
var xml = request.responseXML;
if (!xml)
return;
if (xml) {
var items = xml.getElementsByTagName("item");
if (items && items.length > 0 && items[0]) {
this.inputs[3].value = items[0].getAttribute("label");
this.values[3] = this.inputs[3].value;
}
}
},
_onFocus: function(evt) {
if (!this.inputs[1].ac) {
this.inputs[1].ac = new AJAXTableCompleter(this.inputs[1], this.id, '');
this.inputs[1].ac.setFilterCallBack(this._refValueChange.bind(this));
this.inputs[1].ac.elementName = this.tr.tableField;
this.inputs[1].ac.setAdditionalValue("ac_columns","cat_item;category");
if (this.values[2])
this.inputs[1].ac.setAdditionalValue("sysparm_ref_qual","cat_item=" + this.variableRefQual);
else
this.inputs[1].ac.setAdditionalValue("sysparm_ref_qual","");
this.inputs[1].ac.clearDerivedFields = true;
}
},
_refValueChange: function() {
var ref = this.inputs[1].ac;
var e = ref.getKeyElement();
var id = e.value;
this._clearQuery();
this.values[0] = id;
if (id)
this._getVariableType(id);
},
_catValueSet: function(catValue) {
if (this.values[2] == catValue)
return;
this.values[2] = catValue;
this.variableRefQual = catValue;
this.values[3] = catValue;
this._resolveReferenceCat();
this._setQualifier(this.inputs[1].ac, this.values[2]);
},
_refValueChangeCat: function() {
var ref = this.inputs[3].ac;
var e = ref.getKeyElement();
var id = e.value;
this.values[2] = id;
this.variableRefQual = id;
this._clearVariable();
this._hideOperators();
this._clearHandler();
this._filterVariableReference();
},
_clearVariable: function() {
var e = gel(this.id);
if (e)
e.value = '';
e = gel("sys_display." + this.id);
if (e)
e.value = '';
},
_clearHandler: function() {
if (!this.vType)
return;
this.variableFilter = this._getHandler();
var conditionRow = this.tr.conditionRow;
var td = this.tr.tdOper;
if (td)
this.tr.removeChild(td);
this.tr.tdOper = null;
if (this.tr.tdValue && this.tr.variableID) {
this.tr.removeChild(this.tr.tdValue);
this.tr.tdValue = null;
}
},
_filterVariableReference: function() {
this._onFocus();
if (this.values[2])
this._setQualifier(this.inputs[1].ac, this.values[2]);
else
this.inputs[1].ac.setAdditionalValue("sysparm_ref_qual","");
this._clearQuery();
},
_setQualifier: function(ac, catItem) {
if (ac)
ac.setAdditionalValue("sysparm_ref_qual","cat_item="+catItem);
this._addVariableSets(ac, catItem);
},
_addVariableSets: function(ac, catItem) {
var sets = new GlideRecord('io_set_item');
var callback = this._getSetResponse.bind(this, ac, catItem, sets)
var fn = function(gr) {
callback(ac, catItem, sets);
};
sets.addQuery("variable_set.type", "one_to_one");
sets.query('sc_cat_item', catItem, fn);
},
_getSetResponse: function(ac, catItem, sets) {
if (!sets.hasNext())
return;
var setList = new Array();
while (sets.next())
setList.push(sets.variable_set+'');
this.variableRefQual = catItem + "^OR" + "variable_setIN" + setList.join(",");
if (ac)
ac.setAdditionalValue("sysparm_ref_qual","cat_item=" + this.variableRefQual);
},
_clearQuery: function() {
this.values[0] = "";
this.refQuery = ""
this.varOp = ""
this.varValue = ""
},
_getVariableType: function(id) {
this.grVariable = new GlideRecord('item_option_new');
var callback = this._getVariableResponse.bind(this)
var fn = function(gr) {
callback();
};
this.grVariable.query('sys_id', id, fn);
},
_getVariableResponse: function() {
if (!this.grVariable.next()) {
this.grVariable = null;
this._buildStringType();
} else
this._buildType(this.grVariable);
this._setFilterBasedOnType();
if (this.grVariable && this.grVariable.cat_item)
this._catValueSet(this.grVariable.cat_item);
},
_buildStringType: function() {
this.vItem = new TableElement("string", "String");
this.vItem.setType("string");
},
_setFilterBasedOnType: function() {
this.variableFilter = this._getHandler();
if (!this.tr)
return;
var conditionRow = this.tr.conditionRow;
var td = this.tr.tdOper;
if (td)
this.tr.removeChild(td);
td = conditionRow.addTD(this.tr, this.queryID);
conditionRow.tdOper = td;
td.id = "oper";
this.tr.tdOper = td;
td.style.width="99px";
if (!this.tr.variableID) {
this.tr.tdValue.id = "variableid";
this.tr.variableID = this.tr.tdValue;
this.tr.tdValue = null;
}
if (this.tr.tdValue)
this.tr.removeChild(this.tr.tdValue);
td = conditionRow.addTD(this.tr, this.queryID);
conditionRow.tdValue = td;
td.id = "value";
td.noWrap = true;
this.tr.tdValue = td;
this._moveButtons();
var operSel = addOperators(this.tr.tdOper, this.vType, this.varOp, this.isChoice, false, false);
this.tr.operSel = operSel;
var tid = this.tr.tableField;
this.tr.tableField = "IO:" + this.values[0];
this.variableFilter.create(this.tr, this.varValue);
this.tr.tableField = tid;
},
_makeCatItemFirst: function() {
var td = this.tr.tdValue;
this.tr.removeChild(td);
this.tr.appendChild(td);
this._moveButtons();
},
_moveButtons: function() {
var td = this.tr.tdOrButton;
this.tr.removeChild(td);
this.tr.appendChild(td);
td = this.tr.tdRemoveButton;
this.tr.removeChild(td);
this.tr.appendChild(td);
},
_buildType: function(gr) {
this.vItem = new TableElement(gr.type, gr.type);
if (gr.type == "1")
this.vItem.setType("boolean");
else if (gr.type == "8") {
this.vItem.setType("reference");
this.vItem.setReference(gr.reference);
} else if (gr.type == "10") {
this.vItem.setType("calendar");
} else if (gr.type == "7") {
this.vItem.setType("checkbox");
} else if (gr.type == "18" || gr.type == "22" || gr.type == "3") {
this.vItem.setType("multiple_choice");
} else if (gr.type == "5") {
this.vItem.setType("select");
} else if (gr.type == "4") {
this.vItem.setType("numeric_scale");
} else if (gr.type == "9") {
this.vItem.setType("calendar");
} else
this._buildStringType();
},
_getHandler: function() {
if (this.vItem.type == "boolean") {
this.vType = "boolean";
var handler = new GlideFilterChoice(this.tableName, this.item);
handler.setChoices(sysvalues["catalog_boolean"]);
return handler;
}
if (this.vItem.type == "checkbox") {
this.vType = "boolean";
var handler = new GlideFilterChoice(this.tableName, this.item);
handler.setChoices(sysvalues["boolean"]);
return handler;
}
if (this.vItem.type == "multiple_choice") {
this.vType = "referencechoice";
var handler = new GlideFilterVariablesChoiceDynamic("var.IO:" + this.values[0], this.item);
return handler;
}
if (this.vItem.type == "select") {
this.vType = "referencechoice";
var handler = new GlideFilterVariablesChoiceDynamic("var.IO:" + this.values[0], this.item);
return handler;
}
if (this.vItem.type == "numeric_scale") {
this.vType = "integer";
this.isChoice = true;
var handler = new GlideFilterVariablesChoiceDynamic("var.IO:" + this.values[0], this.item);
return handler;
}
if (this.vItem.type == "reference") {
this.vType = "referencevariable";
var handler = new GlideFilterReference("var.IO:" + this.values[0], this.vItem);
return handler;
}
if (this.vItem.type == "calendar") {
this.vType = "calendar";
var handler = new GlideFilterDate(this.tableName, this.vItem);
return handler;
}
this.vType = "string";
return new GlideFilterString(this.tableName, this.item);
},
_onKeyDown: function(evt) {
return acReferenceKeyDown(this.inputs[1], evt);
},
_onKeyPress: function(evt) {
return acReferenceKeyPress(this.inputs[1], evt);
},
_onKeyUp: function(evt) {
return acReferenceKeyUp(this.inputs[1], evt);
},
_onKeyDownCat: function(evt) {
return acReferenceKeyDown(this.inputs[3], evt);
},
_onKeyPressCat: function(evt) {
return acReferenceKeyPress(this.inputs[3], evt);
},
_onKeyUpCat: function(evt) {
return acReferenceKeyUp(this.inputs[3], evt);
},
_onFocusCat: function(evt) {
if (!this.inputs[3].ac) {
this.inputs[3].ac = new AJAXTableCompleter(this.inputs[3], this.catID, '');
this.inputs[3].ac.setFilterCallBack(this._refValueChangeCat.bind(this));
this.inputs[3].ac.elementName = "item_option_new.cat_item";
this.inputs[3].ac.setAdditionalValue("ac_columns","short_description;category");
this.inputs[3].ac.setAdditionalValue("sysparm_ref_qual","active=true");
this.inputs[3].ac.clearDerivedFields = true;
}
},
z: null
});
var GlideFilterVariablesChoiceDynamic = Class.create(GlideFilterChoiceDynamic, {
_getChoices: function() {
var ajax = new GlideAjax('PickList');
ajax.addParam('sysparm_chars', '*');
ajax.addParam('sysparm_nomax', 'true');
ajax.addParam('sysparm_name', this.tableName);
var response = ajax.getXMLWait();
this._addChoices(response);
}
});
;
/*! RESOURCE: /scripts/classes/GlideFilterQuestions.js */
var GlideFilterQuestions = Class.create(GlideFilterVariables, {
_refListOpenCat: function() {
reflistOpen(this.catID, "cat_item", "sc_cat_item_producer");
return false;
},
_onFocusCat: function(evt) {
if (!this.inputs[3].ac) {
this.inputs[3].ac = new AJAXTableCompleter(this.inputs[3], this.catID, '');
this.inputs[3].ac.setFilterCallBack(this._refValueChangeCat.bind(this));
this.inputs[3].ac.elementName = "item_option_new.cat_item";
this.inputs[3].ac.setAdditionalValue("ac_columns","short_description;category");
this.inputs[3].ac.setAdditionalValue("sysparm_ref_qual","active=true^sys_class_name=sc_cat_item_producer");
this.inputs[3].ac.clearDerivedFields = true;
}
},
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideFilterItemVariables.js */
var GlideFilterItemVariables = Class.create(GlideFilterVariables, {
getFilterText: function(oper) {
if (!this.variableFilter)
return '';
var varSyntax = "variables.";
if ($j(this.tr).closest('.filter_controls-with-overflow').attr('has-item-variable-syntax') === 'true')
varSyntax = "variablesHASITEMVARIABLE:";
return varSyntax + this.getValues() + oper + this.variableFilter.getValues();
},
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideFilterVariableMap.js */
var GlideFilterVariableMap = Class.create(GlideFilterHandler, {
_setup: function(values) {
this.maxValues = 1;
this.id = this.tr.tableField + "." + guid();
this.selectedOption = values;
this.usedFields = {};
this.varTypes = { 1 : ['string'] };
},
_build: function() {
this.queryID = this.tr.tdValue.queryID;
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
return;
}
this._hideOperators();
this.select = this._addSelect(380, false, 1);
this.select.onchange = this._updateFields.bind(this);
var displayValue = gel('fancy.' + this.values[0]);
if (displayValue && displayValue.value != '')
this.select.value = displayValue.value;
else if (this.values) {
this.select.value = this.values;
}
this._buildVariableSelect();
$(this.select).addClassName('filter_type');
var $select = $j(this.select);
if (!$select.data('select2'))
$select.select2();
},
_buildVariableSelect: function() {
if (this.values.length == 0 ||  this.values == '-- value --')
addOption(this.select, this.values, getMessage("-- Select Variable --"), true);
if (this.item == null)
return;
var arr = g_dynamic_filter_variable_options.split("##");
for (var i = 0; i < arr.length; i++) {
var aItem = arr[i];
if (aItem.length == 0)
continue;
var aItemArr = aItem.split("::");
if (aItemArr.length < 3)
continue;
var arrInput = [];
arrInput.push(aItemArr[1]);
var translated = getMessages(arrInput);
addOption(this.select, aItemArr[0], translated[aItemArr[1]], this.selectedOption == aItemArr[0]);
}
},
_hideOperators: function() {
if (this.tr.tdOper)
this.tr.tdOper.style.display="none";
},
getValues: function() {
this._clearValues();
if (this._isMappingEnabled)
return this.getMappingValue();
var oper = this._getOperator();
var input = this.inputs[0];
if (input) {
return input.value;
} else
return '';
},
_updateFields : function() {
},
_clearFieldUsed : function(name, condition) {
this.usedFields[name] = false;
},
_buildType: function(gr) {
this.vItem = new TableElement(gr.type, gr.type);
if (gr.type == "1")
this.vItem.setType("boolean");
else if (gr.type == "8") {
this.vItem.setType("reference");
this.vItem.setReference(gr.reference);
} else if (gr.type == "10") {
this.vItem.setType("calendar");
} else if (gr.type == "7") {
this.vItem.setType("checkbox");
} else if (gr.type == "18" || gr.type == "22" || gr.type == "3") {
this.vItem.setType("multiple_choice");
} else if (gr.type == "5") {
this.vItem.setType("select");
} else if (gr.type == "4") {
this.vItem.setType("numeric_scale");
} else if (gr.type == "9") {
this.vItem.setType("calendar");
}
},
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideFilterLabels.js */
var GlideFilterLabels = Class.create(GlideFilterHandler, {
_setup: function(values) {
this.maxValues = 1;
this.id = this.tr.tableField + "." + guid();
this.labID = "label_entry.label." + guid();
this.listenForOperChange = true;
this.rightOperand = values;
},
_initValues: function(values) {
this.values = [];
this.varValue = '';
if (values) {
this.values[0] = values.substring(0,32);
this.refQuery = values.substring(32);
this.varValue = this.refQuery;
}
},
_build: function() {
this.queryID = this.tr.tdValue.queryID;
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
return;
}
this._hideOperators();
var inDoctypeMode = (document.documentElement.getAttribute('data-doctype') == 'true');
var input = this._addTextInput("hidden");
input.id = this.labID;
input = this._addTextInput();
input.id = "sys_display." + this.labID;
input.onfocus = this._onFocus.bind(this);
input.onRefPick = this._onFocus.bind(this);
input.onkeydown = this._onKeyDown.bindAsEventListener(this);
input.onkeypress = this._onKeyPress.bindAsEventListener(this);
input.onkeyup = this._onKeyUp.bindAsEventListener(this);
input.autocomplete = "off";
input.data_completer = "AJAXTableCompleter";
input.ac_columns = "short_description";
input.ac_order_by = "";
input.placeholder = getMessage("Select Label");
setAttributeValue(input, 'autocomplete', 'off');
var displayValue = gel('fancy.' + this.values[0]);
if (displayValue && displayValue.value != '')
this.inputs[1].value = displayValue.value;
else if (this.values) {
this.inputs[1].value = this.values;
this._resolveReference();
}
if (inDoctypeMode) {
var btn = cel("button");
btn.setAttribute("class", "icon-search btn btn-default filerTableAction");
btn.setAttribute("aria-label", getMessage('Lookup using list'));
btn.setAttribute("aria-haspopup", true);
btn.setAttribute("style", "margin-left: 2px");
btn.onclick = this._refListOpen.bindAsEventListener(this);
this.tr.tdValue.appendChild(btn);
} else {
var image = createImage("images/reference_list.gifx", "Lookup using list", this, this._refListOpen);
image.setAttribute("class", "filerTableAction")
this.tr.tdValue.appendChild(image);
}
if (!this.varValue)
return;
this._getVariableType(this.values[0]);
},
destroy: function() {
this.inputCnt = 0;
if (this.tr) {
this.tr.tdValue.innerHTML = "";
if (this.tr.variableID) {
this.tr.removeChild(this.tr.variableID);
this.tr.variableID = null;
}
var td = this.tr.tdOper;
if (td)
td.style.display="block";
}
GlideFilterHandler.prototype.destroy.call(this);
},
setOriginalTable: function(tableName) {
this.originalTableName = tableName;
},
_hideOperators: function() {
if (this.tr.tdOper)
this.tr.tdOper.style.display="none";
},
_refListOpen: function() {
reflistOpen(this.labID, this.item.getName(), "label");
return false;
},
getValues: function() {
this._clearValues();
if (this._isMappingEnabled)
return this.getMappingValue();
if (this._isEmptyOper())
return '';
var oper = this._getOperator();
var input = this.inputs[0];
if (input) {
return input.value;
} else
return '';
},
getFilterText: function(oper) {
return "sys_tags." + this.getValues() + '=' + this.getValues();
},
_useDisplayValue: function(oper) {
return this.item.getType() != 'glide_list' && oper != '=' && oper != '!=' && oper != "CHANGESFROM" && oper != "CHANGESTO";
},
_resolveReference: function() {
if (this.values[0]) {
var ajax = new GlideAjax("ResolveRef");
ajax.addParam("sysparm_name", "label_entry.label");
ajax.addParam("sysparm_value", this.values[0]);
ajax.getXML(this._resolveReferenceResponse.bind(this));
}
},
_resolveReferenceResponse: function(request) {
if (!request)
return;
var xml = request.responseXML;
if (!xml)
return;
if (xml) {
var items = xml.getElementsByTagName("item");
if (items && items.length > 0 && items[0] && this.inputs[1])
this.inputs[1].value = items[0].getAttribute("label");
}
},
_onFocus: function(evt) {
if (!this.inputs[1].ac) {
this.inputs[1].ac = new AJAXTableCompleter(this.inputs[1], this.labID, '');
this.inputs[1].ac.setFilterCallBack(this._refValueChange.bind(this));
this.inputs[1].ac.elementName = "label_entry.label";
this.inputs[1].ac.setAdditionalValue("ac_columns","short_description");
this.inputs[1].ac.clearDerivedFields = true;
}
},
_refValueChange: function() {
var ref = this.inputs[1].ac;
var e = ref.getKeyElement();
var id = e.value;
this.values[0] = id;
},
_moveButtons: function() {
var td = this.tr.tdOrButton;
this.tr.removeChild(td);
this.tr.appendChild(td);
td = this.tr.tdRemoveButton;
this.tr.removeChild(td);
this.tr.appendChild(td);
},
_onKeyDown: function(evt) {
return acReferenceKeyDown(this.inputs[1], evt);
},
_onKeyPress: function(evt) {
return acReferenceKeyPress(this.inputs[1], evt);
},
_onKeyUp: function(evt) {
return acReferenceKeyUp(this.inputs[1], evt);
},
_onKeyDownCat: function(evt) {
return acReferenceKeyDown(this.inputs[3], evt);
},
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideFilterReferenceMulti.js */
var GlideFilterReferenceMulti = Class.create(GlideFilterReference, {
_setup: function(values) {
this.maxValues = 20;
this.id = this.tr.tableField + "." + guid();
this.listenForOperChange = true;
},
_initAutoCompleter: function() {
if (!this.inputs[1].ac) {
if(this.item.getReference("reference") == "sys_user"){
$(this.inputs[1]).setAttribute('allow_invalid', true)
$(this.inputs[1]).setAttribute('reference', "sys_user");
}
this.inputs[1].ac = new AJAXReferenceCompleterMulti(this.inputs[1], this.id, '');
this.inputs[1].ac.elementName = this.tr.tableField;
this.inputs[1].ac.clearDerivedFields = true;
}
},
_onFocus: function(evt) {
this._initAutoCompleter();
},
_onRefListOpen: function() {
this._initAutoCompleter();
},
_resolveReference: function() {
if (this.values) {
var ajax = new GlideAjax("ResolveRefMulti");
ajax.addParam("sysparm_name", this.tr.tableField);
ajax.addParam("sysparm_value", this.values);
ajax.getXML(this._resolveReferenceResponse.bind(this));
}
},
_resolveReferenceResponse: function(request) {
if (!request)
return;
var xml = request.responseXML;
if (!xml)
return;
if (xml) {
var items = xml.getElementsByTagName("item");
if (items && items.length > 0) {
this._initAutoCompleter();
this.inputs[1].ac.resetHash();
for (var i=0; i<items.length; i++) {
this.inputs[1].ac.setHash(items[i].getAttribute("label"), items[i].getAttribute("name"));
}
this.inputs[1].ac._setFormValues();
}
}
},
getValues: function() {
this._initAutoCompleter();
if (this._isMappingEnabled)
return this.getMappingValue();
return this.inputs[1].ac.getKeyValue();
},
_initValues: function(values) {
if (!values)
this.values = [];
else
this.values = values;
}
});
;
/*! RESOURCE: /scripts/classes/GlideFilterDate.js */
var GlideFilterDate = Class.create(GlideFilterHandler, {
SYS_DATE_FORMAT: "yyyy-MM-dd",
SYS_TIME_FORMAT: "HH:mm:ss",
SYS_DATE_TIME_FORMAT: "yyyy-MM-dd HH:mm:ss",
_setup: function(values) {
this.maxValues = 4;
this.listenForOperChange = true;
this.userDateFormat = g_user_date_format;
this.userTimeFormat = g_user_date_time_format.substring(g_user_date_format.length + 1);
this.userDateTimeFormat = g_user_date_time_format;
this.id = "GwtGFD_" + guid();
this.allowTime = this.item.isDateTime();
},
_build: function() {
if (!window.date_calendars) {
window.date_calendars = {};
}
if (window.date_calendars[this.tableName]) {
this.buildDate(window.date_calendars[this.tableName]);
return;
}
var req = new XMLHttpRequest();
var path = "/api/now/ui/date_time/legacy"
if(this.tableName)
path = path + "?table_name=" + this.tableName;
req.open("GET", path, true);
req.setRequestHeader('Accept', 'application/json');
if (typeof g_ck != 'undefined' && g_ck != "") {
req.setRequestHeader('X-UserToken', g_ck);
}
var responseFunction = function(request) {
var result = JSON.parse(request.response).result;
var calendar = result.timeAgoDates;
calendar.DATEPART = result.datePartNoTranslation;
calendar.BETWEEN = result.between;
calendar.RELATIVE = result.relative;
calendar.TRENDVALUES = result.trendValues;
calendar.WHEN = result.when;
calendar.TRENDVALUES_WITH_FIELDS_PLURAL = result.trendValuesWithFieldsPlural;
calendar.TRENDVALUES_WITH_FIELDS = result.trendValuesWithFields;
calendar.WHEN_WITH_FIELDS = result.whenWithFields;
window.date_calendars[this.tableName] = calendar;
this.buildDate(calendar);
}.bind(this);
req.onreadystatechange = function() { processReqChange(req, responseFunction)};
req.send(null);
},
buildDate: function(dateFilterOptions) {
this.calendar = dateFilterOptions;
if (window.sysvalues && window.sysvalues.calendar) {
var getUniqueExternalDates = this.getUniqueExternalDates(this.calendar, window.sysvalues.calendar);
for (var i = 0; i < getUniqueExternalDates.length; i++) {
this.calendar.push(getUniqueExternalDates[i]);
}
}
this.ANDMSG = getMessage('and');
this.FROMMSG = getMessage('from');
this.ASMSG = getMessage('as');
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
return;
}
var oper = this._getOperator();
if (this.prevOper && (this.prevOper != oper))
this._clearValues();
switch (oper) {
case 'SAMEAS':
case 'NSAMEAS':
if (this.getFilterClass() != "GlideTemplateFilter") {
this._addDateSelect(this.id, this.calendar['TRENDVALUES_WITH_FIELDS'], this.values[1], [1]);
var span = cel("span", this.tr.tdValue);
span.style.marginLeft = "3px";
span.style.marginRight = "5px";
if(oper == 'SAMEAS')
span.innerHTML = this.ASMSG;
else
span.innerHTML = this.FROMMSG;
}
this._populateRightOperandChoices();
break;
case '=':
var input = this._addCalendar(this.id);
this.inputs = [input];
input.type = "text";
input.value = (this.values[0].indexOf("{{") !== -1 ? "" : this.values[0]);
input.id = this.id + "_input_1";
input.allowTime = this.allowTime
this.inputCnt = 1;
break;
case '!=':
case 'ON':
case 'NOTON':
var val = this.values[0];
if (val)
val += "@" + this.values[1] + "@" + this.values[2];
this._addDateChoices(this.id, val, [0, 1, 2], false);
break;
case '<':
case '>=':
var pos = 1;
this._addDateChoices(this.id, this.values[0], [pos], this.allowTime, 'start');
break;
case '>':
case '<=':
var pos = 3;
this._addDateChoices(this.id, this.values[0], [pos], this.allowTime, 'end');
break;
case 'BETWEEN':
this._addDateChoices(this.id, this.values[0], [1], this.allowTime, 'start', oper);
var span = cel("span", this.tr.tdValue);
span.style.marginLeft = "3px";
span.style.marginRight = "5px";
span.className = "filter-inline-label";
span.innerHTML = this.ANDMSG;
this._addDateChoices(this.id + "_2", this.values[1], [3], this.allowTime, 'end', oper);
this.initBetweenMapping(this.values[0], this.values[1]);
break;
case 'DATEPART':
var trendOper = "EE";
if (this.values[1]) {
var parts = this.values[1].split(",");
if (parts.length == 3)
trendOper = parts[2].substring(1, 3);
}
this._addDateSelect(this.id, this.calendar['RELATIVE'], trendOper, [1]);
this._addDateSelect(this.id + "_2", this.calendar['DATEPART'], this.values[0], [0]);
break;
case 'RELATIVE':
var thisValues = this.values;
var newOptionsList = this.calendar['RELATIVE'].filter(function(el) { return !(el[1].match(/[GEL]E/i) && !(thisValues && thisValues[0].match(el[1])))});
this._addDateSelect("1", newOptionsList, this.values[0], [1]);
var input = this._addTextInput();
input.value = this.values[3];
input.style.width = "30px";
input.maxLength = 5;
this._addDateSelect(this.id + "_2", this.calendar['TRENDVALUES'], this.values[1], [1]);
this._addDateSelect(this.id + "_3", this.calendar['WHEN'], this.values[2], [1]);
break;
case 'MORETHAN':
case 'LESSTHAN':
var input = this._addTextInput();
if(null == this.values[3] || "" == this.values[3])
this.values[3]=0;
if (isMSIE)
input.style.marginTop = "-1px";
input.value = this.values[3];
input.style.width = "30px";
input.style.marginRight = "2px";
input.maxLength=2;
this._addDateSelect(this.id + "_2", this.calendar['TRENDVALUES_WITH_FIELDS_PLURAL'], this.values[1], [1]);
this._addDateSelect(this.id + "_3", this.calendar['WHEN_WITH_FIELDS'], this.values[2], [1]);
this._populateRightOperandChoices();
break;
case 'SINCE':
var s = this._addSelect(this.width, this.multi, this.size);
s.style.marginRight = "3px";
s.id = this.id + "_select_1";
var base = new GlideRecord('cmdb_baseline');
base.addOrderBy('name');
base.query();
while (base.next()) {
var selected = false;
var value = "javascript:getBaseFilter('" + base.name + "')";
if (value == this.values[0])
selected = true;
var o = addOption(s, value, base.name, selected);
}
break;
case 'ANYTHING':
break;
}
this.prevOper = oper;
if (notOneOf('BETWEEN ANYTHING RELATIVE SINCE MORETHAN LESSTHAN SAMEAS NSAMEAS DATEPART')) {
this.initAlphaMapping(this.values[0]);
}
function notOneOf(str) {
return str.split(' ').indexOf(oper) == -1;
}
},
getUniqueExternalDates: function(calendar, globals) {
if (!Array.isArray(calendar) || !Array.isArray(globals)) return [];
var stringifiedCalendar = JSON.stringify(calendar);
return globals.filter(function(item) {
return stringifiedCalendar.indexOf(JSON.stringify(item)) === -1;
});
},
getValues: function() {
if (this.inputCnt == 0)
return "";
for (var i = 0; i < this.maxValues; i++)
this.values[i] = this._getInputValue(this.inputs[i]);
if (this.supportsMapping) {
if (this._getOperator() == 'BETWEEN') {
var $td = $j(this.tr.tdValue);
var $in1 = $td.find('#em_input_1');
var $in2 = $td.find('#em_input_2');
if ($in1.val() || $in2.val()) {
return (
($in1.val() || this._getDateGenerate(this._convertDate(this.values[0]), 'start')) +
"@" +
($in2.val() || this._getDateGenerate(this._convertDate(this.values[1]), 'end'))
);
}
} else if (this._getOperator() == 'ON') {
var gemVal = $j(this.tr.tdValue).find('#em_input_1').val();
if (gemVal)
return gemVal + "@" + gemVal + "@" + gemVal;
} else {
var gemVal = $j(this.tr.tdValue).find('#em_input_1').val();
if (gemVal) {
return gemVal;
}
}
}
switch (this._getOperator()) {
case 'ON':
case 'NOTON':
if (this.values[0].indexOf('@') != -1)
return this.values[0];
var value = this._convertDate(this.values[0]);
return value + "@" + this._getDateGenerate(value, 'start') + "@" + this._getDateGenerate(value, 'end');
case '<':
case '<=':
var value = this._convertDate(this.values[0]);
return this._getDateGenerate(value, 'start');
case '>':
case '>=':
var value = this._convertDate(this.values[0]);
return this._getDateGenerate(value, 'end');
case 'BETWEEN':
var start = this._convertDate(this.values[0]);
start = this._getDateGenerate(start, 'start');
var end = this._convertDate(this.values[1]);
end = this._getDateGenerate(end, 'end');
return start + "@" + end;
case 'DATEPART':
var trendOper = this.values[0];
var datePart = this.values[1];
var values = this.calendar['DATEPART'];
for (var i = 0; i < values.length; i++) {
if (datePart == values[i][0]) {
datePart = values[i][1];
break;
}
}
datePart = datePart.split(")")[0] + ",'" + trendOper + "')";
return this.values[1] + "@" + datePart;
break;
case '=':
case '!=':
return this.values[0];
break;
case 'RELATIVE':
return this.values[0] + "@" + this.values[2] + "@" + this.values[3] + "@" + this.values[1];
break;
case 'SAMEAS':
case 'NSAMEAS':
if (this.values[1] == "")
return this.values[0];
return this.values[1] + "@" + this.values[0];
break;
case 'MORETHAN':
case 'LESSTHAN':
if (isNaN(this.values[0]))
this.values[0] = 0;
return this.values[3] + "@" + this.values[1] + "@" + this.values[2] + "@" + this.values[0];
break;
case 'SINCE':
return this.values[0];
break;
case 'ANYTHING':
return "";
break;
default:
if (this.inputCnt == 1)
return this.values[0];
else
return this.values.join("@");
}
},
_addDateSelect: function (id, values, matchValue, positions, dynamicOptions) {
var s = this._addSelect(this.width, this.multi, this.size);
s.style.marginRight = "3px";
s.id = this.id + "_select_" + id;
this._addDateSelectOptions(s, values, matchValue, positions);
if (dynamicOptions)
this._addDateSelectOptions(s, dynamicOptions, matchValue, positions);
return s;
},
_addDateSelectOptions: function(select, values, matchValue, positions) {
if(!values)
return;
var map = getMessages(buildMap(values, 0));
var previousValue = null;
for (var i = 0; i < values.length; i++) {
var option = values[i];
var value = "";
for (var pos = 0; pos < positions.length; pos++) {
if (pos > 0)
value += "@";
value += option[positions[pos]];
}
if (previousValue == null || previousValue != value)
addOption(select, value, map[option[0]], value == matchValue);
previousValue = value;
}
},
_addDateChoices: function(id, matchValue, positions, allowTime, defaultTime, operator) {
var dynamicOptions = this._getDynamicCalendarOption();
var select = this._addDateSelect(id, this.calendar, matchValue, positions, dynamicOptions);
this._addDatePicker(id, select, matchValue, allowTime, defaultTime, operator);
},
_getDynamicCalendarOption: function() {
if (typeof g_dynamic_filter_options_calendar == 'undefined' || g_dynamic_filter_options_calendar == '')
return [];
var dynamicOptions = [];
var items = g_dynamic_filter_options_calendar.split('##');
for (var i = 0; i < items.length; i++) {
if (items[i].length <= 0)
continue;
var option = items[i].split('::');
dynamicOptions.push(option);
}
return dynamicOptions;
},
_addDatePicker: function(id, select, value, allowTime, defaultTime, operator) {
var found = (select.selectedIndex != -1);
if ((select.selectedIndex == 0) && (value) && (value != select.options[0].value))
found = false;
if (!found) {
value = this._getDateFromValue(value);
addOption(select, value, value, true);
}
select.allowTime = allowTime;
select.defaultTime = defaultTime;
if (defaultTime === 'start' && operator === 'BETWEEN') {
select.title = getMessage('Choose first option');
} else if (defaultTime === 'end' && operator === 'BETWEEN') {
select.title = getMessage('Choose second option');
}
this._addCalendar(id, defaultTime, operator);
},
_addCalendar: function(id, defaultTime, operator) {
var chooseDate = getMessage('Choose date...');
var associatedField = this.item && this.item.label;
if (defaultTime && operator === 'BETWEEN') {
if (defaultTime === 'start') {
chooseDate = getMessage('Choose start date...');
} else {
chooseDate = getMessage('Choose end date...');
}
} else {
chooseDate = getMessage('Choose date...');
}
if (document.documentElement.getAttribute('data-doctype') == 'true') {
var input = addTextInput(this.tr.tdValue, "", "hidden", associatedField);
var cal = cel("button", this.tr.tdValue);
cal.id = "cal_" + id;
cal.name = cal.id;
cal.setAttribute('type', 'button');
cal.setAttribute('aria-label', chooseDate);
cal.title = chooseDate;
cal.onclick = this._calendarPopup.bind(this, id, cal);
cal.style.marginRight = "1px";
cal.style.verticalAlign = "top";
cal.className = "btn btn-default icon-calendar";
input.id = this.id + "_input_" + id;
input.onchange = this._dateTimeComplete.bind(this, id);
} else {
var cal = cel("img", this.tr.tdValue);
cal.id = "cal_" + id;
cal.name = cal.id;
cal.src = "images/small_calendar.gifx";
cal.alt = chooseDate;
cal.title = chooseDate;
cal.onclick = this._calendarPopup.bind(this, id);
cal.style.marginLeft = "2px";
cal.className = "button";
var input = addTextInput(this.tr.tdValue, "", "hidden", associatedField);
input.id = this.id + "_input_" + id;
input.onchange = this._dateTimeComplete.bind(this, id);
}
return input;
},
_getDateFromValue: function(value) {
var value = value.split("@")[0];
var prefixString = "javascript:gs.dateGenerate(";
if (value.indexOf(prefixString) == 0) {
var parts = value.split("'");
if (parts.length == 5) {
value = parts[1];
if (isDate(parts[3], this.SYS_TIME_FORMAT)) {
var dt = getDateFromFormat(parts[3], this.SYS_TIME_FORMAT);
value += " " + formatDate(new Date(dt), this.SYS_TIME_FORMAT);
}
}
}
if (isDate(value, this.SYS_DATE_TIME_FORMAT)) {
var dt = getDateFromFormat(value, this.SYS_DATE_TIME_FORMAT);
value = formatDate(new Date(dt), this.userDateTimeFormat);
} else if (isDate(value, this.SYS_DATE_FORMAT)) {
var dt = getDateFromFormat(value, this.SYS_DATE_FORMAT);
value = formatDate(new Date(dt), this.userDateFormat);
}
return value;
},
_getDateGenerate: function(value, tag) {
if (value.indexOf("javascript:") != -1)
return value;
if (isDate(value, this.SYS_DATE_TIME_FORMAT)) {
var dt = getDateFromFormat(value, this.SYS_DATE_TIME_FORMAT);
value = formatDate(new Date(dt), this.SYS_DATE_FORMAT);
tag = formatDate(new Date(dt), this.SYS_TIME_FORMAT);
}
return "javascript:gs.dateGenerate('" + value + "','" + tag + "')";
},
_convertDate: function(value) {
if (value.indexOf("javascript:") != -1)
return value;
if (isDate(value, this.userDateTimeFormat)) {
var dt = getDateFromFormat(value, this.userDateTimeFormat);
value = formatDate(new Date(dt), this.SYS_DATE_TIME_FORMAT);
} else if (isDate(value, this.userDateFormat)) {
var dt = getDateFromFormat(value, this.userDateFormat);
value = formatDate(new Date(dt), this.SYS_DATE_FORMAT);
}
return value;
},
_getCalendarInput: function(id) {
return gel(this.id + "_select_" + id);
},
_calendarPopup: function(id, btn) {
var select = this._getCalendarInput(id);
var currentDate = '';
var defaultTime = "start";
var allowTime = this.allowTime;
if (select) {
if (select && select.value.indexOf('javascript') == -1)
currentDate = select.value;
defaultTime = select.defaultTime
allowTime = select.allowTime;
}
var format;
if (allowTime) {
format = this.userDateTimeFormat;
if (!isDate(currentDate, format)) {
var dt = new Date();
if (isDate(currentDate, this.userDateFormat))
dt = new Date(getDateFromFormat(currentDate, this.userDateFormat));
if (defaultTime == 'end')
dt.setHours(23, 59, 59);
else
dt.setHours(0, 0, 0);
currentDate = formatDate(dt, this.userDateTimeFormat);
}
} else {
format = this.userDateFormat;
}
var input = gel(this.id + "_input_" + id);
if (!input)
input = gel(this.id + '_input_1');
input.value = currentDate;
ScriptLoader.getScripts('scripts/classes/GwtDateTimePicker.js', function() {
new GwtDateTimePicker(input.id, format, allowTime, select || input );
})
return false;
},
_dateTimeComplete: function(id) {
var select = gel(this.id + "_select_" + id);
var input = gel(this.id + "_input_" + id);
if (!select)
return;
var option = select.options[select.selectedIndex];
var value = option.value;
if (isDate(value, this.userDateFormat) || isDate(value, this.userDateTimeFormat)) {
option.value = input.value;
option.text = input.value;
} else
addOption(select, input.value, input.value, true);
},
initBetweenMapping: function(value1, value2) {
var $td = $j(this.tr.tdValue);
var $btn1   = this.emTemplate.makeBtn();
var $field1 = this.emTemplate.makeField();
var $input1 = this.emTemplate.makeInput('em_input_1', value1);
var $nativeInput1 = $j(this.inputs[0]);
var $dateBtn = $td.find('#cal_1');
$dateBtn.after($btn1);
$dateBtn.after($field1);
$dateBtn.after($input1);
var id = this.id;
this._initMappingComponent($field1, $btn1, id, {
glideType: 'calendar',
isMultiText: false,
originalMapping: value1.indexOf("{{") !== -1 ? value1 : "",
parent: {
show: function() {
$td.find('#cal_1, select[id*="_select_1"]').show();
},
hide: function() {
$td.find('#cal_1, select[id*="_select_1"]').hide();
},
onValue: function(msg) {
var value = msg.wrappedValue;
$input1.val(value);
if (value.indexOf("{{") == -1) {
$nativeInput1.val($nativeInput1.find("option:first").val());
}
}
}
});
var $btn2   = this.emTemplate.makeBtn();
var $field2 = this.emTemplate.makeField();
var $input2 = this.emTemplate.makeInput('em_input_2', value2);
var $nativeInput2 = $j(this.inputs[1]);
$btn2.css({"margin-right": "90px"})
$td.append($input2);
$td.append($field2);
$td.append($btn2);
this._initMappingComponent($field2, $btn2, id, {
glideType: 'calendar',
isMultiText: false,
originalMapping: value2.indexOf("{{") !== -1 ? value2 : "",
parent: {
show: function() {
$td.find('#cal_2, select[id*="'+ id +'_select_'+ id +'_2"]').show();
$td.find('button[id*="cal_'+ id +'_2"]').show();
},
hide: function() {
$td.find('#cal_2, select[id*="'+ id +'_select_'+ id +'_2"]').hide();
$td.find('button[id*="cal_'+ id +'_2"]').hide();
},
onValue: function(msg) {
var value = msg.wrappedValue;
$input2.val(value);
if (value.indexOf("{{") == -1) {
$nativeInput2.val($nativeInput2.find("option:first").val());
}
}
}
});
$j(this.tr.tdValue)[this.supportsMapping ? 'removeClass' : 'addClass']("gem-unsupported");
this._removePlaceholderBtn();
},
initAlphaMapping: function(value) {
value = value.indexOf("{{") !== -1 ? value : "";
var $td = $j(this.tr.tdValue);
var $btn = this.emTemplate.makeBtn();
var $field = this.emTemplate.makeField();
var $input = this.emTemplate.makeInput('em_input_1', value);
$td.append($field).append($btn).append($input);
var $nativeInput = $j(this.inputs[0]);
var id = this.id;
this._initMappingComponent($field, $btn, id, {
glideType: 'calendar',
isMultiText: false,
originalMapping: value.indexOf("{{") !== -1 ? value : "",
parent: {
show: function() {
$td.find('#cal_1, select[id*="' + id + '_select_' + id +'"]').show();
$td.find('input[id*="_input_1"]').show();
$td.find('button[id*="cal_"]').show();
},
hide: function() {
$td.find('#cal_1, select[id*="' + id + '_select_' + id +'"]').hide();
$td.find('input[id*="_input_1"]').hide();
$td.find('button[id*="cal_"]').hide();
},
onValue: function(msg) {
var value = msg.wrappedValue;
$input.val(value);
if (value.indexOf("{{") == -1) {
$nativeInput.val($nativeInput.find("option:first").val());
}
}
}
});
$j(this.tr.tdValue)[this.supportsMapping ? 'removeClass' : 'addClass']("gem-unsupported");
this._removePlaceholderBtn();
},
_removePlaceholderBtn: function() {
$j(this.tr.tdMapping).html("");
$j(this.tr.tdValue).css("display", "");
},
emTemplate: {
makeBtn: function() {
return $j(
'<button role="button" class="btn btn-default em-field-toggle em-alt-btn em-icon-em gem-unsupported-target" ' +
'title="Set date from a contextual value"' +
'style="vertical-align: top;">' +
'</button>'
);
},
makeField: function() {
return $j(
'<em-alt-input class="hidden gem-unsupported-target"></em-alt-input>'
);
},
makeInput: function(id, value) {
var x = $j('<input type="hidden" id="' + id + '">');
x.val(value || "");
return x;
}
},
_initMappingComponent: function($field, $btn, id, opts) {
if (window.g_elementMappingMgr) {
g_elementMappingMgr.initSubField($field, $btn, this.mappingId, opts)
}
},
initMappingSupport: function(shouldEnable, type, mappingMgr) {
var td = this.tr.tdMapping;
if (!td || !mappingMgr)
return;
this.mappingType = type;
this.supportsMapping = !!shouldEnable;
$j(this.tr.tdValue)[this.supportsMapping ? 'removeClass' : 'addClass']("gem-unsupported");
},
destroyMappingSupport: function() {
},
activateMapping: function() {
},
deactivateMapping: function() {
},
_initMappingValue: function(value) {
},
type: 'GlideFilterDate'
});
var GlideFilterDateEncrypted = Class.create(GlideFilterDate, {
_getCalendarInput: function(id) {
return gel(this.id + "_input_1");
},
_getDateGenerate: function(value) {
return value;
},
_build: function() {
clearNodes(this.tr.tdValue);
this.inputCnt = 0;
if (this._isEmptyOper()) {
this._addInvisibleTextInput();
return;
}
var oper = this._getOperator();
if (this.prevOper && (this.prevOper != oper))
this._clearValues();
switch (oper) {
case 'ON':
case 'NOTON':
case '=':
case '!=':
case '<':
case '<=':
case '>':
case '>=':
var value = this.values[0];
this.setTextInput(this.id, value, this.allowTime);
break;
default:
return '';
}
this.prevOper = oper;
},
setTextInput: function(id, value, allowTime) {
var input = this._addCalendar(id);
this.inputs = [input];
input.type = "text";
input.readOnly = true;
input.value = (value.indexOf("{{") !== -1 ? "" : value);
input.onclick = this._calendarPopup.bind(this, id);
if (input.value == "") {
var msg = NOW.msg;
input.placeholder = msg.getMessage('-- choose date --');
}
input.id = id + "_input_1";
input.allowTime = allowTime;
this.inputCnt = 1;
},
});
;
/*! RESOURCE: /scripts/classes/GlideEventHandler.js */
var GlideEventHandler = Class.create({
initialize: function (handlerName, handler, fieldName, isUiPolicy) {
this.handlerName = handlerName;
this.handler = handler;
this.fieldName = fieldName;
this.isUiPolicy = !!isUiPolicy;
}
});
;
/*! RESOURCE: /scripts/classes/GlideUIElement.js */
var GlideUIElement = Class.create({
CACHE_ELEMENTS: true,
ENABLE_CHILD_WALKING: false,
initialize: function (tableName, fieldName, type, mandatory, reference, attributes, scope) {
this.tableName = tableName;
this.fieldName = fieldName;
this.type = type;
this.mandatory = mandatory;
this.reference = reference;
this.attributes = attributes;
this.elementFetched = false;
this.elementParentNode;
this.fetchedNodes = {};
this.scope = scope || "global";
},
getType: function() {
return this.type;
},
getID: function() {
return this.tableName + '.' + this.fieldName;
},
getElementParentNode: function() {
if (!this.elementFetched) {
this.elementParentNode = gel('element.' + this.getID());
this.elementFetched = true;
}
return this.elementParentNode;
},
getElement: function() {
return this.getChildElementById(this.getID());
},
getLabelElement: function() {
var parentElementNode = this.getElementParentNode();
if (!parentElementNode)
parentElementNode = document;
var labels = parentElementNode.getElementsByTagName('label');
for (var i = 0; (label = labels[i]); i++) {
if (label.htmlFor == this.getID())
return label;
}
return this.getStatusElement();
},
getStatusElement: function() {
return this.getChildElementById('status.' + this.getID());
},
getChildElementById: function(id) {
if (this.fetchedNodes[id])
return this.fetchedNodes[id];
var element = this.getChildElementById0(id);
if (element)
this.fetchedNodes[id] = element;
return element;
},
getChildElementById0: function(id) {
var element;
if (this.ENABLE_CHILD_WALKING) {
element = this._findSubChild(this.getElementParentNode(), id);
if (element)
return element;
}
return gel(id);
},
isMandatory: function() {
return this.mandatory;
},
isDerived: function() {
if (!this.fieldName)
return false;
return this.fieldName.indexOf('.') > -1;
},
setMandatory: function(mandatory) {
this.mandatory = mandatory;
},
getValue: function() {
var element = this.getElement();
return element && element.value;
},
getScope: function() {
return this.scope;
},
_findSubChild: function(startNode, id) {
if (!startNode || (startNode.id && startNode.id == id))
return startNode;
var childNodes = startNode.children || startNode.childNodes;
for(var i = 0; i < childNodes.length; i++) {
var foundNode = this._findSubChild(childNodes[i], id);
if (foundNode)
return foundNode;
}
return;
},
type: "GlideUIElement"
});
function newGlideUIElement(tableName, fieldName, type, mandatory, reference, attributes, scope) {
if (mandatory && fieldName && fieldName.indexOf('.') > -1)
return new GlideMandatoryDerivedUIElement(tableName, fieldName, type, mandatory, reference, attributes, scope);
return new GlideUIElement(tableName, fieldName, type, mandatory, reference, attributes, scope);
}
;
/*! RESOURCE: /scripts/classes/GlideMandatoryDerivedUIElement.js */
var GlideMandatoryDerivedUIElement = Class.create(GlideUIElement, {
initialize: function ($super, tableName, fieldName, type, mandatory, reference, attributes, scope) {
$super(tableName, fieldName, type, mandatory, reference, attributes, scope);
this.referenceFieldName = fieldName ? fieldName.substr(0, fieldName.lastIndexOf('.')) : '';
this.mandatoryDerived = mandatory && this.referenceFieldName ? true : false;
if (this.mandatoryDerived) {
this.mandatory = null;
var e = this.getElement();
if (e)
e.setAttribute("mandatory", mandatory);
}
this.referenceField;
},
isMandatory: function() {
return this.mandatory == null ?
!this._isDisabled() && this.isMandatoryByReferenceField() :
this.mandatory;
},
isMandatoryByReferenceField: function() {
return this.referenceField && (this.referenceField.isMandatory() || this.referenceField.getValue()) ? true : false;
},
getElementMandatory: function() {
var e = this.getElement();
return e ? e.getAttribute('mandatory') : null;
},
setReferenceField: function(reference) {
this.referenceField = reference;
},
_isDisabled: function() {
var control = this.getElement();
if (!control)
return true;
if (control.getAttribute('derived-waiting') === "true")
return false;
return control.disabled || control.readOnly ||
((typeof control.hasClassName === "function") && control.hasClassName("readonly")) ||
((typeof control.getAttribute === "function") && control.getAttribute("writeaccess") == "false");
},
type: "GlideMandatoryDerivedUIElement"
});
;
/*! RESOURCE: /scripts/classes/GlideUser.js */
var GlideUser = Class.create({
initialize: function(userName, firstName, lastName, nonDefaultRoles, userID, departmentID) {
this.userName = userName;
this.firstName = firstName;
this.lastName = lastName;
this.setFullName(this.firstName + " " + this.lastName);
this.setRoles(nonDefaultRoles);
this.userID = userID;
this.departmentID = departmentID;
this.preferences = new Object();
this.clientData = new Object();
},
hasRoleExactly: function(role, includeDefaults) {
if (!role || typeof role != 'string')
return false;
var rolesToCheck = this.roles;
if (includeDefaults)
rolesToCheck = this.allRoles;
for (var x = 0, l = rolesToCheck.length; x < l; x++) {
if (rolesToCheck[x].toLowerCase() == role.toLowerCase())
return true;
}
return false;
},
hasRoles: function(includeDefaults) {
if (includeDefaults)
return (this.allRoles.length > 0);
else
return (this.roles.length > 0);
},
hasRole: function(role, includeDefaults) {
if (this.hasRoleExactly('maint', includeDefaults))
return true;
if (this.hasRoleExactly(role, includeDefaults))
return true;
if (role == 'maint')
return false;
if (this.hasRoleExactly('admin', includeDefaults))
return true;
return false;
},
hasRoleFromList: function(roles, includeDefaults) {
var rolesToMatch = new Array();
if (roles)
rolesToMatch = roles.split(/\s*,\s*/);
if (rolesToMatch.length == 0)
return true;
for(var i = 0; i < rolesToMatch.length; i++) {
var r = rolesToMatch[i];
if (r && this.hasRole(r, includeDefaults))
return true;
}
return false;
},
getFullName: function() {
return this.fullName;
},
getUserName: function() {
return this.userName;
},
getUserID: function() {
return this.userID;
},
getDepartmentID: function() {
return this.departmentID;
},
setFullName: function(fn) {
this.fullName = fn;
},
getRoles: function(includeDefaults) {
if (includeDefaults)
return this.allRoles;
return this.roles;
},
getAvailableElevatedRoles: function() {
return this.elevatedRoles;
},
setRoles: function(r, includeDefaults) {
if (includeDefaults) {
if (r)
this.allRoles = r.split(/\s*,\s*/);
else
this.allRoles = new Array();
} else {
if (r)
this.roles = r.split(/\s*,\s*/);
else
this.roles = new Array();
}
},
setElevatedRoles: function(r) {
if (r)
this.elevatedRoles = r.split(/\s*,\s*/);
else
this.elevatedRoles = new Array();
},
setActiveElevatedRoles: function(r) {
if (r)
this.activeElevatedRoles = r.split(/\s*,\s*/);
else
this.activeElevatedRoles = new Array();
},
getActiveElevatedRoles: function() {
return this.activeElevatedRoles;
},
setDomain: function(d) {
this.domain = d;
},
getPreference: function(n) {
return this.preferences[n];
},
setPreference: function(n, v) {
this.preferences[n] = v;
},
deletePreference: function(n) {
delete this.preferences[n];
},
getClientData: function(n) {
return this.clientData[n];
},
setClientData: function(n, v) {
this.clientData[n] = v;
},
setBannerImage: function(s) {
this.bannerImage = s;
},
getBannerImage: function() {
return this.bannerImage;
},
setBannerText: function(s) {
this.bannerText = s;
},
getBannerText: function() {
return this.bannerText;
},
setHomePages: function(s) {
this.homePages = s;
},
getHomePages: function() {
return this.homePages;
},
type: "GlideUser"
});
;
/*! RESOURCE: /scripts/classes/ContextMenuExportHandler.js */
var ContextMenuExportHandler = Class.create({
initialize: function(g_list, export_format) {
this.g_list = g_list;
this.export_format = export_format;
},
exportRecords: function() {
var sysparm_rows = this.g_list.grandTotalRows;
var num_rows = parseInt(sysparm_rows);
var sysparm_query = this.g_list.getQuery({ orderby: true, fixed: true });
var sysparm_view = this.g_list.view;
var sysparm_query_no_domain = false;
if ('submitValues' in this.g_list && 'sysparm_query_no_domain' in this.g_list.submitValues)
sysparm_query_no_domain = this.g_list.submitValues.sysparm_query_no_domain;
if (num_rows < g_export_warn_threshold) {
var dialog = new GwtPollDialog(this.g_list.tableName, sysparm_query, sysparm_rows, sysparm_view, this.export_format, undefined, undefined, sysparm_query_no_domain);
dialog.execute();
return;
}
var dialog = new GwtExportScheduleDialog(this.g_list.tableName, sysparm_query, sysparm_rows, sysparm_view, this.export_format, undefined, this.export_format, sysparm_query_no_domain);
dialog.execute();
}
});
;
/*! RESOURCE: /scripts/doctype/GlideForm14.js */
function default_on_submit() {
if (!g_form)
return true;
return g_form.onSubmit();
}
var GlideForm = Class.create({
INFO_CLASS: "fieldmsg notification notification-info",
ERROR_CLASS: "fieldmsg notification notification-error",
WARNING_CLASS: "fieldmsg notification notification-warning",
MSG_ROW: "_message_row",
initialize : function(tableName, mandatory, checkMandatory, checkNumeric, checkInteger, isSearch) {
this.tableName = tableName;
this.modified = false;
this.modifiedFields = {};
this.mandatoryOnlyIfModified = false;
this.elements = [];
this.mandatory = mandatory;
this.checkMandatory = checkMandatory;
this.checkNumeric = checkNumeric;
this.checkInteger = checkInteger;
this.nameMap = [];
this.attributes = [];
this.validators = [];
this.disabledFields = [];
this.securityReadOnlyFields = [];
this.elementHandlers = {};
this.prefixHandlers = {};
this.derivedWaiting = {};
this.newRecord = gel('sys_row') && gel('sys_row').value == "-1";
this.personalizeHiddenFields = null;
this.personalizePrefKey = "personalize_" + this.tableName + "_" + this.getViewName();
this._isLiveUpdating = false;
this._onUserChangedHandlers = [];
this.mandatoryDerivedFields = {};
this.submitAttemptsCount = 0;
if (isSearch) {
var gf = this;
setTimeout(function() {CachedEvent.emit('glideform.initialized', gf)}, 0);
}
else {
if (this.classname !== 'ServiceCatalogForm' && this.classname !== 'ServiceCatalogForm17') {
CachedEvent.emit('glideform.initialized', this);
}
}
window.addEventListener("load", function() {
if (g_form) {
var formElement = g_form.getFormElement();
formElement && formElement.removeAttribute("autocomplete");
}
});
},
fieldChanged : function(elementName, changeFlag) {
if (!this._internalChange) {
if (changeFlag) {
this.modified = true;
this.modifiedFields[elementName] = true;
} else if (this.modifiedFields[elementName]) {
this.modifiedFields[elementName] = false;
this._checkModified();
}
}
var uniqueValue = this.getUniqueValue();
CustomEvent.fireAll('form.isModified', { uniqueValue: uniqueValue, isModified: this.modified });
var field = this.mandatoryDerivedFields[elementName];
if (field && this._isDerivedWaiting(elementName)) {
var newValue = field.getValue();
if (newValue && field.getElementMandatory() != 'true')
this._setMandatory(field.fieldName, field, true);
else if (!newValue && !field.isMandatory() && field.getElementMandatory() != 'false')
this._setMandatory(field.fieldName, field, false);
}
},
triggerOnUserChangeValue: function(fieldName, originalValue, newValue) {
if (this._internalChange || this._onUserChangedHandlers.length === 0)
return;
this._onUserChangedHandlers.forEach(function(fn) {
fn.call(fn, fieldName, originalValue, newValue);
});
},
_checkModified: function() {
for (var n in this.modifiedFields) {
if (this.modifiedFields[n]) {
this.modified = true;
return;
}
}
this.modified = false;
},
setMandatoryOnlyIfModified : function() {
this.mandatoryOnlyIfModified = true;
},
disableMandatoryCheck : function() {
this.checkMandatory = false;
},
enableMandatoryCheck : function() {
this.checkMandatory = true;
},
addNameMapEntry : function(entry) {
this.nameMap.push(entry);
},
addGlideUIElement : function(ed) {
this._checkDerivedFieldMandatory(ed);
this.elements.push(ed);
},
_checkDerivedFieldMandatory : function(ed) {
if (ed.mandatoryDerived) {
ed.setReferenceField(this.getGlideUIElement(ed.referenceFieldName));
if (!ed.isMandatory() && (!ed.getValue() || this.isNewRecord()))
this._setMandatory(ed.fieldName, ed, false);
var key = this.getTableName() + '.' + ed.fieldName;
this.mandatoryDerivedFields[key] = ed;
}
this._setDerivedFieldsMandatory(ed);
},
_setDerivedFieldsMandatory : function(ed) {
if (ed.getType() !== 'reference')
return;
for (var name in this.mandatoryDerivedFields) {
var field = this.mandatoryDerivedFields[name]
if (field.referenceFieldName == ed.fieldName) {
if (!field.referenceField)
field.setReferenceField(ed);
var mandatory = field.isMandatory();
if (mandatory.toString() != field.getElementMandatory()) {
this._setMandatory(field.fieldName, field, mandatory);
this._setDerivedFieldsMandatory(field);
}
}
}
},
registerHandler: function(id, handler) {
this.elementHandlers[id] = handler;
},
registerPrefixHandler: function(prefix, handlerObject) {
var handler = new GlideFormPrefixHandler(handlerObject);
this.prefixHandlers[prefix] = handler;
},
getPrefixHandler: function(id) {
if (!id)
return;
if (id.indexOf('.') < 0)
id = 'variables.' + id;
var idSplit = id.split(".");
var handler = this.prefixHandlers[idSplit[0]];
if (typeof handler == "undefined")
return;
handler.setFieldName(id);
return handler;
},
getElement: function(id) {
if (this.elementHandlers[id] && (typeof this.elementHandlers[id].getElement == "function"))
return this.elementHandlers[id].getElement();
else
return this.getControl(id);
},
getParameter : function(parm) {
if (!(parm.substr(0, 8) == 'sysparm_'))
parm = 'sysparm_' + parm;
var pcel = gel(parm);
if (pcel)
return pcel.value;
else
return '';
},
hasAttribute : function(s) {
if (this.attributes[s])
return true;
return false;
},
addAttribute : function(s) {
this.attributes[s] = s;
},
addValidator : function(fieldType, validator) {
this.validators[fieldType] = validator;
},
_getPersonalizeHiddenFields: function() {
if (this.personalizeHiddenFields == null) {
var prefVal = NOW[this.personalizePrefKey] || getPreference(this.personalizePrefKey);
if ('false' == prefVal)
this.personalizeHiddenFields = [];
else if (prefVal.length)
this.personalizeHiddenFields = prefVal.split(",");
else
this.personalizeHiddenFields = [];
}
return this.personalizeHiddenFields;
},
resetPersonalizeHiddenFields: function() {
this.personalizeHiddenFields = [];
this._savePersonalizeHiddenFields(function(){window.reloadWindow(window);});
},
_savePersonalizeHiddenFields: function(callback) {
setPreference(this.personalizePrefKey, this.personalizeHiddenFields.join(","), callback);
},
isUserPersonalizedField: function(fieldName){
fieldName = this.removeCurrentPrefix(fieldName);
return this.personalizeHiddenFields === null ? false : this.personalizeHiddenFields.indexOf(fieldName) != -1;
},
setUserDisplay: function(fieldName, display) {
fieldName = this.removeCurrentPrefix(fieldName);
this._getPersonalizeHiddenFields();
for(var i = this.personalizeHiddenFields.length-1; i>=0; i--) {
if (this.personalizeHiddenFields[i] === fieldName) {
this.personalizeHiddenFields.splice(i, 1);
}
}
this.setDisplay(fieldName, display);
if ((display === false || display === 'false') && !this.isMandatory(fieldName))
this.personalizeHiddenFields.push(fieldName);
this._savePersonalizeHiddenFields();
},
setDisplay : function(fieldName, display) {
fieldName = this.removeCurrentPrefix(fieldName);
if (!this.getGlideUIElement(fieldName) && !!this._hasSCUIElement(fieldName))
g_sc_form.setDisplay(fieldName, display);
else
this._setDisplay(fieldName, display, this.isMandatory(fieldName), this.getValue(fieldName));
},
_hasSCUIElement : function(name) {
return this._hasSCForm() && typeof g_sc_form.getSCUIElement !== 'undefined' && g_sc_form.getSCUIElement(name);
},
_hasSCForm : function() {
return typeof g_sc_form != "undefined" && g_sc_form;
},
_setDisplay: function(fieldName, display, isMandatory, fieldValue) {
var s = this.tableName + '.' + fieldName;
var control = this.getControl(fieldName);
var displayValue = 'none';
if (display == 'true' || display == true) {
display = true;
displayValue = '';
} else {
display = false;
}
var opticsVisibleMessage = "Visibility set to " + (display ? 'visible' : 'hidden');
if (!control) {
var handler = this.getPrefixHandler(fieldName);
if (handler) {
handler.getObject().setDisplay(handler.getFieldName(), display);
opticsLog(this.tableName, fieldName, opticsVisibleMessage);
}
return;
}
if ((display != true) && isMandatory && fieldValue == '')
return;
var theElement = control;
if (this.elementHandlers[control.id] && (typeof this.elementHandlers[control.id].getElement == "function"))
theElement = this.elementHandlers[control.id].getElement();
if (this.elementHandlers[control.id] && (typeof this.elementHandlers[control.id].setDisplay == "function")) {
this.elementHandlers[control.id].setDisplay(display ? '' : 'none');
} else {
this.changeElementStyle(fieldName, 'display', displayValue);
}
opticsLog(this.tableName, fieldName, opticsVisibleMessage);
this.setSensitiveDisplayValue(s + ".ui_policy_sensitive", displayValue);
var glideElement = this.getGlideUIElement(fieldName);
if (glideElement)
if (glideElement.type == 'script' || glideElement.type == 'script_plain' || glideElement.type == 'xml')
CustomEvent.fire('element_script_display_' + display, {'element': glideElement});
if (theElement.tagName === 'TEXTAREA' && display) {
$j(theElement).trigger("autosize.resize");
}
_frameChanged();
},
setSensitiveDisplayValue: function(name, displayValue) {
var elements = document.getElementsByName(name);
for (i = 0; i < elements.length; i++ ) {
elements[i].style.display = displayValue;
}
},
setValidation : function(fieldName, validate) {
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
if (!control)
return;
if (validate == 'false')
validate = false;
if (validate != false) {
control.removeAttribute('validate');
return;
}
control.setAttribute('validate', 'false');
},
getViewName: function(){
var sysparmView = gel('sysparm_view');
var view = "default";
if (sysparmView && sysparmView.value)
view = sysparmView.value;
return view;
},
setVisible : function(fieldName, visibility) {
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
if (!control) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
handler.getObject().setVisible(handler.getFieldName(),
visibility);
}
var v = 'hidden';
if (visibility == 'true')
visibility = true;
if (visibility)
v = 'visible';
if ((visibility != true) && this.isMandatory(fieldName) && (this.getValue(fieldName) == ''))
return;
this.changeElementStyle(fieldName, 'visibility', v);
opticsLog(this.tableName, fieldName, "Visibility set to " + v);
},
changeElementStyle: function(fieldName, name, value) {
var ge = this.getGlideUIElement(fieldName);
if (!ge)
return;
if (this.changeElementParent(ge, name, value))
return;
var labelElement = ge.getLabelElement();
if (labelElement)
labelElement.parentNode.parentNode.style[name] = value;
var parentTR = findParentByTag(ge.getElement(), "tr");
if (parentTR && parentTR != labelElement)
parentTR.style[name] = value;
},
changeElementParent : function(ge, name, value) {
var element = ge.getElementParentNode();
if (element) {
element.style[name] = value;
var decoration = $(element).select(".reference_decoration, .btn-ref");
var isEmptyRef = ge.type == 'reference' && this.getValue(ge.fieldName) == '';
if (decoration && decoration.length > 0) {
for (var i = 0; i < decoration.length; i++) {
if (decoration[i].getAttribute('list-read-only') === "true")
continue;
if (isEmptyRef && (decoration[i].getAttribute('data-type') == 'reference_popup'))
decoration[i].style[name] = 'none';
else
decoration[i].style[name] = value;
}
}
return true;
}
return false;
},
getLabel : function(id) {
id = this.removeCurrentPrefix(id);
var label;
var labels = document.getElementsByTagName('label');
for (var i = 0; (label = labels[i]); i++) {
if (label.htmlFor.endsWith('.' + id))
return label;
}
for (var i = 0; (label = labels[i]); i++) {
if(label.htmlFor.endsWith(id))
return label;
if (label.htmlFor.indexOf("autogen1") !== -1) {
var children = label.children;
for (var j = 0; j < children.length; j++) {
var child = children[j];
if (child.id && child.id.endsWith('.' + id))
return label;
}
}
}
return false;
},
isNewRecord : function() {
return this.newRecord;
},
isMandatory: function(fieldName) {
fieldName = this.removeCurrentPrefix(fieldName);
var thisElement = this.getGlideUIElement(fieldName);
if (!thisElement) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
return handler.getObject().isMandatory(handler.getFieldName());
else
return false;
}
return thisElement.isMandatory();
},
addSecurityReadOnlyFields: function (fields) {
this.securityReadOnlyFields = fields.split(',').filter(function(item) {
return item !== undefined && item !== null && item !== "";
});
},
isSecurityReadOnlyField: function(fieldName) {
return this.securityReadOnlyFields.some(function(securityField) {
return securityField === this.tableName + "." + fieldName;
}, this);
},
setRequiredChecked: function(fieldName, required) {
if(!fieldName || !fieldName.startsWith('ni.VE') || !fieldName.startsWith("ni.QS")) {
jslog("Invalid variable id");
return;
}
var handler = this.getPrefixHandler(this.resolvePrettyNameMap(fieldName));
if(!handler) {
jslog("Invalid variable id");
return;
}
handler.getObject().setRequiredChecked(fieldName, required);
},
_setAriaRequired : function(fieldName, value) {
if (!fieldName) {
return;
}
value = value || false;
var visibleControls = this._getVisibleControls(fieldName);
visibleControls.forEach(function(visibleControl){
visibleControl.setAttribute('aria-required', value);
});
},
setMandatory : function(fieldName, mandatory) {
var thisElement = this.getGlideUIElement(fieldName);
if (!thisElement) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
handler.getObject().setMandatory(handler.getFieldName(), mandatory);
return;
}
if (this.isSecurityReadOnlyField(fieldName)) {
opticsLog(this.tableName, fieldName, "Unable to set security read-only field's mandatory state to " + mandatory);
return;
}
thisElement.setMandatory(mandatory);
this._setMandatory(fieldName, thisElement, mandatory);
this._setDerivedFieldsMandatory(thisElement);
},
_setMandatory : function(fieldName, thisElement, mandatory) {
if (!thisElement)
return;
var e = thisElement.getElement();
if (e) {
e.setAttribute("mandatory", mandatory);
onChangeLabelProcessByEl(e, thisElement.getStatusElement());
this._setAriaRequired(fieldName, mandatory);
}
var control = this.getControl(fieldName);
if (control && control.id && this.elementHandlers[control.id] && (typeof this.elementHandlers[control.id].setMandatory == "function"))
this.elementHandlers[control.id].setMandatory(mandatory);
if (mandatory) {
setMandatoryExplained(true);
var value = this.getValue(fieldName);
if (value == '') {
this._setDisplay(fieldName, true, true, '');
this._setReadonly(fieldName, false, true, '');
}
}
opticsLog(this.tableName, fieldName, "Mandatory set to " + mandatory);
},
setDisabled: function (fieldName, disabled) {
this.setReadonly(fieldName, disabled);
},
setReadOnly: function (fieldName, disabled) {
this.setReadonly(fieldName, disabled);
},
setReadonly: function (fieldName, disabled) {
fieldName = this.removeCurrentPrefix(fieldName);
this._setReadonly(fieldName, disabled, this.isMandatory(fieldName), this.getValue(fieldName));
},
_setDerivedWaitingReadonly: function (fieldName, disabled) {
this.setReadonly(fieldName, disabled);
var control = this.getControl(fieldName);
if (!control)
return;
if (disabled)
control.setAttribute('derived-waiting', true);
else
control.removeAttribute('derived-waiting');
},
_setReadonly : function(fieldName, disabled, isMandatory, fieldValue) {
var s = this.tableName + '.' + fieldName;
var control = this.getControl(fieldName);
if (!control) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
handler.getObject()._setReadonly(
handler.getFieldName(), disabled, isMandatory,
fieldValue);
return;
}
var ge = this.getGlideUIElement(fieldName);
if (!ge) {
opticsLog(this.tableName, fieldName, "Unable to set invalid field's ReadOnly to " + disabled);
return;
}
this._setReadonly0(ge, control, s, fieldName, disabled, isMandatory, fieldValue);
},
_setReadonly0: function (ge, control, s, fieldName, disabled, isMandatory, fieldValue) {
if (disabled && isMandatory && fieldValue == '') {
opticsLog(this.tableName, fieldName, "Unable to set blank mandatory field's read-only state to " + disabled);
return;
}
if (this.isSecurityReadOnlyField(fieldName)) {
opticsLog(this.tableName, fieldName, "Unable to set security read-only field's read-only state to " + disabled);
return;
}
if (control.getAttribute('gsftlocked') == 'true') {
opticsLog(this.tableName, fieldName, "Unable to set locked field's ReadOnly to " + disabled);
return;
}
if (this.elementHandlers[control.id] && (typeof this.elementHandlers[control.id].setReadOnly == "function")) {
if (this.elementHandlers[control.id].setReadOnly(disabled) == true)
return;
} else
this.setDisabledControl(control, disabled);
this._setDisabledField(control, disabled);
onChangeLabelProcessByEl(control, ge.getStatusElement());
this._setFieldReadOnly(ge, "sys_display." + s, disabled);
this._setFieldReadOnly(ge, "sys_select." + s, disabled);
var $inputGroup = $j(ge.getElementParentNode()).find(".input-group");
if ($inputGroup.length){
if (disabled)
$inputGroup.addClass('input-group-disabled');
else
$inputGroup.removeClass('input-group-disabled');
}
this.setSensitiveDisplayValue(s + ".ui_policy_sensitive", disabled ? 'none' : '');
this._setFieldReadOnly(ge, "ni." + this.tableName + "." + fieldName, disabled);
if (this.tableName == "ni")
this._setFieldReadOnly(ge, "ni." + ge.fieldName, disabled);
var suggestionExists = gel('ni.dependent_reverse.' + this.tableName + '.' + fieldName);
if (suggestionExists){
this._setFieldReadOnly(ge, "lookup." + this.tableName + "." + fieldName, disabled, true);
}
opticsLog(this.tableName, fieldName, "ReadOnly set to " + disabled);
},
_setFieldReadOnly : function(ge, s, disabled, skipProcessLabelChange) {
var control = ge.getChildElementById(s);
var value;
if (control) {
this.setDisabledControl(control, disabled);
this._setDisabledField(control, disabled);
if (!skipProcessLabelChange) {
value = (ge.type === "reference" || ge.type === "glide_list") && ge.getElement() ?
ge.getElement().value : control.value;
onChangeLabelProcessByEl(control, ge.getStatusElement(), value);
}
}
},
setDisabledControl: function (control, disabled) {
if (disabled) {
control.setAttribute("readonly", "readonly");
addClassName(control, 'disabled');
} else {
control.removeAttribute("readonly");
removeClassName(control, 'disabled');
}
if (control.tagName == "SELECT") {
var $control = $j(control);
$control.find('option').prop('disabled', disabled);
if ($control.data('select2'))
$control.select2('container').toggleClass('select2-container-disabled', disabled);
} else if (control.getAttribute('type') == 'checkbox')
control.setAttribute('aria-readonly', disabled);
},
_setDisabledField: function (control, disabled) {
if (disabled) {
addClassName(control, 'disabled');
addClassName(control, 'readonly');
this._addDisabledField(control);
} else  {
removeClassName(control, 'disabled');
removeClassName(control, 'readonly');
this._removeDisabledField(control);
}
},
_addDisabledField: function (control) {
var n = this.disabledFields.length;
this.disabledFields[n] = control;
},
_removeDisabledField: function (control) {
var n = this.disabledFields.length;
for (i = 0; i < n; i++) {
if (this.disabledFields[i] == control) {
this.disabledFields.splice(i,1);
break;
}
}
},
onSubmit: function () {
this.getFormElement().addClassName('form-submitted');
this.submitAttemptsCount++;
CustomEvent.fire('glideform.submit_attempted');
var action = this.getActionName();
if (action && !action.startsWith("sysverb_no_update"))
this.submitted = true;
if (action == 'sysverb_back' || action == 'sysverb_cancel' || action == 'sysverb_delete' || action == 'sysverb_query')
return true;
if (action == 'sysverb_m2ms'){
CustomEvent.fire('sn.stream.clearOnSilentSubmit');
}
var rc = this.mandatoryCheck();
if (rc && this._hasSCForm())
rc = g_sc_form.mandatoryCheck() && g_sc_form.catalogOnSubmit();
rc = rc && this.validate();
return rc;
},
enableUIPolicyFields: function() {
for (var i = 0; i < this.disabledFields.length; i++) {
var field = this.disabledFields[i];
var disabledID = field.id;
if (!field.parentNode)
continue;
if (this._isDerivedWaiting(disabledID)) {
continue;
}
var existingElement = document.querySelector('input[name="' + field.name + '"]');
if (existingElement) {
if (existingElement.uiPolicyField == field) {
existingElement.value = field.value;
continue;
}
}
var hiddenInput = document.createElement('input');
hiddenInput.name = field.name;
hiddenInput.type = "hidden";
hiddenInput.value = field.value;
hiddenInput.uiPolicyField = field;
field.parentNode.appendChild(hiddenInput);
}
var derivedWaiting = this.derivedWaiting;
Object.keys(derivedWaiting).forEach(function (key) {
var fieldId = derivedWaiting[key].refFieldName + '.' + key;
jslog("Disabling field: " + fieldId)
$j("[id='"+fieldId+"']").prop('disabled', true);
$j("[id='sys_original."+fieldId+"']").prop('disabled', true);
});
},
focusFirstVisibleField : function(fields) {
var focusDetermined = false;
for (var i = 0; i < fields.length && !focusDetermined; i++) {
var field = fields[i];
var widget = this.getControl(field);
var tryLabel = !$j(widget).is(':visible');
if (!tryLabel) {
try {
var formEle = this.getFormElement();
if (formEle) {
var firstInvalidEle = formEle.querySelector("[aria-invalid='true']");
if(firstInvalidEle)
firstInvalidEle.focus();
else
widget.focus();
} else
widget.focus();
focusDetermined = true;
} catch (e) {
tryLabel = true;
}
}
if (tryLabel) {
var displayWidget = this.getDisplayBox(field);
if (displayWidget && displayWidget.getAttribute("type") == "hidden"){
var streamDisplayWidget = gel("activity-stream-" + field + "-textarea");
if (streamDisplayWidget) {
try {
streamDisplayWidget.focus();
focusDetermined = true;
} catch (exception) {
}
}
}
else if (displayWidget) {
try {
displayWidget.focus();
focusDetermined = true;
} catch (exception) {
}
}
}
}
},
mandatoryCheck : function() {
if (!this.checkMandatory || (!this.modified && this.mandatoryOnlyIfModified))
return true;
var rc = true;
var invalidFields = new Array();
var labels = new Array();
var missing = this.getMissingFields();
var invalidWidgets = [];
for (var i = 0; i < missing.length; i++) {
rc = false;
var field = missing[i];
var widgetVisibleControls = this._getVisibleControls(field);
if (widgetVisibleControls.length > 0) {
invalidWidgets.push(widgetVisibleControls);
}
labels.push(this.tableName + '.' + field);
var widgetLabel = this.getLabelOf(field);
var shortLabel = trim(widgetLabel + '');
invalidFields.push(shortLabel);
}
if (!rc) {
var theText = invalidFields.join(', ');
theText = getMessage('The following mandatory fields are not filled in') + ': ' + theText;
try {
this.addErrorMessage(theText);
CustomEvent.fireAll('glideform.mandatorycheck.failed', theText);
this.submitted = false;
this.focusFirstVisibleField(missing);
} catch (e) {
}
}
for (var i = 0; i < labels.length; i++) {
this.flash(labels[i], "#FFFACD", 0);
}
for (var i = 0; i < invalidWidgets.length; i++) {
for (var j = 0; j < invalidWidgets[i].length; j++) {
invalidWidgets[i][j].setAttribute('aria-invalid', 'true');
}
}
return rc;
},
setVariablesReadOnly: function(readOnly) {
for (var x=0; x < g_form.elements.length; x++) {
for (var i = 0; i < this.nameMap.length; i++) {
var entry = this.nameMap[i];
var element = g_form.elements[x];
if (entry.realName == element.fieldName && element.tableName == "variable") {
if (!this._hasSCForm())
this.setReadOnly(entry.prettyName, readOnly);
else
g_sc_form.setReadOnly(entry.prettyName, readOnly);
}
}
}
},
getHelpTextControl : function(variableName) {
var handler = this.getPrefixHandler(variableName);
var ele;
if (handler) {
var handlerObject = handler.getObject();
ele = handlerObject.getHelpTextControl(handlerObject.removeCurrentPrefix(variableName));
}
if(!ele) {
jslog("getHelpTextControl is supported for only Service Catalog Variables");
return;
}
return ele;
},
getEditableFields : function() {
var fa = this.elements;
var answer =[];
for (var i = 0; i < fa.length; i++) {
var ed = fa[i];
var widget = this.getControl(ed.fieldName);
if (!widget)
continue;
if (this.isEditableField(ed, widget))
answer.push(ed.fieldName);
}
return answer;
},
isEditableField : function(ge, control) {
var isEditableFieldFn = this._getHandlerFn(control, 'isEditableField');
if (isEditableFieldFn)
return isEditableFieldFn(ge, control);
if (!this.isTemplateCompatible(ge, control))
return false;
if (!this.isVisible(ge, control))
return false;
if (this.isReadOnly(ge, control))
return false;
if (this.isDisplayNone(ge, control))
return false;
return true;
},
isTemplateCompatible: function(ge, control) {
var isTemplatableFn = this._getHandlerFn(control, 'isTemplatable');
return !isTemplatableFn || isTemplatableFn(ge, control);
},
_getHandlerFn : function(control, fn) {
if (!control)
return;
var handler = this.elementHandlers[control.id];
if (!handler)
return;
var handlerFn = handler[fn];
if (!handlerFn || typeof handlerFn !== "function")
return;
return handlerFn;
},
isFieldVisible: function(fieldName) {
var ge = this.getGlideUIElement(this._removeTableName(fieldName));
return !!ge && this.isVisible(ge, this.getControl(fieldName));
},
isVisible : function(ge, control) {
var elHandlersCtrl = control && this.elementHandlers[control.id];
var controlType = elHandlersCtrl && elHandlersCtrl.type;
if (controlType !== 'GlideStreamJournalElement')
if (this.isDisplayNone(ge, control))
return false;
if (elHandlersCtrl)
if (typeof this.elementHandlers[control.id].isVisible == "function")
return this.elementHandlers[control.id].isVisible();
if (control && ge.getType() != "glide_duration" && ge.getType != "glide_time") {
var xx = control.style['visibility'];
if (xx == 'hidden'){
var readOnlyField = gel("sys_readonly." + control.id);
if ((readOnlyField && readOnlyField.style['visibility'] == 'hidden') || !readOnlyField)
return false;
}
}
xx = this._getElementStyle(ge, 'visibility');
if (xx == 'hidden' || this._elementHasClass(ge, "hidden"))
return false;
var tab = this._getTabNameForElement(control);
if (tab && !this.isSectionVisible(tab))
return false;
if (!control && !ge.getElementParentNode())
return false;
return true;
},
isDisabled : function(fieldName) {
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
if (!control)
return true;
if (this.elementHandlers[control.id])
if (typeof this.elementHandlers[control.id].isDisabled == "function")
return this.elementHandlers[control.id].isDisabled();
return this.isReadOnly("", control);
},
isReadOnly : function(ge, control) {
if (!control)
return true;
if (this.elementHandlers[control.id])
if (typeof this.elementHandlers[control.id].isReadOnly == "function")
return this.elementHandlers[control.id].isReadOnly();
return control.disabled ||
control.readOnly ||
((typeof control.hasClassName === "function") && control.hasClassName("readonly")) ||
((typeof control.getAttribute === "function") && control.getAttribute("writeaccess") == "false");
},
isDisplayNone : function(ge, control) {
var parentNode = ge.getElementParentNode();
if(parentNode && parentNode.style.display == 'none')
return true;
if (ge.getType() == 'html' || ge.getType() == 'html_script' || ge.getType() == 'translated_html' || ge.getType() == 'composite_name' || ge.getType() == 'url')
return false;
if (!control)
return;
else {
var xx = control.style['display'];
if (xx == 'none') {
var readOnlyField = gel("sys_readonly." + control.id);
if ((readOnlyField && readOnlyField.style['display'] == 'none') || !readOnlyField)
return true;
}
}
var xx = this._getElementStyle(ge, 'display');
if (xx == 'none')
return true;
return false;
},
_getElementStyle : function(ge, style) {
var element = ge.getElementParentNode();
if (element)
return element.style[style];
var labelElement = ge.getLabelElement();
if (labelElement)
return labelElement.parentNode.parentNode.style[style];
var parentTR = findParentByTag(ge.getElement(), "tr");
if (parentTR && parentTR != labelElement)
return parentTR.style[name];
return "";
},
_elementHasClass : function(ge, className) {
var element = ge.getElementParentNode();
if (element)
return element.className === className || element.className.indexOf(className + " ") === 0 ||  element.className.indexOf(" " + className) > -1;
return false;
},
getMissingFields: function() {
var fa = this.elements;
var answer = [];
for (var i = 0; i < fa.length; i++) {
var ed = fa[i];
if (!ed.isMandatory())
continue;
var widget = this.getControl(ed.fieldName);
if (!widget)
continue;
if (this._isMandatoryFieldEmpty(ed))
answer.push(ed.fieldName);
}
if (this._hasSCForm())
g_sc_form.getMissingFields(answer);
return answer;
},
_isMandatoryFieldEmpty : function(ed) {
var widgetValue = this.getValue(ed.fieldName);
if (widgetValue != null && widgetValue != '')
return false;
if (ed.supportsMapping) {
var id = "sys_mapping." + ed.tableName + "." + ed.fieldName;
var mappingValue = this.getValue(id);
if (mappingValue.trim())
return false;
var nonMappedFieldValue = this.getValue(ed.tableName + "." + ed.fieldName);
if (nonMappedFieldValue.trim())
return false;
return true;
}
var displayBox = this.getDisplayBox(ed.fieldName);
if (displayBox != null) {
var displayValue = displayBox.value;
if (displayValue != null && displayValue != '' && displayBox.getAttribute('data-ref-dynamic') == 'true') {
return false;
}
}
if ((this.isNewRecord() || this.mandatory))
return true;
widgetName = "sys_original." + this.tableName + '.' + ed.fieldName;
widget = gel(widgetName);
if (widget) {
widgetValue = widget.value;
if ((widgetValue === null || widgetValue === '') && ed.type !== "journal_input" && ed.type !== "glide_list")
return false;
}
return true;
},
resolveNameMap : function(prettyName) {
var rc = prettyName;
for (var i = 0; i < this.nameMap.length; i++) {
var entry = this.nameMap[i];
if (entry.prettyName == prettyName) {
rc = entry.realName;
}
}
return rc;
},
resolveLabelNameMap : function(name) {
var pname = name;
for (var i = 0; i < this.nameMap.length; i++) {
var el = this.nameMap[i];
if (el.realName === pname || el.prettyName === pname) {
pname = el.label;
break;
}
}
return pname;
},
resolvePrettyNameMap: function(realName) {
var pname = realName;
for (var i = 0; i < this.nameMap.length; i++)
if ('ni.VE' + this.nameMap[i].realName == realName
|| 'ni.QS' + this.nameMap[i].realName.substring(3) == realName
|| this.nameMap[i].realName == realName) {
pname = this.nameMap[i].prettyName;
break;
}
return pname;
},
getFormElement: function() {
return gel(this.tableName + '.do');
},
getControl: function(fieldName) {
var ge = this.getGlideUIElement(fieldName);
if (ge) {
var widget = ge.getElement();
if (widget) {
return widget;
}
}
return this.getControlByForm(fieldName);
},
getControlByForm : function(fieldName) {
var form = this.getFormElement();
if (!form)
return;
widget = form[this.tableName + '.' + fieldName];
if (!widget)
widget = form[fieldName];
if (!widget)
widget = $j(form).find("[data-action-name='" + fieldName + "']").get(0);
if (widget && typeof widget != 'string' && widget.length && widget.tagName != "SELECT") {
for (var i = 0; i < widget.length; i++) {
if (widget[i].checked)
return widget[i];
else if (widget[i].id == fieldName && widget[i].tagName == "INPUT" && widget[i].type != 'radio')
return widget[i];
}
var wt = widget[0].type;
if (typeof wt != 'undefined' && wt == 'radio')
return widget[0];
}
return widget;
},
_tryLabelRow: function(fieldName) {
var element = this._tryLabelRowElement(fieldName);
if(element)
return element.innerText || element.textContent;
return null;
},
_tryLabelRowElement: function(fieldName) {
var id = "label_" + fieldName;
var row = gel(id);
if (row) {
var child = row.firstChild;
if (child) {
return child;
}
}
return null;
},
getLabelOf : function(fieldName) {
var fieldid = this.tableName + '.' + fieldName;
var widgetLabel = this.getLabel(fieldid);
var labelContent = "";
if (widgetLabel) {
labelContent = $j(widgetLabel).find('.label-text').text()
|| widgetLabel.innerText
|| widgetLabel.textContent;
if (labelContent.indexOf('*') == 0
&& document.documentElement.getAttribute('data-doctype') == 'true')
labelContent = labelContent.toString().substring(1);
if ((labelContent.lastIndexOf(":") + 1) == labelContent.length)
labelContent = labelContent.toString().substring(0, (labelContent.length - 1));
}
if (labelContent == null || labelContent == '')
labelContent = this._tryLabelRow(fieldName);
if (labelContent == null || labelContent == '') {
var handler = this.getPrefixHandler(this.resolvePrettyNameMap(fieldName));
if(handler)
labelContent = handler.getObject().getLabelOf(fieldName);
else
labelContent = fieldName;
}
return labelContent.trim();
},
setLabelOf: function(fieldName, value) {
var control = g_form.getControl(fieldName);
var setLabelOfSomething = false;
if (this.elementHandlers[control.id] && (typeof this.elementHandlers[control.id].setLabelOf == "function"))
setLabelOfSomething = this.elementHandlers[control.id].setLabelOf(value);
var labelEl = this._getLabelEl(fieldName);
if (labelEl) {
$j(labelEl).find('.label-text').text(value);
setLabelOfSomething = true;
}
return setLabelOfSomething;
},
_getLabelEl: function(fieldName) {
var fieldID = this.tableName + '.' + fieldName;
var labelEl = this.getLabel(fieldID);
if (labelEl)
return labelEl;
labelEl = this._tryLabelRowElement(fieldName);
if (labelEl)
return labelEl;
return false;
},
_getDecorationsEl: function(field) {
var label = (field instanceof jQuery) ? field : $j(this._getLabelEl(field));
if (!label.length)
return null;
var decorations = label.find('.field_decorations');
if(!decorations.length) {
$j('<span class="field_decorations" data-label-decorations="[]" />').prependTo(label);
decorations = label.find('.field_decorations');
}
return decorations;
},
_getDecorations: function(fieldName) {
var attrName = 'data-label-decorations';
var decorations = this._getDecorationsEl(fieldName);
if (decorations && decorations.length) {
var raw = decorations.attr(attrName);
var json = JSON.parse(raw);
if(json)
return json;
}
return [];
},
_setDecorations: function(fieldName, decorations) {
var isArr = Array.isArray || function(obj) { return $j.type(obj) === "array"; };
if (!isArr(decorations))
return false;
var attrName = 'data-label-decorations';
var labelEl = this._getLabelEl(fieldName);
if (labelEl) {
var raw = JSON.stringify(decorations);
var decorEl = this._getDecorationsEl($j(labelEl));
decorEl.empty();
decorEl.attr(attrName, raw);
for (var i = 0; i < decorations.length; i++) {
var dec = decorations[i];
var $dec = $j('<span class="field_decoration ' + dec.icon + ' ' + dec.color + '" ' +
'title="' + dec.text + '" ' +
'data-placement="right" data-container=".touch_scroll"></span>')
decorEl.append($dec);
$dec.tooltip().hideFix();
}
return true;
}
return false;
},
addDecoration: function(field, icon, text, color) {
text = text || '';
color = color || '';
var decorations = this._getDecorations(field);
var deco = {
icon: icon,
text: text,
color: color
};
var isDuplicate = false;
var maxi = decorations.length;
for (var i = 0; i < maxi; i++) {
var dec = decorations[i];
if (dec.icon == icon
&& dec.text == text
&& dec.color == color) {
isDuplicate = true;
}
}
if(!isDuplicate)
decorations.push(deco);
this._setDecorations(field, decorations);
},
removeDecoration: function(field, icon, text, color) {
text = text || '';
color = color || '';
var decorations = this._getDecorations(field);
var out = [];
var maxi = decorations.length;
for (var i = 0; i < maxi; i++) {
var dec = decorations[i];
if (!(dec.icon == icon
&& dec.text == text
&& dec.color == color)) {
out.push(dec);
}
}
this._setDecorations(field, out);
},
removeAllDecorations: function(){
$j('.field_decorations').remove();
},
getSectionNames: function() {
return g_tabs2Sections.tabNames;
},
setSectionDisplay: function(name, display) {
var index = g_tabs2Sections.findTabIndexByName(name);
if (index === -1)
return false;
if (display)
g_tabs2Sections.showTab(index);
else
g_tabs2Sections.hideTab(index);
return true;
},
isSectionVisible: function(name) {
var index = g_tabs2Sections.findTabIndexByName(name);
if(index !== -1)
return g_tabs2Sections.isVisible(index);
return false;
},
activateTab: function(name) {
var index = g_tabs2Sections.findTabIndexByName(name);
if (index !== -1)
return g_tabs2Sections.setActive(index);
return false;
},
getTabNameForField: function(fieldName) {
if (!g_form.hasField(fieldName))
return null;
var control = g_form.getControl(fieldName);
return this._getTabNameForElement(control);
},
_getTabNameForElement: function(element) {
var sectionId = $j(element).closest('[data-section-id]').attr('id');
if (sectionId) {
var tabIndex = g_tabs2Sections.findTabIndexByID(sectionId);
return g_tabs2Sections.tabNames[tabIndex];
}
return null;
},
_instanceofAny: function (obj, classes) {
if (typeof obj === "undefined" || obj === null || typeof classes === "undefined" || !Array.isArray(classes))
return false;
for (var i = 0, iMax = classes.length; i < iMax; i += 1) {
var aClass = window[classes[i]];
if (typeof aClass === "undefined")
continue;
var constructor = obj.constructor;
while (constructor) {
if (constructor === aClass)
return true;
constructor = constructor.parent;
}
if (obj instanceof aClass)
return true;
}
return false;
},
_getVisibleControls : function(field) {
if (!field)
return [];
var visibleControls = [];
var widgets = this.getControl(field) || [];
if (widgets.length && this._instanceofAny(widgets, ['RadioNodeList', 'HTMLCollection']))
widgets = Array.prototype.slice.call(widgets);
widgets = [].concat(widgets);
widgets.forEach(function(widget) {
var widgetType = widget.getAttribute('type');
if (!widgetType && widget.tagName === 'INPUT')
widgetType = 'text';
if (widget.tagName === 'TEXTAREA' && widgetType !== 'hidden')
visibleControls.push(widget);
else if (typeof widgetType === 'string' && widgetType.toLowerCase() !== 'hidden')
visibleControls.push(widget);
else {
var widgetDisplayBox = this.getDisplayBox(field);
if (widgetDisplayBox)
visibleControls.push(widgetDisplayBox);
}
}.bind(this));
return visibleControls;
},
validate : function() {
var fa = this.elements;
var rc = true;
var labels = [];
var invalidWidgets = [];
for (var i = 0; i < fa.length; i++) {
var ed = fa[i];
var widgetName = this.tableName + '.' + ed.fieldName;
var widget = this.getControl(ed.fieldName);
if (!widget)
continue;
if (!this.isEditableField(ed, widget))
continue;
if (widget.getAttribute("validate") == "false")
continue;
var widgetValue = widget.value;
var widgetType = ed.type;
var specialType = widget.getAttribute("specialtype");
if (specialType)
widgetType = specialType;
var validator = this.validators[widgetType];
if (!validator)
continue;
this.hideFieldMsg(widget);
var isValid = validator.call(this, widgetValue);
if (isValid != null && isValid != true) {
var widgetLabel = this.getLabelOf(ed.fieldName);
labels.push(widgetName);
rc = false;
if (isValid == false || isValid == "false")
isValid = getMessage("Invalid text");
this.showFieldMsg(widget, isValid, 'error');
var widgetVisibleControls = this._getVisibleControls(ed.fieldName);
if (widgetVisibleControls.length > 0) {
invalidWidgets.push(widgetVisibleControls);
}
}
}
for (var i = 0; i < labels.length; i++)
this.flash(labels[i], "#FFFACD", 0);
for (var i = 0; i < invalidWidgets.length; i++) {
for (var j = 0; j < invalidWidgets[i].length; j++) {
invalidWidgets[i][j].setAttribute('aria-invalid', 'true');
}
}
return rc;
},
removeCurrentPrefix: function(id) {
if (id){
if (id.indexOf('current.') == 0){
id = id.substring(8);
}
return id;
}
},
removeVariablesPrefix: function(id) {
return id && id.startsWith("variables.") ? id.substring(10) : id;
},
hasVariablesPrefix: function(id) {
return id && id.startsWith("variables.");
},
isNumeric: function(internaltype) {
if (internaltype == 'decimal')
return true;
if (internaltype == 'float')
return true;
if (internaltype == 'integer')
return true;
if (internaltype == 'numeric')
return true;
return false;
},
isInteger: function(internaltype) {
if (internaltype == 'integer')
return true;
return false;
},
setTemplateValue: function(fieldName, value, displayValue) {
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
if (control)
control.templateValue = 'true';
var text = "Field modified by template";
var status = this.setValue(fieldName, value, displayValue, true);
if (status)
return status;
this.addDecoration(fieldName, 'icon-success', text);
},
setValue : function(fieldName, value, displayValue, fromSetTemplateValue) {
var oldValue = this.getValue(fieldName);
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
if (!control) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
handler.getObject().setValue(handler.getFieldName(),
value, displayValue);
return;
} else {
var isChoicePresent = false;
if (control.options && control.options.length) {
for (var i = 0; i < control.options.length; i++) {
control.options[i].removeAttribute('selected');
if (control.options[i].value === value)
isChoicePresent = true;
}
if (!isChoicePresent && g_allow_field_dependency_for_templates && fromSetTemplateValue)
return this._getDependentFieldErrorObject(fieldName);
}
}
var previousInternalChangeValue = this._internalChange;
this._internalChange = true;
var response = this._setValue(fieldName, value, displayValue, true, fromSetTemplateValue);
this._internalChange = previousInternalChangeValue;
this._opticsInspectorLog(fieldName, oldValue);
if (response && response.success === false)
return response;
},
getNiBox: function(fieldName) {
var niName = 'ni.' + this.tableName + '.' + fieldName;
return gel(niName);
},
getDisplayBox: function(fieldName) {
var dName, field;
dName = 'sys_display.' + this.tableName + '.' + fieldName;
field = gel(dName);
if (field)
return field;
dName = 'sys_display.' + fieldName;
field = gel(dName);
if (field)
return field;
var handler = this.getPrefixHandler(fieldName);
if (handler) {
var handlerObject = handler.getObject();
return handlerObject.getDisplayBox(handlerObject.removeCurrentPrefix(fieldName));
}
return;
},
clearValue: function(fieldName) {
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
if (!control) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
control = handler.getObject().clearValue(handler.getFieldName());
return;
}
if (control.id && this.elementHandlers[control.id] && (typeof this.elementHandlers[control.id].clearValue === "function")) {
this.elementHandlers[control.id].clearValue();
return;
}
if (!control.options) {
this.setValue(fieldName, '', '');
return;
}
var opt = this._getEmptyOrDefaultOption(control.options);
if (opt && (control.selectedIndex == -1 || control.value != opt.value))
this.setValue(fieldName, opt.value, opt.text);
},
_getEmptyOrDefaultOption : function(options) {
if (!options || options.length == 0)
return null;
for (i = 0; i < options.length; i++) {
var opt = options[i];
if (opt.value === '')
return opt;
}
return options[0];
},
_setEmptyMandatoryFieldsVisible : function(fieldName) {
fieldName = this._sanitizeFieldName(fieldName);
if (!this.isMandatory(fieldName) || this._isDerivedWaiting(fieldName))
return;
var ge = this.getGlideUIElement(fieldName)
if (ge && !this.isVisible(ge, this.getControl(fieldName))) {
this.setVisible(fieldName, true);
this.setDisplay(fieldName, true);
}
},
_sanitizeFieldName : function(fieldName){
if (fieldName){
fieldName = this.removeCurrentPrefix(fieldName);
fieldName = this._removeTableName(fieldName);
}
return fieldName;
},
_removeTableName : function(fieldName) {
var tablePrefix = this.tableName + ".";
if (fieldName.startsWith(tablePrefix))
return fieldName.substring(tablePrefix.length);
return fieldName;
},
_setReadOnlyValue: function(fieldName, value, displayValue, control) {
var updatedValue = value;
var readOnlyField = gel('sys_readonly.' + control.id);
if (readOnlyField) {
if (g_form.getGlideUIElement(fieldName).type === 'currency') {
var handler = new CurrencyElement(control.id, 'currency');
var extractedValues = handler._extractCurrency(value, displayValue);
if (extractedValues && extractedValues.withSymbolGrouping) {
readOnlyField.value = extractedValues.withSymbolGrouping;
updatedValue = extractedValues.type + ';' + extractedValues.amount;
}
} else if (readOnlyField.tagName == "SPAN") {
var fieldType = readOnlyField.getAttribute('gsft_fieldtype');
if (fieldType && fieldType.indexOf("html") > -1)
readOnlyField.innerHTML = value;
else
readOnlyField.innerHTML = htmlEscape(value);
} else if (displayValue && readOnlyField.tagName != "SELECT") {
readOnlyField.value = displayValue;
} else {
readOnlyField.value = value;
if (readOnlyField.tagName == "SELECT")
$j(readOnlyField).trigger('change');
}
} else {
readOnlyField = gel(control.id + "_label");
if (readOnlyField) {
displayValue = this._ensureDisplayValue(fieldName, value, displayValue);
if (readOnlyField.tagName === 'SPAN' || readOnlyField.tagName === 'P')
readOnlyField.innerHTML = displayValue;
else
readOnlyField.value = displayValue;
}
}
if (readOnlyField)
$j(readOnlyField).trigger("autosize.resize");
return updatedValue;
},
_setValue: function(fieldName, value, displayValue, updateRelated, fromSetTemplateValue) {
fieldName = this._sanitizeFieldName(fieldName);
var control = this.getControl(fieldName);
if (typeof control === 'undefined')
return;
var defaultControlValue = this._setReadOnlyValue(fieldName, value, displayValue, control);
if (!value && value !== 0 && value !== false && !control.options)
this._setEmptyMandatoryFieldsVisible(fieldName);
if (control && control.id && this.elementHandlers[control.id] && (typeof this.elementHandlers[control.id].setValue == "function")) {
this.elementHandlers[control.id].setValue(value, displayValue);
} else if (control.options) {
var isSelect2 = $j(control).data() && 'select2' in $j(control).data();
if (isSelect2)
$j(control).select2('destroy');
var i = this._getSelectedIndex(control, value, displayValue);
control.selectedIndex = i;
if (isSelect2)
$j(control).select2().select2('val', value);
if (!control.options[i].value)
this._setEmptyMandatoryFieldsVisible(fieldName);
onChange(this.tableName + "." + fieldName, fromSetTemplateValue, this);
} else if (control.type == 'hidden') {
var nibox = this.getNiBox(fieldName);
if (nibox && nibox.type == 'checkbox') {
if (value && value == '0')
value = 'false';
if (value && value == '1')
value = 'true';
control.value = value;
onChange(this.tableName + "." + fieldName, false, this);
if (value && value == 'false')
nibox.checked = null;
else if (value || value == 'true')
nibox.checked = 'true';
else
nibox.checked = null;
setCheckBox(nibox);
return;
}
var displaybox = this.getDisplayBox(fieldName);
if (displaybox) {
var sel = gel("sys_select." + this.tableName + "." + fieldName);
if (typeof(displayValue) === 'undefined' && value)
displayValue = this._ensureDisplayValue(fieldName, value, displayValue, displaybox, fromSetTemplateValue);
if (displayValue === "" && g_allow_field_dependency_for_templates && fromSetTemplateValue)
return this._getDependentFieldErrorObject(fieldName);
control.value = value != null ? value : '';
if (typeof(displayValue) !== 'undefined') {
displaybox.value = displayValue;
onChange(this.tableName + "." + fieldName, fromSetTemplateValue, this);
removeClassName(displaybox, 'ref_invalid');
removeClassName(displaybox, 'ref_dynamic');
displaybox.title = "";
this._setReferenceSelect(control, sel, value, displayValue);
refFlipImage(displaybox, control.id);
if (updateRelated) {
updateRelatedGivenNameAndValue(this.tableName + '.' + fieldName, value);
}
return;
}
onChange(this.tableName + "." + fieldName, fromSetTemplateValue, this);
if (value == null || value == '')
displayValue = '';
displaybox.value = displayValue;
this._setReferenceSelect(control, sel, value, displayValue);
refFlipImage(displaybox, control.id);
updateRelatedGivenNameAndValue(this.tableName + '.' + fieldName, value);
} else if ($(control).hasClassName('glide_destroy_filter') || $(control).hasClassName('glideform-set-value')) {
$j(control).val(value);
onChange(this.tableName + "." + fieldName, false, this);
} else {
control.value = value;
onChange(this.tableName + "." + fieldName, false, this);
}
} else {
control.value = defaultControlValue;
onChange(this.tableName + "." + fieldName, false, this);
}
},
_setReferenceSelect: function(control, sel, value, displayValue) {
if (control && !control.options && sel) {
var i = this._getSelectedIndex(sel, value, displayValue);
sel.selectedIndex = i;
}
},
_getDependentFieldErrorObject : function(fieldName) {
return {
success: false,
message: new GwtMessage().getMessage("Value of the field <b>{0}</b> is incorrect.", fieldName)
};
},
_getSelectedIndex : function(control, value, displayValue) {
var options = control.options;
for (var i = 0; i < options.length; i++) {
var option = options[i];
if (option.value == value) {
return i;
}
}
var dv = value;
if (typeof (displayValue) != 'undefined')
dv = displayValue;
var newOption = new Option(dv, value);
control.options[control.options.length] = newOption;
return control.options.length - 1;
},
_ensureDisplayValue : function(fieldName, value, displayValue, displayBox, fromSetTemplateValue) {
if (displayValue)
return displayValue;
var ed = this.getGlideUIElement(fieldName);
if (!ed)
return displayValue;
if (ed.type != 'reference' && ed.type != 'domain_id' && ed.type != 'glide_list')
return displayValue;
var ga = new GlideAjax('AjaxClientHelper');
ga.addParam('sysparm_name', 'getDisplay');
ga.addParam('sysparm_table', ed.reference);
ga.addParam('sysparm_value', value);
if (displayBox !== 'undefined' && g_allow_field_dependency_for_templates && fromSetTemplateValue) {
var dependentField = displayBox.getAttribute("data-dependent");
var dependentFieldValue = dependentField ? g_form.getValue(dependentField) : '';
ga.addParam('sysparm_dependent', dependentField);
ga.addParam('sysparm_dependent_value', dependentFieldValue);
}
ga.getXMLWait();
return ga.getAnswer();
},
getUniqueValue: function() {
return this.getValue('sys_uniqueValue');
},
isDatabaseView: function() {
var id = this.getUniqueValue();
return id && id.indexOf('__ENC__') == 0;
},
getTitle: function() {
return this.getValue('sys_titleValue');
},
getValue : function(fieldName) {
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
if (!control) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
return handler.getObject().getValue(
handler.getFieldName());
return '';
}
return this._getValueFromControl(control);
},
getDisplayValue: function() {
return this.getValue('sys_displayValue');
},
_getValueFromControl: function(control) {
var value;
if (this.elementHandlers[control.id] && (typeof this.elementHandlers[control.id].getValue == "function")) {
value = this.elementHandlers[control.id].getValue();
} else {
value = control.value;
}
return (typeof value !== 'undefined') ? value.toString() : '';
},
getIntValue: function(fieldName) {
var val = this.getValue(fieldName);
if (!val || val.length == 0)
return 0;
return parseInt(formatClean(val));
},
getDecimalValue: function(fieldName) {
var val = this.getValue(fieldName);
if (!val || val.length == 0)
return 0;
var fc = formatClean(val);
fc = fc.replace(/,/g, '.');
return parseFloat(fc);
},
getBooleanValue: function(fieldName) {
var val = this.getValue(fieldName);
val = val ? val + '' : val;
if (!val || val.length == 0 || val =="false")
return false;
return true;
},
addOption: function (fieldName, choiceValue, choiceLabel, choiceIndex) {
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
var isSelect2 = $j(control).data() && 'select2' in $j(control).data();
if (!control) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
handler.getObject().addOption(handler.getFieldName(), choiceValue, choiceLabel, choiceIndex);
return;
}
if (isSelect2){
if (!choiceLabel)
choiceLabel = choiceValue;
$j(control).select2('destroy');
var newOption = new Option(choiceLabel, choiceValue);
$j(control).append(newOption).trigger('change');
$j(control).select2();
}
if (!control.options)
return;
var len = control.options.length;
var evalLength;
if (!isSelect2)
evalLength = len
else if (isSelect2)
evalLength = len - 1;
for (i = 0; i < evalLength; i++) {
if (control.options[i].text == choiceLabel) {
return;
}
}
if (choiceIndex == undefined)
choiceIndex = len;
if (choiceIndex < 0 || choiceIndex > len)
choiceIndex = len;
var newOption = new Option(choiceLabel, choiceValue);
var value = choiceValue;
if (len > 0) {
value = this.getValue(fieldName);
control.options[len] = new Option('', '');
for (var i = len; i > choiceIndex; i--) {
control.options[i].text = control.options[i - 1].text;
control.options[i].value = control.options[i - 1].value;
}
}
if (control.readAttribute("readonly") === "readonly")
newOption.disabled = true;
control.options[choiceIndex] = newOption;
if (isSelect2)
control.options[len].remove();
this.setValue(fieldName, value);
},
enableOption : function(control, choiceValue, choiceLabel) {
var len = control.options.length;
for (var i = len - 1; i >= 0; i--) {
if (control.options[i].text == choiceLabel && control.options[i].value == choiceValue) {
control.options[i].disabled = false;
return true;
}
}
return false;
},
clearOptions : function(fieldName) {
fieldName = this.removeCurrentPrefix(fieldName);
var control = this.getControl(fieldName);
if (control && !control.options) {
var name = "sys_select." + this.tableName + "." + fieldName;
control = gel(name);
}
if (!control) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
handler.getObject().clearOptions(handler.getFieldName());
return;
}
if (!control.options)
return;
control.innerHTML = '';
},
getOptionControl : function(fieldName, choiceValue) {
var noPrefix = this.removeCurrentPrefix(fieldName);
var control = this.getControl(noPrefix);
if (control && !control.options) {
var name = "sys_select." + this.tableName + "." + noPrefix;
control = gel(name);
}
return control;
},
removeOption : function(fieldName, choiceValue) {
var control = this.getOptionControl(fieldName, choiceValue);
if (!control)
return;
if (!control.options)
return;
var options = control.options;
for (var i = 0; i < options.length; i++) {
var option = options[i];
if (option.value == choiceValue) {
control.options[i] = null;
break;
}
}
},
getOption : function(fieldName, choiceValue) {
var control = this.getOptionControl(fieldName, choiceValue);
if (!control)
return null;
if (!control.options)
return null;
var options = control.options;
for (var i = 0; i < options.length; i++) {
var option = options[i];
if (option.value == choiceValue)
return option;
}
return null;
},
removeContextItem: function(itemID) {
for (av in contextMenus) {
if (contextMenus[av]) {
var menu = contextMenus[av];
var c = menu.context;
if (c)
this.removeItem(menu, itemID);
}
}
},
removeItem: function(menu, itemID) {
var items = menu.childNodes;
for (var i = 0; i < items.length; i++) {
var item = items[i];
if (item.innerHTML == itemID) {
menu.removeChild(item);
clearNodes(item);
break;
}
}
return;
},
getGlideUIElement: function (fieldName) {
fieldName = this.removeCurrentPrefix(fieldName);
for (var i = 0; i < this.elements.length; i++) {
var thisElement = this.elements[i];
if (thisElement.fieldName == fieldName)
return thisElement;
}
},
getDerivedFields: function(fieldName, immediateOnly) {
var parts = fieldName.split(".");
parts.shift();
fieldName = parts.join(".")+".";
var list = new Array();
for (var i = 0; i < this.elements.length; i++) {
var thisElement = this.elements[i];
if (thisElement.fieldName.indexOf(fieldName) == 0) {
var target = thisElement.fieldName.substring(fieldName.length);
list.push(target);
}
}
if (list.length == 0)
return null;
if (immediateOnly !== true)
return list;
list.sort(function(a, b) {
return a.split('.').length - b.split('.').length;
});
list = list.filter(function(a, index, arr) {
return !g_form._hasDerivedInBetween(a, arr);
});
if (list.length == 0)
return null;
return list;
},
_hasDerivedInBetween: function(derived, allDerived) {
var levels = derived.split('.').length;
for (var i = 0; i < allDerived.length; i++) {
var d = allDerived[i];
if (d === derived || d.split('.').length >= levels)
break;
if (derived.startsWith(d + '.'))
return true;
}
return false;
},
_addDerivedWaiting: function(fieldName, refFieldName, isReadOnly) {
if (!this.derivedWaiting[fieldName])
this.derivedWaiting[fieldName] = { fieldName: fieldName, refFieldName: refFieldName, isReadOnly: isReadOnly || false };
if (!isReadOnly)
this._setDerivedWaitingReadonly(fieldName, true);
},
_isDerivedWaiting: function(fieldName) {
var shortFieldName = this._removeTableName(fieldName);
return (shortFieldName in this.derivedWaiting);
},
_removeDerivedWaiting: function(fieldName) {
var shortFieldName = this._removeTableName(fieldName);
if (shortFieldName in this.derivedWaiting)
delete this.derivedWaiting[shortFieldName];
},
_resetDerivedField: function(fieldName) {
if (this._isDerivedWaiting(fieldName)) {
var shortFieldName = this._removeTableName(fieldName);
if (!this.derivedWaiting[shortFieldName].isReadOnly)
this._setDerivedWaitingReadonly(fieldName, false);
this._removeDerivedWaiting(fieldName);
}
},
getReference: function(fieldName, callback) {
var opticsContext = null;
if (window['g_optics_inspect_handler'] && g_optics_inspect_handler.opticsContextStack.length > 0)
opticsContext = g_optics_inspect_handler.opticsContextStack[g_optics_inspect_handler.opticsContextStack.length - 1];
fieldName = this.removeCurrentPrefix(fieldName);
var ed = this.getGlideUIElement(fieldName);
if (!ed) {
var handler = this.getPrefixHandler(fieldName);
if (handler)
return handler.getObject().getReference(handler.getFieldName(), callback);
return;
}
if (ed.type != 'reference' && ed.type != 'domain_id')
return;
var value = this.getValue(fieldName);
var gr = new GlideRecord(ed.reference);
if (value == "") {
if (callback)
callback(gr);
return gr;
}
if (window.g_event_handlers_localCache && !callback) {
var cachedObj = window.g_event_handlers_localCache[fieldName];
if (typeof cachedObj !== 'undefined' && cachedObj.sys_id === value) {
jslog("GlideForm: getReference cache hit on " + this.getTableName() + "." + fieldName + ":" + value + ", skipped synchronous ajax call");
return cachedObj;
}
}
gr.addQuery(ed.referenceKey, value);
if (callback) {
var fn = function(gr) {
gr.next();
if (opticsContext)
CustomEvent.fire('glide_optics_inspect_put_context', opticsContext["category"], opticsContext["name"], opticsContext["sys_id"]);
callback(gr);
if (opticsContext)
CustomEvent.fire('glide_optics_inspect_pop_context');
};
gr.query(fn);
return;
} else {
var sw = new StopWatch();
sw.jslog("*** WARNING *** GlideForm: synchronous getReference call on " + this.getTableName() + " for " + fieldName);
if (g_event_handlers_queryTracking) {
gr.addAdditionalParam("sysparm_reference_query_table", this.getTableName());
gr.addAdditionalParam("sysparm_reference_query_field", fieldName);
}
}
gr.query();
gr.next();
return gr;
},
submit: function(actionName) {
actionName = actionName || 'sysverb_update';
var action = gel(actionName);
if (!action)
action = this._getLinkActionByAttribute(actionName);
if (action)
return gsftSubmit(action);
},
_getLinkActionByAttribute: function(actionName, attribute) {
var attr = attribute || 'gsft_action_name';
var selector = 'a[' + attr + '="' + actionName + '"]';
var el = $j(selector);
if (el.length === 0)
return;
return el[0];
},
save: function() {
return this.submit('sysverb_update_and_stay');
},
getActionName : function() {
var form = this.getFormElement();
if (form) {
var theButton = form.sys_action;
if (theButton)
return theButton.value;
}
return this.action;
},
getTableName: function() {
return this.tableName;
},
getSections: function() {
return $$('form span.tabs2_section span[data-header-only="false"]');
},
serialize: function (filterFunc) {
var formName = this.tableName + '.do';
if (!filterFunc)
return Form.serialize(gel(formName)) + this._serializeDisabled();
var elements = Form.getElements(gel(formName));
var queryComponents = new Array();
for (var i = 0; i < elements.length; i++) {
if (filterFunc(elements[i])) {
var queryComponent;
if (elements[i].disabled)
queryComponent = elements[i].id + '=' + encodeURIComponent(elements[i].value);
else
queryComponent = Form.Element.serialize(elements[i]);
if (queryComponent)
queryComponents.push(queryComponent);
}
}
return queryComponents.join('&');
},
_serializeDisabled : function() {
var n = this.disabledFields.length;
var dfa = [];
for (var i = 0; i < n; i++) {
var e = this.disabledFields[i];
if (!e.value || !e.id)
continue;
dfa.push(e.id + '=' + encodeURIComponent(e.value));
}
if (dfa.length)
return '&' + dfa.join('&');
return '';
},
serializeChanged: function() {
var s = this.serializeTargetFields();
var f = this.serialize(this.changedFieldsFilter.bind(this));
if (f)
f = "&" + f;
return s + f;
},
serializeChangedAll: function() {
var s = this.serializeTargetFields();
var f = this.serialize(this.allChangedFieldsFilter.bind(this));
if (f)
f = "&" + f;
return s + f;
},
_serializeElementIfEmpty: function(key, value) {
var obj = {};
obj[key] = value;
return key && value ? "&" + Object.toQueryString(obj) : "";
},
serializeTargetFields: function() {
var s = this._serializeElement("sys_target") || this._serializeElementIfEmpty("sys_target", this.getTableName());
s += this._serializeElement("sys_uniqueValue");
s += this._serializeElement("sys_row");
s += this._serializeElement("sysparm_encoded_record");
return s;
},
_serializeElement: function(id) {
var e = gel(id);
if (e) {
var queryComponent = Form.Element.serialize(e);
if (queryComponent)
return "&" + queryComponent;
}
return "";
},
changedFieldsFilter: function(element) {
if (element.changed
&& element.id.startsWith(this.getTableName() + ".")
&& (element.tagName.toUpperCase() != "TEXTAREA"))
return true;
if (element.id.startsWith("ni.VE") || element.id.startsWith("ni.QS")) {
if (element.id.endsWith("read_only"))
return false;
return true;
}
if (element.name.startsWith("ni.WATERMARK"))
return true;
return false;
},
allChangedFieldsFilter: function(element) {
if (element.changed && element.id.startsWith(this.getTableName() + "."))
return true;
return false;
},
flash: function (widgetName, color, count) {
var row = null;
var labels = new Array();
var realLabel = this.getLabel(widgetName);
if (realLabel)
row = $(realLabel.parentNode.parentNode);
else {
jslog("flash() called for '" + widgetName + "' but there is no label for it")
return;
}
var temp = row.select('.label_left');
for (var i = 0; i < temp.length; i++)
labels.push(temp[i]);
temp = row.select('.label_right');
for (var i = 0; i < temp.length; i++)
labels.push(temp[i]);
temp = row.select('.label');
for (var i = 0; i < temp.length; i++)
labels.push(temp[i]);
temp = row.select('.control-label');
for (var i = 0; i < temp.length; i++)
labels.push(temp[i]);
count = count + 1;
for (var i = 0; i < labels.length; i++) {
var widget = labels[i];
if (widget) {
var originalColor = widget.style.backgroundColor;
widget.style.backgroundColor = (count < 4 || isNaN(count)) ? color : '';
}
}
if (count < 4)
setTimeout('g_form.flash("' + widgetName + '", "' + originalColor + '", ' + count + ')', 500);
},
enable: function () {
var form = this.getFormElement();
if (form)
for (var i = 0; i < form.elements.length; i++)
form.elements[i].disabled = false;
},
disable: function() {
var form = this.getFormElement();
if (form)
for (var i = 0; i < form.elements.length; i++)
form.elements[i].disabled = true;
},
showRelatedList: function(listTableName) {
CustomEvent.fire('related_lists.show', listTableName);
},
hideRelatedList: function(listTableName) {
CustomEvent.fire('related_lists.hide', listTableName);
},
getRelatedListNames: function() {
if (window.NOW.g_relatedLists)
return window.NOW.g_relatedLists.lists;
if (window.g_tabs2List) {
var relatedListNames = [];
var trimmedNames = g_tabs2List.tabIDs;
for (var i = 0; i < trimmedNames.length; i++)
relatedListNames.push(trimmedNames[i].split('.').slice(1).join('.'));
return relatedListNames;
}
var listWrapper = gel("related_lists_wrapper");
if (!listWrapper)
return [];
var forthcomingTabs = listWrapper.getAttribute('data-lists');
if (!forthcomingTabs)
return [];
return forthcomingTabs.split(',');
},
_getRelatedListID: function(listTableName) {
var relatedList = this.findV2RelatedListName(listTableName);
var relatedListId;
if (relatedList)
relatedListId = relatedList.getAttribute("id");
if (!relatedListId)
relatedListId = this.getTableName() + "." + listTableName;
return relatedListId;
},
findV2RelatedListName : function(listTableName) {
var tableName = this.getTableName();
var compareId = tableName + "." + listTableName;
var rlw = gel("related_lists_wrapper");
if (!rlw)
return "";
for (var i = 0; i < rlw.childNodes.length; i++) {
var node = rlw.childNodes[i];
if (node.nodeName != "DIV")
continue;
var idName = node.getAttribute("id");
if (idName.length == 0)
continue;
if (idName.indexOf(compareId) > -1)
return node;
}
if (typeof GlideLists2 == "undefined")
return;
for ( var id in GlideLists2) {
var list = GlideLists2[id];
if (list.getTableName() == listTableName && list.getParentTable() == tableName)
return list.getContainer();
}
return "";
},
showRelatedLists : function() {
var listNames = g_form.getRelatedListNames();
for (var i = 0; i < listNames.length; i++) {
this.showRelatedList(listNames[i]);
}
},
hideRelatedLists : function() {
var listNames = g_form.getRelatedListNames();
for (var i = 0; i < listNames.length; i++) {
this.hideRelatedList(listNames[i]);
}
},
addInfoMessage: function(msg, id) {
this._addFormMessage(msg, "info", id);
},
addWarningMessage: function(msg, id) {
this._addFormMessage(msg, "warning", id);
},
addErrorMessage: function(msg, id) {
this._addFormMessage(msg, "error", id);
},
_addFormMessage: function(msg, type, id) {
var scrollToMsg = gel("ni.escape_form_message");
if (scrollToMsg && scrollToMsg.value === 'true')
msg = htmlEscape(msg);
GlideUI.get().addOutputMessage({msg: msg, type: type, id: id, preventDuplicates: true});
var scrollDiv = getFormContentParent();
scrollDiv.scrollTop = 0;
},
clearMessages: function() {
GlideUI.get().clearOutputMessages();
},
showFieldMsg: function(input, message, type,  scrollForm, key) {
var msgClass;
var msgImage;
var msgImageAlt;
var msgRowType;
switch(type) {
case "info":
msgClass = this.INFO_CLASS;
msgRowType = 'info' + this.MSG_ROW;
break;
case "error":
msgClass = this.ERROR_CLASS;
msgRowType = 'error' + this.MSG_ROW;
break;
case "warning":
msgClass = this.WARNING_CLASS;
msgRowType = 'warning' + this.MSG_ROW;
break;
default:
type = 'info';
msgClass = this.INFO_CLASS;
msgRowType = 'info' + this.MSG_ROW;
break;
}
var inputElement = input;
if (typeof(inputElement)=="string")
inputElement = this.getControl(inputElement);
if (!inputElement) {
var handler = this.getPrefixHandler(input);
if (handler) {
var handlerObject = handler.getObject();
var fieldName = handler.getFieldName();
var actualName = handlerObject.getActualName(fieldName);
inputElement = handlerObject.getControl(actualName);
}
}
if (!inputElement || !message) {
jslog("ERROR: invalid field or missing message passed to g_form.showFieldMsg('" + input + "','" + message + "')");
return;
}
if (inputElement.id && this.elementHandlers[inputElement.id] && (typeof this.elementHandlers[inputElement.id].showFieldMsg == "function"))
this.elementHandlers[inputElement.id].showFieldMsg(input, message, type);
var positionedCursor = this._positionCursorAtError(inputElement, message);
var fieldRowId = "element." + inputElement.id;
var fieldRow = document.getElementById(fieldRowId);
var doc;
var isVariable = false;
var variableMsgRow = null;
if (!fieldRow) {
var parent = inputElement.parentNode;
while (parent != null) {
if (parent.nodeName.toUpperCase() == 'TR') {
fieldRow = parent;
isVariable = true;
break;
}
parent = parent.parentNode;
}
}
if (!fieldRow) {
jslog("Error adding field message. Couldn't find the row to add the field message to.");
return;
}
doc = fieldRow.ownerDocument;
var inputContainer = inputElement.up('.form-field');
if (!inputContainer)
inputContainer = inputElement.up();
var fieldMsgContainer = inputContainer.down('.fieldmsg-container');
if (!fieldMsgContainer) {
fieldMsgContainer = doc.createElement('div');
fieldMsgContainer.className = 'fieldmsg-container';
if (isVariable)
fieldMsgContainer.className = 'variable-field-msg';
fieldMsgContainer.id = inputElement.id + '_fieldmsg';
fieldMsgContainer.setAttribute('aria-live', 'polite');
inputContainer.insert(fieldMsgContainer);
inputElement.setAttribute('aria-describedby', fieldMsgContainer.id);
if (inputElement.getAttribute('data-type') === 'glide_element_date_time') {
var buttonGroupSiblings = inputElement.siblings('.input-group-btn');
if (buttonGroupSiblings.length > 0) {
var buttonGroup = buttonGroupSiblings[0];
var button = buttonGroup.querySelector('.date_time_trigger');
if (button) {
button.setAttribute('aria-describedby', fieldMsgContainer.id);
}
}
}
}
var fieldMsgRow = doc.createElement('DIV');
fieldMsgRow.className = msgClass;
fieldMsgRow.hasFieldmsg = true;
if (key)
fieldMsgRow.setAttribute('data-fieldmsg-key', inputElement.id + '_fieldmsg_' + key);
var fieldmsgMsg = doc.createTextNode(message);
fieldMsgRow.appendChild(fieldmsgMsg);
fieldMsgContainer.insert(fieldMsgRow);
if (!fieldRow.visible() && fieldRow.getAttribute("data-type") == "journal_input") {
var multipleInput = $("multiple-input-journal-entry");
if (multipleInput && multipleInput.visible())
fieldRow = $j("#multiple-input-journal-entry textarea")[0];
else
fieldRow = $("activity-stream-textarea");
}
if (!positionedCursor)
this._scrollToElementTR(fieldRow, fieldMsgRow, scrollForm);
_frameChanged();
},
_scrollToElementTR: function(labelTR, msgTR, scrollForm) {
var scroll = scrollForm;
if (typeof scroll == "undefined") {
var scrollToMsg = gel("ni.scroll_to_messsage_field");
if (scrollToMsg == null)
scroll = true;
else {
if (scrollToMsg.value != "false")
scroll = true;
else
scroll = false;
}
}
if (!scroll)
return;
var scrollDiv = getFormContentParent();
var refControl = gel("sys_target");
var ref;
var titleDiv;
if (refControl != null) {
ref = refControl.value;
titleDiv = gel(ref + ".form_header");
} else {
titleDiv = gel("form_header");
}
var headerHeight = 0;
if (titleDiv && titleDiv.clientHeight)
headerHeight = titleDiv.clientHeight;
var topOfLabel = grabOffsetTop(labelTR);
var needToScroll = false;
if (topOfLabel > scrollDiv.scrollTop + scrollDiv.clientHeight)
needToScroll = true;
else if (topOfLabel < scrollDiv.scrollTop + headerHeight)
needToScroll = true;
else {
var topOfMsg = grabOffsetTop(msgTR);
if (topOfMsg > scrollDiv.scrollTop + scrollDiv.clientHeight)
needToScroll = true;
}
if (!needToScroll)
return;
var scrollTopSetting = topOfLabel - headerHeight;
if (scrollDiv.id)
setTimeout("$('" + scrollDiv.id + "').scrollTop = " + scrollTopSetting, 100);
else
scrollDiv.scrollTop = scrollTopSetting;
},
showErrorBox: function(input, message,  scrollForm) {
this.showFieldMsg(input, message, "error", scrollForm);
},
hideFieldMsg: function(input, clearAll, key) {
var inputElement = input;
if (typeof(inputElement) == "string")
inputElement = this.getControl(inputElement);
if (!inputElement) {
var handler = this.getPrefixHandler(input);
if (handler) {
var handlerObject = handler.getObject();
var fieldName = handler.getFieldName();
var actualName = handlerObject.getActualName(fieldName);
inputElement = handlerObject.getControl(actualName);
}
}
if (!inputElement) {
jslog("ERROR: invalid field ('" + input + "') passed to g_form.hideFieldMsg");
return;
}
if (inputElement.id && this.elementHandlers[inputElement.id] && (typeof this.elementHandlers[inputElement.id].hideFieldMsg == "function"))
this.elementHandlers[inputElement.id].hideFieldMsg(input, clearAll);
var fieldTrId = "element." + inputElement.id;
var tr = document.getElementById(fieldTrId);
if (!tr) {
var parent = inputElement.up("div.form-field.input_controls");
if (!parent)
parent = inputElement.up("td");
if (parent) {
var msgs = $(parent).select(".variable-field-msg");
if (msgs)
for (var i = 0; i < msgs.length; i++) {
try {
parent.removeChild(msgs[i]);}
catch (err){
msgs[i].parentNode.removeChild(msgs[i]);}
if (!clearAll)
return;
}
}
}
if (tr == null)
return;
var msgContainer = tr.down('.fieldmsg-container');
if (!msgContainer)
return;
if (clearAll)
msgContainer.update('');
else {
var selector;
if (key)
selector = '[data-fieldmsg-key="' + inputElement.id + '_fieldmsg_' + key + '"]';
else
selector = '.fieldmsg';
var messages = msgContainer.select(selector);
if (messages[0])
messages[0].remove();
}
},
hasFieldMsgs: function(type) {
var formHasFieldMsgs = false;
if (type) {
var msgTRs = $(document.body).select('.fieldmsg.notification-' + type);
formHasFieldMsgs = msgTRs.length > 0;
}
else {
var msgTRs = $(document.body).select('.fieldmsg');
formHasFieldMsgs = msgTRs.length > 0;
}
return formHasFieldMsgs;
},
hideAllFieldMsgs: function(type) {
if (type) {
var msgTRs = $(document.body).select('.fieldmsg.notification-' + type);
for (var i = 0; i < msgTRs.length;i++) {
msgTRs[i].parentNode.removeChild(msgTRs[i]);
}
}
else {
var msgTRs = $(document.body).select('.fieldmsg');
for (var i = 0; i < msgTRs.length;i++) {
msgTRs[i].parentNode.removeChild(msgTRs[i]);
}
}
CustomEvent.fire('sn.form.hide_all_field_msg', type);
},
hideErrorBox: function(input) {
this.hideFieldMsg(input);
},
setStreamJournalFieldsDisplay: function(show) {
CustomEvent.fire('sn.stream.change_input_display', this.getTableName(), show);
CustomEvent.fire('sn.form.change_input_display', !show);
},
_positionCursorAtError: function(elem, message) {
if (typeof elem == "undefined" || elem.disabled)
return false;
var index = message.indexOf("line (");
if (index > -1) {
var parenIndex = message.indexOf(")", index+6);
if (parenIndex > -1) {
var lineNo = message.substring(index + 6, parenIndex);
lineNo = parseInt(lineNo, 10);
index = message.indexOf("(", parenIndex);
if (index > -1) {
parenIndex = message.indexOf(")", index);
if (parenIndex > -1) {
var columnNo = message.substring(index + 1, parenIndex);
columnNo = parseInt(columnNo, 10);
return this._setCaretPositionLineColumn(elem, lineNo, columnNo);
}
} else
return this._setCaretPositionLineColumn(elem, lineNo, 1);
}
}
return false;
},
_setCaretPositionLineColumn: function(elem, lineNo, columnNo) {
var pl = 1;
var data = elem.value;
var len = data.length;
var position = 0;
while (pl < lineNo && position > -1) {
position = data.indexOf('\n', position);
if (position > -1)
position++;
pl++;
}
if (position == -1) {
jslog("Failed to find editor caret position for error");
return false;
}
position += columnNo - 1;
if (elem.createTextRange)
position -= lineNo - 1;
try {
this._setCaretPosition(elem, position);
} catch (err) {
jslog("Failed to position cursor at the error");
return false;
}
return true;
},
_setCaretPosition: function(elem, caretPos) {
if (elem.createTextRange) {
var range = elem.createTextRange();
range.move('character', caretPos);
range.select();
} else {
if (elem.setSelectionRange) {
if (caretPos == 0)
caretPos = 1;
elem.setSelectionRange(caretPos, caretPos + 1);
if (isSafari || isChrome)
elem.focus();
else {
var ev = document.createEvent("KeyEvents");
ev.initKeyEvent("keypress", true, true, window, false, false, false, false, 0, elem.value.charCodeAt(caretPos - 1));
elem.dispatchEvent(ev);
elem.focus();
}
} else
elem.focus();
}
},
disableAttachments: function() {
var icon = gel("header_add_attachment");
if (icon)
icon.style.display = 'none';
AttachmentUploader.disableAttachments();
},
enableAttachments: function() {
var icon = gel("header_add_attachment");
if (icon)
icon.style.display = '';
AttachmentUploader.enableAttachments();
},
hasField: function(fieldName) {
return !!this.getControl(fieldName);
},
setAction: function(action) {
this.action = action;
},
getAction: function() {
return this.action;
},
setScope: function(scope) {
this.scope = scope;
},
getScope: function() {
return this.scope;
},
setLiveUpdating: function(isLiveUpdating) {
this._isLiveUpdating = isLiveUpdating;
},
isLiveUpdating: function() {
return this._isLiveUpdating;
},
setLiveUpdateOriginalValue: function(fieldName, value, displayValue) {
var element = this.getElement(fieldName);
if (!element)
return;
if (this.elementHandlers[element.id] && (typeof this.elementHandlers[element.id].setLiveUpdateOriginalValue == "function"))
return this.elementHandlers[element.id].setLiveUpdateOriginalValue(value, displayValue);
var widgetName = "sys_original." + element.id;
var widget = gel(widgetName);
if (widget)
widget.value = value;
},
_opticsInspectorLog: function(fieldName, oldValue){
var value = this.getValue(fieldName);
opticsLog(this.tableName, fieldName, "Value changed from "
+ (oldValue ? oldValue : "(empty)") + " to "
+ (value ? value : "(empty)"), oldValue, value);
},
insertContentAtCursor: function(fieldName, content) {
var element = this.getElement(fieldName);
if (!element)
return;
if (this.elementHandlers[element.id] && (typeof this.elementHandlers[element.id].insertContentAtCursor == "function"))
return this.elementHandlers[element.id].insertContentAtCursor(content);
var cursorLocation = element.selectionStart;
if (!cursorLocation)
cursorLocation = 0;
var originalContent = this.getValue(fieldName);
if (typeof originalContent == 'string') {
var newContent = originalContent.substr(0, cursorLocation) + content + originalContent.substr(cursorLocation);
this.setValue(fieldName, newContent);
}
},
onUserChangeValue: function(handler) {
if (this._onUserChangedHandlers != null && this._onUserChangedHandlers.indexOf(handler) === -1)
this._onUserChangedHandlers.push(handler);
var gf = this;
return function() {
var index = gf._onUserChangedHandlers.indexOf(handler);
if (index > -1)
gf._onUserChangedHandlers.splice(index, 1);
};
},
type: "GlideForm"
});
var GlideFormPrefixHandler = Class.create({
initialize: function (handlerObject) {
this.handlerObject = handlerObject;
this.fieldName = "";
},
getObject: function() {
return this.handlerObject;
},
getFieldName: function() {
return this.fieldName;
},
setFieldName: function(id) {
this.fieldName = id;
},
type: "GlideFormPrefixHandler"
});
;
/*! RESOURCE: /scripts/doctype/GwtContextMenu.js */
var gActiveContext;
var contextMenus = new Object();
var shortcuts = new Object();
var GwtContextMenu = Class.create({
SUBMENU_INDICATOR: "<i class='icon-chevron-right context_submenu_indicator'/>",
CHECKED_IMAGE_PATH: "images/checked.pngx",
CHECKED_ICON_CLASSES: ['icon-check','selected_item'],
initialize: function(id, useBodyAsParent) {
this.timeout = null;
this.properties = new Object();
this.setID(id);
this.getMenu();
this.onshow = null;
this.onhide = null;
this.beforehide = null;
this.docRoot = this._getDocRoot();
this.hasItems = false;
this.hideOnlySelf = false;
this.trackSelected = false;
if (typeof useBodyAsParent == "undefined")
useBodyAsParent = false;
this._getParentElement(useBodyAsParent);
this.opener = undefined;
},
isEmpty: function() {
return !this.hasItems;
},
_getParentElement: function(useBodyAsParent) {
if (useBodyAsParent) {
this.parentElement = document.body;
return;
}
this.parentElement = getFormContentParent();
},
_getDocRoot: function() {
var docRoot = window.location.protocol + "//" + window.location.host;
if (window.location.pathname.indexOf("/") > -1) {
var fp = window.location.pathname;
fp = fp.substring(0, fp.lastIndexOf("/"));
if (fp.substring(0, 1).indexOf("/") != -1)
docRoot = docRoot + fp;
else
docRoot = docRoot + "/" + fp;
}
docRoot += "/";
return docRoot;
},
add: function(label, id, keys) {
this.hasItems = true;
var m = this.getMenu();
var d = document.createElement("div");
d.setAttribute("item_id", id);
if (g_accessibility === true) {
d.className = "context_item default-focus-outline";
} else {
d.className = "context_item";
}
d.isMenuItem = true;
d.setAttribute('role', 'menuitem');
d.setAttribute('tabindex', '-1');
var l = !keys ? label : (label + ' (' + keys + ')');
d.innerHTML = l;
if(keys)
d.setAttribute("data-label", label);
m.appendChild(d);
return d;
},
addHref: function(label, href, img, title, id, keys) {
keys = this.addKeyShortcut(keys, href);
var d = this.add(label, id, keys);
d.setAttribute("href", href);
if (title && title != null) {
d.setAttribute("title", title);
d.addClassName("accessibility_no_tooltip");
}
this.setImage(d, img);
return d;
},
addFunc: function(label, func, id) {
var d = this.add(label, id);
d.setAttribute("func_set", "true");
d.func = func;
return d;
},
addURL: function(label, url, target, id) {
var d = this.add(label, id);
url = this._updateURL(d, label, url);
d.setAttribute("url", url);
if (target)
d.setAttribute("target", target);
return d;
},
addHrefNoSort: function(label, href, id) {
var item = this.addHref(label, href, null, null, id);
item.setAttribute("not_sortable", "true");
return item;
},
addHrefNoFilter: function(label, href, id) {
var item = this.addHref(label, href, null, null, id);
item.setAttribute("not_filterable", "true");
return item;
},
addMenu: function(label, menu, id) {
var item = this.add(label + this.SUBMENU_INDICATOR, id);
item.setAttribute("aria-haspopup", "true");
item.setAttribute("aria-controls", menu.id);
item.setAttribute("label", "true");
menu.setParent(this);
item.subMenu = menu;
return item;
},
addAction: function(label, action, id) {
return this.addHref(label, "contextAction('" + this.getTableName() + "', '" + action + "')", null, null, id);
},
addConfirmedAction: function(label, action, id) {
return this.addHref(label, "contextConfirm('" + this.getTableName() + "', '" + action + "')", null, null, id);
},
addLine: function() {
this.hasItems = true;
var m = this.getMenu();
var d = document.createElement("div");
d.className = "context_item_hr";
d.isMenuItem = true;
d.disabled = "disabled";
m.appendChild(d);
return d;
},
addLabel: function(label, id) {
var m = this.getMenu();
var d = document.createElement("div");
d.setAttribute("item_id", id);
d.className = "context_item";
d.isMenuItem = true;
d.innerHTML = label;
d.disabled = "disabled";
m.appendChild(d);
return d;
},
addKeyShortcut: function(keys, href) {
var topWindow = getTopWindow();
var keyboardEnabled = topWindow.com && topWindow.com.glide && topWindow.com.glide.ui && topWindow.com.glide.ui.keyboard;
if(!keyboardEnabled)
return null;
if(!keys)
return keys;
if(shortcuts[keys])
return keys;
shortcuts[keys] = {};
var callback = function(e) {
var start = e.data.href.indexOf('javascript:') == 0 ? 11 : 0;
var startParen = e.data.href.indexOf('(');
var functionName = startParen > start ? e.data.href.substring(start, startParen) : {};
var func = eval(functionName);
if(typeof func == 'function')
eval(e.data.href);
else
document.location.href = e.data.href;
};
addLoadEvent(function() {
var keyboard = getTopWindow().com.glide.ui.keyboard;
var isMainFrame = window.frameElement.id == keyboard.mainFrame;
var isFormFrame = window.frameElement.id == keyboard.formFrame;
if(isMainFrame)
shortcuts[keys] = keyboard.bind(keys, callback, {href:href}).global(keyboard.formFrame);
else if(isFormFrame)
shortcuts[keys] = keyboard.bind(keys, callback, {href:href}).formFrame();
else
shortcuts[keys] = null;
});
return keys;
},
getItem: function(itemId) {
var items = this.getMenu().getElementsByTagName("div");
for (var i = 0; i < items.length; i++) {
var item = items[i];
if (item.getAttribute("item_id") == itemId)
return item;
}
return null;
},
setImage: function(item, img) {
if (item && img) {
var imageIsCheckmark = img === this.CHECKED_IMAGE_PATH;
if (imageIsCheckmark) {
this.setCheckedIcon(item);
var selectedText = item.innerText || item.textContent;
var ariaLabel = getMessage('Currently selected: ') + selectedText;
item.setAttribute('aria-label', ariaLabel);
} else {
item.style.backgroundImage = "url(" + this.docRoot + img + ")";
item.style.backgroundRepeat = "no-repeat";
}
}
},
setChecked: function(item) {
if (item)
this.setImage(item, this.CHECKED_IMAGE_PATH);
},
_generateCheckElement: function() {
var classNames = this.CHECKED_ICON_CLASSES.join(' ');
var checkElem = document.createElement("div");
checkElem.setAttribute("class", classNames);
return checkElem;
},
setCheckedIcon: function(item) {
if (item) {
var checkElem = this._generateCheckElement();
item.appendChild(checkElem);
}
},
clearImage: function(item) {
if (item) {
item.style.backgroundImage = "";
item.style.backgroundRepeat = "";
item.setAttribute('aria-label', '');
}
},
clearCheckedIcon: function(item) {
if (item) {
var classNames = this.CHECKED_ICON_CLASSES.map(function(className) {return '.' + className}).join('');
var checkedIcon = item.querySelector(classNames);
if (checkedIcon)
checkedIcon.remove();
}
},
setDisabled: function(item) {
if (!item)
return;
this._dullItem(item);
},
setEnabled: function(item) {
if (!item)
return;
this._undullItem(item);
},
setHidden : function(item) {
if (!item)
return;
this._hideItem(item);
},
setVisible : function(item) {
if (!item)
return;
this._showItem(item);
},
setLabel: function(item, label) {
if (item)
item.innerHTML = label;
},
setHideOnlySelf: function(hideSelf) {
this.hideOnlySelf = hideSelf;
},
clearSelected: function() {
var items = this.getMenu().getElementsByTagName("div");
for (var i = 0; i < items.length; i++) {
var item = items[i];
this.clearImage(item);
this.clearCheckedIcon(item);
}
},
clear: function() {
var m = this.getMenu();
clearNodes(m);
this._setMinWidth();
this.hasItems = false;
},
destroy: function() {
this.parentElement = null;
this.menu.context = null;
this.menu.onmouseover = null;
this.menu.onmouseout = null;
this.menu.onclick = null;
if (isMSIE)
this.menu.outerHTML = null;
this.parentMenu = null;
this.onshow = null;
this.onhide = null;
this.properties = null;
this.timeout = null;
this.menu = null;
},
display: function(e) {
if (!this.getParent())
CustomEvent.fireAll('body_clicked', null);
menuSort = true;
this._dullMenu();
this._toggleMenuItems("not_sortable", this.getProperty('sortable'));
this._toggleMenuItems("not_filterable", this.getProperty('filterable'));
this.setFiringObject(this._getElement(e));
e = this._getRealEvent(e);
this.opener = this._getOpener(e);
var menu = this.getMenu();
if (this._isEmpty(menu))
return;
menu.style.left = "0";
menu.style.top = "0";
this.parentElement.appendChild(menu);
this.opener && this.opener.setAttribute("aria-expanded", "true");
if (this.getProperty("top") > 0 && ((this.getProperty("left") > 0) || (this.getProperty("right") > 0))) {
menu.style.visibility = 'hidden';
menu.style.display = 'block';
this.moveMenuToXY(e, this.getProperty("left"), this.getProperty("top"), this.getProperty("right"));
} else if (this.getParent()) {
var x = this._getElement(e);
menu.style.visibility = 'hidden';
menu.style.display = 'block';
this.moveMenuToParent(e, x);
} else {
var x = this._getElement(e);
menu.style.visibility = 'hidden';
menu.style.display = 'block';
this.moveMenuToCursor(e);
}
gActiveContext = this;
showObject(menu);
this._focusFirstItem(menu);
},
hide : function(openModal) {
gActiveContext = "";
hideObject(this.getMenu());
if (this.getMenu().parentNode)
this.getMenu().parentNode.removeChild(this.getMenu());
this.opener && this.opener.setAttribute("aria-expanded", "false");
if (this.onhide)
this.onhide();
var firingObj = this.getFiringObject();
if (firingObj) {
if (firingObj.tagName == 'I')
this._toggleFocusLock(true);
if (!openModal)
firingObj.focus();
}
CustomEvent.fire('refresh.event');
},
hideAll : function() {
var m = this;
while (m) {
m.hide(m.parentElement.hasClassName("modal-open"));
m = m.getParent();
}
this.opener && this.opener.setAttribute("aria-expanded", "false");
},
execute: function(e) {
var x = this._getElement(e);
var ariaDisabled = x.getAttribute('aria-disabled');
if (x.isMenuItem && !x.disabled && (!ariaDisabled || ariaDisabled == 'false')) {
if (x.getAttribute("label") == "true") {
this._getRealEvent(e).cancelBubble = true;
return;
}
if (x.getAttribute("target")) {
window.open(x.getAttribute("url"), x.getAttribute("target"));
} else if (x.getAttribute("href")) {
var expression = x.getAttribute("href");
gActiveContext = this;
eval(expression);
} else if (x.getAttribute("func_set") == "true") {
x.func();
} else {
window.location = x.getAttribute("url");
}
if (this.trackSelected) {
this.clearSelected();
this.setChecked(x);
}
}
if (x.subMenu)
x.subMenu.hideAll();
else
this.hideAll();
return false;
},
menuLowLight: function(e) {
var x = this._getElement(e);
this._handleTimeout(false, x, e.relatedTarget);
if (!x.isMenuItem)
return;
if (!x.subMenu || x.subMenu.getMenu().style.display == 'none')
this._disableItem(x);
window.status = '';
CustomEvent.fire('refresh.event');
},
menuHighLight: function(e) {
var x = this._getElement(e);
this._handleTimeout(true, x);
if (!x.isMenuItem)
return;
this._hideAllSubs(x.parentNode);
this._enableItem(x);
if (x.subMenu)
this._expandSubMenu(x, e);
},
_expandSubMenu: function(menu, evt) {
menu.subMenu.setParent(this);
menu.subMenu.display(evt);
},
menuKeyUp: function(e) {
var x = this._getElement(e);
var handled = false;
switch (e.keyCode) {
case 27:
this.hide();
handled = true;
break;
}
if (handled) {
e.stopPropagation();
e.preventDefault();
}
},
menuKeyDown: function(e) {
if (e.keyCode !== 9)
e.preventDefault();
var x = this._getElement(e);
var handled = false;
switch (e.keyCode) {
case 9:
this.hideAll();
handled = true;
break;
case 32:
case 13:
if (x.subMenu)
this._expandSubMenu(x, e);
else
this.execute(e)
handled = true;
break;
case 40:
this._dullMenu();
this._focusNext(x);
handled = true;
break;
case 38:
this._dullMenu();
this._focusPrevious(x);
handled = true;
break;
case 39:
if (x.subMenu)
this._expandSubMenu(x, e);
handled = true;
break;
case 37:
var parentMenu = this.getParent();
if (parentMenu && parentMenu.menu) {
var parent = parentMenu.menu.select('[aria-controls="' + this.id + '"]');
parent[0].focus();
this._hideAllSubs(parentMenu.menu);
}
handled = true;
break;
}
if (handled) {
e.stopPropagation();
}
},
_isFocusableMenuItem: function(element) {
return (!(element.classList.contains('context_item_hr'))
&& !(element.classList.contains('context-menu-minwidth'))
&& !(element.style.display == 'none'));
},
_focusNext: function(item) {
var nextSibling = item.nextSibling;
while (nextSibling && !this._isFocusableMenuItem(nextSibling))
nextSibling = nextSibling.nextSibling;
if (nextSibling)
nextSibling.focus();
else {
var firstItem = item.parentElement.querySelector("div.context_item");
if (firstItem && this._isFocusableMenuItem(firstItem))
firstItem.focus();
}
},
_focusPrevious: function(item) {
var previousSibling = item.previousSibling;
while (previousSibling && !this._isFocusableMenuItem(previousSibling))
previousSibling = previousSibling.previousSibling;
if (previousSibling)
previousSibling.focus();
else {
var lastItem = item.parentElement.querySelector("div:last-child.context_item");
if (lastItem && this._isFocusableMenuItem(lastItem))
lastItem.focus();
}
},
moveMenuToXY: function(e, left, top, right) {
var menu = this.getMenu();
if (right)
left = right - menu.offsetWidth;
var offsetTop = window.pageYOffset + top;
var offsetLeft = window.pageXOffset + left;
this.moveMenu(top, left, 0, 0, offsetTop, offsetLeft);
},
moveMenuToCursor: function(e) {
var offsetTop = 0;
var offsetLeft = 0;
var clientY = e.clientY;
var clientX = e.clientX;
if (isTouchDevice) {
offsetTop = e.pageY;
offsetLeft = e.pageX;
} else if (!e.clientX && e.target) {
var $target = $j(e.target);
var rect = e.target.getBoundingClientRect();
offsetTop = clientY = rect.top + $target.height();
offsetLeft = clientX = rect.left + $target.width();
} else {
offsetTop = e.clientY;
offsetLeft = e.clientX;
}
this.moveMenu(clientY, clientX, 0, 0, offsetTop, offsetLeft);
},
moveMenuToParent : function(e, firingObject) {
var parent = this.getParent().getMenu();
var offsetTop = grabOffsetTop(firingObject) - parent.scrollTop;
var borderLeftWidth = parseInt($j(this.getParent().getMenu()).css('border-right-width'), 10);
var offsetLeft = grabOffsetLeft(parent) - borderLeftWidth;
this.moveMenu(offsetTop, offsetLeft, firingObject.offsetHeight, parent.offsetWidth, offsetTop, offsetLeft);
},
moveMenu: function(top, left, height, width, offsetTop, offsetLeft) {
var menu = this.getMenu();
menu.style.overflowY = "visible";
menu.setAttribute('gsft_has_scroll', false);
if (menu.getAttribute('gsft_width'))
menu.style.width = menu.getAttribute('gsft_width') + "px";
if (menu.getAttribute('gsft_height'))
menu.style.height = menu.getAttribute('gsft_height') + "px";
var leftPos;
var viewport = new WindowSize();
if ((left + width + menu.offsetWidth) > viewport.width)
leftPos = offsetLeft - menu.offsetWidth;
else
leftPos = offsetLeft + width;
menu.style.left = leftPos + "px";
var scrollOffsets = this._getScrollOffsets(this.parentElement);
var scrollTop = scrollOffsets.top;
var direction = 'down';
var clip = 0;
if ((top + menu.offsetHeight) > viewport.height) {
var bottomClip = menu.offsetHeight - (viewport.height - top);
var topClip = menu.offsetHeight - top + height;
if (topClip < bottomClip) {
direction = 'up';
clip = topClip;
} else
clip = bottomClip;
}
var topPos;
if (direction == 'up') {
var mHeight = menu.offsetHeight;
var bottomEdge = offsetTop + height;
topPos = (bottomEdge > mHeight) ? (bottomEdge - mHeight): 0;
} else
topPos = offsetTop;
var scrollbarWidth = getScrollBarWidthPx();
if ((topPos - scrollTop + menu.offsetHeight) > viewport.height)
clip = (topPos - scrollTop + menu.offsetHeight) - viewport.height + scrollbarWidth;
menu.style.top = topPos + "px";
if (clip > 0) {
if (!menu.getAttribute('gsft_width')) {
menu.setAttribute('gsft_width', menu.offsetWidth);
menu.setAttribute('gsft_height', menu.offsetHeight);
}
menu.setAttribute('gsft_has_scroll', true);
menu.style.overflowY = "auto";
var w = menu.offsetWidth + 18;
menu.style.width = w + "px";
var h = menu.offsetHeight - clip - 4;
menu.style.height = h + "px";
}
},
_getScrollOffsets: function(e) {
var offsets = {};
if (e.nodeName.toUpperCase() == "BODY") {
offsets.top = window.pageYOffset || document.documentElement.scrollTop  || document.body.scrollTop;
offsets.left = window.pageXOffset || document.documentElement.scrollLeft  || document.body.scrollLeft;
} else {
offsets.top = e.scrollTop;
offsets.left = e.scrollLeft;
}
return offsets;
},
getFiringObject: function() {
return this.eventObject;
},
getID: function() {
return this.id;
},
getMenu: function() {
if (!this.menu) {
this.menu = contextMenus[this.getID()];
if (!this.menu)
this._createMenu();
this._setMenuAttrs();
this._setMinWidth();
}
return this.menu;
},
getParent: function() {
return this.parentMenu;
},
getProperty: function(c) {
if (this.properties)
return this.properties[c];
else
return "";
},
getTableName: function() {
return this.tableName;
},
setFiringObject: function(e) {
this.eventObject = e;
},
setID: function(id) {
this.id = id;
},
setOnShow: function(onshow) {
this.onshow = onshow;
},
setOnHide: function(oh) {
this.onhide = oh;
},
setBeforeHide: function(beforeHide) {
this.beforehide = beforeHide;
},
setParent: function(m) {
this.parentMenu = m;
this.parentElement = m.parentElement;
},
setProperty: function(c, v) {
this.properties[c] = v;
},
setTableName: function(name) {
this.tableName = name;
},
setTimeout: function(t) {
this.timeout = t;
},
setTrackSelected: function(flag) {
this.trackSelected = flag;
},
_createMenu : function() {
this.menu = document.createElement("div");
this.menu.name = this.menu.id = this.getID();
contextMenus[this.getID()] = this.menu;
},
_disableItem: function(item) {
var ariaDisabled = item.getAttribute('aria-disabled');
if (item && !item.disabled && (!ariaDisabled || ariaDisabled == 'false')) {
removeClassName(item, "context_menu_hover");
}
if (item && item.subMenu)
item.setAttribute("aria-expanded", "false");
},
_dullMenu: function() {
var items = this.getMenu().childNodes;
for(var i = 0; i < items.length; i++) {
var item = items[i];
this._disableItem(item);
}
},
_enableItem: function(item) {
var ariaDisabled = item.getAttribute('aria-disabled');
if (item && !item.disabled && (!ariaDisabled || ariaDisabled == 'false')) {
addClassName(item, "context_menu_hover");
item.focus();
}
if (item && item.subMenu) {
item.setAttribute("role", "menuitem");
item.setAttribute("aria-expanded", "true");
}
},
_getElement: function(e) {
var x = e.target;
try {
if (!x.isMenuItem && x.parentNode.isMenuItem)
x = x.parentNode;
} catch (err) {}
return x;
},
_getOpener: function(e) {
var targetEl = this._getElement(e);
var opener = $j(targetEl).closest("a.list_action");
return opener[0] || targetEl;
},
_getRealEvent: function(e) {
return e;
},
_handleTimeout: function(lght, firingObject, movingTo) {
if (this.getProperty("timeout") > 0) {
if (lght) {
clearTimeout(this.timeout);
} else {
if (gActiveContext && gActiveContext.menu.contains(movingTo))
return;
if (!firingObject.subMenu || firingObject.subMenu != gActiveContext)
this.timeout = setTimeout('contextHide()', this.getProperty("timeout"));
}
}
},
_hideAllSubs : function(el) {
var list = el.getElementsByTagName("div");
for (var i = 0; i < list.length; i++) {
var element = list[i];
if (element.subMenu) {
var subMenu = element.subMenu.getMenu();
this._hideAllSubs(element.subMenu.getMenu());
hideObject(subMenu);
this._disableItem(element);
}
}
},
_setMenuAttrs : function() {
this.menu.context = this;
this.menu.className = "context_menu";
this.menu.style.display = "none";
this.menu.style.zIndex = (this.getParent() ? GwtContextMenu.zIndex+1 : GwtContextMenu.zIndex);
this.menu.setAttribute('role', 'menu');
this.menu.onmouseover = this.menuHighLight.bind(this);
this.menu.onmouseout = this.menuLowLight.bind(this);
this.menu.onkeyup = this.menuKeyUp.bind(this);
this.menu.onkeydown = this.menuKeyDown.bind(this);
if ("ontouchstart" in window  && (typeof FastButton != 'undefined'))
new FastButton(this.menu, this.execute.bind(this));
else
this.menu.onclick = this.execute.bind(this);
},
_setMinWidth: function() {
var widther = document.createElement("div");
widther.style.width = "120px";
widther.style.height = "1px";
widther.style.overflow = "hidden";
widther.className = 'context-menu-minwidth';
this.menu.appendChild(widther);
},
_toggleMenuItems: function(attr, enabled) {
var items = this.getMenu().childNodes;
for(var i = 0; i < items.length; i++) {
var item = items[i];
if (item.getAttribute(attr) == "true") {
if (enabled) {
this._undullItem(item);
} else {
this._dullItem(item);
}
}
}
},
_dullItem: function(item) {
item.setAttribute('aria-disabled', true);
item.style.color = "#cccccc";
removeClassName(item, "context_menu_hover");
},
_undullItem: function(item) {
item.setAttribute('aria-disabled', false);
item.style.color = "";
},
_hideItem: function(item) {
item.style.display = 'none';
},
_showItem: function(item) {
item.style.display = '';
},
_isEmpty: function(menu) {
if (!menu)
return true;
if (!menu.firstChild)
return true;
return false;
},
_updateURL: function(d, label, url) {
if(typeof GlideTransactionScope != 'undefined') {
GlideTransactionScope.appendTransactionScope(function(name, value) {
url += "&" + name + "=" + value;
});
return url;
}
if(typeof g_form != 'undefined') {
this.dmap = this.dmap || {};
this.dmap[label] = d;
$(g_form.getFormElement()).observe('glidescope:initialized', function(e) {
e.memo.gts.appendTransactionScope(function(name, value) {
var _d = this.dmap[label];
var _url = _d.getAttribute("url");
_url += "&" + name + "=" + value;
_d.setAttribute("url", _url);
}.bind(this));
}.bind(this));
}
return url;
},
_focusFirstItem: function(menu) {
var contextItems = $(menu).select('.context_item');
var firstItem = contextItems.shift();
while (firstItem.style.display == 'none' && contextItems.length > 0)
firstItem = contextItems.shift();
if (firstItem) {
this._toggleFocusLock(false);
firstItem.focus();
}
},
z: function() {
},
_toggleFocusLock: function(focusLockOn) {
var focusLockedElem = $j('#show_list');
if (!focusLockedElem[0])
return;
if (focusLockOn)
focusLockedElem.attr('tabindex', -1);
else
focusLockedElem.removeAttr('tabindex');
}
});
GwtContextMenu.zIndex = 1100;
function displayContextMenu(e, name, filterable) {
if (!getMenuByName(name))
return;
var contextMenu = getMenuByName(name).context;
contextMenu.setProperty('sortable', true);
contextMenu.setProperty('filterable', filterable);
contextMenu.display(e);
}
function contextShow(e, tableName, timeoutValue, ttop, lleft, rright) {
var frameWindow = null;
try {
frameWindow = window.frameElement;
if (frameWindow && frameWindow.id == "dialog_frame" && frameWindow.noContext == true)
return true;
} catch(err) { }
if (shouldSkipContextMenu(e))
return true;
e = getRealEvent(e);
menuTable = tableName;
var name = tableName;
if (name && name.substring(0, 8) != "context_")
name = "context_" + name;
if (document.readyState && document.readyState != "complete" && document.readyState != "interactive" && typeof window.g_hasCompleted == "undefined") {
jslog("Ignored context menu show for " + name + " because document was not ready");
return false;
}
window.g_hasCompleted = true;
if (getMenuByName(name)) {
var contextMenu = getMenuByName(name).context;
contextMenu.setProperty('timeout', timeoutValue);
contextMenu.setProperty('top', ttop);
contextMenu.setProperty('left', lleft);
contextMenu.setProperty('right', rright);
if (contextMenu.menu.style.display == "block")
contextMenu.menu.style.display = "none";
else
contextMenu.display(e);
if (contextMenu.onshow)
contextMenu.onshow();
}
return false;
}
function contextQuestionLabel(e, sys_id, type) {
if (shouldSkipContextMenu(e))
return true;
e = getRealEvent(e);
var name = "context_question_label";
menuTable = "not_important";
menuField = "not_important";
rowSysId = sys_id;
addQuestionActionItems(rowSysId, type);
if (getMenuByName(name)) {
var contextMenu = getMenuByName(name).context;
contextMenu.setProperty('sysparm_sys_id', sys_id);
contextMenu.display(e);
}
return false;
}
function addQuestionActionItems(id, type) {
var jr = new GlideAjax("AJAXJellyRunner", "AJAXJellyRunner.do");
jr.addParam('template', 'variable_context.xml');
jr.addParam('sysparm_catalog_id', g_form.getUniqueValue());
jr.addParam('sysparm_variable_id', id);
jr.addParam('sysparm_variable_type', type);
jr.addParam('sysparm_contextual_security', g_form.hasAttribute('contextual_security'));
jr.setWantRequestObject(true);
var response = jr.getXMLWait();
if (!response)
return;
var html = response.responseText;
html.evalScripts(true);
return gcm;
}
function shouldSkipContextMenu(e) {
if (e.ctrlKey && trustCtrlKeyResponse())
return true;
return false;
}
function trustCtrlKeyResponse() {
return isMacintosh || !isSafari;
}
function contextTimeout(e, tableName, waitCount) {
var name = "context_" + tableName;
if (!getMenuByName(name))
return;
var contextMenu = getMenuByName(name).context;
if (typeof waitCount == "undefined")
waitCount = 500;
contextMenu.setProperty("timeout", waitCount);
var hideParam;
if (contextMenu.hideOnlySelf == true)
hideParam = '"' + name + '"';
contextMenu.setTimeout(setTimeout('contextHide(' + hideParam + ')', waitCount));
}
function getMenuByName(name) {
return contextMenus[name];
}
function getRowID(e) {
var id = null;
var cell = e.srcElement;
if (cell == null)
cell = e.target;
var row = cell.parentNode;
var id = row.id;
if (id == null || id.length == 0)
id = row.parentNode.id;
return id;
}
function contextHide(name) {
if (!gActiveContext)
return;
if (typeof name != "undefined" && gActiveContext.getID() != name)
return;
if (gActiveContext.beforehide) {
if (gActiveContext.beforehide() == false)
return;
}
gActiveContext.hideAll();
}
function elementAction(e, event, gcm) {
var type = e.getAttribute("type");
var choice = e.getAttribute("choice");
var id = e.id;
var fName = id.substring(id.indexOf('.') + 1);
var tableName = fName.substring(0, fName.indexOf('.'));
var haveAccess = $("personalizer_" + tableName);
if (typeof (g_user) != 'undefined') {
var count = 1;
if (!gcm)
gcm = addActionItems(fName, tableName, type, choice);
if (gcm)
return contextShow(event, gcm.getID(), -1, 0, 0);
}
return true;
}
function addActionItems(id, table, type, choice) {
var jr = new GlideAjax("AJAXJellyRunner", "AJAXJellyRunner.do");
jr.addParam('template', 'element_context.xml');
jr.addParam('sysparm_id', id);
jr.addParam('sysparm_table', table);
jr.addParam('sysparm_type', type);
jr.addParam('sysparm_choice', choice);
jr.addParam('sysparm_contextual_security', g_form.hasAttribute('contextual_security'));
jr.setWantRequestObject(true);
var response = jr.getXMLWait();
if (!response)
return;
var html = response.responseText;
html.evalScripts(true);
return gcm;
}
Event.observe(window, 'unload', clearMenus, false);
Event.observe(window, 'scroll', debounceContextScroll(100));
function debounceContextScroll(ms) {
var timeout;
return function () {
if (timeout)
clearTimeout(timeout);
timeout = setTimeout(function () {
contextMenuHide();
timeout = null;
}, ms);
}
}
function clearMenus() {
for (av in contextMenus) {
if (contextMenus[av]) {
var c = contextMenus[av].context;
if (c) {
c.destroy();
}
contextMenus[av] = null;
}
}
for ( var keys in shortcuts) {
if (shortcuts[keys])
shortcuts[keys].clear();
}
shortcuts = null;
}
;
/*! RESOURCE: /scripts/doctype/functions.js */
function isDoctype() {
return true;
}
function gsftSubmitBack() {
var backButton = document.getElementById('sysverb_back');
checkDirtyForm(function save() {
if (isDirtyFormAutosave())
gsftSubmit(backButton);
else
gsftSubmit(null, $j(backButton).closest('form')[0], 'sysverb_check_save');
}, function discard() {
gsftSubmit(backButton);
});
}
function gsftSubmitOnExternalClick(e, tableName) {
if (!e.target || !e.target.href)
return false;
if (e.metaKey || e.ctrlKey)
return true;
var url = e.target.href;
if (g_form && g_form.modified) {
e.preventDefault();
if (window.g_form_dirty_support) {
if (window.g_form_dirty_autosave)
saveAndRedirect(tableName, url);
else {
renderSaveChangesDialog(function save() {
saveAndRedirect(tableName, url);
}, function discard() {
g_navigation.open(url);
});
}
} else
g_navigation.open(url);
}
return true;
}
function isFormDataBig(form) {
var formDataSizeLimit = 2 * 1024 * 1024;
var postFormDataSize = 0;
var bigFormData = false;
for (var i = 0, iMax = form.elements.length; i < iMax; i += 1) {
var element = form.elements.item(i);
var tagName = element.tagName;
if (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && tagName !== 'SELECT')
continue;
var id = element.id || element.name || '';
if (id === '' || id === 'kb_url_prefix')
continue;
if (id.startsWith("ni.") && !id.startsWith("ni.dependent") && !id.startsWith("ni.VE"))
continue;
if (id.startsWith("select_0") || id.startsWith("sys_readonly."))
continue;
var value = encodeURIComponent(element.value);
value = value.replace(/%20/g, '+');
postFormDataSize += String(id + "=" + value + "&").length;
if (postFormDataSize >= formDataSizeLimit) {
bigFormData = true;
break;
}
}
return bigFormData;
}
function gsftSubmit(control,  form,  action_name) {
var f;
if (typeof form == "undefined") {
f = findParentByTag(control, 'form');
if (typeof form == "undefined") {
var sectionFormId = $("section_form_id");
if (sectionFormId)
f = $(sectionFormId.value);
}
} else
f = form;
if (g_submitted)
return false;
if (typeof action_name == "undefined" && control)
action_name = control.hasAttribute('data-action-name') ? control.getAttribute('data-action-name') : control.id;
if (action_name == 'sysverb_delete') {
if  (!confirm(getMessage("Delete this record") + "?")) {
g_submitted = false;
return false;
}
}
f.sys_action.value=action_name;
if (typeof f.onsubmit == "function" && action_name != 'sysverb_back') {
var rc = f.onsubmit();
if (rc === false) {
g_submitted = g_form.submitted = false;
return false;
}
}
if (control && control.getAttribute('gsft_id')) {
action_name = control.getAttribute('gsft_id');
f.sys_action.value=action_name;
}
if (action_name == 'sysverb_back')
g_submitted = false;
else
g_submitted = true;
if (typeof g_form != 'undefined' && g_form && g_submitted) {
g_form.enableUIPolicyFields();
}
CustomEvent.fire("glide:form_submitted");
try {
GlideAjax.disableSessionMessages();
if (isFormDataBig(f)) {
var appendChar = (f.action.indexOf('?') === -1) ? '?' : '&';
f.action += appendChar + 'useMultipartAwareServlet=true';
f.enctype = 'multipart/form-data';
}
f.submit();
} catch (ex) {
GlideAjax.enableSessionMessages();
if (ex.message.indexOf('Unspecified') == -1)
throw ex;
}
return false;
}
function setCheckBox(box) {
var name = box.name;
var id = name.substring(3);
var frm = box.form;
if (frm)
frm[id].value = box.checked;
else {
var widget = $(id);
if (widget)
widget.value = box.checked;
}
if (box['onchange'])
box.onchange();
}
function populateParmQuery(form, prefix, defaultNULL, action) {
var keys = ['No records selected', 'Delete the selected item?', 'Delete these', 'items?'];
var msgs = getMessages(keys);
var keyset = getChecked(form);
if (!action)
action = form.sys_action.value;
if (action.indexOf("sysverb") != 0) {
if (keyset == '') {
if (!alert(msgs["No records selected"]))
return false;
} else {
if (action == "delete_checked") {
var items = keyset.split(",");
if (items.length == 1) {
if (!confirm(msgs["Delete the selected item?"]))
return false;
} else if (items.length > 0) {
if (!confirm(msgs["Delete these"] + " " + items.length + " " + msgs["items?"]))
return false;
}
}
}
} else if (form.sys_action.value == "sysverb_new") {
addInput(form, 'HIDDEN', 'sys_id', '-1');
}
if (keyset == '' && defaultNULL)
keyset = defaultNULL;
if (prefix)
keyset = prefix + keyset;
addInput(form, 'HIDDEN', 'sysparm_checked_items', keyset);
return true;
}
function getChecked(form) {
var keyset = '';
var lookup = form;
for (i = 0; i < lookup.elements.length; i++) {
if ( lookup.elements[i].type != "checkbox")
continue;
var v = lookup.elements[i];
if (v.checked) {
var id = v.id.substring(3);
var skip = v.name.substring(0,4);
if (skip == "SKIP")
continue;
if (id == "all")
continue;
if (keyset == '')
keyset = id;
else
keyset = keyset + ',' + id;
}
}
return keyset;
}
function iterateList(e, row, value, update) {
update = (typeof update === 'undefined') ? true : update;
if (update)
g_form.setMandatoryOnlyIfModified(true);
var form = g_form.getFormElement();
form.sys_action.value = value;
var query = e.getAttribute("query");
addInput(form, 'HIDDEN', 'sys_record_row', row);
addInput(form, 'HIDDEN', 'sys_record_list', query);
addInput(form, 'HIDDEN', 'sysparm_exclude_tiny_parms', ['sys_id','sysparm_record_row'].join());
if (update && typeof form.onsubmit == "function") {
var rc = form.onsubmit();
if (!rc) {
g_submitted = false;
return false;
}
}
try {
form.submit();
} catch (ex) {
if (ex.message.indexOf('Unspecified') == -1)
throw ex;
}
return false;
}
function refreshNav() {
CustomEvent.fireTop('navigator.refresh');
}
function checkSave(tableName, urlBase, idField, refKey, viewOverride) {
var sysid = document.getElementsByName(idField)[0].value;
checkSaveID(tableName, urlBase, sysid, refKey, viewOverride);
}
function checkSaveID(tableName, urlBase, sysid, refKey, viewOverride) {
sysid = trim(sysid);
var url = urlBase+"?sys_id="+sysid;
if (refKey)
url += "&sysparm_refkey=" + refKey;
if (viewOverride) {
url += "&sysparm_view=" + viewOverride;
} else {
var view = $('sysparm_view');
if (view != null) {
view = view.value;
if (view != '')
url += "&sysparm_view=" + view;
}
}
var nameOfStack = $('sysparm_nameofstack');
if (nameOfStack != null) {
nameOfStack = nameOfStack.value;
if (nameOfStack != '')
url += "&sysparm_nameofstack=" + nameOfStack;
}
if(typeof GlideTransactionScope != 'undefined') {
GlideTransactionScope.appendTransactionScope(function(name, value) {
url += "&" + name + "=" + value;
});
}
return checkSaveURL(tableName, url);
}
function isDirtyFormAutosave() {
return !window.g_form_dirty_support || window.g_form_dirty_autosave || !window.g_form || !g_form.modified;
}
function checkDirtyForm(successCallback, discardCallback) {
if (isDirtyFormAutosave()) {
successCallback();
return;
}
renderSaveChangesDialog(successCallback, discardCallback);
}
function renderSaveChangesDialog(saveCallback, discardCallback) {
if (isMSIE11) {
if (confirm(getMessage("Changes have been made, continuing will discard the changes. Click 'OK' to discard changes."))) {
g_form.modified = false;
discardCallback();
} else {
saveCallback();
}
return;
}
var gm = new GlideModal('dirty_form_modal_confirmation');
gm.setPreference('focusTrap', true);
gm.setPreference('autoFocus', false);
gm.setSize(200);
gm.setTitle(getMessage('Save changes'));
var content = $j(new XMLTemplate('dirty_form_modal').evaluate({displayValue: g_form.getDisplayValue()}));
content.on('click', 'button', function(evt) {
var button = evt.target;
if (button.getAttribute('data-action') == 'discard') {
g_form.modified = false;
discardCallback();
} else if (button.getAttribute('data-action') == 'save') {
button.disabled = true;
saveCallback();
}
});
window.nowapi.g_popup_manager && window.nowapi.g_popup_manager.destroypopDiv();
gm.renderWithContent(content);
}
function checkSaveURL(tableName, url) {
checkDirtyForm(function save() {
saveAndRedirect(tableName, url);
}, function discard() {
g_navigation.open(url);
});
}
function saveAndRedirect(tableName, url) {
if (g_submitted)
return false;
var f = document.getElementById(tableName + ".do");
if (g_form.getTableName() == tableName) {
var fs = document.forms;
for (var z=0; z < fs.length; z++) {
if (typeof fs[z].sys_uniqueValue != 'undefined') {
f = fs[z];
break;
}
}
}
if (!g_form.isNewRecord())
g_form.setMandatoryOnlyIfModified(true);
f.sys_action.value = 'sysverb_check_save';
addInput(f, 'HIDDEN', 'sysparm_goto_url', url);
if (typeof f.onsubmit == "function") {
var rc = f.onsubmit();
if (!rc) {
g_submitted = false;
return false;
}
}
g_submitted = true;
if (typeof g_form != 'undefined' && g_form)
g_form.enableUIPolicyFields();
f.submit();
return false;
}
function submitTextSearch(event, tableName) {
if (event != true && event.keyCode != 13)
return;
var form = getControlForm(tableName);
addHidden(form, 'sysverb_textsearch', form['sys_searchtext'].value);
addHidden(form, 'sysparm_query', '');
addHidden(form, 'sysparm_referring_url', '');
form.submit();
}
function getControlForm(name) {
var form = document.forms[name + '_control'];
if (isSafari || isChrome) {
if (form) {
var collectionType = form.toString();
if (collectionType != "[object HTMLFormElement]")
form = form[0];
}
}
return form;
}
function getFormForList(listId) {
return $(listId + "_control");
}
function getFormForElement(element) {
var f = element.form;
if (f)
return f;
return findParentByTag(element, "form");
}
function hideReveal(sectionName, imagePrefix, snap) {
var el = $(sectionName);
if (!el)
return;
var $s = $j('#section-' + sectionName);
if ($s.length == 0)
return _hideRevealDirect(sectionName, imagePrefix, snap);
var $b = $j(".section-content", $s);
if ($s.hasClass("state-closed"))
$b.show("medium");
else
$b.hide("medium");
$s.toggleClass('state-closed');
$j('[data-aria-label-toggle]', $s).each(function(){
var ariaLabel = $j(this).attr('aria-label');
var ariaLabelToggle = $j(this).data('aria-label-toggle');
$j(this).attr('aria-label', ariaLabelToggle);
$j(this).data('aria-label-toggle', ariaLabel);
var ariaExpanded = $j(this).attr('aria-expanded')
$j(this).attr('aria-expanded',ariaExpanded === 'false' );
});
setPreference("collapse.section." + sectionName, $s.hasClass('state-closed') ? "true" : "false");
}
function _hideRevealDirect(sectionName, imagePrefix, snap) {
var el = $(sectionName);
if (!el)
return;
var img = $("img." + sectionName);
var imageName = "section";
if (imagePrefix)
imageName = imagePrefix;
if (el.style.display == "block") {
hide(el);
if (img) {
img.src = "images/"+imageName+"_hide.gifx";
img.alt = getMessage("Display / Hide");
}
} else {
show(el);
if (img) {
img.src = "images/"+imageName+"_reveal.gifx";
img.alt = getMessage("Display / Hide");
}
}
}
function hideRevealWithTitle(name, hideMsg, showMsg) {
var el = $(name);
if (!el)
return;
var img = $("img." + name);
if (el.style.display == "block"){
el.style.display = "none";
img.src = "images/section_hide.gifx"
img.title = showMsg;
img.alt = showMsg;
} else {
el.style.display = "block";
img.src = "images/section_reveal.gifx"
img.title = hideMsg;
img.alt = hideMsg;
}
}
function forceHideWithTitle(name, msg) {
var el = $(name);
if (!el)
return;
var img = $("img." + name);
el.style.display = "none";
img.src = "images/section_hide.gifx"
img.title = msg;
img.alt = msg;
}
function forceHide(sectionName){
var el = $(sectionName);
if (!el)
return;
var img = $("img." + sectionName);
el.style.display = "none";
img.src = "images/section_hide.gifx";
img.alt = getMessage("Collapse");
}
function forceReveal(sectionName, sectionNameStarts, tagName){
var els = $$(tagName);
if (els) {
for(var c=0;c<els.length;++c) {
if ( els[c].id.indexOf(sectionNameStarts) == 0 ) {
forceHide(els[c].id);
}
}
}
var el = $(sectionName);
if (!el)
return;
var img = $("img." + sectionName);
el.style.display = "block";
img.src = "images/section_reveal.gif";
img.alt = getMessage("Expand");
window.location = '#' + sectionName;
}
function insertAtCursor(textField, value) {
if (document.selection) {
textField.focus();
sel = document.selection.createRange();
sel.text = value;
} else if (textField.selectionStart || textField.selectionStart == 0) {
var startPos = textField.selectionStart;
var endPos = textField.selectionEnd;
textField.value = textField.value.substring(0, startPos) + value +
textField.value.substring(endPos, textField.value.length);
} else {
textField.value += value;
}
}
function insertScriptVar(textBoxName, selectBoxName) {
var textBox = $(textBoxName);
var select = $(selectBoxName);
var options = select.options;
for (var i = 0; i != select.length; i++) {
var option = options[i];
if (!option.selected)
continue;
var label = option.text;
var v = option.value.split('.');
v = 'current.' + v[1];
insertAtCursor(textBox, v);
}
}
function fieldTyped(me) {
formChangeKeepAlive();
}
function setPreference(name, value, func) {
var u = getActiveUser();
if (u)
u.setPreference(name, value);
var url = new GlideAjax("UserPreference");
url.addParam("sysparm_type", "set");
url.addParam("sysparm_name", name);
url.addParam("sysparm_value", value);
url.getXML(func);
}
function deletePreference(name) {
var u = getActiveUser();
if (u)
u.deletePreference(name);
var url = new GlideAjax("UserPreference");
url.addParam("sysparm_type", "delete");
url.addParam("sysparm_name", name);
url.getXML(doNothing);
}
function getPreference(name) {
var u = getActiveUser();
if (u) {
var opinion =  u.getPreference(name);
if (typeof opinion != 'undefined')
return opinion;
}
console.warn("Preference " + name + " not found in the active user cache. Making a blocking AJAX call to load it. Consider pre-loading this property in glide_user.")
var url = new GlideAjax("UserPreference");
url.addParam("sysparm_type", "get");
url.addParam("sysparm_name", name);
var xml = url.getXMLWait();
if (!xml)
return '';
var items = xml.getElementsByTagName("item");
for (var i = 0; i < items.length; i++) {
var item = items[i];
var value = item.getAttribute("value");
if (u)
u.setPreference(name, value);
return value;
}
return '';
}
function getActiveUser() {
return getTopWindow().g_active_user || window.g_user;
}
function labelClicked(label, elementType) {
var hFor = label.htmlFor;
if (hFor) {
var elpaco = $("sys_display." + hFor);
if (!elpaco || elpaco.type == "hidden")
elpaco = $(hFor);
if (elpaco === null) {
var temp = hFor.split(".").slice(2).join(".");
elpaco = $(temp+'_label');
}
if (elpaco && elpaco.type != "hidden" && elpaco.style.visibility != "hidden") {
if (elpaco.disabled != true) {
if (elementType == "html" || elementType == "translated_html") {
var handler = g_form.elementHandlers[hFor];
if (handler && handler.focusEditor) {
handler.focusEditor();
}
} else {
elpaco.focus();
}
}
}
}
return false;
}
function insertFieldName(textBoxName, label) {
var textBox = $(textBoxName);
var index = label.indexOf(":");
if (index > -1)
insertAtCursor(textBox, "\n" + label);
else
insertAtCursor(textBox, label);
var form = textBox.up('form');
if (form) {
var onChangeData = {id : textBox.id, value : textBox.value, modified : true};
form.fire('glideform:onchange', onChangeData);
}
}
function replaceRegEx(text, doc, tableName) {
var s = "";
var re = new RegExp("%\\{\\w+[\\}]");
var m = re.exec(text);
if (m != null) {
for (i = 0; i < m.length; i++) {
s = s + m[i];
}
}
if (tableName.indexOf('.') > 0)
tableName = tableName.split('.')[0];
if (s.length > 0) {
var field = s.substring(2, s.length - 1);
var obj = doc.getElementById("sys_display." + tableName + "." +  field);
var val = "?";
if (obj != null)
val = obj.value;
if (val.length == 0) {
var labelText = "?";
var labels = doc.getElementsByTagName("label");
for(i = 0; i < labels.length; i++){
if (labels[i].htmlFor == tableName + "." + field) {
labelText = labels[i].innerHTML;
break;
}
}
if (labelText.indexOf(':') > 0)
labelText = labelText.split(':')[0];
val = labelText;
}
re = new RegExp("%\\{" + field + "[\\}]", "g");
var result = text.replace(re, val);
if (result.indexOf("%{") > 0)
result = replaceRegEx(result, doc, tableName);
return result;
}
return text;
}
function toggleInline(name) {
_toggleDisplay(name, 'inline');
}
function _toggleDisplay(name, displayType) {
var e = $(name);
if (e.style.display == 'none' ) {
e.style.display = displayType;
setPreference(name, displayType, null);
} else {
e.style.display = 'none';
setPreference(name, 'none', null);
}
}
function textareaResizer(id, change) {
objectResizer(id, change, 'rows');
}
function textareaSizer(id, rows) {
var element = $(id);
if (element)
setAttributeValue(element, 'rows', rows);
}
function selectResizer(id, change) {
objectResizer(id, change, 'size');
}
function objectResizer(id, change, attrName) {
var tinymceEditor = getTinyEditor(id);
if (tinymceEditor) {
resizeTinymce(tinymceEditor, change, true);
} else {
var element = $(id);
if (!element)
return;
var value = parseInt($j(element).css("height"), 10);
value += change;
if (value < 1)
value = 1;
if (element.tagName == 'INPUT') {
element = $("div."+id);
if (element) {
if (change > 0) {
element.show();
} else {
element.hide();
value = 1;
}
}
} else {
var oldRows = element.rows;
element.style.height = value + 'px';
handleMaxMinHeights(element, value);
resizeTextAreaIframe(true, id, value);
}
setPreference('rows.' + id, value);
_frameChanged();
}
}
function isTinyMCEIncluded() {
return !!(typeof tinymce !== 'undefined' && tinymce !== undefined && tinymce !== null && tinymce);
}
function getTinyEditor(id) {
return isTinyMCEIncluded() ? tinymce.get(id) : null;
}
function resizeTinymce(editor, value, isDelta, force) {
if (editor) {
if (isDelta) {
editor.theme.resizeBy(0, value);
} else if (!force) {
editor.theme.resizeTo(null, value);
} else {
var iframeElm = editor.getContentAreaContainer().querySelector('iframe');
$j(iframeElm).height(value);
}
}
}
function handleMaxMinHeights(element, height){
if (!element || !height)
return;
var $element = $(element),
maxHeight = parseInt($element.getStyle('maxHeight'), 10),
minHeight = parseInt($element.getStyle('minHeight'), 10),
id = getAttributeValue($element, 'id');
if ( height >= maxHeight ){
if ( $('sizer_plus_' + id) )
$('sizer_plus_' + id).addClassName('disabled');
$('sizer_plus_' + id).setAttribute('aria-disabled', "true");
$element.setStyle({
overflowY: 'auto'
});
return;
}
if ( height <= minHeight ) {
if ( $('sizer_minus_' + id) )
$('sizer_minus_' + id).addClassName('disabled');
$('sizer_minus_' + id).setAttribute('aria-disabled', "true");
return;
}
$('sizer_plus_' + id).removeClassName('disabled');
$('sizer_minus_' + id).removeClassName('disabled');
$('sizer_plus_' + id).removeAttribute('aria-disabled');
$('sizer_minus_' + id).removeAttribute('aria-disabled');
}
function resizeTextAreaIframe() {
var args = Array.prototype.slice.call(arguments, 0),
tf = $("textarea_iframe." + id),
doctype = args[0],
id = args[1],
height,
oldRows,
rows;
if (doctype){
height = args[2];
} else {
rows = args[2];
oldRows = args[3];
}
if (!tf){
var skipAdd60 = args[4];
var adder = skipAdd60 ? 0 : 60;
tf = $(id + '_ifr');
if (!tf)
tf = $('textarea_iframe.' + id);
if (tf){
var tbl = $(id + '_tbl');
var readOnlyDiv = $(id + '_readOnlyDiv');
if (doctype){
tf.style.height = (height + adder) + "px";
if ( tbl ){
tbl.style.height = (height + adder) + "px";
}
if ( readOnlyDiv ) {
readOnlyDiv.style.height = (height + adder) + "px";
}
var tfDoc = tf.contentDocument || tf.contentWindow.document;
var editor = getTinyEditor(id);
var isReadonly = editor && editor.readonly;
if (tfDoc && isReadonly) {
function setHeightToScrollHeight() {
if (tfDoc.documentElement.scrollHeight !== parseInt(tf.style.height, 10)) {
tf.style.height = tfDoc.documentElement.scrollHeight + "px";
}
}
setHeightToScrollHeight();
window.onresize = setHeightToScrollHeight;
CustomEventManager.on('tab.activated', function(){
setHeightToScrollHeight();
})
}
} else {
var elHeight = parseInt(tf.clientHeight);
if (elHeight == 0 && readOnlyDiv)
elHeight = parseInt(readOnlyDiv.style.height);
var pixelsPerRow = 12;
var newHeight = elHeight + (rows - oldRows) * pixelsPerRow;
tf.style.height = newHeight + "px";
if (tbl){
tbl.style.height = (parseInt(tbl.style.height) + (newHeight-elHeight)) + "px";
}
if (readOnlyDiv){
readOnlyDiv.style.height = newHeight + "px";
}
}
}
}
if (!tf)
return;
if (!tf.parentNode)
return;
if (!tf.parentNode.nextSibling)
return;
var nid = tf.parentNode.nextSibling.id;
if (nid != id)
return;
var elHeight = tf.clientHeight;
var pixelsPerRow = Math.round(elHeight / oldRows);
tf.style.height = rows * pixelsPerRow + "px";
}
function toggleQuestionRows(thisclass, display, fl) {
forcelabels = false;
if (fl == true)
forcelabels = true;
var rows = $(document.body).select('.' + thisclass);
for (i = 0; i < rows.length; i++) {
var element = rows[i];
var id = element.id;
if ('CATEGORY_LABEL' != id || forcelabels)
element.style.display = display;
}
var openStyle='none';
var closedStyle='none';
if ('none' == display)
openStyle = '';
else
closedStyle = '';
var s = $(thisclass+'CLOSED');
s.style.display=closedStyle;
s = $(thisclass+'OPEN');
s.style.display=openStyle;
}
function toggleWorkflow(id, expandPref) {
var map = getMessages(['Expand', 'Collapse']);
var table = $("workflow." + id);
var spans = table.getElementsByTagName("span");
for(var i = 0; i != spans.length; i++) {
var span = spans[i];
if (!span.getAttribute("stage"))
continue;
var spanImage = $(span.id + '.image');
var spanText = $(span.id + '.text');
if (span.getAttribute("selected") == 'true')
spanText.style.color = "#2050d0";
var filterImg = $('filterimg.' + id);
if (expandPref == "false") {
span.style.display = "";
spanText.style.display = "none";
filterImg.src = "images/filter_hide16.gifx";
filterImg.title = map["Expand"];
filterImg.alt = map["Expand"];
filterImg.setAttribute("data-original-title", map["Expand"]);
span.setAttribute("aria-expanded", "false");
} else {
span.style.display = "block";
spanText.style.display = "";
span.setAttribute("aria-expanded", "true");
filterImg.src = "images/filter_reveal16.gifx";
filterImg.title = map["Collapse"];
filterImg.alt = map["Collapse"];
filterImg.setAttribute("data-original-title", map["Collapse"]);
}
}
_frameChanged();
}
function toggleItemsEventHandler(event, id) {
var e  = event || window.event;
var code =  e.which || e.keyCode;
if (code === 32 || code === 13) {
e.preventDefault();
toggleItems(id);
}
}
function togglePreference(id) {
toggleItems(id);
}
function toggleItems(id, force) {
var tables = $$("table");
for (var i = 0; i < tables.length; i++) {
var tableId = tables[i].id;
if (tableId.indexOf("workflow.") == -1)
continue;
var idParts = tables[i].id.split(".");
if (id && tableId != "workflow." + id)
continue;
var pref = getPref(idParts[1]);
if (force != pref)
toggleWorkflow(idParts[1], pref);
if (id)
break;
}
}
function getPref(id) {
var filterImgSrc = $('filterimg.' + id).src
if (filterImgSrc.indexOf('filter_hide') != -1)
return "true";
return "false";
}
document.addEventListener('keyup', checkForClientKeystroke) ;
function checkForClientKeystroke(evt) {
if (evt.keyCode == 27 && window.g_popup_manager) {
g_popup_manager.destroypopDiv();
return;
}
if (evt.shiftKey && evt.ctrlKey && evt.keyCode == 74) {
var gWindow = new GlideDialogWindow("client_js");
gWindow.setTitle("JavaScript Executor");
gWindow.setPreference('table', 'javascript_executor');
gWindow.render();
Event.stop(evt);
return;
}
try {
if (typeof parent.navVisible == "function") {
if (evt.ctrlKey && evt.keyCode == 190 && !evt.shiftKey && !evt.altKey) {
Event.stop(evt);
if (parent.navVisible()) {
parent.hideNav();
parent.hide("banner_top_left");
parent.hide("banner_top_right");
} else {
parent.showNav();
parent.show("banner_top_left");
parent.show("banner_top_right");
}
}
}
} catch (e) { }
}
function toggleHelp(name) {
var wrapper = $('help_' + name + '_wrapper');
var image = $('img.help_' + name + '_wrapper');
if (wrapper.style.display=="block") {
wrapper.style.display = "none";
image.src = "images/filter_hide16.gifx";
} else {
wrapper.style.display = "block";
image.src = "images/filter_reveal16.gifx";
}
image.alt = getMessage("Display / Hide");
_frameChanged();
}
function validateHex(field) {
var num = field.value;
var valid = isHex(num);
if (!valid) {
var sName = '';
if (field.name != null)
sName = ' of '+field.name+' ';
alert("The entered value "+sName+"is not hex.  Please correct.");
}
}
function isHex(num) {
var str = num.replace(new RegExp('[0-9a-fA-F]','g'),'');
if (str.length > 0)
return false;
return true;
}
function setLightWeightLink(name) {
var v = $(name);
if (!v)
return;
var link = $(name + "LINK");
var replace = $(name + "LINKreplace")
if (!link && !replace)
return;
var vis = "hidden";
if (v.value != '')
vis = "";
setLightWeightLinkDisplay(link, vis);
setLightWeightLinkDisplay(replace, vis);
}
function setLightWeightLinkDisplay(el, vis) {
if (!el)
return;
el.style.visibility = vis;
el.style.display = vis == 'hidden' ? 'none' : '';
}
function toggleDebug(id) {
id = id.split('.')[1];
for (var i =0; i < 1000; i++) {
var widgetName = 'debug.' + id + '.' + i;
var w = $(widgetName);
if (!w)
return;
w.toggle();
}
}
function enterSubmitsForm(e, enter_submits_form) {
if (e.keyCode != 13)
return true;
if (e.ctrlKey == true)
return false;
var source = Event.element(e);
var $source = $j(source);
if (source.getAttribute("data-type")  && e.keyCode == 13 && source.getAttribute("data-type") == 'ac_reference_input')
return false;
if (source && source.type=="textarea")
return true;
if (source.getAttribute("contenteditable") === "true" && $source.is('.multiLinePill'))
return true;
if ($source.is('.delete_pill.remove-pill'))
return true;
if ($source.is('.dot_walk_btn'))
return true;
if (source && source.type == "submit" || source.type == "button") {
if (source.disabled == false && source.onclick) {
source.onclick();
return false;
}
}
if (enter_submits_form == 'false')
return false;
var submitHeaderElements = $(document.body).select(".header").filter(function (el) {
return el.type === 'submit' && !el.disabled;
});
if (!submitHeaderElements.length)
return false;
var submitButton = submitHeaderElements.find(function(el) {
return (el.value === 'sysverb_insert'
|| el.value === 'sysverb_insert_and_stay'
|| el.value === 'sysverb_update'
|| el.value === 'sysverb_update_and_stay'
|| el.value === 'sysverb_save'
|| el.value === 'sys_security_acl_insert_with_roles');
}) || submitHeaderElements[0];
source.blur();
setTimeout(function(){
submitButton.onclick();
}, 0);
return false;
}
function gsftPrompt(title, question, onPromptComplete, onPromptCancel) {
var dialog = new GlideDialogWindow('glide_prompt', false);
dialog.setTitle(title);
dialog.setPreference('title', question);
dialog.setPreference('onPromptComplete', onPromptComplete);
dialog.setPreference('onPromptCancel', onPromptCancel);
dialog.render();
}
function gsftConfirm(title, question, onPromptSave, onPromptCancel, onPromptDiscard) {
var width, dialogClass = GlideDialogWindow;
if (window.GlideModal) {
dialogClass = GlideModal;
width = 400;
}
var dialog = new dialogClass('glide_confirm', false, width);
dialog.setTitle(title);
dialog.setPreference('title', question);
dialog.setPreference('onPromptSave', onPromptSave);
dialog.setPreference('onPromptCancel', onPromptCancel);
dialog.setPreference('onPromptDiscard', onPromptDiscard);
dialog.render();
}
function tsIndexCreatorPopup(tableName){
var gDialog = new GlideDialogWindow("dialog_text_index_creator");
gDialog.setSize(400, 250);
gDialog.setPreference("table_name", tableName);
if (tableName != "")
gDialog.setTitle('Generate Text Index');
else
gDialog.setTitle('Regenerate All Text Indexes');
gDialog.render();
}
function isTextDirectionRTL(){
return g_text_direction == 'rtl' ? true : false;
}
function simpleRemoveOption(sourceSelect) {
var sourceOptions = sourceSelect.options;
var selectedIds = [];
var index = 0;
for (var i = 0; i < sourceSelect.length; i++) {
option = sourceOptions[i];
if (option.selected) {
selectedIds[index] = i;
index++;
}
}
for (var i = selectedIds.length - 1; i > -1; i--)
sourceSelect.remove(selectedIds[i]);
sourceSelect.disabled = true;
sourceSelect.disabled = false;
}
function saveAllSelected(fromSelectArray, toArray, delim, escape, emptyLabel, doEscape) {
var translatedEmptyLabel = getMessage(emptyLabel);
for (var i = 0; i < fromSelectArray.length; i++) {
if (typeof fromSelectArray[i] == 'undefined') {
toArray[i].value = '';
continue;
}
var toValue = "";
for (var j = 0; j < fromSelectArray[i].length; j++) {
if (!(fromSelectArray[i].length == 1 && fromSelectArray[i].options[0].value == translatedEmptyLabel)) {
var val = fromSelectArray[i].options[j].value;
if (doEscape)
val = encodeURIComponent(val);
toValue += val.replace(new RegExp(delim, "g"), escape + delim);
}
if (j + 1 < fromSelectArray[i].length)
toValue += delim;
}
toArray[i].value = toValue;
}
}
function sortSelect (obj) {
var maxSort = obj.getAttribute("max_sort");
if (!maxSort || maxSort == 0)
maxSort = 500;
if (obj.length > maxSort && isMSIE && !isMSIE9) { return; }
if (!sortSupported(obj)) { return; }
if (!hasOptions(obj)) { return; }
var o = [];
var o2 = [];
var o3 = [];
for (var i=0; i<obj.options.length; i++) {
var newOption = new Option( obj.options[i].text, obj.options[i].value, obj.options[i].defaultSelected, obj.options[i].selected);
copyAttributes(obj.options[i], newOption);
if (newOption.value.indexOf('split') > 0)
o2[o2.length] = newOption;
else if (newOption.value && newOption.value.substr(0,2) !=="u_" && (newOption.value.indexOf('formatter') > 0 || newOption.value.indexOf('component') > 0 ||
newOption.value.indexOf('annotation') > 0 || newOption.value.indexOf('chart') > 0))
o3[o3.length] = newOption;
else
o[o.length] = newOption;
}
if (o.length == 0)
return;
o = o.sort(
function(a,b) {
if ((a.text.toLowerCase()+"") < (b.text.toLowerCase()+"")) { return -1; }
if ((a.text.toLowerCase()+"") > (b.text.toLowerCase()+"")) { return 1; }
return 0;
}
);
o3 = o3.sort(
function(a,b) {
if ((a.text.toLowerCase()+"") < (b.text.toLowerCase()+"")) { return -1; }
if ((a.text.toLowerCase()+"") > (b.text.toLowerCase()+"")) { return 1; }
return 0;
}
);
for (var i = 0; i < o.length; i++) {
var newOption = new Option(o[i].text, o[i].value, o[i].defaultSelected, o[i].selected);
copyAttributes(o[i], newOption);
obj.options[i] = newOption;
}
var counter = 0;
for (var i = o.length; i < (o.length + o2.length); i++) {
var newOption = new Option(o2[counter].text, o2[counter].value, o2[counter].defaultSelected, o2[counter].selected);
copyAttributes(o2[counter], newOption);
obj.options[i] = newOption;
counter++;
}
var counter = 0;
for (var i = (o.length + o2.length); i < (o.length + o2.length + o3.length); i++) {
var newOption = new Option(o3[counter].text, o3[counter].value, o3[counter].defaultSelected, o3[counter].selected);
copyAttributes(o3[counter], newOption);
obj.options[i] = newOption;
counter++;
}
}
function copyAttributes(from, to) {
var attributes = from.attributes;
for (var n = 0; n < attributes.length; n++) {
var attr = attributes[n];
var aname = attr.nodeName;
var avalue = attr.nodeValue;
to.setAttribute(aname, avalue);
}
if (from.style.cssText)
to.style.cssText = from.style.cssText;
}
function hasOptions(obj) {
if (obj != null && obj.options != null)
return true;
return false;
}
function sortSupported(obj) {
if (obj == null)
return false;
var noSort = obj.no_sort || obj.getAttribute('no_sort');
if (noSort) {
return false;
}
return true;
}
;
/*! RESOURCE: /scripts/scoped_object_generators.js */
function ScopedGlideAjaxGenerator(scope) {
var ScopedGlideAjax = function() {
ScopedGlideAjax.prototype.initialize.apply(this, arguments);
};
ScopedGlideAjax.prototype = classExtendForScope({}, window.GlideAjax.prototype, {
scope: scope,
initialize: function(endpoint, url) {
GlideAjax.prototype.initialize.call(this, endpoint, url);
this.setScope(this.scope);
},
getXMLWait: function() {
var err_options = {
text: "Access to getXMLWait is not available in scoped applications.",
type: "system",
attributes: { type: "error" }
};
notifyFromWrappedScopedObject(err_options);
},
setScope: function(newScope) {
if (newScope != this.scope && newScope !== "global") {
var err_options = {
text: "Scoped applications cannot impersonate other scopes.",
type: "system",
attributes: { type: "error" }
};
notifyFromWrappedScopedObject(err_options);
return;
}
return GlideAjax.prototype.setScope.call(this, scope);
},
addParam: function(param, value) {
if (param == "sysparm_scope" && value != this.scope && value != "global") {
var err_options = {
text: "Scoped applications cannot impersonate other scopes.",
type: "system",
attributes: { type: "error" }
};
notifyFromWrappedScopedObject(err_options);
return;
}
return window.GlideAjax.prototype.addParam.call(this, param, value);
}
})
return ScopedGlideAjax;
}
function ScopedGFormGenerator(scope) {
var ScopedGForm =  function() {};
if ("undefined" == typeof g_form) {
return ScopedGForm;
}
if ("global" == scope) {
return g_form;
}
ScopedGForm.prototype = g_form;
var scoped_g_form = new ScopedGForm();
function inScope(fieldName) {
try {
var ge = _getUIElement(fieldName);
if (ge && scope == ge.getScope())
return true;
if(ge && ge.isInherited && (scope == g_form.getScope()))
return true;
} catch (e) {
jslog(e);
}
return false;
}
function _getUIElement(fieldName) {
if (g_form.hasVariablesPrefix && g_form.removeVariablesPrefix)
if (g_form.hasVariablesPrefix(fieldName))
fieldName = g_form.resolveNameMap(g_form.removeVariablesPrefix(fieldName));
return g_form.getGlideUIElement(fieldName) || g_form.getGlideUIElement(g_form.resolveNameMap(fieldName));
};
function _noCallbackError(displayName, fieldName) {
var text = displayName + " for " + fieldName + " not allowed: missing callback function as parameter";
var err_options = {
text: text,
type: "system",
attributes: { type: "error" }
}
notifyFromWrappedScopedObject(err_options);
}
function _showScopeError(displayName, fieldName, value) {
var text = displayName + " " + value + " not set on field " + fieldName + ": cross-scope access denied.";
var err_options = {
text: text,
type: "system",
attributes: { type: "error" }
}
opticsLog(scoped_g_form.getTableName(), fieldName, text);
notifyFromWrappedScopedObject(err_options);
}
function validField(fieldName) {
fieldName = g_form.removeCurrentPrefix(fieldName);
return g_form.hasField(fieldName) || g_form.getPrefixHandler(fieldName);
}
scoped_g_form.setReadOnly = function(fieldName, disabled) {
if (!validField(fieldName))
return;
if (inScope(fieldName))
return g_form.setReadOnly(fieldName, disabled);
_showScopeError("ReadOnly", fieldName, disabled);
}
scoped_g_form.setReadonly = function(fieldName, disabled) {
if (!validField(fieldName))
return;
if (inScope(fieldName))
return g_form.setReadonly(fieldName, disabled);
_showScopeError("ReadOnly", fieldName, disabled);
}
scoped_g_form.setMandatory = function(fieldName, mandatory) {
if (!validField(fieldName))
return;
if (inScope(fieldName))
return g_form.setMandatory(fieldName, mandatory);
_showScopeError("Mandatory", fieldName, mandatory);
}
scoped_g_form.setDisplay = function(fieldName, display) {
if (!validField(fieldName))
return;
if (inScope(fieldName))
return g_form.setDisplay(fieldName, display);
_showScopeError("Display", fieldName, display);
}
scoped_g_form.setDisabled = function(fieldName, disabled) {
if (!validField(fieldName))
return;
if (inScope(fieldName))
return g_form.setDisabled(fieldName, disabled);
_showScopeError("Disabled", fieldName, disabled);
}
scoped_g_form.getReference = function(fieldName, callBack) {
if (!validField(fieldName))
return;
if ('function' == typeof callBack)
return g_form.getReference(fieldName, callBack);
_noCallbackError("getReference", fieldName, false);
}
Object.defineProperty(scoped_g_form, "modified", {
get: function () {
return g_form.modified;
},
set: function (val) {
g_form.modified = val;
},
enumerable: true,
configurable: true
});
return scoped_g_form;
}
function ScopedGlideDialogWindowGenerator(scope) {
var extendFrom = window.GlideDialogWindow ? GlideDialogWindow.prototype : GlideModal.prototype;
var ScopedGlideDialogWindow = function() {
ScopedGlideDialogWindow.prototype.initialize.apply(this, arguments);
};
ScopedGlideDialogWindow.prototype = classExtendForScope({}, extendFrom, {
scope: scope,
initialize: function(id, readOnly, width, height) {
extendFrom.initialize.call(this, id, readOnly, width, height);
this.setScope(this.scope);
}
});
return ScopedGlideDialogWindow;
}
function classExtendForScope(extended, defaults, options) {
if (window.jQuery)
return jQuery.extend(extended, defaults, options);
var prop;
for (prop in defaults) {
extended[prop] = defaults[prop];
}
for (prop in options) {
extended[prop] = options[prop];
}
return extended;
}
function notifyFromWrappedScopedObject(msgObject) {
jslog(msgObject.text);
if (typeof nowapi !== 'undefined' && nowapi && typeof nowapi.hasOwnProperty('g_notification'))
nowapi.g_notification.show(msgObject.attributes.type, msgObject.text);
else if (typeof GlideUI != 'undefined')
GlideUI.get().display(new GlideUINotification(msgObject));
}
;
/*! RESOURCE: /scripts/functions_reference.js */
function updateAndFlip(select, elementName) {
var option = setSelectValue(select, elementName);
onChange(elementName);
refFlipImage(option, elementName);
}
function setSelectValue(select, elementName) {
elementName = elementName || '';
if (elementName.indexOf("sys_select.") === 0)
elementName = elementName.replace("sys_select.", "");
var value = '';
var text = '';
var option;
if (select.selectedIndex != -1) {
option = select.options[select.selectedIndex];
value = option.value;
text = option.text;
}
var id = gel(elementName);
id.value = value;
var idd = gel('sys_display.' + elementName);
if (value == '')
idd.value = '';
else
idd.value = text;
return option;
}
function refFlipImage(element, elementName, useText) {
if (typeof g_form !== 'undefined' && !g_form.isFieldVisible(elementName))
return;
var viewField = gel("view." + elementName);
var viewRField = gel("viewr." + elementName);
var viewHideField = gel("view." + elementName + ".no");
var refid = gel(elementName);
var value = element.value;
if (!value) {
hideObject(viewField);
hideObject(viewRField);
showObjectInline(viewHideField);
} else {
if(isDoctype()) {
showObjectInlineBlock(viewField);
showObjectInlineBlock(viewRField);
} else {
showObjectInline(viewField);
showObjectInline(viewRField);
}
hideObject(viewHideField);
}
}
function refFlipImageDisplay(element, dsp) {
if (element)
element.style.display = dsp;
}
function derivedFromChoiceListHasValue(elementName) {
var parentName = elementName.substring(0, elementName.lastIndexOf('.'));
if (parentName.indexOf('.') < 0)
return false;
var parent = gel(parentName);
if (!parent || parent.getAttribute('choice') !== '3')
return false;
return !!parent.value || derivedFromChoiceListHasValue(parentName);
}
function emptyWithoutNoneRefChoiceListOnLoadHandler(elementName) {
var element = gel(elementName);
if (!element || !element.value)
return;
if (!derivedFromChoiceListHasValue(elementName)) {
refFlipImage(element, elementName);
onSelChange(elementName);
}
}
;
/*! RESOURCE: /scripts/functions_onchange.js */
function onChange(elementName, fromSetTemplateValue, gForm){
var g_form = typeof gForm !== "undefined" ? gForm : this.g_form;
elementName = elementName || '';
var elementId = elementName;
if (elementName.indexOf("sys_select.") === 0)
elementName = elementName.replace("sys_select.", "");
var eChanged,
eOriginal,
eDisplay,
isMappingField = ifFieldHasElementMappingPrefix(elementName);
if (isMappingField) {
elementName = removeMappingPrefix(elementName);
eChanged = gel(elementName);
eOriginal = gel("sys_mapping.original." + elementName);
eDisplay = gel("sys_mapping." + elementName);
} else {
eChanged = gel(elementName);
eOriginal = gel("sys_original." + elementName);
eDisplay = gel("sys_display." + elementName);
if (eOriginal == null) {
return;
}
}
var vOriginal = eOriginal.value.trim() === '' ? '' : eOriginal.value;
var vChanged = eChanged.value.trim() === '' ? '' : eChanged.value;
var vDisplay = eDisplay ? eDisplay.value : null;
var niElement = gel('ni.'+ elementName);
if (niElement && niElement.type === 'checkbox') {
if (vChanged === '')
vChanged = "false";
}
if (isMappingField && !isFilterField(eChanged)) {
eChanged.changed = (vDisplay != vOriginal);
} else {
if (!vChanged)
eChanged.value = "";
eChanged.changed = (vOriginal != vChanged);
}
if(!elementName.startsWith("IO:") && !elementName.startsWith("ni.VE") && !elementName.startsWith("ni.QS")) {
onChangeLabelProcess(elementName);
}
setMandatoryExplained();
onSelChangeAndClientScriptOnChange(elementName, eChanged, vOriginal, vChanged, g_form, elementId, fromSetTemplateValue);
fieldChanged(elementName, eChanged.changed, g_form);
if (eChanged.changed && typeof(g_form) != "undefined" && g_form.triggerOnUserChangeValue)
g_form.triggerOnUserChangeValue(elementName, vOriginal, vChanged);
var onChangeData = {id : elementName, value : vChanged, modified : eChanged.changed};
if(vDisplay)
onChangeData.displayValue = vDisplay;
var parentForm = $(elementName).up('form');
parentForm && parentForm.fire('glideform:onchange', onChangeData);
CustomEvent.fire("refFieldPreviewButtonChange", elementName, vChanged, vDisplay);
}
function isFilterField(element) {
if (element && element.nextSibling)
return element.nextSibling.getAttribute('gsft_template');
return false;
}
function ifFieldHasElementMappingPrefix(fieldName) {
if (fieldName === undefined) {
return false;
}
return fieldName.indexOf('sys_mapping.') !== -1;
}
function removeMappingPrefix(fieldName) {
return fieldName.replace("sys_mapping.", "");
}
function onChangeLabelProcess(elementName, value) {
var el = gel(elementName);
var statusNode = gel('status.' + elementName);
onChangeLabelProcessByEl(el, statusNode, value);
}
function onChangeLabelProcessByEl(elementNode, statusLabel, value) {
if (!elementNode || !statusLabel)
return;
var mandatory = elementNode.getAttribute("mandatory") + "";
var readonly = elementNode.disabled || hasClassName(elementNode,'disabled');
if (mandatory == null || mandatory == "null")
mandatory = statusLabel.getAttribute("mandatory") + "";
else {
statusLabel.setAttribute("mandatory", mandatory);
}
elementNode.setAttribute("aria-required", mandatory === 'true');
var displayNode = gel("sys_display." + elementNode.id);
if (displayNode)
displayNode.setAttribute("aria-required", mandatory === 'true');
var newClassName = statusLabel.getAttribute("oclass");
var newFieldClassName = "";
var newTitle = statusLabel.getAttribute("title") || "";
if (value == undefined)
value = elementNode.value;
if (mandatory == "true") {
if (typeof value != 'undefined' && (value == "")) {
newClassName = "mandatory";
newFieldClassName = "is-required";
newTitle = getMessage("Mandatory - must be populated before Submit");
} else if (elementNode.changed) {
newClassName = "mandatory changed";
newFieldClassName = "is-filled";
newTitle = getMessage("Field value has changed since last update");
} else if (!readonly) {
newClassName = "mandatory_populated";
newFieldClassName = "is-prefilled";
newTitle = getMessage("Mandatory - preloaded with saved data");
} else {
newClassName = "read_only";
newTitle = getMessage("Read only - cannot be modified");
}
} else {
if (elementNode.changed) {
newClassName = "changed";
newTitle = getMessage("Field value has changed since last update");
} else if (readonly) {
newClassName = "read_only";
if (newTitle == "" || newTitle == null)
newTitle = getMessage("Read only - cannot be modified");
} else if (newClassName != "read_only" && newClassName != "changed") {
newClassName = "";
newTitle = "";
}
}
var slm = gel("section508." + elementNode.id);
if (slm) {
slm.setAttribute("title", statusLabel.getAttribute("title"));
slm.setAttribute("alt", statusLabel.getAttribute("title"));
}
newClassName += ' label_description';
if (statusLabel.className == newClassName)
return;
var parentElement = gel("element." + elementNode.id);
if (statusLabel.className.indexOf("required-marker") > -1)
var previousMandatory = true;
statusLabel.className = newClassName;
if (previousMandatory && statusLabel.className.indexOf("required-marker") == -1 && parentElement && parentElement.className.indexOf("is-required") > -1)
gel("element." + elementNode.id).className = parentElement.className.replace("is-required","");
if (typeof handleAriaInvalidState === 'function')
handleAriaInvalidState(elementNode.id, newFieldClassName === 'is-required');
if (typeof $j !== 'undefined') {
var tooltipButton = $j(statusLabel).siblings('.icon-help');
if (tooltipButton && tooltipButton.length) {
var baseTooltipMessage = tooltipButton.attr('label-title');
var mandatoryTitle = getMessage("Mandatory - must be populated before Submit");
if (baseTooltipMessage.indexOf(mandatoryTitle) !== -1) {
baseTooltipMessage = baseTooltipMessage.replace(mandatoryTitle + '. ', '');
tooltipButton.attr('label-title', baseTooltipMessage);
}
var fullTooltipLabel = (newTitle && baseTooltipMessage)
? newTitle + '. ' + baseTooltipMessage
: (newTitle || baseTooltipMessage);
if (fullTooltipLabel) {
tooltipButton
.attr('alt', fullTooltipLabel)
.attr('aria-label', fullTooltipLabel)
.attr('data-dynamic-title', fullTooltipLabel)
.show();
if (mandatory === "true" && g_accessibility_tooltips)
tooltipButton.attr('aria-hidden', 'false');
} else
tooltipButton.hide();
} else
statusLabel.setAttribute("data-dynamic-title", newTitle);
}
if (document.documentElement.getAttribute('data-doctype') == 'true') {
if (mandatory == 'true') {
statusLabel.className = "required-marker label_description";
}
if (newFieldClassName) {
var formGroup = elementNode.up('.form-group');
formGroup.removeClassName('is-prefilled');
formGroup.removeClassName('is-required');
formGroup.removeClassName('is-filled');
formGroup.addClassName(newFieldClassName);
}
statusLabel.setAttribute('aria-label', newTitle);
}
CustomEvent.fire("mandatory.changed", elementNode.id, newClassName);
}
function onSelChangeAndClientScriptOnChange(elementName, eChanged, vOriginal, vChanged, gForm, elementId, fromSetTemplateValue) {
var splitMe = elementName.split('.');
var tableName = splitMe[0];
var fieldName = splitMe.slice(1).join('.');
var g_form = typeof gForm != "undefined" ? gForm : this.g_form;
if (typeof (g_form) != "undefined")
g_form.hideFieldMsg(fieldName, true);
var template = eChanged.templateValue == 'true';
eChanged.templateValue = 'false';
callChangeHandlers(tableName, fieldName, eChanged, vOriginal, vChanged, g_form, template, true);
if (elementId)
onSelChange(elementId, fromSetTemplateValue);
callChangeHandlers(tableName, fieldName, eChanged, vOriginal, vChanged, g_form, template, false);
CustomEvent.fire("change.handlers.run", tableName, fieldName);
}
function callChangeHandlers(tableName, fieldName, eChanged, vOriginal, vChanged, gForm, template, isUiPolicy) {
var widgetName = tableName + "." + fieldName;
for (var i = 0; i < g_event_handlers.length; i++) {
var handler = g_event_handlers[i];
if (!!handler.isUiPolicy !== isUiPolicy)
continue;
if (handler.fieldName != widgetName && handler.fieldName != fieldName)
continue;
callChangeHandler(handler, this, eChanged, vOriginal, vChanged, false, template, gForm);
}
}
function fireAllChangeHandlers() {
for (var x = 0; x < g_event_handlers.length; x++) {
var handler = g_event_handlers[x];
var elementName = handler.fieldName;
var theWidget = gel(elementName);
if (!theWidget)
continue;
var original = gel("sys_original." + elementName);
var oldVal = 'unknown';
if (original)
oldVal = original.value;
var newVal;
if ($(theWidget).getAttribute("type") == "radio") {
newVal = oldVal;
var elems = $$('#'+$(theWidget).getAttribute("id")).each(function(el){
var checkedValue = el.getAttribute("checked");
if (checkedValue != null && checkedValue.length > 0)
newVal = el.value;
});
} else
newVal = theWidget.value;
callChangeHandler(handler, this, theWidget, oldVal, newVal, true, false);
}
CustomEvent.fire("change.handlers.run.all");
}
function callChangeHandler(handler, control, theWidget, oldVal, newVal, loading, template, gForm) {
var g_form = typeof gForm != "undefined" ? gForm : this.g_form;
try {
callChangeHandler0(handler, control, theWidget, oldVal, newVal, loading, template);
} catch (ex) {
if (g_user.hasRole('client_script_admin')) {
g_form.showFieldMsg(theWidget, "onChange script error: " + ex.toString() + "\n" +
handler.handler.toString(), "error", false);
} else {
g_form.showFieldMsg(theWidget,
"Script error encountered when changing this field - please contact your System Administrator",
"error", false);
}
CustomEvent.fire('glideform:script_error', "onChange script error: " + ex.toString() + "\n" + handler.handler.toString());
}
}
function callChangeHandler0(handler, control, theWidget, oldVal, newVal, loading, template) {
CustomEvent.fire('glide_optics_inspect_put_cs_context', handler.handlerName, 'change');
var startTimer = new Date();
handler.handler.call(control, theWidget, oldVal, newVal, loading, template);
var n = g_event_handlers_onChange[handler.handlerName];
if (n)
CustomEvent.fire('page_timing', { name: 'CSOC', child: { description: n, sys_id: g_event_handler_ids[handler.handlerName], source_table: 'sys_script_client'}, startTime: startTimer, win: window });
CustomEvent.fire('glide_optics_inspect_pop_cs_context', handler.handlerName, 'change');
}
function multiKeyDown(me, gForm) {
var g_form  = typeof  gForm != "undefined" ? gForm : this.g_form;
if ($(me.id).getAttribute("isquestionhtml") == "true")
return;
var eOriginal = 'g_' + me.id.replace(/\./g, '_');
var eOriginalSet = eval("typeof " + eOriginal + " != 'undefined'") && eOriginal !== 'g_slush';
if (eOriginalSet)
return;
var oValue = escape(me.value);
if (typeof(g_form) != "undefined" && eOriginal !== 'g_slush')
var oValue = escape(g_form.getValue(me.name));
eval(eOriginal + '="' + oValue + '";');
}
function multiModified(me, type, currentValue) {
if ($(me.id).getAttribute("isquestionhtml") == "true") {
$(me.id).onchange();
return;
}
multiKeyDown(me);
var form = findParentByTag(me, "form");
var changeFlag = true;
if (me.id && form) {
var elementName = me.id;
var vOriginal = unescape(eval('g_' + me.id.replace(/\./g, '_')));
if (currentValue === undefined) {
currentValue = me.value;
if (!currentValue.trim()) {
me.value = "";
currentValue = "";
}
}
if (type == undefined)
type = 'htmlarea';
if (currentValue == vOriginal)
changeFlag = false;
me.changed = changeFlag;
onChangeLabelProcess(elementName, currentValue);
if (type == 'tinymce' || (type.baseURL && type.baseURL.indexOf('tinymce') > -1)){
onSelChangeAndClientScriptOnChange(elementName, me, 'unknown', currentValue);
}else{
if ((typeof me.isFocused) == "boolean")
if (me.isFocused == false)
onSelChangeAndClientScriptOnChange(elementName, me, 'unknown', currentValue);
}
}
fieldChanged(elementName, changeFlag);
var onChangeData = {id : me.id, value : me.value, modified: me.changed};
$(me.up('form')).fire('glideform:onchange', onChangeData);
}
function formChangeKeepAlive() {
var AJAX_KEEPALIVE_TIMEOUT = 900;
var nowsecs = parseInt((new Date()).getTime() / 1000);
var secs = parseInt(lastActivity.getTime() / 1000);
var difference = nowsecs - secs;
if (difference > AJAX_KEEPALIVE_TIMEOUT) {
var aj = new GlideAjax("GlideSystemAjax");
aj.addParam("sysparm_name", "isLoggedIn");
aj.getXML(doNothing);
lastActivity = new Date();
}
}
function fieldChanged(elementName, changeFlag, gForm) {
var g_form = typeof gForm !== "undefined" ? gForm : this.g_form;
formChangeKeepAlive();
if (typeof(g_form) != "undefined")
g_form.fieldChanged(elementName, changeFlag);
}
function addOnChangeEvent(fields, tableName, callfunc) {
for (var i = 0; i < fields.length; i++) {
var field = fields[i];
if (typeof field == "string") {
if (tableName)
field = tableName + "." + field;
field = gel(field);
}
if (field && field.tagName)
Event.observe(field, 'change', callfunc);
}
}
function setColorSwatch(fieldName, gForm) {
var g_form = typeof gForm !== "undefined" ? gForm : this.g_form;
var colorValue = $(fieldName).value;
var colorDisplay = $("color_swatch." + fieldName);
try {
colorDisplay.style.backgroundColor = colorValue;
} catch (ex) {
g_form.showErrorBox(fieldName, getMessage("Invalid color") + ":" + colorValue);
$(fieldName).value = "";
colorDisplay.style.backgroundColor = "";
}
}
;
/*! RESOURCE: /scripts/functions_fontsizer.js */
function setPreferredFontSize(increment) {
var ruleStart = "BODY, TABLE, INPUT, SELECT, BUTTON, INPUT.TEXT, TEXTAREA, INPUT.button {font-size: "
var ruleEnd = "}";
var t = g_fontSize;
if (g_fontSizePreference)
t = g_fontSizePreference;
var  t = t.split('p')[0];
t = parseInt(t) + increment;
if (6 > t || t > 18)
return;
t += "pt";
if (g_fontSizePreference != t) {
g_fontSizePreference = t;
setPreference('font-size', g_fontSizePreference);
var al = getFontWindowList();
for (var i =0; i != al.length; i++) {
var w = al[i];
if (typeof w.deleteStyleSheet == 'function') {
w.deleteStyleSheet("font_size");
w.createStyleSheet(ruleStart + t + ruleEnd, "font_size");
}
}
}
deleteStyleSheet("font_size");
createStyleSheet(ruleStart + t + ruleEnd, "font_size");
if (increment) {
var e = $("font_pref_text");
if (e)
e.innerHTML = "(" + g_fontSizePreference + ")";
}
CustomEvent.fireAll("fontsize.change");
}
function getFontWindowList() {
var answer = new Array();
var m = getMainWindow();
if (m)
answer.push(m);
var m = getMainFormWindow();
if (m)
answer.push(m);
var m = getNavWindow();
if (m)
answer.push(m);
return answer;
}
function deleteStyleSheet(id) {
var sheet = document.getElementById(id);
if (sheet) {
var head = document.getElementsByTagName("head")[0];
head.removeChild(sheet);
}
}
function createStyleSheet(cssText, id) {
var head = document.getElementsByTagName("head")[0];
var rules = document.createElement("style");
rules.setAttribute("type", "text/css");
if(id)
rules.setAttribute("id", id);
if (navigator.userAgent.toLowerCase().indexOf("msie") >= 0) {
head.appendChild(rules);
var ss = rules.styleSheet;
ss.cssText = cssText;
} else {
try{
rules.appendChild(document.createTextNode(cssText));
}catch(e){
rules.cssText = cssText;
}
head.appendChild(rules);
}
}
function setPreferredFont() {
var t = getPreference('font-size');
if (!t)
return;
g_fontSizePreference = t;
setPreferredFontSize(0);
}
;
/*! RESOURCE: /scripts/functions_attachments.js */
function addEllipsisStyle(fileNameAnchor) {
fileNameAnchor.style.display = 'inline-block';
fileNameAnchor.style.textOverflow = 'ellipsis';
fileNameAnchor.style.whiteSpace = 'nowrap';
fileNameAnchor.style.overflow = 'hidden';
fileNameAnchor.style.verticalAlign = 'middle';
fileNameAnchor.setAttribute('data-use-ellipsis',"true")
}
function addAttachmentNameToForm(sysid, name, hoverText, image, showRename, showView, showPopup) {
var modified = $("attachments_modified");
if (modified)
modified.value = "true";
showObjectInline($("header_attachment_list_label"));
var line = $("header_attachment_line");
if (line)
line.setStyle({visibility: 'visible', display: ''});
var span = $(cel('span'));
span.id = "attachment_" + sysid;
span.style.marginRight = "10px";
var thisURL = getCurrentPageURL();
span.innerHTML = '<a href="sys_attachment.do?sys_id=' + sysid  + '&sysparm_this_url=' + thisURL + '" title="' + hoverText + '" style="margin-right:4px;" tabindex="-1"><img src="' + image + '" alt="" /></a>';
var txt = $(cel('a'));
if ('innerText' in txt)
txt.innerText = name;
else
txt.textContent = name;
txt.href='#';
txt.onkeydown = function(event){return allowInPlaceEditModification(txt, event);};
getMessage("Download {0}", function(msg) {
txt.setAttribute("aria-label", new GwtMessage().format(msg, name));
});
txt.href='sys_attachment.do?sys_id=' + sysid + '&sysparm_this_url=' + thisURL;
txt.setAttribute('data-id', sysid);
txt.style.display = 'inline';
txt.inPlaceEdit({
selectOnStart: true,
turnClickEditingOff: true,
onBeforeEdit: function() {
txt.lastAriaLabel = txt.getAttribute("aria-label");
txt.removeAttribute("aria-label");
txt.setAttribute("role", "textbox");
},
onEditCancelled: function() {
txt.removeAttribute("role");
if (txt.lastAriaLabel) {
txt.setAttribute("aria-label", txt.lastAriaLabel);
}
},
onAfterEdit: function(newName) {
var oldName = this.oldValue;
var ga = new GlideAjax('AttachmentAjax');
ga.addParam('sysparm_type', 'initialRename');
ga.addParam('sysparm_value', sysid);
ga.addParam('sysparm_name', newName);
ga.getXML(function(response) {
var answer = response.responseXML.documentElement.getAttribute("answer");
if (answer !== '0')
alert(new GwtMessage().getMessage("Renaming attachment {0} to new name {1} is not allowed", oldName, newName));
$$('a[data-id="' + sysid + '"]').each(function(elem){
if ('innerText' in elem)
elem.innerText = (answer === '0') ? newName : oldName;
else
elem.textContent = (answer === '0') ? newName : oldName;
});
updateAriaLabels(sysid, newName);
});
txt.removeAttribute("role");
}
});
txt.style.marginRight = "5px";
var attachList = $("header_attachment_list");
if (attachList && attachList.hasClassName("with-ellipsis"))
addEllipsisStyle(txt);
span.appendChild(txt);
if (showRename == 'true') {
var renameAttachment = $(cel('a'));
renameAttachment.className = 'attachment rename_' + sysid;
renameAttachment.href="#";
renameAttachment.setAttribute("role", "button");
getMessage("Rename {0}", function(msg) {
renameAttachment.setAttribute("aria-label", new GwtMessage().format(msg, name));
});
renameAttachment.onclick = function() {
txt.beginEdit();
};
renameAttachment.innerHTML = getMessage('[rename]');
span.appendChild(renameAttachment);
}
if (showView == "true") {
var blank = document.createTextNode(" ");
span.appendChild(blank);
var view = cel("a");
view.href="#";
var setAriaLabel = function(msg) {
view.setAttribute("aria-label", new GwtMessage().format(msg, name));
};
var downloadAttachment = NOW && NOW.g_forceDownloadAttachments;
if (downloadAttachment)
getMessage("Download {0}", setAriaLabel);
else
getMessage("View {0}", setAriaLabel);
var newText = document.createTextNode(downloadAttachment ? getMessage("[download]") : getMessage("[view]"));
view.appendChild(newText);
view.className = "attachment view_" + sysid;
if (showPopup == "false")
view.href = "sys_attachment.do?sys_id=" + sysid + "&view=true";
else
view.onclick = function() {
tearOffAttachment(sysid)
};
span.appendChild(view);
span.appendChild(blank);
}
var storage = cel('li');
storage.className = 'attachment_list_items';
storage.appendChild(span);
if (attachList)
attachList.appendChild(storage);
var header_attachment = $('header_attachment');
if (header_attachment) {
_frameChanged();
}
var ga = new GlideAjax('AttachmentAjax');
ga.addParam('sysparm_type', 'attachmentParentSysId');
ga.addParam('sysparm_value', sysid);
ga.getXMLAnswer(changeCount, null, 'increase');
addEllipsesToAttachments();
adjustAttachmentsVisibility();
}
function getCurrentPageURL() {
return encodeURIComponent(window.location.pathname.substr(1) + window.location.search);
}
function updateAriaLabels(sysid, newName) {
getMessage(["Download {0}", "View {0}", "Rename {0}"], function(msg) {
var newDownloadText = new GwtMessage().format(msg["Download {0}"], newName);
var newViewText = new GwtMessage().format(msg["View {0}"], newName);
var newRenameText = new GwtMessage().format(msg["Rename {0}"], newName);
$$('a[data-id="' + sysid + '"]').each(function(elem) {
elem.setAttribute("aria-label", newDownloadText);
})
$$('.view_' + sysid).each(function(elem) {
elem.setAttribute("aria-label", newViewText);
})
$$('.rename_' + sysid).each(function(elem) {
elem.setAttribute("aria-label", newRenameText);
})
});
}
function addEllipsesToAttachments() {
var list = document.getElementById('header_attachment_list');
if (!list)
return;
var more = document.getElementById('more_attachments');
if (more) {
if (list.scrollHeight > list.clientHeight * 2)
setElementStyle(more, 'display:block');
else
setElementStyle(more, 'display:none');
}
}
function setElementStyle(elm, rules) {
window.requestAnimationFrame(function() {
elm.style.cssText = rules;
});
}
function addAttachmentNameToDialog(id, fileName, canDelete, createdBy, createdOn, contentType, iconPath) {
if ($('attachment') == null)
return;
var encryptCheck = gel("encrypt_checkbox");
if (encryptCheck) {
encryptCheck.checked = false;
$('sysparm_encryption_context').value = "";
}
gel("please_wait").style.display = "none";
if (typeof id == "undefined")
return;
var noAttachments = gel("no_attachments");
if (noAttachments.style.display == "block")
noAttachments.style.display = "none";
var table = gel("attachment_table_body");
var tr = cel("tr");
var td = cel("td");
td.style.whiteSpace = "nowrap";
td.colspan = "2";
if (canDelete) {
var input = cel("input");
var checkId = "sys_id_" + id;
input.name = checkId;
input.id = checkId;
input.type = "checkbox";
input.onclick = function() {setRemoveButton(gel(checkId));};
td.appendChild(input);
gel("delete_button_span").style.display = "inline";
var text = document.createTextNode(" ");
td.appendChild(text);
input = cel("input");
input.type = "hidden";
input.name = "Name";
input.value = "false";
td.appendChild(input);
}
var anchor = cel("a");
anchor.style.marginRight = "4px";
var thisURL = getCurrentPageURL();
anchor.href = "sys_attachment.do?sys_id=" + id + "&sysparm_this_url=" + thisURL;
anchor.title = " " + createdBy + "  " + createdOn;
var imgSrc = iconPath;
var img = cel("img");
img.src = imgSrc;
img.alt = anchor.title;
anchor.appendChild(img);
var text = $(cel('a'));
text.style.display = "inline";
getMessage("Download {0}", function(msg) {
text.setAttribute("aria-label", new GwtMessage().format(msg, fileName));
});
text.href='#';
text.href = "sys_attachment.do?sys_id=" + id + "&sysparm_this_url=" + thisURL;
text.onkeydown = function(event){return allowInPlaceEditModification(text, event);};
text.style.marginRight = "5px";
text.style.maxWidth = "75%";
text.style.display = "inline-block";
text.style.overflow = "hidden";
text.style.verticalAlign = "middle";
if ('innerText' in text)
text.innerText = fileName;
else
text.textContent = fileName;
text.setAttribute("data-id", id);
text.inPlaceEdit({
selectOnStart: true,
turnClickEditingOff: true,
onBeforeEdit: function() {
text.lastAriaLabel = text.getAttribute("aria-label");
text.removeAttribute("aria-label");
text.setAttribute("role", "textbox");
},
onEditCancelled: function() {
text.removeAttribute("role");
if (text.lastAriaLabel) {
text.setAttribute("aria-label", txt.lastAriaLabel);
}
},
onAfterEdit: function(newName) {
var ga = new GlideAjax('AttachmentAjax');
ga.addParam('sysparm_type', 'rename');
ga.addParam('sysparm_value', id);
ga.addParam('sysparm_name', newName);
ga.getXML();
$$('a[data-id="' + id + '"]').each(function(elem){
if ('innerText' in elem)
elem.innerText = newName;
else
elem.textContent = newName;
});
$$('span[data-id="' + id + '"]').each(function(el){
if ('innerText' in el)
el.innerText = newName;
else
el.textContent = newName;
});
updateAriaLabels(id, newName);
text.removeAttribute("role");
}
});
if (contentType == "text/html")
anchor.target = "_blank";
td.appendChild(anchor);
td.appendChild(text);
if ($('ni.show_rename_link').value) {
var renameAttachment = $(cel('a'));
renameAttachment.className = 'attachment';
renameAttachment.href = '#';
renameAttachment.setAttribute("role", "button");
getMessage("Rename {0}", function(msg) {
renameAttachment.setAttribute("aria-label", new GwtMessage().format(msg, fileName));
});
renameAttachment.onclick = function() {
text.beginEdit();
};
renameAttachment.innerHTML = getMessage('[rename]');
td.appendChild(renameAttachment);
}
var showView = gel("ni.show_attachment_view").value;
if (showView == "true") {
var blank = document.createTextNode(" ");
tr.appendChild(blank);
var view = cel("a");
href="#";
var setAriaLabel = function(msg) {
view.setAttribute("aria-label", new GwtMessage().format(msg, name));
};
var downloadAttachment = NOW && NOW.g_forceDownloadAttachments;
if (downloadAttachment)
getMessage("Download {0}", setAriaLabel);
else
getMessage("View {0}", setAriaLabel);
var newText = document.createTextNode(downloadAttachment ? getMessage("[download]") : getMessage("[view]"));
view.appendChild(newText);
view.className = "attachment";
if (showPopup == "false")
view.href = "sys_attachment.do?sys_id=" + id + "&view=true";
else
view.onclick = function() {
tearOffAttachment(id)
};
td.appendChild(blank);
td.appendChild(view);
}
var showPopup = gel("ni.show_attachment_popup").value;
tr.appendChild(td);
table.appendChild(tr);
var alert508 = "$[GlideAccessibility.isEnabled()]";
if (alert508 == 'true')
alert(fileName + " " + anchor.title);
}
function computeAttachmentWidth() {
var temp = $('header_attachment_list').select('li');
var totalWidth = 0;
for (var i = 0; i < temp.length; i++) {
totalWidth += temp[i].getWidth();
}
return totalWidth;
}
function updateAttachmentCount(sysid) {
var ga = new GlideAjax('AttachmentAjax');
ga.addParam('sysparm_type', 'attachmentCount');
ga.addParam('sysparm_value', sysid);
ga.getXMLAnswer(numberOfAttachments, null, sysid);
}
function numberOfAttachments(answer, sysid) {
var number = parseInt(answer);
var buttons = $$('.attachmentNumber_' + sysid);
if (buttons[0] == undefined)
$('header_attachment_list_label').down().innerHTML = number;
else {
for (var i = 0; i < buttons.length; i++) {
buttons[i].innerHTML = number;
}
}
}
function getCurrentAttachmentNumber(sysid) {
if ($$('.attachmentNumber_' + sysid)[0] == undefined) {
if ($('header_attachment_list_label') == undefined)
return undefined;
else
return $('header_attachment_list_label').down().innerHTML;
}
return $$('.attachmentNumber_' + sysid)[0].innerHTML;
}
function updateAttachmentCount2(number, sysid) {
var buttons = $$('.attachmentNumber_' + sysid);
if (buttons[0] == undefined)
$('header_attachment_list_label').down().innerHTML = number;
else {
for (var i = 0; i < buttons.length; i++) {
buttons[i].innerHTML = number;
}
}
showHidePlusMore(number);
}
function getVisibleAttachmentsLimit() {
return window.NOW.attachment.overflow_limit || 3;
}
function getPlusMoreAttachmentList() {
var attachList = $("header_attachment_list");
return !attachList || !attachList.hasClassName("with-plus-more") ? false : attachList;
}
function showHidePlusMore(number) {
var header_attachment = $('header_attachment');
if (!header_attachment)
return;
var plusMore = header_attachment.down('.plus_more');
var limit = getVisibleAttachmentsLimit();
plusMore.down('.badge').innerHTML = "+" + (number - limit);
if (number <= limit)
plusMore.addClassName("hidden");
else
plusMore.removeClassName("hidden");
adjustAttachmentsVisibility();
}
function adjustAttachmentsVisibility() {
var attachList = getPlusMoreAttachmentList();
if (!attachList)
return;
var attachmentsFound = 0;
var limit = getVisibleAttachmentsLimit();
attachList.select('.attachment_list_items').each(function(elem) {
var attachment = elem.down('span');
if (attachment && attachment.innerHTML)
attachmentsFound++;
if (attachmentsFound <= limit)
elem.removeClassName('hidden');
else
elem.addClassName('hidden');
});
}
function changeCount(sysid, type) {
var number = getCurrentAttachmentNumber(sysid);
if (number != undefined) {
if (type == 'increase')
number++;
else
number--;
updateAttachmentCount2(number, sysid);
}
}
function deleteAttachment(sysid) {
var gr = new GlideRecord('sys_attachment');
var parentRecord = recordAttachmentBelongsTo(sysid);
gr.addQuery('sys_id', sysid);
gr.query();
if (gr.next()) {
if (confirmDeletion(gr.file_name, sysid)) {
var ol = GlideOverlay.get('attachment_manager_overlay');
alert(ol._box.select('div[data-id="' + sysid + '"]')[0].up().up().inspect());
ol._box.select('div[data-id="' + sysid + '"]')[0].up().up().remove();
ol.autoDimension();
$("attachment_" + sysid).remove();
if (numberOfAttachments(gr.table_sys_id) == 1) {
hideObject($("header_attachment_list_label"));
var line = $("header_attachment_line");
if (line) {
line.setStyle({
visibility: "hidden",
display: "none"
});
}
$("header_attachment").style.height = "auto";
ol.close();
}
gr.deleteRecord();
updateAttachmentCount(parentRecord);
}
}
}
function saveAttachment(tableName, sys_id, allowAttachment) {
var g_dialog = new GlideModal('attachment', false, 500);
g_dialog.setTitle(getMessage('Attachments'));
g_dialog.setPreference('target_table', tableName);
g_dialog.setPreference('target_sys_id', sys_id);
g_dialog.setPreference('focusTrap', true);
if (allowAttachment)
g_dialog.setPreference('sc_override', 'true');
g_dialog.setPreference('attachment_disabled',
(window["AttachmentUploader"] ?  AttachmentUploader.isAttachmentDisabled() : "false"));
g_dialog.setPreference('focusTrap', true);
g_dialog.on("closeconfirm", _saveAttachmentConfirm);
g_dialog.render();
}
function _saveAttachmentConfirm(dialog) {
var attachmentRows = $$('.attachmentRow');
var value = '';
for (var i = 0; i < attachmentRows.length; i++) {
if (isMSIE) {
var files = attachmentRows[i].select('input')[0].getValue();
if (!files.empty())
value += files + "\n";
} else {
var files = attachmentRows[i].select('input')[0].files;
for (var j = 0; j < files.length; j++) {
if (files[j] != null) {
value += files[j].name + "\n";
}
}
}
}
if (!value.empty())
if (!confirm(getMessage("Close before uploading attachments?") + "\n" + value.substring(0, value.length - 1)))
return false;
_saveAttachmentClose();
return true;
}
function _saveAttachmentClose() {
var modified = $("attachments_modified");
if (modified) {
var attachmentsModified = modified.value;
if (attachmentsModified != "true")
return;
}
if (typeof g_form == "undefined")
return;
if (g_form.newRecord)
g_form.modified = true;
if (typeof GlideLists2 == "undefined")
return;
for (var id in GlideLists2) {
var list = GlideLists2[id];
if (list.getTableName() === 'sys_attachment')
list.refresh();
}
}
function allowInPlaceEditModification(elem, event) {
var length = (elem.textContent != null) ? elem.textContent.length : elem.innerText.length;
var max_length = maximumCharacterLimit();
if (length >= max_length) {
var keyCode = (event) ? event.keyCode : window.event.keyCode;
switch (keyCode) {
case Event.KEY_LEFT:
case Event.KEY_RIGHT:
case Event.KEY_UP:
case Event.KEY_DOWN:
case Event.KEY_BACKSPACE:
case Event.KEY_DELETE:
return true;
default:
var key = "Filename has reached the character limit of {0}";
var gMessage = new GwtMessage();
gMessage.fetch([key], function(msgs) {
var msg = gMessage.format(msgs[key], max_length);
alert(msg);
});
return false;
}
}
return true;
}
function maximumCharacterLimit() {
var f = $('header_attachment_list');
if (f)
return f.getAttribute('data-max-filename-length');
return 100;
}
function confirmDeletion(file_name, sysid) {
var r = confirm("Are you sure you want to delete "
+ file_name
+ "?");
return r;
}
function saveFileAttachment(tableName, gotourl, options) {
var options = options || {};
var form = document.forms[tableName+'.do'];
var viewwidget = form['sysparm_view'];
var runOnSubmit = !options.skipOnSubmit;
if (viewwidget)
gotourl += '&sysparm_view=' + viewwidget.value;
form.sys_action.value = 'sysverb_check_save';
addInput(form, 'HIDDEN', 'sysparm_goto_url', gotourl);
var okToSubmit = true;
if (typeof form.onsubmit == "function")
if (runOnSubmit)
okToSubmit = form.onsubmit();
else
g_form.submitted = true;
if (okToSubmit)
form.submit();
return false;
}
function deleteFileAttachment(attachment_id, field_input_id) {
var ajax = new GlideAjax("AttachmentAjax");
ajax.addParam("sysparm_value", attachment_id);
ajax.addParam("sysparm_type", "delete");
ajax.getXML(doNothing);
var attachmentspan = $(attachment_id + "_attachment");
if (attachmentspan)
attachmentspan.parentNode.removeChild(attachmentspan);
if (field_input_id) {
var editdiv = gel('edit.' + field_input_id);
if (editdiv)
editdiv.parentNode.removeChild(editdiv);
var noattachmentspan = $(field_input_id + "_noattachment");
if (noattachmentspan)
noattachmentspan.style.visibility = "visible";
var input = gel(field_input_id);
if (input && input.value) {
input.value = '';
onChangeLabelProcess(field_input_id);
}
}
return false;
}
function pushNotAvailableMessage(attachmentName) {
g_form.addErrorMessage(new GwtMessage().getMessage("The file <b> {0} </b> did not pass security scan and cannot be downloaded", attachmentName.escapeHTML()));
}
function validateSizeAndExt(field) {
var form = $('attach_new_file');
var maxSize = (form.max_size && form.max_size.value) ? form.max_size.value : 0;
var fileTypes = (form.file_types && form.file_types.value) ? form.file_types.value : "";
var file = field.files[0];
var gMessage = new GwtMessage();
var allowedSize = maxSize * 1048576;
var warningMessages = [];
if (file.size === 0)
warningMessages.push(gMessage.getMessage("Attachment is empty."));
if (file.size > allowedSize && allowedSize !== 0)
warningMessages.push(gMessage.getMessage("{0} is {1}. The maximum file size is {2}.", file.name, getDisplaySize(file.size), getDisplaySize(allowedSize)));
var fileExtension = file.name.split(".").length > 1 ? file.name.split(".").pop() : "";
var allowedExtensions = fileTypes.length === 0 ? [] : fileTypes.split(",");
var allowedExtensionsLength = allowedExtensions.length;
var validExtension = allowedExtensionsLength === 0;
for (var i=0; i < allowedExtensionsLength; i++) {
if (fileExtension.toLowerCase() === allowedExtensions[i].trim().toLowerCase()) {
validExtension = true;
break;
}
}
if (!validExtension)
warningMessages.push(gMessage.getMessage("{0} has a prohibited file extension.", file.name));
if (warningMessages.length > 0) {
alert(warningMessages.join("\n"));
field.clear();
}
}
;
/*! RESOURCE: /scripts/functions_calendar.js */
function nextCalendarAction(duration, year, month, day, calendarID, styleField, event) {
var form = document.getElementsByName('dash_form')[0];
if (form) {
var name = form.dashboard_name.value;
var url = "sys_dashboard_template.do?";
url += "sysparm_query=name=" + name;
url += "&sysparm_calview="+duration;
url += "&sysparm_year="+year;
url += "&sysparm_month="+month;
url += "&sysparm_day="+day;
var viewwidget = form['sysparm_view'];
if (viewwidget)
url += '&sysparm_view=' + viewwidget.value;
window.location = url;
} else {
form = document.getElementsByName('calendarform')[0];
if (form == null) {
if (typeof $j != "undefined" && calendarID != null && calendarID.length) {
var element = event.srcElement;
if (!element)
element = event.target;
var content = $j(element).closest(".report_content");
if (content.length) {
var cstyle = null;
media = document.getElementsByName('sysparm_calstyle_choice');
if (media != null) {
for (var i = 0; i < media.length; i++) {
var r = media[i];
if (r.checked) {
cstyle = r.value;
break;
}
}
}
if (!cstyle) {
media = $("sysparm_calstyle" + calendarID);
if (media != null)
cstyle = media.value;
}
var params = "sysparm_calview=" + duration;
params += "&sysparm_year=" + year;
params += "&sysparm_month=" + month;
params += "&sysparm_day=" + day;
params += "&sysparm_calstyle=" + cstyle;
drillReport(content.parent(), calendarID, "", params);
return;
}
}
form = document.getElementsByName('reportform_control')[0];
}
if (form == null) {
form = document.getElementsByName('history')[0];
if (form != null) {
addInput(form, 'HIDDEN', 'sysparm_stack', "no");
}
}
if (form != null) {
addInput(form, 'HIDDEN', 'sysparm_calview', duration);
addInput(form, 'HIDDEN', 'sysparm_year', year);
addInput(form, 'HIDDEN', 'sysparm_month', month);
addInput(form, 'HIDDEN', 'sysparm_day', day);
var media = $('sysparm_media');
if (media != null) {
addInput(form, 'HIDDEN', 'sysparm_media', media.value);
}
media = $('sysparm_view');
if (media != null) {
addInput(form, 'HIDDEN', 'sysparm_view', media.value);
}
media = document.getElementsByName('sysparm_calstyle_choice');
if (media != null) {
for (var i = 0; i < media.length; i++) {
var r = media[i];
if (r.checked) {
addInput(form, 'HIDDEN', 'sysparm_calstyle', r.value);
break;
}
}
}
media = $('sysparm_calstyle');
if (media != null) {
addInput(form, 'HIDDEN', 'sysparm_calstyle', media.value);
}
if (typeof form.onsubmit == "function")
form.onsubmit();
form.submit();
} else {
var url = "calendar_view.do?";
url += "sysparm_calview="+duration;
url += "&sysparm_year="+year;
url += "&sysparm_month="+month;
url += "&sysparm_day="+day;
if (styleField)
url += "&sysparm_calstyle="+styleField;
window.location = url;
}
}
}
;
/*! RESOURCE: /scripts/functions_email.js */
function sendEmail() {
var form = document.forms['emailclient'];
addInput(form, 'HIDDEN', 'EMAIL-CLIENT', 'send');
if (typeof form.onsubmit == "function") {
form.onsubmit();
}
form.submit();
}
function mailTo(field) {
var nameField = $(field);
if (nameField && nameField.value) {
window.top.location = "mailto:" + nameField.value;
}
}
function setCannedText(selectBox) {
var theOption = selectBox.options[selectBox.selectedIndex];
var messageText = theOption.value;
var body = $('message.text');
if (tiny_html_editor && typeof tinymce != "undefined") {
tinymce.EditorManager.activeEditor.setContent(messageText);
} else {
body.value = messageText;
if (body.htmlArea)
body.htmlArea._doc.body.innerHTML = messageText;
}
}
function appendCannedText(selectBox) {
var theOption = selectBox.options[selectBox.selectedIndex];
var messageText = theOption.value;
if (!tiny_html_editor || typeof tinymce == "undefined") {
return;
}
tinymce.EditorManager.activeEditor.execCommand('mceInsertContent', false, messageText);
jQuery(selectBox).select2("val",'');
}
function isEmailValid(value){
var problemMsg = isEmailValidWithReason(value);
if (problemMsg != "") {
jslog("isEmailValid: " + problemMsg);
return false;
}
return true;
}
function isEmailValidWithReason(value) {
var localPartChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%*/?|^{}`~&'+-=_.";
var domainChars =    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.";
if (value.indexOf("@") == -1)
return "missing @ sign";
var s = value.split("@");
if (s.length != 2)
return "too many at signs";
if (!containsOnlyChars(localPartChars, s[0]))
return "invalid character before the at sign";
if (s[0].length < 1)
return "at least one character must be before the at sign";
if (s[0].substr(0,1) == ".")
return "period cannot be the first character";
if (s[0].substr(s[0].length-1,1) == ".")
return "period cannot be the last character before the at sign";
if (!containsOnlyChars(domainChars, s[1]))
return "invalid character after the at sign";
var periodIndex = s[1].indexOf(".");
if (periodIndex == -1)
return "missing period after the at sign";
if (periodIndex == 0)
return "period cannot be the first character after the at sign";
var periods = s[1].split(".");
var lastPeriod = periods[periods.length-1];
if (lastPeriod.length < 1)
return "must be at least 1 character after the last period";
if (!isAlphaNum(s[1].substr(0,1)))
return "the first character after the at sign must be alphanumeric";
if (!isAlphaNum(s[1].substr(s[1].length-1,1)))
return "the last character must be alphanumeric";
return "";
}
;
/*! RESOURCE: /scripts/functions_user_image.js */
function saveUserImage(tableName, gotourl) {
var sysparmRecordScope = g_form.getValue("sysparm_record_scope");
gotourl = gotourl.replace("$sysparm_record_scope", sysparmRecordScope);
var form = document.forms[tableName+'.do'];
var viewwidget = form['sysparm_view'];
if (viewwidget)
gotourl += '&sysparm_view=' + viewwidget.value;
form.sys_action.value = 'sysverb_check_save';
addInput(form, 'HIDDEN', 'sysparm_goto_url', gotourl);
var okToSubmit = true;
if (typeof form.onsubmit == "function")
okToSubmit = form.onsubmit();
if (okToSubmit)
form.submit();
return false;
}
function validateVideoFile(fileExtensions) {
var file = getAttachedFile();
var isValid = validateWithExtensions(file.value, fileExtensions);
if (!isValid) {
alert(file.value + " isn't a recognized video format");
file.clear();
return false;
}
isValid = validateSize(file);
return isValid;
}
function validateAudioFile(fileExtensions) {
var file = getAttachedFile();
var isValid = validateWithExtensions(file.value, fileExtensions);
if (!isValid) {
alert(file.value + " isn't a recognized audio format");
file.clear();
return false;
}
isValid = validateSize(file);
return isValid;
}
function getAttachedFile() {
var widget = $("attachFile");
if (!widget)
return false;
return widget;
}
function validateWithExtensions(fileName, fileExtensions) {
var action = $('sys_action');
if ('sysverb_cancel' == action.value)
return true;
return endsWithVideoExtension(fileName, fileExtensions);
}
function endsWithVideoExtension(fileName, fileExtensions) {
var extensionArray = fileExtensions.split(",");
var dot = fileName.lastIndexOf('.')+1;
var suffix = fileName.substring(dot);
suffix = suffix.toLowerCase();
for (var i = 0; i < extensionArray.length; i++) {
var element = extensionArray[i];
if (element == suffix)
return true;
}
return false;
}
function validateImageFile() {
var action = $('sys_action');
if ('sysverb_cancel' == action.value)
return true;
var file = getAttachedFile();
var isValid = endsWithImageExtension(file.value);
if (!isValid) {
alert(file.value + " isn't a recognized image file format");
file.clear();
return false;
}
var hasValidSize = validateSize(file);
return hasValidSize;
}
var VALID_IMAGE_SUFFIX = ["jpg", "jpeg", "png", "bmp", "gif", "ico", "svg"];
function endsWithImageExtension(filename) {
var dot = filename.lastIndexOf('.')+1;
var suffix = filename.substring(dot);
suffix = suffix.toLowerCase();
for (var i = 0; i < VALID_IMAGE_SUFFIX.length; i++) {
var element = VALID_IMAGE_SUFFIX[i];
element = element.toLowerCase();
if (element == suffix)
return true;
}
return false;
}
function getDisplaySize(sizeInBytes) {
var kilobytes = Math.round(sizeInBytes / 1024);
if (kilobytes < 1)
kilobytes = 1;
var reportSize = kilobytes + "K";
if (kilobytes > 1024)
reportSize = Math.round(kilobytes / 1024) + "MB";
return reportSize;
}
function validateSize(input){
var form = $('attach_new_file');
var maxSize = (form.max_size && form.max_size.value) ? form.max_size.value : 1024;
var file = input.files[0];
var allowedSize = maxSize * 1048576;
var warningString = "";
if (file.size == 0){
warningString += "Attachment is empty";
}
if (file.size > allowedSize){
warningString += file.name + " is " + getDisplaySize(file.size) + ". The maximum file size is " + getDisplaySize(allowedSize) + ".\n";
}
if (warningString != "") {
alert(warningString);
input.clear();
return false;
}
return true;
}
function deleteUserImage(image_id, replacement) {
var ajax = new GlideAjax("AttachmentAjax");
ajax.addParam("sysparm_value", image_id);
ajax.addParam("sysparm_type", "delete");
ajax.getXML(doNothing);
var image = $(image_id);
if (image) {
image.src = "images/s.gif";
image.alt = "";
}
var delspan = $(image_id+"_delete");
if (delspan)
delspan.innerHTML = '';
var addanchor = $(image_id+"_update");
if (addanchor)
addanchor.innerHTML = "";
var imagespan = $(image_id+"_image");
if (imagespan)
imagespan.style.visibiity = "hidden";
var noimagespan = $(image_id+"_noimage");
if (noimagespan)
noimagespan.style.visibility = "";
return false;
}
;
/*! RESOURCE: /scripts/formatting.js */
function formatPhone(field) {
field.value = trim(field.value);
var ov = field.value;
var v = "";
var x = -1;
if (0 < ov.length && '+' != ov.charAt(0)) {
var n = 0;
if ('1' == ov.charAt(0))
ov = ov.substring(1, ov.length);
for (var i = 0; i < ov.length; i++) {
var ch = ov.charAt(i);
if (ch >= '0' && ch <= '9') {
if (n == 0)
v += "(";
else if (n == 3)
v += ") ";
else if (n == 6)
v += "-";
v += ch;
n++;
}
if (! (ch >= '0' && ch <= '9') && ch != ' ' && ch != '-' && ch != '.' && ch != '(' && ch != ')') {
x = i;
break;
}
}
if (x >= 0)
v += " " + ov.substring(x, ov.length);
if (n == 10 && v.length <= 40)
field.value = v;
}
return true;
}
function formatClean(num) {
var sVal = '';
var nVal = num.length;
var sChar = '';
var nChar = '';
try {
for (var i = 0; i < nVal; i++) {
sChar = num.charAt(i);
nChar = sChar.charCodeAt(0);
if (sChar == '-' || sChar == getDecimalSeparator() || ((nChar >= 48) && (nChar <= 57)))
sVal += num.charAt(i);
}
}
catch (exception) {
alertError("formatClean", exception);
}
return sVal;
}
function formatCurrency(num) {
var sVal = '';
var minus = '';
if (num.lastIndexOf("-") == 0)
minus = '-';
if (num.lastIndexOf(".") < 0)
num = num + '00';
num = formatClean(num);
sVal = minus + formatDollar(num, getGroupingSeparator()) + getDecimalSeparator() + formatCents(num);
return sVal;
}
function formatNumber(num) {
if (num.length == 0)
return num;
num = num + "";
var sVal = '';
var minus = '';
var samount = '';
try {
if (num.lastIndexOf("-") == 0)
minus = '-';
num = formatClean(num);
if (num.indexOf("-") == 0)
num = num.substring(1);
num = "0" + num;
var fraction = parseFraction(num + "");
num = parseInt(num, 10);
samount = num + "";
for (var i = 0; i < Math.floor((samount.length - (1 + i)) / 3); i++)
samount = samount.substring(0, samount.length - (4 * i + 3)) + getGroupingSeparator() + samount.substring(samount.length - (4 * i + 3));
if (fraction.length > 0) {
fraction = getDecimalSeparator() + fraction;
samount += fraction;
}
} catch (exception) {
alertError("Format Number", exception);
}
return minus + samount;
}
function parseFraction(num) {
var index = num.indexOf(getDecimalSeparator());
if (index == -1)
return "";
return num.substring(index + 1);
}
function formatCents(amount) {
var cents = '';
try {
amount = parseInt(amount, 10);
var samount = amount + "";
if (samount.length == 0)
return '00';
if (samount.length == 1)
return '0' + samount;
if (samount.length == 2)
return samount;
cents = samount.substring(samount.length - 2, samount.length);
}
catch (exception) {
alertError("Format Cents", e);
}
return cents;
}
function formatDollar(amount) {
var samount = "";
try {
amount = parseInt(amount, 10);
samount = amount + "";
if (samount.length < 3)
return 0;
samount = samount.substring(0, samount.length - 2);
for (var i = 0; i < Math.floor((samount.length - (1 + i)) / 3); i++)
samount = samount.substring(0, samount.length - (4 * i + 3)) + getGroupingSeparator() + samount.substring(samount.length - (4 * i + 3));
}
catch (exception) {
alertError("Format Dollar", e);
}
return samount;
}
function padLeft(value, width, fill) {
value = value + '';
while (value.length < width)
value = fill + value;
return value;
}
function getDecimalSeparator() {
if (g_user_decimal_separator)
return g_user_decimal_separator;
return ".";
}
function getGroupingSeparator() {
if (g_user_grouping_separator)
return g_user_grouping_separator;
return ",";
}
function alertError(MethodName, e) {
if (e.description == null)
alert(MethodName + " Exception: " + e.message);
else
alert(MethodName + " Exception: " + e.description);
}
;
/*! RESOURCE: /scripts/doctype/utils14.js */
function doNothing() {
}
function valueExistsInArray(val, array) {
for (var i = 0; i < array.length; i++) {
if (val == array[i])
return true;
}
return false;
}
function doubleDigitFormat(num) {
return padLeft(num, 2, "0");
}
function tripleDigitFormat(num) {
return padLeft(num, 3, "0");
}
function sGetHours(totalSecs) {
return parseInt(totalSecs / (60 * 60), 10);
}
function sGetMinutes(totalSecs) {
totalSecs -= (60*60)*sGetHours(totalSecs);
return parseInt(totalSecs / 60, 10);
}
function sGetSeconds(totalSecs) {
totalSecs -= (60*60)*sGetHours(totalSecs);
totalSecs -= (60)*sGetMinutes(totalSecs);
return parseInt(totalSecs, 10);
}
function isNumber(test) {
if (!test)
return false;
test = new String(test);
var _numer = test.search("[^0-9]");
return _numer == -1;
}
function isAlphaNum(thchar) {
return isAlpha(thchar) || isDigit(thchar);
}
function isAlpha(thchar){
return (thchar >= 'a' && thchar <= 'z\uffff')
|| (thchar >= 'A' && thchar <= 'Z\uffff') || thchar == '_';
}
function isDigit(thchar) {
return (thchar >= '0' && thchar <= '9');
}
function containsOnlyChars(validChars, sText) {
if (!sText)
return true;
for (var i = 0; i < sText.length; i++) {
var c = sText.charAt(i);
if (validChars.indexOf(c) == -1)
return false;
}
return true;
}
function getAttributeValue(element, attrName) {
return element.getAttribute(attrName);
}
function setAttributeValue(element, attrName, value) {
element.setAttribute(attrName, value);
}
function toggleDivDisplayAndReturn(divName) {
if (!divName)
return;
var div = $(divName);
if (!div)
return;
if (div.style.display == "none")
showObject(div);
else
hideObject(div);
return div;
}
function toggleDivDisplay(divName) {
toggleDivDisplayAndReturn(divName);
}
function toggleAttributeValue(element, attribute) {
if (element) {
var value = (element.getAttribute(attribute) === 'true');
element.setAttribute(attribute, (!value).toString());
}
}
function findParentByTag(element, tag) {
var ret;
while (element && element.parentNode && element.parentNode.tagName) {
element = element.parentNode;
if (element.tagName.toLowerCase() == tag.toLowerCase())
return element;
}
return ret;
}
function replaceAll(str, from, to) {
var idx = str.indexOf( from );
while ( idx > -1 ) {
str = str.replace( from, to );
idx = str.indexOf( from );
}
return str;
}
function useAnimation() {
if (isTouchDevice)
return false;
return true;
}
function expandEffect(el, duration, steps, stepCallback, completionCallback) {
if (!useAnimation()) {
showObject(el);
if (completionCallback)
completionCallback(el);
return;
}
var h;
if (el.originalHeight)
h = el.originalHeight;
else {
h = getHeight(el);
if (h == 0) {
showObject(el);
return;
}
el.originalHeight = h;
}
if (!duration)
duration = 70;
if (!steps)
steps = 14;
el.style.overflow = "hidden";
el.style.height = "1px";
el.style.display = "block";
el.style.visibility = "visible";
expandAnimationEffect(el, h, duration, steps, stepCallback,
completionCallback);
return h;
}
function expandAnimationEffect(el, height, duration, steps, stepCallback,
completionCallback) {
new Rico.Effect.Size( el.id, null, height, duration, steps, {
step: function() {
if (stepCallback)
stepCallback(el);
},
complete: function() {
_expandComplete(el, completionCallback);
}
});
}
function _expandComplete(el, completionCallback) {
el.style.overflow = "";
el.style.height = "auto";
if (completionCallback)
completionCallback(el);
_frameChanged();
}
function collapseEffect(el, duration, steps) {
if (!useAnimation()) {
hideObject(el);
return;
}
var h;
if (el.originalHeight)
h = el.originalHeight;
else {
h = el.offsetHeight;
el.originalHeight = h;
}
if (!duration)
duration = 70;
if (!steps)
steps = 14;
if (!h)
h = el.offsetHeight;
el.style.overflow = "hidden";
collapseAnimationEffect(el, h, duration, steps);
}
function collapseAnimationEffect(el, height, duration, steps) {
new Rico.Effect.Size( el.id, null, 1, duration, steps, {
complete: function() {
_collapseComplete(el, height);
}
});
}
function _collapseComplete(el, height) {
el.style.display = "none";
el.style.overflow = "";
el.style.height = height;
_frameChanged();
}
function getHeight(el) {
var item;
try {
item = el.cloneNode(true);
} catch (e) {
jslog("getHeight blew up... we caught the error and returned 0")
return 0;
}
var height = 0;
item.style.visibility = "hidden";
item.style.display = "block";
item.style.position = "absolute";
item.style.top = 0;
item.style.left = 0;
document.body.appendChild(item);
height = item.offsetHeight;
document.body.removeChild(item);
return height;
}
function getWidth(el) {
var item = el.cloneNode(true);
var width = 0;
item.style.visibility = "hidden";
item.style.display = "block";
item.style.position = "absolute";
item.style.top = 0;
item.style.left = 0;
document.body.appendChild(item);
width = item.offsetWidth;
document.body.removeChild(item);
return width;
}
function grabOffsetLeft(item) {
return getOffset(item,"offsetLeft")
}
function grabOffsetTop(item) {
return getOffset(item, "offsetTop")
}
function getOffset(item, attr) {
var parentElement = getFormContentParent();
var wb=0;
while(item) {
wb += item[attr];
item = item.offsetParent;
if (item == parentElement)
break;
}
return wb;
}
function grabScrollLeft(item) {
return getScrollOffset(item, "scrollLeft")
}
function grabScrollTop(item) {
return getScrollOffset(item, "scrollTop")
}
function getScrollOffset(item, attr) {
var parentElement = getFormContentParent();
var wb=0;
while (item && item.tagName && item != parentElement) {
wb += item[attr];
if (isMSIE)
item = item.offsetParent;
else
item = item.parentNode;
}
return wb;
}
function getValue(evt) {
var elem = evt.target;
if (!elem)
return null;
try {
return elem.options[elem.selectedIndex].value;
} catch (e) {
var msg = (typeof e == "string") ? e : ((e.message) ? e.message
: "Unknown Error");
alert("Unable to get data:\n" + msg);
}
return null;
}
function getEvent(event) {
return event;
}
function getEventCoords(e) {
var fudge = getFormContentParent();
var answer = Event.pointer(e);
answer = new Point(answer.x, answer.y);
if (fudge == document.body)
return answer;
answer.x += fudge.scrollLeft;
answer.y += fudge.scrollTop;
var fudgeTop = fudge.getStyle('top');
var fudgePos = fudge.getStyle('position');
if (fudgePos == 'absolute' && fudgeTop && fudgeTop.indexOf('px'))
answer.y -= parseInt(fudgeTop.replace('px',''));
return answer;
}
function getRelativeTop() {
var port = document.viewport;
var topLeft = new Point(port.getScrollOffsets().left, port
.getScrollOffsets().top)
var fudge = getFormContentParent();
if (fudge != document.body) {
topLeft.x += fudge.scrollLeft;
topLeft.y += fudge.scrollTop;
}
return topLeft;
}
function getRealEvent(e) {
if (isTouchDevice && isTouchEvent(e)) {
e = e.changedTouches[0];
}
return e;
}
function isTouchEvent(e) {
if (typeof e == 'undefined' || typeof e.changedTouches == 'undefined')
return false;
return true;
}
function isTouchRightClick(e) {
if (!isTouchEvent(e))
return false;
var hasTwoFingers = e.changedTouches.length > 1;
return hasTwoFingers;
}
function getTextValue(node) {
if (node.textContent)
return node.textContent;
var firstNode = node.childNodes[0];
if (!firstNode)
return null;
if (firstNode.data)
return firstNode.data;
return firstNode.nodeValue;
}
function getScrollX() {
return window.pageXOffset;
}
function getScrollY() {
return window.pageYOffset;
}
function getSrcElement(evt) {
return evt.target;
}
function addForm() {
var form = cel('form');
document.body.appendChild(form);
if (window.g_ck)
addHidden(form, "sysparm_ck", g_ck);
return form;
}
function addHidden(form, name, value) {
addInput(form, 'HIDDEN', name, value);
}
function addInput(form, type, name, value) {
var inputs = Form.getInputs(form, '', name);
if (inputs.length > 0) {
inputs[0].value = value;
return;
}
var opt = document.createElement('input');
opt.type = type;
opt.name = name;
opt.id = name;
opt.value = value;
form.appendChild(opt);
}
function getHiddenInputValuesMap(parent) {
var valuesMap = {}
var inputs = parent.getElementsByTagName('input');
for (var i = 0; i < inputs.length; i++) {
var input = inputs[i];
if (input.type.toLowerCase() != "hidden")
continue;
valuesMap[input.id] = input.value;
}
return valuesMap;
}
function appendSelectOption(select, value, label, index) {
var opt = document.createElement("option");
opt.value = value;
opt.appendChild(label);
if (index >= 0 && index != select.length)
select.insertBefore(opt, select.children[index]);
else
select.appendChild(opt);
return opt;
}
function copySelectOptionToIndex(select, opt, index) {
var label = opt.text;
opt.innerHTML = "";
opt.appendChild(document.createTextNode(label));
if (index >= 0 && index != select.length)
select.insertBefore(opt, select.children[index]);
else
select.appendChild(opt);
return opt;
}
function selectMenuItem(id, selectName) {
var selectMenu = document.getElementById(selectName);
if (!selectMenu)
return -1;
var options = selectMenu.options;
var selectItem = selectMenu.selectedIndex;
if (id) {
for (var i = 0; i < options.length; i++) {
var option = options[i];
if (option.value == id) {
selectItem = i;
break;
}
}
}
if (selectItem > 0) {
selectMenu.selectedIndex = selectItem;
if (selectMenu["onchange"]) {
selectMenu.onchange();
}
}
return selectItem;
}
function menuIsEmpty(selectName) {
var selectMenu = document.getElementById(selectName);
if (!selectMenu || selectMenu.selectedIndex <= 0)
return true;
return false;
}
function getBounds(obj, addScroll) {
var x = grabOffsetLeft(obj);
var y = grabOffsetTop(obj);
if (addScroll) {
x += getScrollX();
y += getScrollY();
}
this.absoluteRect = {
top : y,
left : x,
bottom : y + obj.offsetHeight,
right : x + obj.offsetWidth,
height : obj.offsetHeight,
width : obj.offsetWidth,
middleX : x + (obj.offsetWidth / 2),
middleY : y + (obj.offsetHeight / 2),
cbottom : y + obj.clientHeight,
cright : x + obj.clientWidth
};
return this.absoluteRect;
}
function guid(l) {
var l = l || 32, strResult = '';
while (strResult.length < l)
strResult += (((1 + Math.random() + new Date().getTime()) * 0x10000) | 0)
.toString(16).substring(1);
return strResult.substr(0, l);
}
function stopSelection(e) {
e.onselectstart = function() {
return false;
};
e.style.MozUserSelect = "none";
}
function restoreSelection(e) {
e.onselectstart = null;
e.style.MozUserSelect = "";
}
function getAttributeValue(element, name) {
if (!element.attributes)
return null;
var v = element.attributes.getNamedItem(name);
if (v == null)
return null;
return v.nodeValue;
}
function createImage(src, title, object, onClick) {
var img = cel('input');
img.type = 'image';
img.src = src;
img.title = title;
img.alt = title;
if (arguments.length == 4)
img.onclick = onClick.bindAsEventListener(object);
return img;
}
function createIcon(cls, title, object, onClick) {
var icn = cel('a');
icn.addClassName(cls);
icn.setAttribute('title', title);
icn.setAttribute('aria-label', title);
if (arguments.length == 4)
icn.onclick = onClick.bindAsEventListener(object);
return icn;
}
function getXMLString(node) {
var xml = "???";
if (node.xml) {
xml = node.xml;
} else if (window.XMLSerializer) {
xml = (new XMLSerializer()).serializeToString(node);
}
return xml;
}
function isLeftClick(e) {
return e.button == 0;
}
function formatMessage() {
if (arguments.length == 1)
return arguments[0];
var str = arguments[0];
var args = arguments;
if (arguments.length == 2 && typeof arguments[1] == 'object'
&& arguments[1] instanceof Array) {
args = [''].concat(arguments[1]);
}
var i = 0;
while (++i < args.length) {
str = str.replace( new RegExp( '\\{'+(i-1)+'\\}', 'g' ), args[i] );
}
return str;
}
function getFormattedDateAndTime(date) {
return getFormattedDate(date) + " " + getFormattedTime(date);
}
function getFormattedDate(date) {
var d = (date? date : new Date());
var curr_mon = d.getMonth() + 1;
var curr_day = d.getDate();
var curr_year = d.getYear() - 100;
return doubleDigitFormat(curr_mon) + "/" + doubleDigitFormat(curr_day)
+ "/" + doubleDigitFormat(curr_year)
}
function getFormattedTime(date) {
var d = (date? date : new Date());
var curr_hour = d.getHours();
var curr_min = d.getMinutes();
var curr_sec = d.getSeconds();
var curr_msec = d.getMilliseconds();
return doubleDigitFormat(curr_hour) + ":" + doubleDigitFormat(curr_min)
+ ":" + doubleDigitFormat(curr_sec) + " ("
+ tripleDigitFormat(curr_msec) + ")"
}
function showGoToLine(textAreaID) {
var e = gel("go_to_" + textAreaID)
if (e) {
showObjectInline(e);
gel("go_to_input_" + textAreaID).focus();
}
}
function gotoLineKeyPress(evt, textAreaObject, input) {
if (evt.keyCode == 13) {
Event.stop(evt);
gotoLinePopup(textAreaObject, input.value);
input.value = "";
hideObject(input.parentNode);
}
}
function gotoLinePopup(textAreaObject, lineText) {
if (lineText) {
lineText = trim(lineText);
if (lineText) {
var line = parseInt(lineText, 10);
g_form._setCaretPositionLineColumn(textAreaObject, line, 1);
}
}
}
function getBrowserWindowHeight() {
return window.innerHeight;
}
function getBrowserWindowWidth() {
return window.innerWidth;
}
var WindowSize = function() {
return {
width: getBrowserWindowWidth(),
height: getBrowserWindowHeight()
}
}
function getScrollBarWidthPx() {
var inner = cel("p");
inner.style.width = "100%";
inner.style.height = "200px";
var outer = cel("div");
outer.style.position = "absolute";
outer.style.top = "0px";
outer.style.left = "0px";
outer.style.visibility = "hidden";
outer.style.width = "200px";
outer.style.height = "150px";
outer.style.overflow = "hidden";
outer.appendChild(inner);
document.body.appendChild(outer);
var w1 = inner.offsetWidth;
outer.style.overflow = "scroll";
var w2 = inner.offsetWidth;
if (w1 == w2)
w2 = outer.clientWidth;
document.body.removeChild(outer);
return (w1 - w2);
}
function showOpticsDebugger() {
var mainWindow = getMainWindow();
if (mainWindow)
mainWindow.CustomEvent.fire('glide_optics_inspect_window_open');
}
function opticsLog(tablename, fieldname, message, oldvalue, newvalue) {
if (tablename === "ni") {
tablename = g_form.getUniqueValue();
fieldname = g_form.resolveNameMap(fieldname) || fieldname;
}
var info = {};
info.table = tablename;
info.field = fieldname;
info.message = message;
info.message_type = "static";
if (oldvalue && newvalue) {
info.oldvalue = oldvalue;
info.newvalue = newvalue;
info.message_type = "change";
}
info.type = 'log';
info.startTime = new Date();
if (g_form._pushAction)
g_form._pushAction(info);
CustomEvent.fire('glide_optics_inspect_log_message', info);
}
function handleAriaInvalidState(fieldId, fieldIsEmpty) {
if (!g_form || !fieldId) {
return;
}
var isFormSubmitAttempted = g_form.submitAttemptsCount > 0;
var visibleControls = g_form._getVisibleControls(fieldId);
var handleStateUpdate = true;
var displayNode = gel("sys_display." + fieldId);
if (displayNode && displayNode.classList.contains('element_reference_input')) {
var isList = displayNode.getAttribute('islist');
handleStateUpdate = (isList && isList === 'true');
}
if (visibleControls.length > 0 && isFormSubmitAttempted && handleStateUpdate) {
var ariaInvalid = fieldIsEmpty || false;
for (var i = 0; i < visibleControls.length; i++) {
visibleControls[i].setAttribute('aria-invalid', ariaInvalid);
}
}
}
;
/*! RESOURCE: /scripts/accessibility_tabindex.js */
addLoadEvent(function() {
$(document).on('keydown', '*[tabindex]:not(.multiLinePill), .glide_ref_item_link', function(event) {
if (event.keyCode != Event.KEY_RETURN)
return;
var element = event.element();
if (!element.hasAttribute('tabindex'))
return;
if (element.click) {
element.click();
var $parent = $j(element).parent();
if ($parent.hasClass('open')) {
var $items = $parent.find('.dropdown-menu li:visible a');
if ($items.length)
$items.eq(0).trigger('focus');
}
}
event.stop();
});
if (typeof jQuery != 'undefined') {
var KEY_SPACE = 32;
var KEY_ENTER = 13;
jQuery('[click-on-enter],[click-on-space]').on('keydown', function(event) {
var keyCode = event.keyCode || event.which;
var $this = jQuery(this);
if (!((keyCode === KEY_ENTER && $this.is('[click-on-enter]')) || (keyCode === KEY_SPACE && $this.is('[click-on-space]'))))
return;
setTimeout(function() {
$this.trigger('click');
},200);
if (keyCode === KEY_SPACE) {
event.stopPropagation();
event.preventDefault();
}
});
}
});
;
/*! RESOURCE: /scripts/accessibility_readonly.js */
addLateLoadEvent(function() {
document.body.on('click', 'input.disabled', blockValueChange);
function blockValueChange(evt, element) {
var type = element.type;
if (type.match('radio|checkbox')) {
element.checked = !element.checked;
evt.stop();
return false;
}
}
});
;
/*! RESOURCE: /scripts/doctype/accessibility/js_includes_doctype_accessibility.js */
/*! RESOURCE: /scripts/doctype/accessibility/ariaLiveService.js */
(function (window, document) {
window.NOW = window.NOW || {};
function ariaLivePolite(text, delay) {
setTimeout(_ariaLiveMessage, delay || 0, text, false);
}
function ariaLiveAssertive(text, delay) {
setTimeout(_ariaLiveMessage, delay || 0, text, true);
}
function _ariaLiveMessage(text, assertive) {
var ariaLiveId = !!assertive
? 'html_page_aria_live_assertive'
: 'html_page_aria_live_polite';
var ariaLive = document.getElementById(ariaLiveId);
if (!ariaLive)
return;
if (window.NOW.ariaLiveDisabled)
return;
if (ariaLive.children.length > 50 || (ariaLive.children.length > 0 && ariaLive.textContent.length > 10000))
ariaLive.children[0].remove();
var newMessage = document.createElement('div');
newMessage.innerText = text;
ariaLive.insertAdjacentElement('beforeend', newMessage);
}
CustomEvent.observe('global_aria_live_polite', ariaLivePolite);
CustomEvent.observe('global_aria_live_assertive', ariaLiveAssertive);
window.NOW.accessibility = window.NOW.accessibility || {};
window.NOW.accessibility['ariaLivePolite'] = ariaLivePolite;
window.NOW.accessibility['ariaLiveAssertive'] = ariaLiveAssertive;
})(window, document);
;
/*! RESOURCE: /scripts/doctype/accessibility/focusOutlineUtility.js */
(function (window, document) {
window.NOW = window.NOW || {};
function addClassById(target, className) {
modifyFocusOutline(target, className, true);
}
function removeClassById(target, className) {
modifyFocusOutline(target, className, false);
}
function onFocusAddMSHCOutline(target) {
addClassById(target, 'ms-high-contrast-outline');
}
function onBlurRemoveMSHCOutline(target) {
removeClassById(target, 'ms-high-contrast-outline');
}
function modifyFocusOutline(el, className, add) {
if (typeof el === "string") {
el = document.getElementById(el);
}
if (el) {
if (add) {
el.classList.add(className);
} else {
el.classList.remove(className);
}
}
}
function luminance(r, g, b) {
var a = [r, g, b].map(function (v) {
v /= 255;
return v <= 0.03928
? v / 12.92
: Math.pow( (v + 0.055) / 1.055, 2.4 );
});
return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
}
function calculateContrastRatio(rgb1, rgb2) {
var lum1 = luminance(rgb1[0], rgb1[1], rgb1[2]) + 0.05;
var lum2 = luminance(rgb2[0], rgb2[1], rgb2[2]) + 0.05;
return (lum1 > lum2)
? (lum1 / lum2)
: (lum2 / lum1);
}
function extractRGB(rgb) {
var re = RegExp(/\d{1,3}/, 'g');
var match;
var values = [];
while ((match = re.exec(rgb)) !== null && values.length < 3) {
values.push(match[0]);
}
return values;
}
function getContrastRatio(el) {
var computedStyle = getComputedStyle(el);
var color = computedStyle['color'];
var backgroundColor = computedStyle['background-color'];
var colorRGB = extractRGB(color);
var backgroundColorRGB = extractRGB(backgroundColor);
return calculateContrastRatio(backgroundColorRGB, colorRGB);
}
window.NOW.accessibility = window.NOW.accessibility || {};
window.NOW.accessibility['onFocusAddMSHCOutline'] = onFocusAddMSHCOutline;
window.NOW.accessibility['onBlurRemoveMSHCOutline'] = onBlurRemoveMSHCOutline;
})(window, document);
;
/*! RESOURCE: /scripts/doctype/accessibility/forms/cleanLabels.js */
(function (document) {
jQuery(function($j) {
var doc = $j(document);
doc.find('label[for]').each(function() {
var label = $j(this);
var forId = label.attr('for') || '';
if (forId === '')
return;
var inputElement = document.getElementById(forId);
if (
!inputElement ||
inputElement.hasAttribute('aria-label') ||
inputElement.hasAttribute('aria-labelledby') ||
((inputElement.type || '').toLowerCase() === 'hidden')
)
return;
var textElement = label.find('.label-text');
var text = textElement.length > 0 ? textElement.text() : '';
if (text !== '')
inputElement.setAttribute('aria-label', text);
})
});
})(document);
;
;
/*! RESOURCE: /scripts/classes/ajax/GlideURL.js */
var GlideURL = Class.create({
initialize: function(contextPath) {
this.contextPath = '';
this.params = new Object();
this.encodedString = '';
this.encode = true;
this.setFromString(contextPath ? contextPath : '');
if(typeof GlideTransactionScope != 'undefined')
GlideTransactionScope.appendTransactionScope(this.addParam.bind(this));
},
setFromCurrent: function() {
this.setFromString(window.location.href);
},
setFromString: function(href) {
var pos = href.indexOf('?');
if (pos < 0) {
this.contextPath = href;
return;
}
this.contextPath = href.slice(0, pos);
var hashes = href.slice(pos + 1).split('&');
var i = hashes.length;
while (i--) {
var pos = hashes[i].indexOf('=');
this.params[hashes[i].substring(0, pos)] = hashes[i].substring(++pos);
}
},
getContexPath: function() {
return this.contextPath;
},
getContextPath: function() {
return this.contextPath;
},
setContextPath: function(c) {
this.contextPath = c;
},
getParam: function(p) {
return this.params[p];
},
getParams: function() {
return this.params;
},
addParam: function(name, value) {
this.params[name] = value;
return this;
},
addToken: function() {
if (typeof g_ck != 'undefined' && g_ck != "")
this.addParam('sysparm_ck', g_ck);
return this;
},
deleteParam: function(name) {
delete this.params[name];
},
addEncodedString: function(s) {
if (!s)
return;
if (s.substr(0, 1) != "&")
this.encodedString += "&";
this.encodedString += s;
return this;
},
getQueryString: function(additionalParams) {
qs = this._getParamsForURL(this.params);
qs += this._getParamsForURL(additionalParams);
qs += this.encodedString;
if (qs.length == 0)
return "";
return qs.substring(1);
},
_getParamsForURL: function(params) {
if (!params)
return '';
var url = '';
for (var n in params) {
var p = params[n] || '';
url += '&' + n + '=' + (this.encode ? this._encodeUriQuery(p + '') : p);
}
return url;
},
_encodeUriQuery : function(val) {
return encodeURIComponent(val).
replace(/%40/gi, '@').
replace(/%3A/gi, ':');
},
getURL: function(additionalParams) {
var url = this.contextPath;
var qs = this.getQueryString(additionalParams);
if (qs)
url += "?" + qs;
return url;
},
setEncode: function(b) {
this.encode = b;
},
toString: function() { return 'GlideURL'; }
});
GlideURL.refresh = function() {
window.location.replace( window.location.href );
};
;
/*! RESOURCE: /scripts/ga_batch/js_includes_batchedga.js */
/*! RESOURCE: /scripts/ga_batch/batchedGlideAjax.js */
window.NOW.batchedGlideAjax = function batchedGlideAjax(toProcess) {
var batchGA = new GlideAjax("AJAXXMLHttpAggregator");
batchGA.disableRunInBatch();
function batchErrorHandler(onCompletionFn) {
return function(error) {
console.log("BatchedGlideAjax: Got error", error);
toProcess.forEach(function(ga) {
handleChildResponseError({
status : 500,
glideAjax : ga,
error : "Batch failed"
});
});
if (onCompletionFn)
onCompletionFn([]);
}
}
function batchResponseHandler(onCompletionFn) {
return function (response) {
console.log("BatchedGlideAjax: Got response", response);
if (!response || !response.responseXML) {
batchErrorHandler(onCompletionFn)(response);
return;
}
var doc = response.responseXML.documentElement;
if (!doc || !doc.childNodes) {
batchErrorHandler(onCompletionFn)(response);
return;
}
var unprocessedGas = processIndividualResponses(Array.prototype.slice.apply(doc.childNodes));
if (onCompletionFn)
onCompletionFn(unprocessedGas);
}
}
function processIndividualResponses(nodes) {
var processedIndicies = [];
nodes.forEach(function (node) {
var response = responseNode(node);
try {
if (response.succeeded)
handleChildResponseSuccess(response);
else
handleChildResponseError(response);
}
catch (e) {
console.warn("BatchedGlideAjax: Error processing child response", response, ":", e);
}
finally {
processedIndicies.push(response.queueIndex);
}
});
return toProcess.filter(function(ga, idx) {
return processedIndicies.indexOf(idx) < 0;
});
}
function responseNode(node) {
var processorIdx = ~~node.getAttribute("sysparm_processor_index");
if (processorIdx < 0 || processorIdx >= toProcess.length) {
console.error("BatchedGlideAjax: Processor index " + processorIdx + " out of bounds for batch queue", toProcess);
return null;
}
var ga = toProcess[processorIdx];
var status = ~~node.getAttribute("status");
var error = node.getAttribute("error");
var answer = node.getAttribute("answer");
var responseDocument = null;
return {
queueIndex : processorIdx,
status : status,
error: error,
answer: answer,
glideAjax : ga,
succeeded : status >= 200 && status < 300,
get responseDocument() {
if (responseDocument == null) {
responseDocument = document.implementation.createDocument("", "", null);
var clonedNode = responseDocument.importNode(node, true);
responseDocument.appendChild(clonedNode);
}
return responseDocument;
}
};
}
function handleChildResponseError(response) {
var errorObject = {
status: response.status,
statusText: response.error,
error: response.error,
description: response.error,
responseText: response.error
};
var ga = response.glideAjax;
if (ga.errorCallbackFunction)
setTimeout(function() {
ga.errorCallbackFunction(errorObject, ga.callbackArgs)
}, 0);
}
function handleChildResponseSuccess(response) {
var ga = response.glideAjax;
if (!ga.callbackFunction)
return;
if (ga.wantAnswer) {
var answer = response.answer;
setTimeout(function () {
ga.callbackFunction(answer, ga.callbackArgs);
}, 0);
} else {
var requestObject = {
responseXML: response.responseDocument,
status: status
};
setTimeout(function() {
ga.callbackFunction(requestObject, ga.callbackArgs)
}, 0);
}
}
function addParamsToBatch(params, index) {
var param;
if (!params)
return;
for (param in params) {
if (!params.hasOwnProperty(param))
continue;
batchGA.addParam(index + '.' + param, params[param]);
}
}
function decodeFormURI(value) {
value = value ? value.replace(/\+/g, '%20') : value;
return decodeURIComponent(value);
}
function addCustomQueryStringToBatch(qs, index) {
if (!qs)
return;
if (qs.startsWith('?'))
qs = qs.substring(1);
var params = qs.split('&');
params.forEach(function(param) {
var i = param.indexOf('=');
var name = param, value;
if (i > -1) {
name = param.substring(0, i);
value = param.substring(i + 1);
}
var decodedName = decodeFormURI(name);
var decodedValue = decodeFormURI(value);
batchGA.addParam(index + '.' + decodedName, decodedValue);
});
}
return {
execute : function(unprocessedCallback) {
toProcess.forEach(function(ga, idx) {
addParamsToBatch(ga.params, idx);
addParamsToBatch(ga.additionalProcessorParams, idx);
addCustomQueryStringToBatch(ga.postString, idx);
});
batchGA.addParam("sysparm_aggregation_size", toProcess.length);
batchGA.setErrorCallback(batchErrorHandler(unprocessedCallback));
batchGA.getXML(batchResponseHandler(unprocessedCallback));
}
}
};
;
/*! RESOURCE: /scripts/ga_batch/glideAjaxBatchQueue.js */
window.NOW.GlideAjaxBatchRequestQueue = (function() {
var queue = [];
var startProcessingTimeout;
var MAX_TIME_IN_QUEUE = window.NOW.batch_glide_ajax_requests_max_time_in_queue || 50;
if (MAX_TIME_IN_QUEUE < 0)
MAX_TIME_IN_QUEUE = 50;
function processQueue() {
clearProcessingTimeout();
var toProcess = queue.slice(0);
if (toProcess.length == 0)
return;
var batchGa = window.NOW.batchedGlideAjax(toProcess);
batchGa.execute(function requeueUnprocessed(unprocessedGas) {
queue = unprocessedGas.concat(queue);
processQueue();
}
);
queue.length = 0;
}
function clearProcessingTimeout() {
if (startProcessingTimeout) {
clearTimeout(startProcessingTimeout);
startProcessingTimeout = undefined;
}
}
return {
enqueue : function(glideAjax) {
queue.push(glideAjax);
if (!startProcessingTimeout)
startProcessingTimeout = setTimeout(processQueue, MAX_TIME_IN_QUEUE);
},
processQueue : processQueue
}
})();
;
;
/*! RESOURCE: /scripts/classes/ajax/GlideAjax.js */
var GlideAjax = Class.create(GlideURL, {
URL: "xmlhttp.do",
initialize: function initialize($super, processor, url) {
var u = this.URL;
if (url)
u = url;
$super(u);
this.setProcessor(processor);
this.callbackFunction;
this.callbackArgs;
this.additionalProcessorParams;
this.errorCallbackFunction;
this.wantRequestObject = false;
this.setScope("global");
this.setWantSessionMessages(true);
if(typeof GlideTransactionScope != 'undefined')
GlideTransactionScope.appendTransactionScope(this.addParam.bind(this), true, true);
this.runRequestInBatch = window.NOW.batch_glide_ajax_requests;
},
disableRunInBatch: function() {
this.runRequestInBatch = false;
},
getProcessor: function() {
return this.processor;
},
getAnswer: function() {
if (!(this.requestObject && this.requestObject.responseXML))
return null;
return this.requestObject.responseXML.documentElement.getAttribute("answer");
},
setProcessor: function(p) {
this.processor = p;
this.addParam("sysparm_processor", p);
},
setQueryString: function(qs) {
this.queryString = qs;
},
preventLoadingIcon: function() {
this._preventLoadingIcon = true;
},
preventCancelNotification: function() {
this._suppressCancelNotification = true;
},
getXMLWait: function(additionalParams) {
this.addParam("sysparm_synch", "true");
this.additionalProcessorParams = additionalParams;
this.async = false;
var sw = new StopWatch();
this._makeRequest();
var m = "*** WARNING *** GlideAjax.getXMLWait - synchronous function - processor: " + this.processor
sw.jslog(m);
if (window.console && window.console.log)
console.log("%c " + m, 'background: darkred; color: white;');
if (this.requestObject.status != 200)
this._handleError();
return this._responseReceived();
},
getXML: function(callback, additionalParams, responseParams) {
this.wantAnswer = false;
this._getXML0(callback, additionalParams, responseParams);
},
getXMLAnswer:function(callback, additionalParams, responseParams) {
this.wantAnswer = true;
this._getXML0(callback, additionalParams, responseParams);
},
_getXML0: function(callback, additionalParams, responseParams) {
this.callbackFunction = callback;
this.callbackArgs = responseParams;
this.additionalProcessorParams = additionalParams;
this.async = true;
setTimeout(function() {this._makeRequest();}.bind(this), 0);
},
_makeRequest: function() {
this.requestObject = this._getRequestObject();
if (this.requestObject == null)
return null;
if (!GlideAjax.want_session_messages)
this.setWantSessionMessages(false);
var refUrl = this._buildReferringURL();
if (refUrl != "") {
this.addParam('ni.nolog.x_referer', 'ignore');
this.addParam('x_referer', refUrl);
}
if (typeof g_autoRequest != 'undefined' && 'true' == g_autoRequest)
this.addParam('sysparm_auto_request', g_autoRequest);
this.postString = this.getQueryString(this.additionalProcessorParams);
if (this.queryString) {
if (this.postString)
this.postString += "&";
this.postString += this.queryString;
}
if (this._isEligibleForBatching())
this._enqueueBatchRequest();
else
this._sendRequest();
return this.requestObject;
},
_isEligibleForBatching : function() {
return this.async &&
this.runRequestInBatch &&
window.NOW.batch_glide_ajax_requests &&
this.contextPath === this.URL;
},
_enqueueBatchRequest : function() {
if (window.NOW && window.NOW.GlideAjaxBatchRequestQueue)
window.NOW.GlideAjaxBatchRequestQueue.enqueue(this);
else {
console.warn("GlideAjaxBatchRequestQueue not available, falling back to immediate dispatch");
console.debug("Add scripts/ga_batch/js_includes_batchga.js to your page to enable batching");
this._sendRequest();
}
},
_sendRequest: function() {
this._showLoading();
if (this.async)
this.requestObject.onreadystatechange = this._processReqChange.bind(this);
CustomEvent.fireTop("request_start", document);
this.requestObject.open("POST", this.contextPath, this.async);
this.requestObject.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
if (typeof g_ck != 'undefined' && g_ck != "")
this.requestObject.setRequestHeader('X-UserToken', g_ck);
try {
this.requestObject.send(this.postString);
} catch (e) {}
if (!this.async || (this.callbackFunction == null))
this._hideLoading();
},
_processReqChange: function() {
if (this.requestObject.readyState != 4)
return;
this.requestObject.onreadystatechange = function() { };
this._hideLoading();
if (!this._errorCheck()) {
this._responseReceived();
return;
}
try {
this._handleError();
} catch (e) {
jslog("GlideAjax error: " + e);
}
},
_errorCheck: function() {
this._cancelErrorXML = this._getCancelError();
return this._getResponseCode() != 200 || this._wasCanceled();
},
_handle401Error: function() {
if (getTopWindow().loggingOut)
return false;
var sessionLoggedIn =  this.requestObject.getResponseHeader("X-SessionLoggedIn");
if ( "true"!=sessionLoggedIn ) {
if (window.confirm(new GwtMessage().getMessage("ajax_session_timeout_goto_login_confirm"))) {
getTopWindow().location.href = "/navpage.do";
return true;
}
} else {
var allowResubmit = this.requestObject.getResponseHeader("X-UserToken-AllowResubmit");
if ("true"==allowResubmit) {
var autoResubmit = this.requestObject.getResponseHeader("X-AutoResubmit");
if ("true" == autoResubmit) {
this._sendRequest();
return true;
}
if (window.confirm(new GwtMessage().getMessage("ajax_session_timeout_resubmit_request_confirm"))) {
this._sendRequest();
return true;
}
} else {
if ("true" == sessionLoggedIn)
return false;
var msg = new GwtMessage().getMessage("ajax_session_timeout_refresh_screen");
if (!msg)
msg = "Your session has expired. Click OK to continue.";
if (window.confirm(msg)) {
getTopWindow().location.href = "/navpage.do";
return true;
}
}
}
return false;
},
_handleError: function() {
var responseCode = this._getResponseCode();
if (responseCode == 401) {
var requestedToken = this.requestObject.getResponseHeader("X-UserToken-Request");
var respondedToken = this.requestObject.getResponseHeader("X-UserToken-Response");
if (requestedToken && respondedToken && requestedToken != respondedToken)
CustomEvent.fireAll("ck_updated", respondedToken);
var handleTimeOut = this.requestObject.getResponseHeader("X-HandleTimeOut");
if ("true"==handleTimeOut)
if (this._handle401Error())
return;
}
else if (responseCode == 404 && this._outOfScope()) {
var err_options = {
text: "Access to Script Include " + this.processor +" blocked from scope: " + (this.getParam("sysparm_scope") ? this.getParam("sysparm_scope") : "global"),
type: "system",
attributes: { type: "error" }
};
if (typeof GlideUI != 'undefined')
GlideUI.get().fire(new GlideUINotification(err_options));
}
else if (this._wasCanceled() && this.callbackFunction && !this._getSuppressCancelNotification()) {
var err_options = {
text: this._getCancelErrorText(),
type: "system",
attributes: { type: "error" }
};
if (typeof GlideUI != 'undefined')
GlideUI.get().fire(new GlideUINotification(err_options));
}
if (this.errorCallbackFunction)
this.errorCallbackFunction(this.requestObject, this.callbackArgs);
},
_getRequestObject: function() {
var req = null;
if (window.XMLHttpRequest)
req = new XMLHttpRequest();
else if (window.ActiveXObject)
req = new ActiveXObject("Microsoft.XMLHTTP");
return req;
},
_getResponseCode: function() {
return this.requestObject.status;
},
_wasCanceled: function() {
if (!this._cancelErrorXML)
return false;
var answer = this._cancelErrorXML.getAttribute('transaction_canceled');
return answer == 'true';
},
_getSuppressCancelNotification: function() {
if (this._suppressCancelNotification)
return true;
if (this._cancelErrorXML) {
var suppress = this._cancelErrorXML.getAttribute("suppress_notification");
if (suppress && suppress == 'true')
return true;
}
return false;
},
_getCancelErrorText: function() {
if (this._cancelErrorXML) {
var cancelMessage = this._cancelErrorXML.getAttribute('cancel_message');
if (cancelMessage)
return cancelMessage;
}
return "Information could not be downloaded from the server because the transaction was canceled.";
},
_getCancelError: function() {
var xml = this.requestObject.responseXML;
if (!xml) {
var responseText = this.requestObject.responseText;
var errorPattern = /<xml?[^>]*id="transaction_canceled_island"?[^>]*>/;
var matches = responseText.match(errorPattern);
if (!matches)
return false;
xml = loadXML(matches[0]);
}
return xml.documentElement;
},
_outOfScope: function() {
var callerScope = this.getParam("sysparm_scope") ? this.getParam("sysparm_scope") : "global";
var isAppScope = callerScope != "global";
return isAppScope && this.requestObject.responseXML.documentElement.getAttribute("error").indexOf("HTTP Processor class not found") == 0;
},
_responseReceived: function() {
lastActivity = new Date();
CustomEvent.fireTop("request_complete", document);
this._fireUINotifications();
this._showSessionNotifications();
if (this.callbackFunction) {
if (this.wantAnswer)
this.callbackFunction(this.getAnswer(), this.callbackArgs);
else
this.callbackFunction(this.requestObject, this.callbackArgs);
}
if (this.wantRequestObject)
return this.requestObject;
return this.requestObject? this.requestObject.responseXML : null;
},
_showLoading: function() {
if (!this._preventLoadingIcon)
CustomEvent.fireAll("ajax.loading.start", this);
},
_hideLoading: function() {
if (!this._preventLoadingIcon && window.CustomEvent)
CustomEvent.fireAll("ajax.loading.end", this);
},
_buildReferringURL: function() {
var path = location.pathname;
var args = location.search;
if (path.substring(path.length-1) == '/') {
if (args)
return args;
return "";
}
return path.substring(path.lastIndexOf('/') + 1) + args;
},
_fireUINotifications: function() {
if (!this.requestObject || !this.requestObject.responseXML)
return;
var notifications = this.requestObject.responseXML.getElementsByTagName('ui_notifications');
if (!notifications || notifications.length == 0)
return;
var spans = notifications[0].childNodes;
for (var i = 0; i < spans.length; i++) {
var span = spans[i];
if (typeof GlideUI != 'undefined')
GlideUI.get().fire(new GlideUINotification({xml: span}));
}
$(document).fire('glide-notification:clear', {spans : spans});
},
_showSessionNotifications: function() {
if (!this.requestObject || !this.requestObject.responseXML)
return;
var notifications = this.requestObject.responseXML.getElementsByTagName('session_notifications');
if (!notifications || notifications.length == 0)
return;
var spans = notifications[0].childNodes;
for (var i = 0; i < spans.length; i++) {
var span = spans[i];
var type = span.getAttribute("data-type");
if (typeof GlideUI != 'undefined') {
if(type !== 'nav')
GlideUI.get().addOutputMessage({msg:span.getAttribute("data-text"), type:type});
}
}
},
setScope: function(scope) {
if(scope) {
this.addParam('sysparm_scope', scope);
}
return this;
},
setErrorCallback: function(callback) {
this.errorCallbackFunction = callback;
},
setWantRequestObject: function(want) {
this.wantRequestObject = want;
},
setWantSessionMessages: function(want) {
this.addParam('sysparm_want_session_messages', want);
},
toString: function() { return "GlideAjax"; }
});
GlideAjax.disableSessionMessages = function() {
GlideAjax.want_session_messages = false;
};
GlideAjax.enableSessionMessages = function() {
GlideAjax.want_session_messages = true;
};
GlideAjax.enableSessionMessages();
;
/*! RESOURCE: /scripts/classes/ajax/GlideAjaxForm.js */
var GlideAjaxForm = Class.create(GlideAjax, {
PROCESSOR: 'RenderInfo',
initialize: function($super, templateName) {
$super(this.PROCESSOR);
this._formPreferences = {};
this._templateName = templateName;
this.setPreference('renderer', 'RenderForm');
this.setPreference('type', 'direct');
this.setPreference('table', templateName);
this.addParam('sysparm_name', templateName);
this.addParam('sysparm_value', this.getSysparmValue());
},
getRenderedBodyText: function(callback) {
this._renderedBodyCallback = callback;
this.getXML(this._parseTemplate.bind(this));
},
_parseTemplate: function(response) {
s = response.responseText;
s = s.substring(s.indexOf('<rendered_body>') + 15);
s = s.substring(0, s.indexOf('</rendered_body>'));
s = s.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&").replace(/&apos;/g, "'");
this._renderedBodyCallback(s);
},
setPreference: function(k, v) {
this._formPreferences[k] = v;
},
getPreferences: function() {
return this._formPreferences;
},
getSysparmValue: function() {
var gxml = document.createElement('gxml');
var sec = document.createElement('section');
sec.setAttribute('name', this._templateName);
gxml.appendChild(sec);
for (var i in this._formPreferences) {
var e = document.createElement('preference');
e.setAttribute('name', i);
e.setAttribute('value', this._formPreferences[i]);
sec.appendChild(e);
}
return gxml.innerHTML;
},
toString: function() { return 'GlideAjaxForm'; }
});
;
/*! RESOURCE: /scripts/calendar.js */
var MONTH_NAMES = new Array('January','February','March','April','May','June','July','August','September','October','November','December','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
var DAY_NAMES = new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sun','Mon','Tue','Wed','Thu','Fri','Sat');
function LZ(x) {return(x<0||x>9?"":"0")+x}
function isDate(val,format) {
var date=getDateFromFormat(val,format);
if (date==0) { return false; }
return true;
}
function compareDates(date1,dateformat1,date2,dateformat2) {
var d1=getDateFromFormat(date1,dateformat1);
var d2=getDateFromFormat(date2,dateformat2);
if (d1==0 || d2==0) {
return -1;
}
else if (d1 > d2) {
return 1;
}
return 0;
}
function formatDateServer(date, format) {
var ga = new GlideAjax("DateTimeUtils");
ga.addParam("sysparm_name", "formatCalendarDate");
var browserOffset = date.getTimezoneOffset() * 60000;
var utcTime = date.getTime() - browserOffset;
var userDateTime = utcTime - g_tz_offset;
ga.addParam("sysparm_value", userDateTime);
ga.getXMLWait();
return ga.getAnswer();
}
function formatDate(date,format) {
if (format.indexOf("z") > 0)
return formatDateServer(date, format);
format=format+"";
var result="";
var i_format=0;
var c="";
var token="";
var y=date.getFullYear()+"";
var M=date.getMonth()+1;
var d=date.getDate();
var E=date.getDay();
var H=date.getHours();
var m=date.getMinutes();
var s=date.getSeconds();
var yyyy,yy,MMM,MM,dd,hh,h,mm,ss,ampm,HH,H,KK,K,kk,k;
var value=new Object();
value["M"]=M;
value["MM"]=LZ(M);
value["MMM"]=MONTH_NAMES[M+11];
value["NNN"]=MONTH_NAMES[M+11];
value["MMMM"]=MONTH_NAMES[M-1];
value["d"]=d;
value["dd"]=LZ(d);
value["E"]=DAY_NAMES[E+7];
value["EE"]=DAY_NAMES[E];
value["H"]=H;
value["HH"]=LZ(H);
if (format.indexOf('w') != -1) {
var wk = date.getWeek();
if (wk >= 52 && M == 1) {
y = date.getFullYear();
y--;
y = y + "";
}
if (wk == 1 && M == 12) {
y = date.getFullYear();
y++;
y = y + "";
}
value["w"] = wk;
value["ww"] = LZ(wk);
}
var dayOfWeek = (7 + (E + 1) - (g_first_day_of_week - 1)) % 7;
if (dayOfWeek == 0)
dayOfWeek = 7;
value["D"] = dayOfWeek;
if (y.length < 4) {
y=""+(y-0+1900);
}
value["y"]=""+y;
value["yyyy"]=y;
value["yy"]=y.substring(2,4);
if (H==0) {
value["h"]=12;
} else if (H>12){
value["h"]=H-12;
} else {
value["h"]=H;
}
value["hh"]=LZ(value["h"]);
if (H>11) {
value["K"]=H-12;
} else {
value["K"]=H;
}
value["k"]=H+1;
value["KK"]=LZ(value["K"]);
value["kk"]=LZ(value["k"]);
if (H > 11) {
value["a"]="PM";
} else {
value["a"]="AM";
}
value["m"]=m;
value["mm"]=LZ(m);
value["s"]=s;
value["ss"]=LZ(s);
while (i_format < format.length) {
c=format.charAt(i_format);
token="";
while ((format.charAt(i_format)==c) && (i_format < format.length)) {
token += format.charAt(i_format++);
}
if (value[token] != null) { result=result + value[token]; }
else { result=result + token; }
}
return result;
}
function _isInteger(val) {
var digits="1234567890";
for (var i=0; i < val.length; i++) {
if (digits.indexOf(val.charAt(i))==-1) { return false; }
}
return true;
}
function _getInt(str,i,minlength,maxlength) {
for (var x=maxlength; x>=minlength; x--) {
var token=str.substring(i,i+x);
if (token.length < minlength) { return null; }
if (_isInteger(token)) { return token; }
}
return null;
}
Date.prototype.getWeek = function() {
var newYear = new Date(this.getFullYear(),0,1);
var day = newYear.getDay() - (g_first_day_of_week - 1);
day = (day >= 0 ? day : day + 7);
var dayNum = Math.floor((this.getTime() - newYear.getTime() - (this.getTimezoneOffset()-newYear.getTimezoneOffset())*60000)/86400000) + 1;
var weekNum;
if (day < 4) {
weekNum = Math.floor((dayNum+day-1)/7) +1;
if (weekNum > 52)
weekNum = this._checkNextYear(weekNum);
return weekNum;
}
weekNum = Math.floor((dayNum+day-1)/7);
if (weekNum < 1)
weekNum = this._lastWeekOfYear();
else if (weekNum > 52)
weekNum = this._checkNextYear(weekNum);
return weekNum;
}
Date.prototype._lastWeekOfYear = function() {
var newYear = new Date(this.getFullYear() - 1,0,1);
var endOfYear = new Date(this.getFullYear() - 1,11,31);
var day = newYear.getDay() - (g_first_day_of_week - 1);
var dayNum = Math.floor((endOfYear.getTime() - newYear.getTime() - (endOfYear.getTimezoneOffset()-newYear.getTimezoneOffset())*60000)/86400000) + 1;
return day < 4 ? Math.floor((dayNum+day-1)/7) + 1 : Math.floor((dayNum+day-1)/7);
}
Date.prototype._checkNextYear = function() {
var nYear = new Date(this.getFullYear() + 1,0,1);
var nDay = nYear.getDay() - (g_first_day_of_week-1);
nDay = nDay >= 0 ? nDay : nDay + 7;
return nDay < 4 ? 1 : 53;
}
Date.prototype.setWeek = function(weekNum) {
weekNum--;
var startOfYear = new Date(this.getFullYear(), 0, 1);
var day = startOfYear.getDay() - (g_first_day_of_week - 1);
if (day > 0 && day < 4) {
this.setFullYear(startOfYear.getFullYear() - 1);
this.setDate(31 - day + 1);
this.setMonth(11);
} else if (day > 3)
this.setDate(startOfYear.getDate() + (7-day));
this.setDate(this.getDate() + (7 * weekNum));
}
function getDateFromFormat(val,format) {
val=val+"";
format=format+"";
var i_val=0;
var i_format=0;
var c="";
var token="";
var token2="";
var x,y;
var now=new Date();
var year=now.getYear();
var month=now.getMonth()+1;
var date=0;
var hh=now.getHours();
var mm=now.getMinutes();
var ss=now.getSeconds();
var ampm="";
var week = false;
while (i_format < format.length) {
c=format.charAt(i_format);
token="";
while ((format.charAt(i_format)==c) && (i_format < format.length)) {
token += format.charAt(i_format++);
}
if (token=="yyyy" || token=="yy" || token=="y") {
if (token=="yyyy") { x=4;y=4; }
if (token=="yy")   { x=2;y=2; }
if (token=="y")    { x=2;y=4; }
year=_getInt(val,i_val,x,y);
if (year==null) { return 0; }
i_val += year.length;
if (year.length==2) {
if (year > 70) { year=1900+(year-0); }
else { year=2000+(year-0); }
}
}
else if (token=="MMM"||token=="NNN"){
month=0;
for (var i=0; i<MONTH_NAMES.length; i++) {
var month_name=MONTH_NAMES[i];
if (val.substring(i_val,i_val+month_name.length).toLowerCase()==month_name.toLowerCase()) {
if (token=="MMM"||(token=="NNN"&&i>11)) {
month=i+1;
if (month>12) { month -= 12; }
i_val += month_name.length;
break;
}
}
}
if ((month < 1)||(month>12)){return 0;}
}
else if (token=="EE"||token=="E") {
for (var i=0; i<DAY_NAMES.length; i++) {
var day_name=DAY_NAMES[i];
if (val.substring(i_val,i_val+day_name.length).toLowerCase()==day_name.toLowerCase()) {
if (week) {
if (i==0 || i == 7)
date+=6;
else if (i== 2 || i == 9)
date+=1;
else if (i== 3 || i == 10)
date+=2;
else if (i == 4 || i == 11)
date+=3;
else if (i == 5 || i == 12)
date +=4;
else if (i == 6 || i== 13)
date+=5;
}
i_val += day_name.length;
break;
}
}
}
else if (token=="MM"||token=="M") {
month=_getInt(val,i_val,token.length,2);
if(month==null||(month<1)||(month>12)){return 0;}
i_val+=month.length;}
else if (token=="dd"||token=="d") {
date=_getInt(val,i_val,token.length,2);
if(date==null||(date<1)||(date>31)){return 0;}
i_val+=date.length;}
else if (token=="hh"||token=="h") {
hh=_getInt(val,i_val,token.length,2);
if(hh==null||(hh<1)||(hh>12)){return 0;}
i_val+=hh.length;}
else if (token=="HH"||token=="H") {
hh=_getInt(val,i_val,token.length,2);
if(hh==null||(hh<0)||(hh>23)){return 0;}
i_val+=hh.length;}
else if (token=="KK"||token=="K") {
hh=_getInt(val,i_val,token.length,2);
if(hh==null||(hh<0)||(hh>11)){return 0;}
i_val+=hh.length;}
else if (token=="kk"||token=="k") {
hh=_getInt(val,i_val,token.length,2);
if(hh==null||(hh<1)||(hh>24)){return 0;}
i_val+=hh.length;hh--;}
else if (token=="mm"||token=="m") {
mm=_getInt(val,i_val,token.length,2);
if(mm==null||(mm<0)||(mm>59)){return 0;}
i_val+=mm.length;}
else if (token=="ss"||token=="s") {
ss=_getInt(val,i_val,token.length,2);
if(ss==null||(ss<0)||(ss>59)){return 0;}
i_val+=ss.length;}
else if (token=="a") {
if (val.substring(i_val,i_val+2).toLowerCase()=="am") {ampm="AM";}
else if (val.substring(i_val,i_val+2).toLowerCase()=="pm") {ampm="PM";}
else {return 0;}
i_val+=2;}
else if (token == "w" || token == "ww") {
var weekNum = _getInt(val,i_val,token.length, 2);
week = true;
if (weekNum != null) {
var temp = new Date(year, 0, 1, 0, 0, 0);
temp.setWeek(parseInt(weekNum, 10));
year = temp.getFullYear();
month = temp.getMonth()+1;
date = temp.getDate();
}
weekNum += "";
i_val += weekNum.length;
}
else if (token=="D") {
if (week) {
var day = _getInt(val,i_val,token.length, 1);
if ((day == null) || (day <= 0) || (day > 7))
return 0;
var temp = new Date(year, month-1, date, hh, mm, ss);
var dayOfWeek = temp.getDay();
day = parseInt(day, 10);
day = (day + g_first_day_of_week - 1) % 7;
if (day == 0)
day = 7;
day--;
if (day < dayOfWeek)
day = 7 - (dayOfWeek - day);
else
day -= dayOfWeek;
if (day > 0) {
temp.setDate(temp.getDate() + day);
year = temp.getFullYear();
month = temp.getMonth() + 1;
date = temp.getDate();
}
i_val++;
}
} else if (token =="z")
i_val+=3;
else {
if (val.substring(i_val,i_val+token.length)!=token) {return 0;}
else {i_val+=token.length;}
}
}
if (i_val != val.length) { return 0; }
if (month==2) {
if ( ( (year%4==0)&&(year%100 != 0) ) || (year%400==0) ) {
if (date > 29){ return 0; }
}
else { if (date > 28) { return 0; } }
}
if ((month==4)||(month==6)||(month==9)||(month==11)) {
if (date > 30) { return 0; }
}
if (hh<12 && ampm=="PM") { hh=hh-0+12; }
else if (hh>11 && ampm=="AM") { hh-=12; }
var newdate=new Date(year,month-1,date,hh,mm,ss);
return newdate.getTime();
}
function parseDate(val) {
var preferEuro=(arguments.length==2)?arguments[1]:false;
generalFormats=new Array('y-M-d','MMM d, y','MMM d,y','y-MMM-d','d-MMM-y','MMM d');
monthFirst=new Array('M/d/y','M-d-y','M.d.y','MMM-d','M/d','M-d');
dateFirst =new Array('d/M/y','d-M-y','d.M.y','d-MMM','d/M','d-M');
yearFirst =new Array( 'yyyyw.F', 'yyw.F');
var checkList=new Array('generalFormats',preferEuro?'dateFirst':'monthFirst',preferEuro?'monthFirst':'dateFirst', 'yearFirst');
var d=null;
for (var i=0; i<checkList.length; i++) {
var l=window[checkList[i]];
for (var j=0; j<l.length; j++) {
d=getDateFromFormat(val,l[j]);
if (d!=0) { return new Date(d); }
}
}
return null;
}
function getDurationString(ms) {
var sec = Math.floor(ms / 1000), s = '', days = Math.floor(sec/86400);
if (days >= 1) {
s += days + ' day' + (days > 1 ? 's' : '');
sec -= days * 86400;
}
var hours = Math.floor(sec/3600);
if (hours >= 1) {
s += (days > 0 ? ' ' : '') + hours + ' hour' + (hours > 1 ? 's' : '');
sec -= hours * 3600;
}
var min = Math.floor(sec/60);
if (days == 0) {
if (min >= 1) {
s += (hours > 0 ? ' ' : '') + min + ' minute' + (min > 1 ? 's' : '');
if (hours < 1) {
sec -= min * 60;
if (sec > 0 && min <= 10)
s += ' ' + sec + ' second' + (sec > 1 ? 's' : '');
}
} else if (hours == 0 && sec > 0)
s += sec + ' second' + (sec > 1 ? 's' : '');
}
return s;
}
function getUserDateTime() {
var browserDate = new Date();
var browserOffset = browserDate.getTimezoneOffset() * 60000;
var utcTime = browserDate.getTime() + browserOffset;
var userDateTime = utcTime + g_tz_offset;
return new Date(userDateTime);
}
function convertUtcTimeToUserTimeMs(utcTimeMs) {
var d = new Date();
return parseInt(utcTimeMs) + (d.getTimezoneOffset() * 60000) + g_tz_offset;
}
function convertUserTimeToUtcTimeMs(userTimeMs) {
var d = new Date();
return parseInt(userTimeMs) - (d.getTimezoneOffset() * 60000) - g_tz_offset;
}
;
/*! RESOURCE: /scripts/functions_clipboard.js */
window.NOW = window.NOW || {};
window.NOW.g_clipboard = {};
(function(exports) {
var browserReturnsErroneousStatus = navigator.userAgent.indexOf('MSIE 9') != -1
|| navigator.userAgent.indexOf('MSIE 10') != -1
|| navigator.userAgent.indexOf('rv:11') != -1;
exports.copyToClipboard = function(str, messageMethod) {
if (document.execCommand && isCapableMessageMethod(messageMethod)) {
var v = document.createElement('textarea');
v.innerHTML = str;
v.className = "sr-only";
document.body.appendChild(v);
v.select();
var result = true;
try {
result = document.execCommand('copy');
if (result && browserReturnsErroneousStatus) {
var checkDiv = document.createElement('textarea');
checkDiv.className = "sr-only";
document.body.appendChild(checkDiv);
checkDiv.select();
try {
document.execCommand('paste');
result = checkDiv.value == str;
} finally {
document.body.removeChild(checkDiv);
}
}
} catch (e) {
result = false;
if (window.jslog)
jslog("Couldn't access clipboard " + e);
} finally {
document.body.removeChild(v);
}
if (result) {
fireCopiedMessage(messageMethod);
return true;
}
}
legacyClipboardCopy(str);
return false;
}
function isCapableMessageMethod(messageMethod) {
if (messageMethod == 'custom')
return true;
return 'GlideUI' in window;
}
function fireCopiedMessage(messageMethod) {
if (!messageMethod || messageMethod == 'GlideUI') {
var span = document.createElement('span');
span.setAttribute('data-type', 'info');
span.setAttribute('data-text', getMessage('Copied to clipboard'));
span.setAttribute('data-duration', '2500');
GlideUI.get().fire(new GlideUINotification({xml: span}));
}
}
function legacyClipboardCopy(meintext) {
prompt("Because of a browser limitation the URL can not be placed directly in the clipboard. " +
"Please use Ctrl-C to copy the data and escape to dismiss this dialog", meintext);
}
})(window.NOW.g_clipboard);
;
/*! RESOURCE: /scripts/context_actions.js */
function switchView(type, tableName, viewName) {
ScriptLoader.getScripts('scripts/classes/GlideViewManager.js', function() {
if (type == 'list')
new GlideViewManager(tableName, viewName).refreshList();
else
new GlideViewManager(tableName, viewName).refreshDetail();
})
}
function copyRowToClipboard(base, ref, sysId, view) {
var url = base + "nav_to.do?uri=" + ref + ".do?sys_id=" + sysId;
if (view)
url += "%26sysparm_view=" + view;
copyToClipboard(url);
}
function doUpdate(scope) {
var name = gActiveContext.getTableName();
var temp = name + '_update.do';
var form = getControlForm(name);
var msg = [ 'There are no rows selected', 'Update the entire list?', 'records' ];
var answer = getMessages(msg);
if (scope == 'selected' && getChecked(form) == '') {
alert(answer['There are no rows selected']);
return;
}
form.action = temp;
addInput(form, 'HIDDEN', 'sys_action', 'sysverb_multiple_update');
addInput(form, 'HIDDEN', 'sysparm_multiple', 'true');
addInput(form, 'HIDDEN', 'sysparm_nostack', 'yes');
if (scope == 'selected')
populateParmQuery(form, 'sys_idIN', 'NULL');
else {
if (!confirm(answer['Update the entire list?'] + " ("
+ form.sysparm_total_rows.value + " " + answer['records'] + ")")) {
return;
}
}
form.submit();
}
function contextAction(tableName, actionName) {
var form = getControlForm(tableName);
addInput(form, 'HIDDEN', 'sys_action', actionName);
form.submit();
}
function contextConfirm(tableName, actionName) {
var sysparm_rows = gel('sysparm_total_rows').value;
var num_rows = parseInt(sysparm_rows);
var sysparm_query = gel('sysparm_query');
if (sysparm_query)
sysparm_query = sysparm_query.value;
else
sysparm_query = '';
var sysparm_view = getView(tableName);
if (num_rows < g_export_warn_threshold) {
var dialog = new GwtPollDialog(tableName, sysparm_query, sysparm_rows, sysparm_view, actionName);
dialog.execute();
return;
}
var dialog = new GwtExportScheduleDialog(tableName, sysparm_query, sysparm_rows, sysparm_view, actionName);
dialog.execute();
}
function executeRecentSearch(searchTerm, url) {
parent.document.getElementById('sysparm_search').value = decodeURIComponent(searchTerm);
window.open(url,'gsft_main');
CustomEvent.fire('adjustsearch');
}
function getView(tableName) {
var sysparm_view = '';
if (isReport()) {
var form = getControlForm(tableName);
if (form) {
var temp = form['sysparm_view'];
if (temp)
sysparm_view = temp.value;
}
}
if (sysparm_view != '')
return sysparm_view;
var sp = gel('sysparm_view');
if (sp)
sysparm_view = sp.value;
return sysparm_view;
function isReport() {
var list = gel('reportform_control');
if (list)
return true;
return false;
}
}
var copyToClipboard = typeof window.NOW.g_clipboard !== 'undefined' ? window.NOW.g_clipboard.copyToClipboard : null;
function showQuickForm(id, action, width, height) {
var form;
var tableName;
var srcElement;
var keyset;
if (window.lastEvent) {
srcElement = getSrcElement(window.lastEvent);
form = srcElement.form;
if (srcElement.tagName == "SELECT") {
var o = srcElement.options[srcElement.selectedIndex];
tableName = o.getAttribute("table");
} else
tableName = srcElement.getAttribute("table");
if ((action == undefined || action == '') && srcElement.value)
action = srcElement.value;
if (!form)
keyset = g_list.getChecked();
else
keyset = getChecked(form);
window.lastEvent = null;
}
if (tableName == undefined) {
if (typeof(gcm) == 'undefined')
gcm = crumbMenu;
tableName = gcm.getTableName();
form = getFormForList(tableName);
if (typeof(rowSysId) != 'undefined')
keyset = rowSysId;
else
keyset = getChecked(form);
gcm.setFiringObject();
}
if ( (!form && !tableName) || (!tableName && g_list))
return;
if (!keyset || keyset == '') {
alert("No records selected");
return;
}
var gForm = new GlideDialogForm("", tableName+"_update");
if (width && height)
gForm.setDialogSize(width, height);
gForm.addParm('sysparm_view', id);
gForm.setMultiple(form);
gForm.addParm('sysparm_checked_items', "sys_idIN" + keyset);
if (action && action != '')
gForm.addParm('sysparm_action_name', action);
gForm.render();
}
function personalizeResponses(id) {
var parts = id.split('.');
var mytable = parts[0];
var myfield = parts[1];
var myreferurl = document.getElementById('sysparm_this_url_enc');
var url = "response_list.do?sysparm_name=" + mytable +
"&sysparm_element=" + myfield +
"&sysparm_target=" + id +
"&sysparm_view=sys_response_tailor";
if (myreferurl)
url += "&sysparm_referring_url=" + myreferurl.value;
self.location = url;
}
function personalizeChoices(id) {
var mytable = id.split('.')[0];
var mydependent = document.getElementById('ni.dependent_reverse.' + id);
var url = new GlideURL("slushbucket_choice.do");
url.addParam('sysparm_ref', id);
url.addParam('sysparm_form', 'sys_choice');
url.addParam('sysparm_dependent', (mydependent? mydependent.value : ""));
url.addParam('sysparm_stack', 'no');
if (mydependent != null) {
var el = document.getElementsByName(mytable + "." + mydependent.value)[0];
if (el != null) {
var selectValue;
if (el.options)
selectValue = el.options[el.selectedIndex].value;
else
selectValue = el.value;
url.addParam('sysparm_dependent_value', selectValue);
}
}
self.location = url.getURL();
}
function personalizeControl(strIdent, id, query) {
var url = 'sys_ui_list_control.do?sys_id=' + id;
if (query && query != '')
url += "&sysparm_query=" + query;
window.location = url;
}
function personalizer(strIdent, strForm, strSysId) {
if (strIdent == 'auto' && window.$j) {
strIdent = $j('[data-section-id]').first().attr('data-section-id');
}
var parentForm = getControlForm(strIdent);
var form = document.forms['sys_personalize'];
if (parentForm && parentForm['sysparm_collection_relationship'])
addInput(form, 'HIDDEN', 'sysparm_collection_relationship', parentForm['sysparm_collection_relationship'].value);
else
addInput(form, 'HIDDEN', 'sysparm_collection_relationship', '');
addInput(form, 'HIDDEN', 'sysparm_list', strIdent);
addInput(form, 'HIDDEN', 'sysparm_form', strForm);
addInput(form, 'HIDDEN', 'sysparm_sys_id', strSysId);
if (parentForm && parentForm['sysparm_collection'])
addInput(form, 'HIDDEN', 'sysparm_collection', parentForm['sysparm_collection'].value);
var scopeElement = gel('sysparm_domain_scope');
if (scopeElement && scopeElement.value) {
addInput(form, 'HIDDEN', 'sysparm_domain_scope', scopeElement.value);
}
if(typeof GlideTransactionScope != 'undefined') {
GlideTransactionScope.appendTransactionScope(function(name, value) {
addInput(form, 'HIDDEN', name, value);
});
}
form.submit();
}
function personalizeList(listId, tableName) {
var parentForm = getFormForList(listId);
var form = document.forms['sys_personalize'];
if (parentForm && parentForm['sysparm_collection_relationship'])
addInput(form, 'HIDDEN', 'sysparm_collection_relationship', parentForm['sysparm_collection_relationship'].value);
else
addInput(form, 'HIDDEN', 'sysparm_collection_relationship', '');
addInput(form, 'HIDDEN', 'sysparm_list', tableName);
addInput(form, 'HIDDEN', 'sysparm_form', 'list');
if (parentForm && parentForm['sysparm_collection'])
addInput(form, 'HIDDEN', 'sysparm_collection', parentForm['sysparm_collection'].value);
else
addInput(form, 'HIDDEN', 'sysparm_collection', '');
if (typeof GlideTransactionScope !== 'undefined') {
GlideTransactionScope.appendTransactionScope(function(name, value) {
addInput(form, 'HIDDEN', name, value);
});
}
form.submit();
}
function personalizeField(identifier, formName) {
var form = document.forms['sys_personalize'];
var fields = 'name.element.language';
if (formName && formName.indexOf('sys_dictionary') == 0)
fields = 'name.element';
addQueryFilter(form, fields, identifier, '', formName);
form.action = formName;
form.submit();
}
function personalizeFields(identifier, formName) {
var form = document.forms['sys_personalize'];
addQueryFilter(form, 'name', identifier);
form.action = formName;
form.submit();
}
function personalizeSecurity(identifier, field_name) {
var a = field_name.split('.');
var g_dialog = new GlideDialogWindow('security_mechanic');
g_dialog.setPreference('table_name', a[0]);
g_dialog.setPreference('field_name', a[1]);
g_dialog.setSize(600, '');
g_dialog.setTitle('Security Mechanic');
g_dialog.render();
}
function showDictionary(identifier, field_id) {
var a = field_id.split('.');
var g_dialog = new GlideDialogWindow('dictionary_viewer');
g_dialog.setPreference('table_name', a[0]);
g_dialog.setPreference('field_name', a[1]);
g_dialog.setTitle('Dictionary Info: ' + field_id);
g_dialog.render();
}
function listSecurity(identifier, field_name) {
var form = document.forms['sys_personalize'];
addQueryFilter(form, 'CALCULATED:SecurityQueryCalculator', field_name);
form.action = "sys_security_acl_list.do";
form.submit();
}
function listCollection(coll_table, coll_field, of_table, view_name) {
var form = document.forms['sys_personalize'];
addQueryFilter(form, 'CALCULATED:CollectionQueryCalculator', of_table + ',' + coll_field + ',' + view_name);
addInput(form, 'HIDDEN', 'sysparm_domain_restore', 'false');
form.action = coll_table + "_list.do";
form.submit();
}
function exportToPDF(table, sys_id, isLandscape, sysparm_view, sysparm_domain){
var relatedListFilters = "";
if (window.g_tabs2List && g_tabs2List.tabIDs) {
var relatedLists = g_tabs2List.tabIDs;
var relatedListCount = relatedLists.length;
if (relatedListCount > 0) {
for (var i = 0; i < relatedListCount; i++) {
var relatedListName = relatedLists[i].substring(0, relatedLists[i].lastIndexOf("_list"));
var filter = getFilter(relatedListName);
if(!filter) {
filter = getFilterViaTableDiv(relatedListName+"_table")
}
if (filter && filter.length > 0) {
if (i == relatedListCount - 1)
relatedListFilters += relatedListName + "=" + encodeURIComponent(encodeURIComponent(filter));
else
relatedListFilters += relatedListName + "=" + encodeURIComponent(encodeURIComponent(filter)) + "^";
}
}
}
}
var url = table + ".do?sys_id=" + sys_id + "&PDF" + "&sysparm_view=" + sysparm_view + "&related_list_filter=" + relatedListFilters + "&sysparm_domain=" + sysparm_domain;
if (isLandscape)
url += "&landscape=true";
window.location = url;
}
function showList(tableName, fields, ids) {
if (!ids)
ids = gActiveContext.getTableName();
self.location = tableName + "_list.do?sysparm_query=" + addQueryFilter('', fields, ids, tableName, null, true);
}
function showItem(tableName, fields, ids, view) {
if (!ids)
ids = gActiveContext.getTableName();
var url = tableName + ".do?sysparm_query=" + addQueryFilter('', fields, ids, tableName);
if (typeof(view) != "undefined") {
url += "&sysparm_view=" + view;
}
self.location = url;
}
function addQueryFilter(form, names, values, table, formName, useBaseTable) {
var tableName = table;
if ((names == '' || names == null) || (values == '' || values == null))
return;
if (names.indexOf("CALCULATED") == 0) {
var ec = "";
if (names.indexOf("CollectionQueryCalculator") > 0)
ec = collectionQueryCalculator(values);
else
ec = securityQueryCalculator(values);
addInput(form, "HIDDEN", "sysparm_query", ec);
addInput(form, "HIDDEN", "sysparm_query_encoced", ec);
return;
}
var vNames = names.split(".");
var vValues = values.split(".");
if (names.indexOf("name.element") == 0) {
if (vValues.length > 2) {
var tableElement = TableElement.get(values);
if (tableElement.type == 'glide_var') {
vValues[0] = vValues[2];
vValues[1] = vValues[3];
} else {
vValues[0] = tableElement.getTableName();
vValues[1] = tableElement.getName();
}
} else {
var tableR = new Table(vValues[0]);
var element = tableR.getElement(vValues[1]);
var label = '';
if (formName && formName.indexOf("sys_documentation") == 0)
label = getTableLabel(tableR.getName(), element.getName());
if (label == '' && element != null)
vValues[0] = useBaseTable === true ? element.getBaseTableName() : element.getTableName();
}
}
if (names.indexOf("name.element.language") == 0) {
vValues[2] = g_lang;
}
var query = new Array();
for (var i = 0; i < vNames.length; i++) {
if ("sys_choice" == tableName && "name" == vNames[i]) {
query.push("nameINjavascript:getTableExtensions('" + vValues[i] +"')");
}
else if ("sys_ui_style" == tableName && "name" == vNames[i]) {
query.push(buildQueryClause(values.split(".")[0], "name"));
}
else
query.push(vNames[i] + "=" + vValues[i]);
}
if(tableName)
return query.join('^');
addInput(form, "HIDDEN", "sysparm_query", query.join('^'));
addInput(form, "HIDDEN", "sysparm_query_encoded", query.join('^'));
setStack(form);
}
function getTableLabel(tabel, element) {
var ajax = new GlideAjax('ContextActionsAjax');
ajax.addParam("sysparm_name", "getLabel");
ajax.addParam("sysparm_type", tabel);
ajax.addParam("sysparm_value", element);
ajax.getXMLWait();
return ajax.getAnswer();
}
function collectionQueryCalculator(args) {
var sa = args.split(",");
var tableName = sa[0];
var collField = sa[1];
return buildQueryClause(tableName, collField);
}
function buildQueryClause(tableName, collField) {
var tableDef = Table.get(tableName);
var tables = tableDef.getTables();
var result = new Array();
result.push(collField);
result.push("=");
result.push(tableName);
result.push("^OR");
result.push(collField);
result.push("IN");
result.push(tables.join());
return result.join("");
}
function securityQueryCalculator(values) {
var sa = values.split(".");
var fieldName = null;
var element = null;
var tableName = sa[0];
if (sa.length > 1)
fieldName = sa[1];
var allTables = new Array();
var table = new Table(tableName);
if (fieldName == null)
allTables = table.getTables();
else {
allTables.push(tableName);
element = table.getElement(fieldName);
if (element != null && element.getTableName() != tableName)
allTables.push(element.getTableName());
allTables.push("*");
}
var rc = getRules(allTables, fieldName);
return rc;
}
function getRules(allTables, fieldName) {
var rules = null;
if (fieldName == null) {
rules = "name=*^ORnameSTARTSWITH*.";
for ( var i = 0; i < allTables.length; i++)
rules += "^ORname=" + allTables[i] + "^ORnameSTARTSWITH" + allTables[i] + ".";
return rules;
}
var rc = new Array();
for ( var x = 0; x < allTables.length; x++) {
var tableName = allTables[x];
rc.push(tableName);
rc.push(tableName + ".*");
if (fieldName != null)
rc.push(tableName + "." + fieldName);
}
rules = "nameIN" + rc.join();
return rules;
}
function setWatchField(id) {
var ajax = new GlideAjax('ContextActionsAjax');
ajax.addParam("sysparm_name", "setWatchField");
ajax.addParam("sysparm_id", id);
ajax.getXML(function() {CustomEvent.fire('glide_optics_inspect_watchfield', id)});
}
function showWatchField(id) {
var ajax = new GlideAjax('ContextActionsAjax');
ajax.addParam("sysparm_name", "setWatchField");
ajax.addParam("sysparm_id", id);
ajax.getXML(function() {CustomEvent.fire('glide_optics_inspect_show_watchfield', id)});
}
function clearWatchField(id) {
var ajax = new GlideAjax('ContextActionsAjax');
ajax.addParam("sysparm_name", "clearWatchField");
ajax.getXML();
ajax.getXML(function() {CustomEvent.fire('glide_optics_inspect_clear_watchfield', id)});
}
function setStack(form) {
var url = new GlideURL(window.location.href);
var stack = url.getParam('sysparm_nameofstack');
if (stack)
addInput(form, 'HIDDEN', 'sysparm_nameofstack', stack);
}
;
/*! RESOURCE: /scripts/depends.js */
function getNameFromElement(elementName) {
var names = elementName.split(".");
names = names.slice(1);
return names.join(".");
}
function loadFilterColumns(fname, dependent) {
var value = resolveDependentValue(fname, dependent);
var names = fname.split(".");
serverRequest("xmlhttp.do?sysparm_include_sysid=true&sysparm_processor=SysMeta&sysparm_table_name=false&sysparm_type=column&sysparm_nomax=true&sysparm_value=" + names[0], getFilterColumnsResponse, [fname, dependent]);
CustomEvent.fire('conditions:dependent_change');
}
function getFilterColumnsResponse(evt, args) {
var fname = args[0];
var dep = args[1];
var hinput = document.getElementById(fname);
filterExpanded = true;
var table = resolveDependentValue(fname, dep);
var xfilter = unescape(hinput.value);
var form = findParentByTag(hinput, "FORM");
if (table) {
firstTable = table;
createCondFilter(table + "." + fname, xfilter, fname);
}
}
function gotTemplateResponseWithRef(fn, name) {
if(typeof name !== 'string' || name.length === 0)
return fn;
return function() {
var args = Array.prototype.slice.call(arguments);
args.push(name);
fn.apply(null, args);
}
}
function onSelChange(elementName, fromSetTemplateValue) {
var elementId = elementName;
var includesSysSelect = elementName.indexOf("sys_select.") === 0;
if (includesSysSelect)
elementId = elementName.replace("sys_select.", "");
var df = new DerivedFields(elementId, gel(elementName).value);
df.clearRelated();
df.updateRelated();
var vName = "ni.dependent." + getNameFromElement(elementId);
var eDeps = document.getElementsByName(vName);
jslog("*************---->" + eDeps.length);
for (var i = 0; i < eDeps.length; i++) {
var eDep = eDeps[i];
if (eDep == null)
continue;
var f = eDep.attributes.getNamedItem('onDependentChange');
if (f) {
eval(f.nodeValue);
continue;
}
if (df.isDerivedWaitingClearValue() && eDep.hasAttribute('data-ref-qual'))
continue;
var name = eDep.value;
var eChanged = gel(elementName);
var value;
if (eChanged.options) {
var selected = eChanged.selectedIndex;
value = eChanged.options[selected].value;
} else
value = eChanged.value;
var retFunc = selResponseHelper(includesSysSelect || isReferenceType(name), fromSetTemplateValue);
var ajax = new GlideAjax("set_from_attributes");
var argCnt = 0;
for (var ac = 0; ac < eDep.attributes.length; ac++) {
var itemName = eDep.attributes[ac].name;
if (itemName.substring(0, 7).toLowerCase() == "sysparm") {
var pvalue = eDep.attributes[ac].value;
ajax.addParam(itemName, pvalue);
argCnt++;
} else if (itemName == "function") {
var fdef = eDep.attributes[ac].value;
var index = fdef.indexOf("(");
if (index == -1) {
retFunc = eval(eDep.attributes[ac].value);
retFunc = gotTemplateResponseWithRef(retFunc, eDep.dataset.ref);
}
else
retFunc = fdef;
}
}
if (argCnt == 0)
continue;
ajax.addParam("sysparm_value", value);
ajax.addParam("sysparm_name", name);
ajax.addParam("sysparm_chars", "*");
ajax.addParam("sysparm_nomax", "true");
if ('true' == eDep.getAttribute('data-ref-qual') && typeof g_form !== 'undefined') {
if (g_form.isNewRecord() || _hasEmptyAncestor(g_form._removeTableName(name)))
ajax.addEncodedString(g_form.serialize());
else  {
var encoded = g_form.serializeChangedAll();
if (!gel(elementId).changed)
encoded += g_form._serializeElement(elementId);
ajax.addEncodedString(encoded);
}
}
var scopeElement = gel('sysparm_domain_scope');
if (scopeElement && scopeElement.value) {
ajax.addParam("sysparm_domain_scope", scopeElement.value);
}
var domainElement = gel('sysparm_domain');
if (domainElement && domainElement.value) {
ajax.addParam("sysparm_domain", domainElement.value);
}
if ( fromSetTemplateValue ) {
ajax.setWantRequestObject(true);
var responseObject = ajax.getXMLWait();
if (responseObject.responseXML)
retFunc(responseObject, eChanged);
} else {
ajax.getXML(retFunc, null, eChanged);
}
}
}
function _hasEmptyAncestor(v) {
var name = v.substring(0, v.lastIndexOf('.'));
return !!name && (g_form.getValue(name) == '' || _hasEmptyAncestor(name));
}
function isReferenceType(name) {
return getDataType(name) =='glide_element_reference_choice';
}
function getDataType(name) {
var input = gel(name);
return input && input.getAttribute('data-type') || '';
}
function getDefaultOption(name, e) {
if (e.getAttribute("sysparm_processor") !== "PickList")
return null;
var defaultOption = e.getAttribute("default_option");
if (defaultOption)
return defaultOption;
if ("glide_element_reference_choice_without_none" !== getDataType(name))
return getMessage('-- None --');
return null;
}
function selResponse(request, containsSysSelect, fromSetTemplateValue) {
if (!request || !request.responseXML)
return;
var e = request.responseXML.documentElement;
var elementName = e.getAttribute("sysparm_name");
if (containsSysSelect && gel('sys_display.original.' + elementName))
elementName = "sys_select." + elementName;
var selectedItem = e.getAttribute("select_option");
var select = gel(elementName);
var currentValue = select.value;
var isSelect2 = select.className.indexOf('select2') > -1;
try {
select.options.length = 0;
} catch (e) {
}
var defaultOption = getDefaultOption(elementName, e);
if (defaultOption)
appendSelectOption(select, "", document.createTextNode(defaultOption));
var items = request.responseXML.getElementsByTagName("item");
for (var i = 0; i < items.length; i++) {
var item = items[i];
var t = item.getAttribute("value");
var label = item.getAttribute("label");
var hint = item.getAttribute("hint");
if (defaultOption == null || label !== defaultOption) {
if (isSelect2){
var newOption = new Option(label, t);
$j(select).append(newOption);
} else
var opt = appendSelectOption(select, t, document.createTextNode(label));
if (hint != '' && opt)
opt.title = hint;
if (selectedItem && label == selectedItem)
if (isSelect2)
$j(select).val(t);
else
opt.selected = true;
else if (currentValue && t == currentValue) {
if(isSelect2)
$j(select).val(currentValue);
else
opt.selected = true;
currentValue = '';
}
}
}
if (select['onchange'])
select.onchange.call(select, null, fromSetTemplateValue);
if (!select.value && typeof g_form != 'undefined')
g_form._setEmptyMandatoryFieldsVisible(elementName);
}
function selResponseHelper(hasSysSelect, fromSetTemplateValue) {
return function (request) {
selResponse(request, hasSysSelect, fromSetTemplateValue);
}
}
function hasDepends(elementName) {
var vName = "ni.dependent." + getNameFromElement(elementName);
var eDep = document.getElementsByName(vName)[0];
return eDep;
}
function resolveDependentValue(id, depname, deptable) {
var systable = id.split(".")[0];
var table = null;
var dep = document.getElementById(systable + '.' + depname);
if (dep != null) {
if (dep.tagName == 'SELECT')
table = dep.options[dep.selectedIndex].value
else
table = dep.value;
table = table.split(".")[0];
} else {
table = deptable;
}
if (table == '*' || table == '' || table == 'null')
table = null;
return table;
}
function loadFields(fname, dependent, types, script_types, ref_types, script_ref_types, script_ref_types_dependent, field_choices_script, show_field_name_on_label, access_table) {
var depValue = resolveDependentValue(fname, dependent, dependent);
loadFieldsWithValue(fname, depValue, types, script_types, ref_types, script_ref_types, script_ref_types_dependent, field_choices_script, show_field_name_on_label, access_table);
}
function loadFieldsWithValue(fname, table, types, script_types, ref_types, script_ref_types, script_ref_types_dependent, field_choices_script, show_field_name_on_label, access_table) {
var script_ref_types_dependent_value = "";
if (script_ref_types_dependent) {
var systable = fname.split(".")[0];
var s_dep = gel(systable + '.' + script_ref_types_dependent);
if (s_dep != null) {
if (s_dep.tagName == 'SELECT')
script_ref_types_dependent_value = s_dep.options[s_dep.selectedIndex].value;
else
script_ref_types_dependent_value = s_dep.value;
}
}
if (table != null)
getTableColumns(table, fname, types, script_types, ref_types, script_ref_types, script_ref_types_dependent_value, field_choices_script, show_field_name_on_label, access_table);
}
function getTableColumns(table, ref, types, script_types, ref_types, script_ref_types, script_ref_types_dependent_value, field_choices_script, show_field_name_on_label, access_table) {
if (!types)
types = "";
if (!script_types)
script_types = "";
if (!ref_types)
ref_types = "";
if (!script_ref_types)
script_ref_types = "";
if (!script_ref_types_dependent_value)
script_ref_types_dependent_value = "";
var serverRequestString = "xmlhttp.do?sysparm_include_sysid=true&sysparm_processor=SysMeta&sysparm_table_name=false&sysparm_type=column&sysparm_nomax=true" +
"&sysparm_value=" + table +
"&sysparm_types=" + types +
"&sysparm_script_types=" + script_types +
"&sysparm_script_ref_types_dependent_value=" + script_ref_types_dependent_value +
"&sysparm_script_ref_types=" + script_ref_types +
"&sysparm_ref_types=" + ref_types +
"&sysparm_containing_table=" + $('sys_target').value;
if (field_choices_script && field_choices_script != "")
serverRequestString += "&sysparm_field_choices_script=" + field_choices_script;
if (show_field_name_on_label && show_field_name_on_label != "")
serverRequestString += "&sysparm_show_field_name_on_label=" + show_field_name_on_label;
if (access_table)
serverRequestString += "&sysparm_access_table=" + access_table;
serverRequestString += "&sysparm_ref_field=" + encodeURIComponent(ref);
field_choices_script = field_choices_script ? field_choices_script : undefined;
show_field_name_on_label = show_field_name_on_label ? show_field_name_on_label : undefined;
access_table = access_table ? access_table : undefined;
var cacheObjItem = getDependantCacheObj(table, types, script_types, ref_types, script_ref_types, script_ref_types_dependent_value, field_choices_script, show_field_name_on_label, access_table);
if (!cacheObjItem) {
var tmpObj = {};
tmpObj.table = table;
tmpObj.types = types;
tmpObj.scriptTypes = script_types;
tmpObj.refTypes = ref_types;
tmpObj.scriptRefTypes = script_ref_types;
tmpObj.scriptRefTypesDependentValue = script_ref_types_dependent_value;
tmpObj.choicesScript = field_choices_script;
tmpObj.nameOnLabel = show_field_name_on_label;
tmpObj.accessTable = access_table;
tmpObj.fields = [];
tmpObj.fields.push(ref);
tmpObj.data = "";
dependantCacheObjArray.push(tmpObj);
serverRequest(serverRequestString, getTableColumnsResponse, ref);
} else if(cacheObjItem && cacheObjItem.data === "")
cacheObjItem.fields.push(ref);
else if (cacheObjItem && cacheObjItem.data !== "")
getTableColumnsResponse(cacheObjItem.data, ref)
}
var dependantCacheObjArray = [];
function getDependantCacheObj(table, types, scriptTypes, refTypes, scriptRefTypes, scriptRefTypesDependentValue, choicesScript, nameOnLabel, accessTable) {
return dependantCacheObjArray.filter(function(co) {
return co.table === table &&
co.types === types &&
co.scriptTypes === scriptTypes &&
co.refTypes === refTypes &&
co.scriptRefTypes === scriptRefTypes &&
co.scriptRefTypesDependentValue === scriptRefTypesDependentValue &&
co.choicesScript === choicesScript &&
co.nameOnLabel === nameOnLabel &&
co.accessTable === accessTable;
})[0];
}
function getTableColumnsResponse(request, ref) {
var reqUrl = request.responseURL;
if (reqUrl) {
var params = reqUrl.split("?")[1].split("&");
var table;
var types;
var script_types;
var ref_types;
var script_ref_types;
var script_ref_types_dependent_value;
var field_choices_script;
var show_field_name_on_label;
var access_table;
for (var i = 0; i < params.length; i++) {
var parts = params[i].split("=");
switch(parts[0]) {
case 'sysparm_value':
table = parts[1];
break;
case 'sysparm_types':
types = parts[1];
break;
case 'sysparm_script_types':
script_types = parts[1];
break;
case 'sysparm_ref_types':
ref_types = parts[1];
break;
case 'sysparm_script_ref_types':
script_ref_types = parts[1];
break;
case 'sysparm_script_ref_types_dependent_value':
script_ref_types_dependent_value = parts[1];
break;
case 'sysparm_field_choices_script':
field_choices_script = parts[1];
break;
case 'sysparm_show_field_name_on_label':
show_field_name_on_label = parts[1];
break;
case 'sysparm_access_table':
access_table = parts[1];
break;
}
}
var cacheObjItem = getDependantCacheObj(table, types, script_types, ref_types, script_ref_types, script_ref_types_dependent_value, field_choices_script, show_field_name_on_label, access_table);
if (cacheObjItem && cacheObjItem.data === "") {
cacheObjItem.data = request;
var fields = cacheObjItem.fields;
for (var i = 0; i < fields.length; i++)
getTableColumnsResponse(request, fields[i]);
}
}
var fname = ref;
var tcols = request.responseXML;
var scols = gel(fname);
var currentvis = scols.style.visibility;
scols.style.visibility = "hidden";
var cfield = gel('sys_original.'+fname);
cValue = cfield.value;
if (typeof scols.options === 'undefined')
scols.options = [];
else
scols.options.length = 0;
var includeNone = scols.attributes.getNamedItem('include_none');
if (includeNone) {
if (includeNone.nodeValue == 'true')
scols.options[scols.options.length] = new Option(getMessage('-- None --'), '');
}
var items = tcols.getElementsByTagName("item");
var sindex = 0;
for (var i = 0; i != items.length; i++) {
var item = items[i];
var value = item.getAttribute("value");
var label = item.getAttribute("label");
scols.options[scols.options.length] = new Option(label, value);
if (cValue == value)
sindex = scols.options.length - 1;
}
scols.selectedIndex = sindex;
scols.style.visibility = currentvis;
CustomEvent.fire('getTableColumnsResponse.received');
fireSetValueEvent();
}
function fireSetValueEvent() {
if(typeof g_form != 'undefined') {
var form = g_form.getFormElement();
if(typeof form != 'undefined')
$(form).fire('glideform:setvalue');
}
}
;
/*! RESOURCE: /scripts/email_activity.js */
function setEmailBody(id) {
var iframeID = id + ".body";
var iframe = gel(iframeID);
if (iframe)
return;
iframe = cel("iframe");
iframe.id = iframeID;
iframe.width="100%";
iframe.frameBorder = "0";
Event.observe(iframe, "load", emailResizeObserved.bind(iframe), true);
iframe.src = "email_display.do?email_id=" + id;
iframe.email_id = id;
var cellID = id + ".mail_cell";
var td = gel(cellID);
if (!td) {
alert("email_activity.js: TD missing for '" + cellID + "'");
return;
}
td.appendChild(iframe);
}
function emailResizeObserved() {
adjustEmailHeight(this);
}
function adjustEmailHeight(frame) {
frame.style.height = frame.contentWindow.document.body.scrollHeight + 'px';
}
;
/*! RESOURCE: /scripts/doctype/condition_global_variables14.js */
var MAIN_LAYER = "filterdiv";
var TEXTQUERY = "123TEXTQUERY321";
var PLACEHOLDER = "123PLACEHOLDER321";
var PLACEHOLDERFIELD = '-- choose field --';
var DEFAULT_NAME = "report";
var DEFAULT_WIDTH = "10px";
var DEFAULT_BORDER = 0;
var JS_GS = 'javascript:gs.';
var useTextareas = false;
var noConditionals = false;
var noOps = false;
var noSort = false;
var gotShowRelated = false;
var gotoPart = false;
var calendars = 0;
var refcount = 0;
var sortIndex = 0;
var queryNumber = 0;
var calendarPopups = [];
var filter;
var orderBy;
var columns = null;
var currentTable = '';
var firstTable = '';
var oldStatus = '';
var showRelated = '';
var filterExpanded = false;
var queueTables = new Array();
var queueFilters = new Array();
var queueColumns = new Array();
var operators = [
"BETWEEN",
"!=",
">=",
"<=",
"=",
">",
"<",
"NOT IN",
"IN",
"NOT LIKE",
"LIKE",
"ON",
"NOTON",
"DATEPART",
"RELATIVE",
"STARTSWITH",
"ENDSWITH",
"EMPTYSTRING",
"ISEMPTY",
"ISNOTEMPTY",
"INSTANCEOF",
"ANYTHING",
"VALCHANGES",
"CHANGESFROM",
"CHANGESTO",
"MATCH_PAT",
"MATCH_RGX",
"SAMEAS",
"NSAMEAS",
"MORETHAN",
"LESSTHAN",
"DYNAMIC",
"GT_FIELD",
"LT_FIELD",
"GT_OR_EQUALS_FIELD",
"LT_OR_EQUALS_FIELD",
"HASVARIABLE" ,
"HASITEMVARIABLE",
"HASQUESTION",
"HASLABEL"
];
var fieldComparisonOperators = ["SAMEAS", "NSAMEAS", "MORETHAN","LESSTHAN", "GT_FIELD", "LT_FIELD", "GT_OR_EQUALS_FIELD", "LT_OR_EQUALS_FIELD" ];
var dateTypes = new Array();
dateTypes['glide_date_time'] = 1;
dateTypes['glide_date'] = 1;
dateTypes['date'] = 1;
dateTypes['datetime'] = 1;
dateTypes['due_date'] = 1;
var dateOnlyTypes = new Object();
dateOnlyTypes['glide_date'] = 1;
dateOnlyTypes['date'] = 1;
var dateTimeTypes = new Object();
dateTimeTypes['glide_date_time'] = 1;
dateTimeTypes['datetime'] = 1;
dateTimeTypes['due_date'] = 1;
var numericTypes = new Array();
numericTypes['integer'] = 1;
numericTypes['decimal'] = 1;
numericTypes['numeric'] = 1;
numericTypes['float'] = 1;
numericTypes['domain_number'] = 1;
numericTypes['auto_increment'] = 1;
numericTypes['percent_complete'] = 1;
var opersNS = {};
opersNS.opdef = {
'af'  : [ '>',          'after'              ],
'ataf': [ '>=',         'at or after'        ],
'any' : [ 'ANYTHING',   'is anything'        ],
'are' : [ '=',          'are'                ],
'asc' : [ 'ascending',  'a to z'             ],
'avg' : [ 'avg',        'average'            ],
'bf'  : [ '<',          'before'             ],
'atbf': [ '<=',          'at or before'      ],
'btw' : [ 'BETWEEN',    'between'            ],
'dsc' : [ 'descending', 'z to a'             ],
'dtpt': [ 'DATEPART',   'trend'              ],
'em'  : [ 'ISEMPTY',    'is empty'           ],
'es'  : [ 'EMPTYSTRING',   'is empty string' ],
'enwt': [ 'ENDSWITH',   'ends with'          ],
'eq'  : [ '=',          'is'                 ],
'eqd' : [ 'DYNAMIC',    'is (dynamic)'       ],
'fvc' : [ 'VALCHANGES', 'changes'            ],
'fvf' : [ 'CHANGESFROM', 'changes from'      ],
'fvt' : [ 'CHANGESTO',  'changes to'         ],
'gt'  : [ '>',          'greater than'       ],
'gteq': [ '>=',         'greater than or is' ],
'inna': [ 'IN',         'is one of'          ],
'inst': [ 'INSTANCEOF', 'is a'               ],
'lk'  : [ 'LIKE',       'contains'           ],
'lt'  : [ '<',          'less than'          ],
'lteq': [ '<=',         'less than or is'    ],
'max' : [ 'max',        'maximum'            ],
'min' : [ 'min',        'minimum'            ],
'mpat': [ 'MATCH_PAT',  'matches pattern'    ],
'mreg': [ 'MATCH_RGX',  'matches regex'      ],
'ntem': [ 'ISNOTEMPTY', 'is not empty'       ],
'nteq': [ '!=',         'is not'             ],
'ntin': [ 'NOT IN',     'is not one of'      ],
'ntlk': [ 'NOT LIKE',   'does not contain'   ],
'nton': [ 'NOTON',      'not on'             ],
'on'  : [ 'ON',         'on'                 ],
'oper': [ '-- oper --', '-- oper --'         ],
'rltv': [ 'RELATIVE',   'relative'           ],
'saas': [ 'SAMEAS',     'is same'            ],
'nsas': [ 'NSAMEAS',    'is different'       ],
'snc' : [ 'SINCE',      'since baseline'     ],
'stwt': [ 'STARTSWITH', 'starts with'        ],
'sum' : [ 'sum',        'Total'              ],
'date_more': [ 'MORETHAN',   'is more than'  ],
'date_less': [ 'LESSTHAN',   'is less than'  ],
'gtfd': [ 'GT_FIELD',   'greater than field' ],
'ltfd': [ 'LT_FIELD',   'less than field'    ],
'gteqfd' : [ 'GT_OR_EQUALS_FIELD', 'greater than or is field' ],
'lteqfd' : [ 'LT_OR_EQUALS_FIELD', 'less than or is field' ]
};
opersNS.opdef_template = {
'eq'  : [ '=',          'To'                 ],
'saas': [ 'SAMEAS',     'Same as'            ],
'eqd' : [ 'DYNAMIC',    'To (dynamic)'       ]
}
opersNS.compile = function(ops_input, opsdef) {
for (var fieldType in ops_input) {
var proto = ops_input[fieldType];
if (proto.charAt(0) == '=')
continue;
var opers = proto.split(",");
var opArray = [];
for (var i = 0; i < opers.length; i++) {
var oper = opers[i];
if (oper)
opArray.push(opsdef[oper]);
}
ops_input[fieldType] = opArray;
}
for (var fieldType in ops_input) {
var proto = ops_input[fieldType];
if (typeof proto != 'string')
continue;
ops_input[fieldType] = ops_input[proto.substring(1)];
}
}
var edge_order_Types = {
'string'  : 'eq,nteq,em,ntem,lt,gt,lteq,gteq',
'calendar': 'eq,nteq,em,ntem,bf,af,atbf,ataf'
};
var edge_equality_Types = {
'string'  : 'eq,nteq,em,ntem',
'calendar': 'eq,nteq,em,ntem'
};
var sysopers = {
'auto_increment'	  : '=integer',
'aggspec'             : 'sum,avg,min,max,any,fvc,fvf,fvt',
'boolean'             : 'eq,nteq,em,ntem,any,fvc,fvf,fvt,saas,nsas',
'calendar'            : 'on,nton,bf,atbf,af,ataf,btw,dtpt,rltv,snc,em,ntem,any,fvc,saas,nsas,date_more,date_less',
'choice'              : 'eq,nteq,inna,ntin,lk,stwt,enwt,ntlk,any,fvc,fvf,fvt,saas,nsas',
'referencechoice'     : 'eq,nteq,inna,ntin,lk,stwt,enwt,ntlk,any',
'composite_field'     : 'stwt,lk,ntlk,any',
'composite_name'      : '=string',
'conditions'          : '=string',
'condition_string'    : '=string',
'css'				  : '=html',
'decimal'             : '=integer',
'currency'			  : 'eq,nteq,em,ntem,lt,gt,lteq,gteq,btw',
'currency2'			  : 'eq,nteq,em,ntem,lt,gt,lteq,gteq,btw',
'default'             : 'eq,nteq,any,fvc,fvf,fvt',
'email'               : '=string',
'email_script'        : '=string',
'field_name'          : '=string',
'glide_duration'      : 'eq,nteq,em,ntem,lt,gt,lteq,gteq,btw,any,fvc',
'glide_encrypted'     : 'eq,nteq,em,ntem',
'glide_list'          : 'lk,ntlk,em,ntem,fvc,fvf,fvt,eqd',
'GUID'                : '=string',
'html'                : 'lk,ntlk,em,ntem,any,fvc,fvf,fvt',
'html_script'         : '=string',
'html_template'       : '=script',
'integer'             : 'eq,nteq,em,ntem,lt,gt,lteq,gteq,btw,any,fvc,fvf,fvt,saas,nsas,gtfd,ltfd,gteqfd,lteqfd',
'integer_choice'      : 'eq,nteq,inna,ntin,em,ntem,lt,gt,lteq,gteq,btw,any,fvc,fvf,fvt,saas,nsas',
'journal'             : 'fvc',
'journal_input'       : '=journal',
'keyword'             : 'are',
'multi_two_lines'     : '=string',
'percent_complete'    : '=integer',
'ph_number'           : '=string',
'phone_number_e164'   : '=string',
'placeholder'         : 'oper',
'price'				  : 'eq,nteq,em,ntem,lt,gt,lteq,gteq,btw',
'reference'           : 'eq,nteq,em,ntem,stwt,enwt,lk,ntlk,any,saas,nsas,es,eqd,fvc,fvf,fvt',
'referencevariable'   : 'eq,nteq,em,ntem',
'replication_payload' : '=string',
'script'              : 'lk,ntlk,ntem,any,fvc,fvf,fvt',
'script_plain'        : '=script',
'script_server'       : '=script',
'sortspec'            : 'asc,dsc,fvc,fvf,fvt',
'string'              : 'stwt,enwt,lk,ntlk,eq,nteq,em,ntem,mpat,mreg,any,inna,es,fvc,fvf,fvt,lteq,gteq,btw,saas,nsas',
'string_choice'       : '=choice',
'string_clob'         : 'lk,ntlk,stwt,enwt,em,ntem,any,fvc,fvf,fvt',
'string_full_utf8'    : '=string',
'string_numeric'      : 'eq,nteq,lk,ntlk,stwt,enwt,btw,any,fvc,fvf,fvt,saas,nsas',
'sys_class_name'      : 'eq,nteq,inst,any,fvc,fvf,fvt',
'sysevent_name'       : '=string',
'table_name'          : '=string',
'timer'               : '=integer',
'translated_field'    : '=string',
'translated_html'     : '=html',
'translated_text'     : '=string',
'translated_basic'    : 'eq,nteq,em,ntem',
'url'                 : '=string',
'workflow'            : '=choice',
'xml'                 : '=html',
'domain_path'         : '=string',
'tree_code'           : '=string',
'tree_path'           : '=string',
'source_id' 	      : '=string',
'source_name'  	      : '=string',
'source_table' 	      : '=string',
'sc_attachment'       : 'em,ntem'
};
var sysopers_template = {
'default'             : 'eq,saas,eqd'
}
opersNS.compile(sysopers, opersNS.opdef);
opersNS.compile(edge_order_Types, opersNS.opdef);
opersNS.compile(edge_equality_Types, opersNS.opdef);
opersNS.compile(sysopers_template, opersNS.opdef_template);
var extopers = {};
extopers['MATCH_PAT'] = true;
extopers['MATCH_RGX'] = true;
extopers['VALCHANGES'] = true;
extopers['CHANGESTO'] = true;
extopers['CHANGESFROM'] = true;
var calendarPromise = $j.Deferred();
(function() {
var req = new XMLHttpRequest();
req.open("GET", "/api/now/ui/date_time/legacy", true);
req.setRequestHeader('Accept', 'application/json');
if (typeof g_ck != 'undefined' && g_ck != "") {
req.setRequestHeader('X-UserToken', g_ck);
}
function responseFunction (request) {
var result = JSON.parse(request.response).result;
var calendar = result.timeAgoDates;
calendar.DATEPART = result.datePart;
calendar.BETWEEN = result.between;
calendar.RELATIVE = result.relative;
calendar.TRENDVALUES = result.trendValues;
calendar.WHEN = result.when;
calendar.TRENDVALUES_WITH_FIELDS_PLURAL = result.trendValuesWithFieldsPlural;
calendar.TRENDVALUES_WITH_FIELDS = result.trendValuesWithFields;
calendar.WHEN_WITH_FIELDS = result.whenWithFields;
sysvalues['calendar'] = calendar;
calendarPromise.resolve(calendar);
}
req.onreadystatechange = function() { processReqChange(req, responseFunction); };
req.send(null);
}());
var sysvalues = {};
sysvalues['boolean']        = [[ "true", "true" ], [ "false",  "false" ]];
sysvalues['catalog_boolean']        = [[ "Yes", "Yes" ], [ "No",  "No" ]];
sysvalues['string_boolean'] = [[ "1", "true" ], [ "0",  "false" ]];
var MESSAGES_CONDITION_RELATED_FILES = ['lowercase_fields','Keywords','Show Related Fields','Remove Related Fields', '-- choose field --', '-- value --', '-- None --'];
var g_current_table = '';
var g_filter_extension_map = {};
;
/*! RESOURCE: /scripts/doctype/GlidePopupInterface.js */
(function(exports) {
function isApiLoaded(m) {
return exports.nowapi && exports.nowapi.g_popup_manager && exports.nowapi.g_popup_manager[m];
}
function popListDiv(evt, target, sys_id, view, width, showOpenButton, trapFocus) {
var onReady = function() {
nowapi.g_popup_manager.popListDiv(
evt,
target,
sys_id,
view,
width,
showOpenButton,
trapFocus
);
};
if (isApiLoaded("popListDiv"))
onReady();
else
ScriptLoader.getScripts("scripts/classes/nowapi/ui/GlidePopup.js", onReady);
}
function popReferenceDiv(evt, inputId, view, form, refKey) {
var onReady = function() {
nowapi.g_popup_manager.popReferenceDiv(
evt,
inputId,
view,
form,
refKey,
true
);
};
if (isApiLoaded("popReferenceDiv"))
onReady();
else
ScriptLoader.getScripts("scripts/classes/nowapi/ui/GlidePopup.js", onReady);
}
function popForm(evt, target, sys_id, view, width) {
ScriptLoader.getScripts(
"scripts/classes/nowapi/ui/GlidePopup.js",
function() {
nowapi.g_popup_manager.popForm(
evt,
target,
sys_id,
view,
width
);
}
);
}
function popDiv(evt, catalogparams) {
ScriptLoader.getScripts(
"scripts/classes/nowapi/ui/GlidePopup.js",
function() {
var validSysId = "^[a-fA-F0-9]{32}$";
if (catalogparams.match(validSysId))
nowapi.g_popup_manager.popDiv(evt, catalogparams);
else {
var params;
try {
params = JSON.parse(catalogparams);
if (typeof params == "object")
nowapi.g_popup_manager.popDiv(evt, params);
}
catch(err) {
console.log(err);
}
}
});
}
function popCatDiv(evt, sys_id) {
ScriptLoader.getScripts(
"scripts/classes/nowapi/ui/GlidePopup.js",
function() {
nowapi.g_popup_manager.popCatDiv(evt, sys_id);
}
);
}
function popKnowledgeDiv(evt, sys_id) {
ScriptLoader.getScripts(
"scripts/classes/nowapi/ui/GlidePopup.js",
function() {
nowapi.g_popup_manager.popKnowledgeDiv(evt, sys_id);
}
);
}
function popRecordDiv(evt, table, sys_id, view, width) {
var onReady = function() {
nowapi.g_popup_manager.popRecordDiv(
evt,
table,
sys_id,
view,
width
);
};
if (isApiLoaded("popRecordDiv"))
onReady();
else
ScriptLoader.getScripts("scripts/classes/nowapi/ui/GlidePopup.js", onReady);
}
function popLightWeightReferenceDiv(evt, inputid, hideOpenButton) {
ScriptLoader.getScripts(
"scripts/classes/nowapi/ui/GlidePopup.js",
function() {
nowapi.g_popup_manager.popLightWeightReferenceDiv(evt, inputid, hideOpenButton);
}
);
}
function popIssueDiv(evt, issues) {
ScriptLoader.getScripts(
"scripts/classes/nowapi/ui/GlidePopup.js",
function() {
nowapi.g_popup_manager.popIssueDiv(evt, issues);
}
);
}
function popReportInfoDiv(evt, sys_id) {
ScriptLoader.getScripts(
"scripts/classes/nowapi/ui/GlidePopup.js",
function() {
nowapi.g_popup_manager.popReportInfoDiv(evt, sys_id);
}
);
}
function popHistoryDiv(evt, table, sys_id, checkpoint, internalCP) {
ScriptLoader.getScripts(
"scripts/classes/nowapi/ui/GlidePopup.js",
function() {
nowapi.g_popup_manager.popHistoryDiv(
evt,
table,
sys_id,
checkpoint,
internalCP
);
}
);
}
function lockPopup(e) {
nowapi.g_popup_manager.destroypopDiv(e);
}
function lockPopupID(e, sys_id) {}
exports.popListDiv = popListDiv;
exports.popReferenceDiv = popReferenceDiv;
exports.popForm = popForm;
exports.popHistoryDiv = popHistoryDiv;
exports.lockPopup = lockPopup;
exports.lockPopupID = lockPopupID;
exports.popDiv = popDiv;
exports.popCatDiv = popCatDiv;
exports.popKnowledgeDiv = popKnowledgeDiv;
exports.popReportInfoDiv = popReportInfoDiv;
exports.popRecordDiv = popRecordDiv;
exports.popIssueDiv = popIssueDiv;
exports.popLightWeightReferenceDiv = popLightWeightReferenceDiv;
})(window);
;
/*! RESOURCE: /scripts/doctype/navigator_menu.js */
$j(function($) {
$('#perspective_switcher').click(function(e) {
if (gActiveContext) {
contextHide();
return;
}
var saveFavoriteLabel = function(){
var label = getMessage('Automatically Add Favorites');
if (window.autoSaveFavoritePreference)
label += ' <span class="icon-check" style="padding-left: 10px;"></span>';
return label;
}();
var gcm = new GwtContextMenu("context_perspectives_menu");
gcm.clear();
$('a[parent_id=perspectives]').each(function (index, item) {
var name = item.innerHTML;
if (item.href.split("=")[1] == "All")
gcm.addHref(name, "window.location = '" + item.href + "'");
else
gcm.addHref(name, "window.location = '" + item.href + "'");
});
gcm.addLine();
gcm.addHref(saveFavoriteLabel, '$j(window).trigger("toggle_auto_favorite")');
gcm.addHref(getMessage('Refresh Navigator Title'), 'window.location = "navigator_change.do"');
gcm.addHref(getMessage('Collapse all applications'), '$j(window).trigger("collapse_all")');
gcm.addHref(getMessage('Expand all applications'), '$j(window).trigger("expand_all")');
contextShow(e, gcm.getID(), -1, 0, 0);
e.stopPropagation();
})
$('body').click(function(evt) {
CustomEvent.fireAll('body_clicked', evt);
})
CustomEvent.observe("body_clicked", contextMenuHide);
})
;
/*! RESOURCE: /scripts/scrollable.js */
var HOME_SCROLL_SPEED = 1;
var HOME_PAUSE_SPEED = 0;
var HOME_RESUME_SPEED = 1;
function scroller(divName) {
var target = gel(divName);
if (!target)
return;
var wrapper = gel(divName+"_wrap");
var wrapperHeight = wrapper.offsetHeight;
var containerHeight = target.offsetHeight;
var actualheight = wrapperHeight
if (wrapperHeight < containerHeight)
actualheight = containerHeight;
var currentScroll = parseInt(target.style.top) - HOME_SCROLL_SPEED;
var bottom = actualheight + parseInt(target.style.top);
if (bottom < 20)
currentScroll = wrapperHeight;
target.style.top=currentScroll + "px";
}
;
/*! RESOURCE: /scripts/classes/util/StopWatch.js */
var StopWatch = Class.create({
MILLIS_IN_SECOND: 1000,
MILLIS_IN_MINUTE: 60 * 1000,
MILLIS_IN_HOUR: 60 * 60 * 1000,
initialize: function(started) {
this.started = started || new Date();
},
getTime: function() {
var now = new Date();
return now.getTime() - this.started.getTime();
},
restart: function() {
this.initialize();
},
jslog: function(msg, src, date) {
if (window.jslog) {
jslog('[' + this.toString() + '] ' + msg, src, date);
return;
}
if (window.console && window.console.log)
console.log('[' + this.toString() + '] ' + msg);
},
toString : function() {
return this.formatISO(this.getTime());
},
formatISO: function(millis) {
var hours = 0, minutes = 0, seconds = 0, milliseconds = 0;
if (millis >= this.MILLIS_IN_HOUR) {
hours = parseInt(millis / this.MILLIS_IN_HOUR);
millis = millis - (hours * this.MILLIS_IN_HOUR);
}
if (millis >= this.MILLIS_IN_MINUTE) {
minutes = parseInt(millis / this.MILLIS_IN_MINUTE);
millis = millis - (minutes * this.MILLIS_IN_MINUTE);
}
if (millis >= this.MILLIS_IN_SECOND) {
seconds = parseInt(millis / this.MILLIS_IN_SECOND);
millis = millis - (seconds * this.MILLIS_IN_SECOND);
}
milliseconds = parseInt(millis);
return doubleDigitFormat(hours) + ":" + doubleDigitFormat(minutes) + ":" + doubleDigitFormat(seconds) +
"." + tripleDigitFormat(milliseconds);
},
type: "StopWatch"
});
;
/*! RESOURCE: /scripts/classes/Table.js */
var Table = Class.create({
REF_ELEMENT_PREFIX: 'ref_',
REFERENCE: "reference",
initialize: function(tableName, parentTable, cols, callback, accessTable, isTemplate, loadExtensions, applyTemplateAcls, tableOptions) {
this.tableName = tableName;
this.parentTable = parentTable;
this.label = tableName;
this.callback = callback;
this.accessTable = accessTable;
this.columns = null;
this.elements = {};
this.elementsArray = [];
this.extensions = {};
this.extensionsArray = [];
this.choiceExtensions = {};
this.choiceExtensionsArray = [];
this.tablesArray = [];
this.sys_id = null;
this.set_id = null;
this.vars_id = null;
this.glide_var = null;
this.isTemplate = isTemplate;
this.applyTemplateAcls = applyTemplateAcls;
this.loadExtensions = loadExtensions;
this.tableOptions = tableOptions || {};
Table.setCachable(this);
if (cols && this.cacheable)
this.readResponse(cols);
else
this.readColumns();
this.textIndex = null;
},
readColumns: function() {
var ajax = new GlideAjax("SysMeta");
ajax.addParam("sysparm_type", "column");
ajax.addParam("sysparm_include_sysid", "true");
ajax.addParam("sysparm_table_name", "false");
ajax.addParam("sysparm_is_template", this.isTemplate ? 'true' : 'false');
ajax.addParam("sysparm_apply_template_acls", this.applyTemplateAcls ? 'true' : 'false');
ajax.addParam("sysparm_value", this.tableName);
if (this.sys_id)
ajax.addParam("sysparm_sys_id", this.sys_id);
if (this.set_id)
ajax.addParam("sysparm_set_id", this.set_id);
if (this.vars_id)
ajax.addParam("sysparm_vars_id", this.vars_id);
if (this.parentTable)
ajax.addParam("sysparm_parent_table", this.parentTable);
if (this.accessTable)
ajax.addParam("sysparm_access_table", this.accessTable);
if (this.loadExtensions)
ajax.addParam("sysparm_load_extended_fields", this.loadExtensions);
if (typeof this.tableOptions.onBeforeReadColumns === 'function')
this.tableOptions.onBeforeReadColumns.call(null, ajax);
if (this.callback)
ajax.getXML(this.readColumnsResponse.bind(this));
else {
var xml = ajax.getXMLWait();
this.readResponse(xml);
}
},
readColumnsResponse: function(response) {
if (!response || !response.responseXML)
return;
var xml = response.responseXML;
this.readResponse(xml);
this.callback(this);
},
readResponse: function(xml) {
this.columns = xml;
var root = this.columns.getElementsByTagName("xml");
if (root == null || root.length == 0)
root = this.columns;
if (root != null && root.length == 1) {
root = root[0];
this.textIndex = root.getAttribute("textIndex");
this.label = root.getAttribute("label");
}
var childNodes = root.childNodes;
this.elements = {};
this.elementsArray = [];
for (var i = 0; i < childNodes.length; i++) {
if (childNodes[i].tagName == 'extensions')
this.setExtensions(childNodes[i]);
if (childNodes[i].tagName == 'tables')
this.setTables(childNodes[i]);
if (childNodes[i].tagName == 'sys_choice_extensions')
this.setChoiceExtensions(childNodes[i]);
if (childNodes[i].tagName != 'item')
continue;
var item = childNodes[i];
var t = item.getAttribute("value");
var label = item.getAttribute("label");
var e = new TableElement(t, label);
e.setClearLabel(item.getAttribute("cl"));
e.setType(item.getAttribute("type"));
e.setReference(item.getAttribute("reference"));
e.setDynamicCreation(item.getAttribute("dynamic_creation") == "true");
e.setRefQual(item.getAttribute("reference_qual"));
e.setRefKey(item.getAttribute("reference_key"));
e.setArray(item.getAttribute("array"));
e.setChoice(item.getAttribute("choice"));
e.setMulti(item.getAttribute("multitext"));
e.setDependent(item.getAttribute("dependent"));
e.setMaxLength(item.getAttribute("max_length"));
e.setDisplayChars(item.getAttribute("display_chars"));
e.setNamedAttributes(item.getAttribute("attributes"));
e.setTableName(item.getAttribute("table"));
e.setTable(this);
if (e.isReference()) {
e.setRefLabel(item.getAttribute("reflabel"));
e.setRefDisplay(item.getAttribute("refdisplay"));
e.setRefRotated(item.getAttribute("reference_rotated"));
}
this.elements[t] = e;
this.elementsArray[this.elementsArray.length] = e;
var attrs = item.attributes;
for (var x = 0; x < attrs.length; x++)
e.addAttribute(attrs[x].nodeName,attrs[x].nodeValue);
}
this.setDependencies();
},
setExtensions: function(extensions) {
var items = extensions.childNodes;
if (this.loadExtensions) {
Table.getCache().ensureMaxEntries(items.length);
}
this.extensionsArray = [];
for (var i = 0; i < items.length; i++) {
var item = items[i];
var t = item.getAttribute("name");
var label = item.getAttribute("label");
var e = new TableExtension(t, label);
e.setTable(this);
if (item.getElementsByTagName('item') && this.loadExtensions) {
Table.setColumns(t, null, item);
}
this.extensions[t] = e;
this.extensionsArray[this.extensionsArray.length] = e;
}
},
setChoiceExtensions: function(choices) {
items = choices.childNodes;
this.choiceExtensionsArray = [];
for (var i = 0; i < items.length; i++) {
var item = items[i];
var t = item.getAttribute("name");
var label = item.getAttribute("label");
var e = new TableExtension(t, label);
e.setTable(this);
this.choiceExtensions[t] = e;
this.choiceExtensionsArray[this.choiceExtensionsArray.length] = e;
}
},
setDependencies: function() {
for (var i = 0; i < this.elementsArray.length; i++) {
var element = this.elementsArray[i];
if (element.isDependent()) {
var parent = this.getElement(element.getDependent());
if (parent)
parent.addDependentChild(element.getName())
}
}
},
setTables: function(tables) {
var tableList = tables.getAttribute("table_list");
this.tablesArray = [];
this.tablesArray = tableList.split(',');
},
getColumns: function() {
return this.columns;
},
getElements: function() {
return this.elementsArray;
},
getTableElements: function(tableName) {
jslog("Getting fields for table " + tableName);
var elements = [];
var items = this.getElements();
for (var i = 0; i < items.length; i++) {
var item = items[i];
if (item.getTableName() != tableName)
continue;
elements.push(item);
}
return elements;
},
getElement: function(elementName) {
if (this.elements[elementName])
return this.elements[elementName];
if (this._nameIsExtension(elementName))
return this._genExtensionElement(elementName);
return null;
},
_genExtensionElement: function(name) {
name = name.substring(this.REF_ELEMENT_PREFIX.length);
var ext = this.extensions[name];
var e = new TableElement(ext.getExtName(), ext.getLabel());
e.setType(this.REFERENCE);
e.setReference(ext.getName());
e.setRefLabel(ext.getLabel());
e.setExtensionElement(true);
return e;
},
_nameIsExtension: function(name) {
if (name.indexOf(this.REF_ELEMENT_PREFIX) != 0)
return false;
name = name.substring(this.REF_ELEMENT_PREFIX.length);
return this.extensions[name];
},
getExtensions: function() {
return this.extensionsArray;
},
getChoiceExtensions: function() {
return this.choiceExtensionsArray;
},
getTables: function() {
return this.tablesArray;
},
getName: function() {
return this.tableName;
},
getLabel: function() {
return this.label;
},
getDisplayName: function(column) {
return this.getElement(column).getRefDisplay();
},
getSysId: function() {
return this.sys_id;
},
setSysId: function() {
return this.sys_id;
},
type : function() {
return "Table";
}
});
Table.get = function(tableName, parentTable, isTemplate, loadExtensions, callback, applyTemplateAcls, tableOptions) {
var topWindow = getTopWindow();
return (topWindow.Table || Table).getInTopWindow(tableName, parentTable, isTemplate, loadExtensions, callback, applyTemplateAcls, tableOptions);
};
Table.setColumns = function(tableName, parentTable, xmlString) {
var cachedName = Table.getCacheKey(tableName, parentTable);
var parentCache = Table.getCache();
if (parentCache) {
var table = parentCache.get(cachedName);
if (table)
return table;
}
var xml = typeof xmlString == 'string' ? loadXML(xmlString) : xmlString;
var answer = new Table(tableName, parentTable, xml);
if (parentCache && answer.cacheable)
parentCache.put(cachedName, answer);
};
Table.isCached = function(tableName, parentTable, isTemplate) {
var cachedName = Table.getCacheKey(tableName, parentTable, isTemplate);
var parentCache = Table.getCache();
if (parentCache) {
var table = parentCache.get(cachedName);
if (table)
return true;
}
return false;
};
Table.getInTopWindow = function(tableName, parentTable, isTemplate, loadExtensions, callback, applyTemplateAcls, tableOptions) {
var t = {};
Table.setCachable(t);
if (t.cacheable) {
var cachedName = Table.getCacheKey(tableName, parentTable, isTemplate, loadExtensions);
var parentCache = Table.getCache();
if (parentCache) {
var table = parentCache.get(cachedName);
if (table) {
try {
table.getName();
if (callback)
callback(table);
return table;
} catch (error) {
console.warn("An error occurred with the Table object or the callback applied to the Table object. "
+ "Due to limitations in IE11 this is expected when the form is inside the frameset and is "
+ "refreshed (saved, updated,  etc) and should not affect functionality.", error);
}
}
}
}
var answer = new Table(tableName, parentTable, null, callback, null, isTemplate, loadExtensions, applyTemplateAcls, tableOptions);
if (parentCache && answer.cacheable)
parentCache.put(cachedName, answer);
return answer;
};
Table.setCachable = function(t) {
t.cacheable = true;
if (typeof g_table_sys_id != 'undefined') {
t.sys_id = getTopWindow().g_table_sys_id;
t.cacheable = false;
}
if (typeof g_table_set_id != 'undefined') {
t.set_id = getTopWindow().g_table_set_id;
t.cacheable = false;
}
if (typeof g_table_vars_id != 'undefined') {
t.vars_id = getTopWindow().g_table_vars_id;
t.cacheable = false;
}
if (typeof g_table_glide_var != 'undefined') {
t.glide_var = getTopWindow().g_table_glide_var;
t.cacheable = false;
}
};
Table.getCacheKey = function(tableName, parentTable, isTemplate) {
return (parentTable ? parentTable + "." : "") + tableName + "." + !!isTemplate;
};
Table.getCache = function() {
var cache = getTopWindow().g_cache_td;
if (cache)
return cache;
if (!window.g_cache_td)
window.g_cache_td = new GlideClientCache(400);
return window.g_cache_td;
};
;
/*! RESOURCE: /scripts/classes/TableElement.js */
var TableElement = Class.create({
REF_ELEMENT_PREFIX: 'ref_',
initialize: function(elementName, elementLabel) {
this.name = elementName;
this.label = elementLabel;
this.clearLabel = '';
this.tableName = '';
this.type = 'string';
this.isRef = false;
this.refLabel = null;
this.refDisplay = null;
this.refQual = null;
this.reference = null;
this.refKey = null;
this.refRotated = false;
this.array = null;
this.canread = 'unknown';
this.canwrite = 'unknown';
this.saveastemplate = 'unknown';
this.choice = '';
this.multi = false;
this.active = 'unknown';
this.table = null;
this.dependent = null;
this.maxLength = null;
this.displayChars = "-1";
this.attributes = {};
this.dependentChildren = {};
this.namedAttributes = {};
this.extensionElement = false;
this.dynamicCreation = false;
},
addAttribute: function(name, value) {
this.attributes[name] = value;
},
getAttribute: function(name) {
return this.attributes[name];
},
getBooleanAttribute: function(name, defaultValue) {
var v = this.getAttribute(name);
if (v == null)
return (typeof defaultValue !== 'undefined') ? defaultValue : true;
if (v == 'false' || v == 'no')
return false;
return true;
},
isDependent: function() {
return this.dependent != null;
},
hasDependentChildren: function() {
for (var key in this.dependentChildren)
return true;
return false;
},
getDependentChildren: function() {
return this.dependentChildren;
},
setTable: function(t) {
this.table = t;
},
setType: function(type) {
this.type = type;
if (type == 'glide_list')
this.isRef = false;
if (type == 'glide_var')
this.isRef = true;
},
setReference: function(reference) {
if (reference && reference != '')
this.reference = reference;
this.isRef = false;
switch (this.type){
case 'glide_list':
if (this.reference)
this.isRef = true;
break;
case 'reference':
case 'domain_id':
case 'glide_var':
case 'currency2':
this.isRef = true;
break;
}
},
setRefRotated: function(rotated) {
if ('yes' == rotated)
this.refRotated = true;
else
this.refRotated = false;
},
setCanWrite: function(ra) {
if ('no' == ra)
this.canwrite = false;
else
this.canwrite = true;
},
setSaveAsTemplate: function(ra) {
if ('no' == ra)
this.saveastemplate = false;
else
this.saveastemplate = true;
},
setCanRead: function(ra) {
if ('no' == ra)
this.canread = false;
else
this.canread = true;
},
setActive: function(active) {
if ('no' == active)
this.active = false;
else
this.active = true;
},
setRefQual: function(refQual) {
this.refQual = refQual;
},
setRefKey: function(refKey) {
this.refKey = refKey;
},
setRefLabel: function(label) {
this.refLabel = label;
},
setRefDisplay: function(display) {
this.refDisplay = display;
},
setArray: function(array) {
this.array = array;
},
setClearLabel: function(cl) {
this.clearLabel = cl;
},
setChoice: function(choice) {
this.choice = choice;
},
setMulti: function(multi) {
this.multi = multi;
},
setExtensionElement: function(b) {
this.extensionElement = b;
},
setDependent: function(dep) {
if (dep && dep != '')
this.dependent = dep;
},
addDependentChild: function(name) {
if (name)
this.dependentChildren[name] = true;
},
setMaxLength: function(maxLength) {
this.maxLength = maxLength;
},
setDisplayChars: function(displayChars) {
this.displayChars = displayChars;
},
setNamedAttributes: function(attrs) {
if (!attrs)
return;
var pairs = attrs.split(',');
for (var i = 0; i < pairs.length; i++) {
var parts = pairs[i].split('=');
if (parts.length == 2)
this.namedAttributes[parts[0]] = parts[1];
}
},
setDynamicCreation: function(dynamic) {
this.dynamicCreation = dynamic;
},
isReference: function() {
return this.isRef;
},
isRefRotated: function() {
return this.refRotated;
},
isExtensionElement: function() {
return this.extensionElement;
},
isDate: function() {
return dateTypes[this.type];
},
isDateOnly: function() {
if (dateOnlyTypes[this.type])
return true;
else
return false;
},
isDateTime: function() {
if (dateTimeTypes[this.type])
return true;
else
return false;
},
getName: function() {
return this.name;
},
getLabel: function() {
return this.label;
},
getClearLabel: function() {
return this.clearLabel;
},
getReference: function() {
return this.reference;
},
getMulti: function() {
return this.multi;
},
isMulti: function() {
return this.getMulti() == 'yes';
},
getDependent: function() {
return this.dependent;
},
getRefQual: function() {
return this.refQual;
},
getRefKey: function() {
return this.refKey;
},
getRefLabel: function() {
return this.refLabel;
},
getRefDisplay: function() {
return this.refDisplay;
},
getType: function() {
return this.type;
},
getChoice: function() {
return this.choice;
},
getTable: function() {
return this.table;
},
getTableName: function() {
return this.tableName;
},
getBaseTableName: function() {
var table = this.getTable();
if (!table || !table.tablesArray)
return "";
if (table.tablesArray.length === 0)
return this.getTableName();
return table.tablesArray.slice().pop();
},
setTableName: function(t) {
this.tableName = t;
},
isChoice: function() {
return (this.choice == 1 ||
this.choice == 3 ||
this.type == "day_of_week" ||
this.type == "week_of_month" ||
this.type == "month_of_year");
},
getMaxLength: function() {
return this.maxLength;
},
getDisplayChars: function() {
return this.displayChars;
},
canRead: function() {
if (this.canread == 'unknown')
return this.getBooleanAttribute("canread");
return this.canread;
},
canSaveAsTemplate: function() {
if (this.saveastemplate == 'unknown')
return this.getBooleanAttribute("save_as_template");
return this.saveastemplate;
},
canWrite: function() {
if (this.canwrite == 'unknown')
return this.getBooleanAttribute("canwrite");
return this.canwrite;
},
canMatch: function() {
return this.getBooleanAttribute("canmatch");
},
isEdgeEncrypted: function() {
return this.getBooleanAttribute("edge_encrypted", false);
},
isActive: function() {
if (this.active == 'unknown')
return this.getBooleanAttribute("active");
return this.active;
},
isNumber: function() {
return this.type == 'integer' ||
this.type == 'decimal' ||
this.type == 'numeric' ||
this.type == 'float' ||
this.type == 'percent_complete';
},
isArray: function() {
if (this.array && this.array == 'yes')
return true;
return false;
},
canSort: function() {
if (!this.getBooleanAttribute("cansort"))
return false;
if (this.name.indexOf("password") > -1)
return false;
if (this.name == 'sys_id')
return false;
if (this.type == "journal" || this.type == "journal_input")
return false;
if (this.isArray())
return false;
return true;
},
canSortI18N: function() {
return this.getBooleanAttribute("cansorti18n");
},
canGroup: function() {
if (this.getNamedAttribute("can_group") == "true")
return true;
if (this.isEdgeEncrypted() && this.canMatch())
return true;
if (!this.canSort())
return false;
if (this.isMulti())
return false;
if (this.name.indexOf(".") > -1 && this.name.indexOf(this.REF_ELEMENT_PREFIX) > -1)
return false;
if (this.type == "glide_duration")
return true;
if (this.type == 'glide_date_time' ||
this.type == 'glide_date' ||
this.type == 'glide_time' ||
this.type == 'due_date')
return false;
return true;
},
getAttributes: function() {
return this.attributes['attributes'];
},
getNamedAttribute: function(name) {
if (this.namedAttributes[name])
return this.namedAttributes[name];
else
return null;
},
type : function() {
return "TableElement";
},
isDynamicCreation: function() {
return this.dynamicCreation;
},
isEncrypted: function() {
return this.getBooleanAttribute("glide_encrypted", false) || this.getType() == "glide_encrypted";
}
});
TableElement.get = function(name) {
var names = name.split('.');
var table = names[0];
var tableDef = Table.get(table);
var e;
for (var i = 1; i < names.length; i++) {
e = tableDef.getElement(names[i]);
if (i === names.length - 1)
break;
if (e.type === "glide_var" || !e.isReference())
break;
tableDef = Table.get(e.getReference());
}
return e;
}
;
/*! RESOURCE: /scripts/classes/TableExtension.js */
var TableExtension = Class.create({
REF_ELEMENT_PREFIX: 'ref_',
initialize: function(elementName, elementLabel) {
this.name = elementName;
this.label = elementLabel;
this.table = null;
this.fields = null;
},
getName: function() {
return this.name;
},
getExtName: function() {
return this.REF_ELEMENT_PREFIX + this.getName();
},
getLabel: function() {
return this.label;
},
setTable: function(t) {
this.table = t;
},
addOption: function(select, namePrefix, labelPrefix) {
var t = this.getName();
var ext = this.getExtName();
if (namePrefix && namePrefix != '') {
var idx = namePrefix.lastIndexOf(".");
var s = namePrefix.substring(idx + 1);
var previousIsExtension = true;
if (s.indexOf(this.REF_ELEMENT_PREFIX) == 0)
ext = namePrefix.substring(0,idx + 1) + ext;
else {
ext = namePrefix + "." + ext;
previousIsExtension = false;
}
}
var label = this.getLabel();
var reflabel = label;
if (labelPrefix && labelPrefix != '')
if (previousIsExtension)
reflabel = labelPrefix.substring(0,labelPrefix.lastIndexOf(".")) + "." + reflabel;
else
reflabel = labelPrefix + "." + reflabel;
tlabel = label + " (+)";
appendSelectOption(select, ext, document.createTextNode(tlabel));
var opt = select.options[select.options.length-1];
if (labelPrefix != '')
opt.innerHTML = "&nbsp;&nbsp;&nbsp;"+tlabel;
else
opt.innerHTML = tlabel;
opt.cl = reflabel;
opt.cv = ext;
opt.tl = reflabel;
opt.style.color = 'darkred';
opt.style.cursor = 'pointer';
opt.title = "Show extended fields from " + label + " table";
opt.doNotDelete = 'true';
opt.doNotMove = 'true'
opt.reference =  t;
opt.bt = this.table.getName();
opt.btl = this.table.getLabel();
opt.headerAttr = 'true';
opt.tl = reflabel;
},
type : function() {
return "TableExtension";
}
});
;
/*! RESOURCE: /scripts/classes/GlideDecoration.js */
var GlideDecoration = Class.create({
EDIT_DECORATION : "images/editor_view_small.gifx",
initialize: function (node) {
this.type = node.getAttribute('type');
this.iconSRC = node.getAttribute('iconSRC');
var left = node.getAttribute('left');
if (left == 'true')
this.left = true;
else
this.left = false;
if (this.type == 'popup') {
this.onMouseMove = node.getAttribute('onMouseMove');
this.onMouseExit = node.getAttribute('onMouseOut');
} else if (this.type == 'expandCollapseDecoration') {
this.expandedIcon = node.getAttribute('expandedIcon');
this.collapsedIcon = node.getAttribute('collapsedIcon');
this.expandedIconAlt = node.getAttribute('expandedIconAlt');
this.collapsedIconAlt = node.getAttribute('collapsedIconAlt');
this.memory = node.getAttribute('memory');
this.expanded = node.getAttribute('expanded');
this.altText = node.getAttribute("collapsedText");
} else if (this.type == 'editDecoration') {
this.editLink = node.getAttribute('editLink');
}
},
attach: function (window) {
if (this.type == 'image')
this.attachImage(window);
else if (this.type == 'popup')
this.attachPopup(window);
else if (this.type == 'expandCollapseDecoration')
this.attachExpandCollapse(window);
else if (this.type == 'editDecoration')
this.attachEdit(window);
},
attachImage: function (window) {
var decoration = cel('img');
decoration.setAttribute('src', this.iconSRC);
decoration.setAttribute('alt', '');
window.addDecoration(decoration, this.left);
},
attachEdit: function (window) {
var an = cel('a');
var d = cel('img');
d.src =  this.EDIT_DECORATION;
d.alt = getMessage('Edit');
if (this.editLink.indexOf('javascript:') == 0) {
var toEval = this.editLink.substring('javascript:'.length);
toEval = "var f = function(e) { if (!e) { e = event;}; " + toEval + "}";
eval(toEval);
an.onclick = f;
} else
an.href = this.editLink;
an.appendChild(d);
window.addDecoration(an, this.left);
},
attachPopup: function (window) {
var span = cel('span');
var toEval = this.onMouseMove;
toEval = "var f = function(e) { if (!e) { e = event;}; " + toEval + "}";
eval(toEval);
span.onmousemove = f;
toEval = this.onMouseExit;
toEval = "var f = function(e) { if (!e) { e = event;}; " + toEval + "}";
eval(toEval);
span.onmouseout = f;
var decoration = cel('img');
decoration.setAttribute('src', this.iconSRC);
decoration.setAttribute('alt', '');
span.appendChild(decoration);
window.addDecoration(span, this.left);
},
attachExpandCollapse: function (window) {
this.img = cel('img');
this.img.onclick = this.toggleExpand.bind(this);
this.img.setAttribute('src', this.iconSRC);
this.img.setAttribute('alt', getMessage('Collapse'));
this.img.style.verticalAlign = "top";
this.gwtWindow = window;
window.addDecoration(this.img, this.left);
if (this.expanded == 'false') {
this.expanded = true;
this.toggleExpand();
}
},
toggleExpand : function (e) {
this.expanded = !this.expanded;
var localExpanded;
if (this.expanded) {
this.img.setAttribute('src', this.expandedIcon);
this.img.setAttribute('alt', this.expandedIconAlt)
var span = this.gwtWindow.body;
var temp = span.innerHTML;
span.innerHTML = this.altText;
this.altText = temp;
localExpanded = 'true';
} else {
this.img.setAttribute('src', this.collapsedIcon);
this.img.setAttribute('alt', this.collapsedIconAlt)
var span = this.gwtWindow.body;
var temp = span.innerHTML;
span.innerHTML = this.altText;
this.altText = temp;
localExpanded = 'false';
}
if (this.memory != null && this.memory != '')
setPreference('render_' + this.memory + '.expanded', localExpanded);
}
});
;
/*! RESOURCE: /scripts/classes/GwtCellSelector.js */
var GwtCellSelector = Class.create({
initialize: function(tableElement) {
this.tableElement = tableElement;
this.setDisable(false);
this.setSelectColumnOnly(false);
this.setSelectNonContiguous(false);
this.setSelectColor("#DFDFDF");
this.browserColor = null;
this.setUnselectColor("#FAFAFA");
this.setCursor("crosshair");
this.setBorderSize("2px solid black");
this.onSelect = null;
this.beforeSelect = null;
this.selectMultipleColumns = false;
this.selectMiscCells = false;
this.isMouseDown = false;
this.centerCellColVal = 0;
this.centerCellRowVal = 0;
this.atCol = 0;
this.atRow = 0;
this.colFrom = 0;
this.colTo = 0;
this.rowFrom = 0;
this.rowTo = 0;
this.maxCol = 0;
this.maxRow = 0;
this.selectCount = 0;
this.returnObjects = new Object();
this.cellBackgroundXref = new Object();
this.ignoreColumns = new Object();
this.ignoreRows = new Object();
this.getGridInfo()
Event.observe(this.tableElement, "mousedown", this._dragStart.bind(this));
this.mouseUpTableListener = this._dragEnd.bindAsEventListener(this);
this.mouseOverTableListener = this._dragOver.bindAsEventListener(this);
this.mouseUpDocListener = this._dragCheck.bindAsEventListener(this);
},
_draw: function() {
this._drawSelection(this.colFrom, this.colTo, this.rowFrom, this.rowTo);
},
_dragStart: function(e) {
if (Event.isRightClick(e))
return;
if ($("cell_edit_cancel"))
return;
if	(!this.disableGrid) {
this.getGridInfo();
if (this.selectNonContiguous)
this._contiguousCheck(e);
if (this.ignoreColumns[Event.element(e).cellIndex] ||
this.ignoreRows[this._getRowIndex(Event.element(e).parentNode)]) {
return;
}
if (this.beforeSelect) {
if (!this.handleBeforeSelect(e))
return;
}
if (!this.isSelectColumnOnly)
this.selectMultipleColumns = e.shiftKey;
this.isMouseDown = true;
document.body.style.cursor = this.cursor;
stopSelection(document.body);
this._setEpicenter(e);
this._selectAndDrawCells(Event.element(e));
Event.observe(this.tableElement, "mouseup", this.mouseUpTableListener);
Event.observe(this.tableElement, "mouseover", this.mouseOverTableListener);
Event.observe(document, "mouseup", this.mouseUpDocListener);
e.preventDefault();
}
},
_dragOver: function(e) {
if	(this.isMouseDown) {
this._selectAndDrawCells(Event.element(e));
}
},
_dragEnd: function(e) {
this.returnObjects = new Object();
this.isMouseDown = false;
document.body.style.cursor = "default";
this._selectAndDrawCells(Event.element(e));
if	(this.onSelect) {
this.handleOnSelect(this.returnObjects);
}
restoreSelection(document.body);
Event.stopObserving(this.tableElement, "mouseup", this.mouseUpTableListener);
Event.stopObserving(this.tableElement, "mouseover", this.mouseOverTableListener);
Event.stopObserving(document, "mouseup", this.mouseUpDocListener);
},
_dragCheck: function(e) {
if	(this.isMouseDown) {
try {
this._dragEnd(e);
}
catch (err) {
}
}
},
_contiguousCheck: function(e) {
if (e.ctrlKey)
this.selectMiscCells = e.ctrlKey;
else if (e.metaKey)
this.selectMiscCells = e.metaKey;
else
this.selectMiscCells = false;
},
getSelectedObjects: function() {
return this.returnObjects;
},
getColFrom: function() {
return this.colFrom;
},
getColTo: function() {
return this.colTo;
},
getRowFrom: function() {
return this.rowFrom;
},
getRowTo: function() {
return this.rowTo;
},
setIgnoreColumn: function(column) {
this.ignoreColumns[column] = column;
},
setIgnoreRow: function(row) {
this.ignoreRows[row] = row;
},
setSelectColor: function(selectColor) {
this.selectColor = selectColor;
},
setUnselectColor: function(unselectColor) {
this.unselectColor = unselectColor;
},
setCursor: function(cursor) {
this.cursor = cursor;
},
setSelectColumnOnly: function(flag) {
this.isSelectColumnOnly = flag;
},
setDisable: function(flag) {
this.disableGrid = flag;
},
setSelectNonContiguous: function(flag) {
this.selectNonContiguous = flag;
},
setBorderSize: function(size) {
this.borderSize = size;
},
_setSelectedCells: function(colFrom, colTo, rowFrom, rowTo) {
this.colFrom = colFrom;
this.colTo = colTo;
this.rowFrom = rowFrom;
this.rowTo = rowTo;
},
_selectAndDrawCells: function(e) {
this._selectCells(e);
this._drawSelection(this.colFrom, this.colTo, this.rowFrom, this.rowTo);
},
_selectCells: function(e) {
this.atColVal = e.cellIndex;
this.atRowVal = this._getRowIndex(e.parentNode);
if	(this.atColVal <= 0)
return;
if	(this.atRowVal <= 0)
return;
if (this.selectMultipleColumns) {
if	(this.atColVal < this.centerCellColVal) {
this.colFrom = this.atColVal;
this.colTo = this.centerCellColVal;
this._getRowSelection();
return;
}
if	(this.atColVal > this.centerCellColVal) {
this.colFrom = this.centerCellColVal;
this.colTo = this.atColVal;
this._getRowSelection();
return;
}
}
if	(this.atColVal == this.centerCellColVal) {
this.colFrom = this.centerCellColVal;
this.colTo = this.centerCellColVal;
this._getRowSelection();
return;
}
if (this.atRowVal < this.centerCellRowVal) {
this.rowFrom = this.atRowVal;
this.rowTo = this.centerCellRowVal;
this._getColSelection();
return;
}
if (this.atRowVal > this.centerCellRowVal) {
this.rowFrom = this.centerCellRowVal;
this.rowTo = this.atRowVal;
this._getColSelection();
return;
}
if	(this.atRowVal == this.centerCellRowVal) {
this.rowFrom = this.centerCellRowVal;
this.rowTo = this.centerCellRowVal;
this._getColSelection();
return;
}
},
_getRowSelection: function() {
if (this.atRowVal <= this.centerCellRowVal) {
this.rowFrom = this.atRowVal;
this.rowTo = this.centerCellRowVal;
} else {
this.rowFrom = this.centerCellRowVal;
this.rowTo = this.atRowVal;
}
},
_getColSelection: function() {
if (this.selectMultipleColumns) {
if	(this.atColVal < this.centerCellColVal) {
this.colFrom = this.atColVal;
this.colTo = this.centerCellColVal;
return;
}
if	(this.atColVal > this.centerCellColVal) {
this.colFrom = this.centerCellColVal;
this.colTo = this.atColVal;
return;
}
}
if	(this.atColVal == this.centerCellColVal) {
this.colFrom = this.centerCellColVal;
this.colTo = this.centerCellColVal;
}
},
_drawSelection: function(colFrom, colTo, rowFrom, rowTo) {
this._highlightCells(colFrom, colTo, rowFrom, rowTo);
},
restoreCellColors: function() {
for (var key in this.returnObjects) {
var color = "";
var cell = key.split(",");
var e = this.getTableCell(parseInt(cell[1]) - 1, cell[0]);
removeClassName(e,"list_edit_selected_cell");
}
this.returnObjects = new Object();
},
_highlightCells: function(colFrom, colTo, rowFrom, rowTo) {
if (!this.selectMiscCells)
this.restoreCellColors();
for (var x=colFrom; x<=colTo; x++) {
for (var y=rowFrom; y<=rowTo; y++) {
try {
var e = this.tableElement.rows[y].cells[x];
addClassName(e,"list_edit_selected_cell");
this.returnObjects[x + "," + y] = e.id;
}
catch (err) {
}
}
}
},
_clearAllCells: function() {
for (var x=1; x<=this.maxCol; x++) {
for (var y=1; y<this.maxRow; y++) {
try {
var cell = this.getTableCell(y, x);
cell.style.backgroundColor = "";
cell.style.border = "0px";
}
catch (err) {
}
}
}
},
clearRanges: function() {
try{
if (ie5)
document.selection.empty();
else
window.getSelection().removeAllRanges();
}catch (e){
}
},
getGridInfo: function() {
var rows = this.getTableRows();
this.maxRow = rows.length;
if (rows.length > 0)
this.maxCol = rows[0].cells.length;
},
setMaxRow: function(max) {
this.maxRow = max;
},
_setEpicenter: function(e) {
var element = this.retrieveCellFromNestedDOMElement(Event.element(e), 'DIV');
this.centerCellColVal = element.cellIndex;
this.centerCellRowVal = this._getRowIndex(element.parentNode);
},
handleBeforeSelect: function(e) {
},
retrieveCellFromNestedDOMElement: function(element, tagName) {
if (element.tagName == tagName && element.parentNode.tagName == 'TD')
return element.parentNode;
return element;
},
handleOnSelect: function(selectedCells) {
},
setBeforeSelect: function(flag) {
this.beforeSelect = flag;
},
setOnSelect: function(flag) {
this.onSelect = flag;
},
_getRowIndex: function(element) {
return this.getTableRows().indexOf(element) + 1;
},
getTableRows: function() {
var rows = this.tableElement.rows;
listRows = [];
for (var i = 0, n = rows.length; i < n; i++) {
var row = rows[i];
if (!hasClassName(row, 'list_row'))
continue;
listRows.push(row);
}
return listRows;
},
getTableCell: function(rowNdx, colNdx) {
var rows = this.getTableRows();
if (!rows || !rows[rowNdx])
return null;
return rows[rowNdx].cells[colNdx];
},
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideRecord.js */
var GlideRecord = Class.create({
AJAX_PROCESSOR : "AJAXGlideRecord",
initialized : false,
initialize: function(tableName) {
this.currentRow = -1;
this.rows = [];
this.conditions = [];
this.encodedQuery = "";
this.orderByFields = [];
this.orderByDescFields = [];
this.displayFields = [];
this.maxQuerySize = -1;
this._wantSessionMessages = true;
this._additionalParams = {};
if (tableName)
this.setTableName(tableName);
if (this.initialized == false) {
this.ignoreNames = {};
for(var xname in this) {
this.ignoreNames[xname] = true;
}
} else {
for(var xname in this) {
if (this.ignoreNames[xname] && this.ignoreNames[xname] == true)
continue;
delete this[xname];
}
}
this.initialized = true;
},
addQuery: function() {
var fName;
var fOper;
var fValue;
if (arguments.length == 2) {
fName = arguments[0];
fOper = '=';
fValue = arguments[1];
} else if (arguments.length == 3) {
fName = arguments[0];
fOper = arguments[1];
fValue = arguments[2];
}
this.conditions.push({ 'name' : fName, 'oper' : fOper, 'value' : fValue});
},
setEncodedQuery: function(queryString) {
this.encodedQuery = queryString;
},
getEncodedQuery: function() {
var qc = [];
if (this.encodedQuery) {
qc.push(this.encodedQuery);
}
for (var i = 0; i < this.conditions.length; i++) {
var q = this.conditions[i];
qc.push(q.name + q.oper + q.value);
}
return qc.join('^');
},
deleteRecord: function(responseFunction) {
var ajax = new GlideAjax(this.AJAX_PROCESSOR);
ajax.addParam("sysparm_type", "delete");
ajax.addParam("sysparm_name", this.getTableName());
ajax.addParam("sysparm_chars", this._getXMLSerialized());
ajax.addParam('sysparm_want_session_messages', this._wantSessionMessages);
if(typeof responseFunction == 'undefined') {
var sw = new StopWatch();
sw.jslog("*** WARNING *** GlideRecord synchronous query for table: " + this.getTableName());
}
if (typeof responseFunction != 'function') {
ajax.getXML();
return;
}
ajax.getXML(this._deleteRecord0.bind(this), null, responseFunction);
},
_deleteRecord0 : function(response, responseFunction) {
if (!response || !response.responseXML)
return;
responseFunction(this);
},
get: function(id) {
this.initialize();
this.addQuery('sys_id', id);
this.query();
return this.next();
},
getTableName: function() {
return this.tableName;
},
hasNext: function() {
return (this.currentRow + 1 < this.rows.length);
},
insert: function(responseFunction) {
return this.update(responseFunction);
},
gotoTop : function() {
this.currentRow = -1;
},
next: function() {
return this._next();
},
_next: function() {
if (!this.hasNext())
return false;
this.currentRow++;
this.loadRow(this.rows[this.currentRow]);
return true;
},
loadRow: function(r) {
for (var i = 0; i < r.length; i++)  {
var name = r[i].name;
var value = r[i].value;
if (this.isDotWalkField(name)) {
var start = this;
var parts = name.split(/-/);
for(var p = 0; p < parts.length - 1; p++) {
var part = parts[p];
if (typeof start[part] != 'object')
start[part] = new Object();
start = start[part];
}
var fieldName = parts[parts.length - 1];
start[fieldName] = value;
} else {
this[name] = value;
}
}
},
getValue: function(fieldName) {
return this[fieldName];
},
setValue: function(fieldName, value) {
this[fieldName] = value;
},
isDotWalkField: function(name) {
for(var i = 0; i < this.displayFields.length; i++) {
var fieldName = this.displayFields[i];
if (fieldName.indexOf(".") == -1)
continue;
var encodedFieldName = fieldName.replace(/\./g,"-");
if (name == encodedFieldName)
return true;
}
return false;
},
addOrderBy: function(f) {
this.orderByFields.push(f);
},
orderBy: function(f) {
this.orderByFields.push(f);
},
orderByDesc: function(f) {
this.orderByDescFields.push(f);
},
setDisplayFields: function(fields) {
this.displayFields = fields;
},
query: function() {
var responseFunction = this._parseArgs(arguments);
if (this._getBaseLine()) {
var rxml = loadXML(g_filter_description.getBaseLine());
this._queryResponse(rxml);
return;
}
var ajax = new GlideAjax(this.AJAX_PROCESSOR);
ajax.addParam("sysparm_type", "query");
ajax.addParam("sysparm_name", this.getTableName());
ajax.addParam("sysparm_chars", this.getEncodedQuery());
ajax.addParam('sysparm_want_session_messages', this._wantSessionMessages);
if(this.getLimit() != -1)
ajax.addParam("sysparm_max_query", this.getLimit());
if (this.orderByFields.length > 0)
ajax.addParam("sysparm_orderby", this.orderByFields.join(","));
if (this.orderByDescFields.length > 0)
ajax.addParam("sysparm_orderby_desc", this.orderByDescFields.join(","));
if (this.displayFields.length > 0)
ajax.addParam("sysparm_display_fields", this.displayFields.join(","));
for (var key in this._additionalParams) {
if (typeof key === 'string')
ajax.addParam(key, this._additionalParams[key]);
}
if (!responseFunction)	 {
var sw = new StopWatch();
var rxml = ajax.getXMLWait();
sw.jslog("*** WARNING *** GlideRecord synchronous query for table: " + this.getTableName());
this._queryResponse(rxml);
return;
}
ajax.getXML(this._query0.bind(this), null, responseFunction);
},
_parseArgs: function(args) {
var responseFunction = null;
var i =0;
while (i < args.length) {
if (typeof args[i] == 'function') {
responseFunction = args[i];
i++;
continue;
}
if (i+1 < args.length) {
this.conditions.push({ 'name' : args[i], 'oper' : '=', 'value' : args[i+1]});
i+=2;
} else
i++;
}
return responseFunction;
},
_query0: function(response, responseFunction) {
if (!response || !response.responseXML)
return;
this._queryResponse(response.responseXML);
responseFunction(this);
},
_queryResponse: function(rxml) {
var rows = [];
var items = rxml.getElementsByTagName("item");
for (var i = 0; i < items.length; i++) {
if ((items[i].parentNode.parentNode == rxml)) {
var grData = items[i];
var cnodes = grData.childNodes;
var fields = [];
for (var z = 0; z < cnodes.length; z++) {
var field = cnodes[z];
var name = field.nodeName;
var value = getTextValue(field);
if (!value)
value = "";
fields.push({ 'name' : name, 'value' : value });
}
if (cnodes.length && cnodes.length > 0)
rows.push(fields);
}
}
this.setRows(rows);
},
setRows: function(r) {
this.rows = r;
},
setTableName: function(tableName) {
this.tableName = tableName;
},
update: function(responseFunction) {
var ajax = new GlideAjax(this.AJAX_PROCESSOR);
ajax.addParam("sysparm_type", "save_list");
ajax.addParam("sysparm_name", this.getTableName());
ajax.addParam("sysparm_chars", this._getXMLSerialized());
ajax.addParam('sysparm_want_session_messages', this._wantSessionMessages);
if (typeof responseFunction == 'undefined') {
var sw = new StopWatch();
sw.jslog("*** WARNING *** GlideRecord synchronous update or insert for table: " + this.getTableName());
var rxml = ajax.getXMLWait();
return this._updateResponse(rxml);
}
if (typeof responseFunction != 'function')
responseFunction = doNothing;
ajax.getXML(this._update0.bind(this), null, responseFunction);
},
_update0: function(response, responseFunction) {
if (!response || !response.responseXML)
return;
var answer = this._updateResponse(response.responseXML);
responseFunction(this, answer);
},
_updateResponse: function(rxml) {
var items = rxml.getElementsByTagName("item");
if (items && items.length > 0)
return getTextValue(items[0]);
},
setLimit: function(maxQuery) {
this.maxQuerySize = maxQuery;
},
getLimit: function() {
return this.maxQuerySize;
},
_getXMLSerialized: function() {
var xml = loadXML("<record_update/>");
var root = xml.documentElement;
if(this.sys_id)
root.setAttribute("id", this.sys_id);
root.setAttribute('table', this.getTableName());
var item = xml.createElement(this.getTableName());
root.appendChild(item);
for(var xname in this) {
if (this.ignoreNames[xname])
continue;
var f = xml.createElement(xname);
item.appendChild(f);
var v = this[xname];
if (!v)
v = "NULL";
var t = xml.createTextNode(v);
f.appendChild(t);
}
return getXMLString(xml);
},
_getBaseLine: function() {
return window.g_filter_description
&& typeof g_filter_description.getBaseLine() != 'undefined'
&& this.getTableName() == 'cmdb_baseline'
&& this.getEncodedQuery()
&& this.orderByFields.length < 1
&& this.displayFields.length < 1;
},
setWantSessionMessages: function(want) {
this._wantSessionMessages = want;
},
addAdditionalParam: function(key, val) {
this._additionalParams[key] = val;
},
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideWindow.js */
var GlideWindow = Class.create(GwtObservable, {
FORWARD_EVENTS: {
"mouseover" : true,
"mouseout" : true,
"mousemove" : true,
"click" : true,
"dblclick" : true,
"keyup" : true,
"mouseenter" : true,
"mouseleave" : true
},
initialize: function(id, readOnly) {
if (typeof this.DEFAULT_BODY == 'undefined')
this.DEFAULT_BODY = "<center> "+ getMessage("Loading...") +" <br/><img src='images/ajax-loader.gifx' alt='"+ getMessage("Loading...") +"' /></center>";
this._dir = $$('html')[0].readAttribute('dir') === "rtl" ? "right" : "left";
this.id = id;
this.window = null;
this.windowClass = "drag_section_picker";
this.zIndex = 3;
this.position = "absolute";
this.padding = 3;
this.container = null;
this._readOnly = readOnly;
this.preferences = new Object();
this.titleHTML = null;
this.elementToFocus = null;
this.offsetHorizontal = 0;
this.offsetTop = 0;
this.gd = null;
this.shim = null;
this.valid = true;
this.closeDecoration = null;
this._draw(id);
this.initDecorations();
this.headerWrap = false;
this.setScope("global");
this.doctype = document.documentElement.getAttribute('data-doctype') == 'true';
this.nologValue = false;
},
addDecoration: function(decorationElement, leftSide) {
if (leftSide) {
var ld = this.leftDecorations;
ld.style.display = "block";
if (ld.hasChildNodes()) {
ld.insertBefore(decorationElement, ld.childNodes[0].nextSibling);
} else {
ld.appendChild(decorationElement);
}
} else {
if	(this.rightDecorations) {
var rd = this.rightDecorations;
if (rd.hasChildNodes()) {
rd.insertBefore(decorationElement, rd.childNodes[0]);
} else {
rd.appendChild(decorationElement);
}
}
else {
}
}
},
addFunctionDecoration: function(imgSrc, label, clickHandler, side) {
var keyPressHandler = function(ev) {
if (ev.keyCode === 32 || ev.keyCode === 13) {
ev.preventDefault();
clickHandler(ev);
}
};
var span = cel('span');
span.onclick = clickHandler;
span.onkeypress = keyPressHandler;
span.gWindow = this;
span.setAttribute('role', 'button');
span.setAttribute('tabindex', 0);
span.setAttribute('aria-label', getMessage(label));
var img = cel('img', span);
img.id = 'popup_close_image';
img.height = '12';
img.width = '13';
img.src = imgSrc;
img.setAttribute('aria-hidden', true);
this.addDecoration(span, side);
img = null;
return span;
},
addHelpDecoration: function(func) {
this.addFunctionDecoration('images/help.gif', 'Help', func);
},
clearLeftDecorations: function() {
clearNodes(this.leftDecorations);
},
clearRightDecorations: function() {
clearNodes(this.rightDecorations);
},
dragging: function(me, x, y) {
x = Math.max(x, 0);
y = Math.max(y, 0);
this.fireEvent("dragging", this);
me.draggable.style.left = x + 'px';
me.draggable.style.top = y + 'px';
this._setShimBounds(x, y, "", "");
},
destroy: function() {
this.fireEvent("beforeclose", this);
if (this.container) {
var parent = this.container.parentNode;
if (parent)
parent.removeChild(this.container);
} else {
var gWindow = this.getWindowDOM();
var parent = gWindow.parentNode;
if (parent)
parent.removeChild(gWindow);
}
this.setShim(false);
if (isMSIE)
this.container.outerHTML = '';
this.release();
this.valid = false;
this.closeDecoration = null;
},
getAbsoluteRect: function(addScroll) {
return getBounds(this.getWindowDOM(), addScroll);
},
getBody: function() {
return this.body;
},
getContainer: function() {
var obj;
if (this.container) {
obj = this.container;
} else {
obj = this.getWindowDOM();
}
return obj;
},
getClassName: function() {
return this.getWindowDOM().className;
},
getDecorations: function(left) {
if (left)
return this.leftDecorations;
return this.rightDecorations;
},
getDescribingXML : function() {
var section = document.createElement("section");
section.setAttribute("name", this.getID());
var preferences = this.getPreferences();
for(var name in preferences) {
var p = document.createElement("preference");
var v = preferences[name];
p.setAttribute("name", name);
if (v != null && typeof v == 'object') {
if (typeof v.join == "function") {
v = v.join(",");
} else if (typeof v.toString == "function") {
v = v.toString();
}
}
if (v && typeof v.escapeHTML === "function")
v = v.escapeHTML();
if (v)
p.setAttribute("value", v);
section.appendChild(p);
}
return section;
},
getDescribingText : function() {
var gxml = document.createElement("gxml");
var x = this.getDescribingXML();
gxml.appendChild(x);
return gxml.innerHTML;
},
getHeader: function() {
return this.header;
},
getID: function() {
return this.id;
},
getPosition: function() {
return this.position;
},
getPreferences : function() {
return this.preferences;
},
getPreference : function(id) {
return this.preferences[id];
},
getTitle: function() {
return this.title;
},
locate: function(domElement) {
while (domElement.parentNode) {
domElement = domElement.parentNode;
if (domElement.gWindow)
return domElement.gWindow;
if (window.$j && $j(domElement).data('gWindow')) {
return $j(domElement).data('gWindow');
}
}
alert('GlideWindow.locate: window not found');
return null;
},
get: function(id) {
if (!id || !gel('window.' + id))
return this;
return gel('window.' + id).gWindow;
},
getWindowDOM: function() {
return this.window;
},
getZIndex: function() {
return this.zIndex;
},
initDecorations: function() {
if (!this.isReadOnly()) {
this.closeDecoration = this.addFunctionDecoration("images/x.gifx", 'Close', this._onCloseClicked.bind(this));
}
},
removeCloseDecoration: function() {
if (this.closeDecoration)
this.closeDecoration.parentNode.removeChild(this.closeDecoration);
this.closeDecoration = null;
},
showCloseOnMouseOver: function() {
Event.observe(this.window, "mouseover", this.showCloseButton.bind(this));
Event.observe(this.window, "mouseout", this.hideCloseButton.bind(this));
this.hideCloseButton();
},
showCloseButton: function() {
if (this.closeDecoration)
this.closeDecoration.style.visibility="visible";
},
hideCloseButton: function() {
if (this.closeDecoration)
this.closeDecoration.style.visibility="hidden";
},
insert: function(element, beforeElement, invisible) {
var id = this.getID();
element = $(element);
var div = $(id);
if (!div) {
var div = cel("div");
div.name = div.id = id;
div.gWindow = this;
div.setAttribute("dragpart", id);
div.setAttribute("aria-labelledby", id + "_header_contents")
div.setAttribute("sn-atf-area", id);
div.setAttribute("sn-atf-whitelist", "true");
div.className += " drag_section_part";
div.style.position = this.getPosition();
div.style.zIndex = this.getZIndex();
div.style[this._dir] = this.offsetHorizontal + "px";
div.style.top = this.offsetTop + "px";
div.appendChild(this.getWindowDOM());
if (invisible)
div.style.visibility = "hidden";
if (beforeElement)
element.insertBefore(div, beforeElement);
else
element.appendChild(div);
}
this.container = div;
this._enableDragging(div);
},
isActive: function() {
return this.active;
},
isReadOnly: function() {
return this._readOnly;
},
isValid: function() {
return this.valid;
},
moveTo: function(x, y) {
var o = this.getContainer();
o.style[this._dir] = x + 'px';
o.style.top = y + 'px';
this._setShimBounds(x, y, "", "");
},
release: function() {
this.window.gWindow = null;
this.window = null;
this.container = null;
this.body = null;
if (this.gd)
this.gd.destroy();
this.title = null;
this.titleContents = null;
this.header = null;
this.shim = null;
this.rightDecorations = null;
this.leftDecorations = null;
},
removePreference: function(name, value) {
delete this.preferences[name];
},
render: function() {
var id = this.getID();
var description = this.getDescribingText();
var ajax = new GlideAjax("RenderInfo");
if (this.getPreference("sysparm_scope"))
ajax.setScope(this.getPreference("sysparm_scope"))
if (this.nologValue)
ajax.addParam("ni.nolog.sysparm_value", true);
ajax.addParam("sysparm_value", description);
ajax.addParam("sysparm_name", id);
ajax.getXML(this._bodyRendered.bind(this));
},
invisible: function() {
var e = this.getContainer();
e.style.visibility = "hidden";
},
visible: function() {
var e = this.getContainer();
e.style.visibility = "visible";
},
setAlt: function(alt) {
this.window.title = alt;
},
setEscapedBody: function(body) {
if (!body)
return;
body = body.replace(/\t/g, "");
body = body.replace(/\r/g, "");
body = body.replace(/\n+/g, "\n");
body = body.replace(/%27/g, "'");
body = body.replace(/%3c/g, "<");
body = body.replace(/%3e/g, ">");
body = body.replace(/&amp;/g, "&");
this.setBody(body, true);
},
setBody: function(html, noEvaluate, setAlt) {
this.body.innerHTML = "";
if (typeof html == 'string') {
var showBody = true;
if (html.length == 0)
showBody = false;
this.showBody(showBody);
html = this._substituteGet(html);
html = this._fixBrowserTags(html);
this.body.innerHTML = html;
if (setAlt)
this.setBodyAlt(html);
if (!noEvaluate)
this._evalScripts(html);
} else {
this.body.appendChild(html);
}
var prefs = this.body.getElementsByTagName("renderpreference");
if (prefs.length > 0) {
for(var i = 0; i < prefs.length; i++) {
var pref = prefs[i];
var name = pref.getAttribute("name");
var valu = pref.getAttribute("value");
if (name == "render_time") {
this.debugTD.innerHTML = valu;
this.debugTD.style.display = "table-cell";
continue;
}
this.setPreference(name, valu);
if (name == "title") {
this.setTitle(sanitizeHtml(valu));
var titleChildren = this.title.children;
if (titleChildren.length > 0) {
var titleNode = titleChildren[0];
var titlePref = this.getPreference('title')  || '';
if (titleNode.tagName === 'A' && this.getPreference('fromHome') &&
titlePref.includes('onmousedown') && !titleNode.hasAttribute('onmousedown')
) {
titleNode.onmousedown=function(event){Event.stop(event); return false;}
}
}
}
if (name == "render_title" && valu == "false")
this.header.style.display = "none";
if (name == "hide_close_decoration" && valu == "true")
this.removeCloseDecoration();
}
}
var decorations = this.body.getElementsByTagName("decoration");
if (decorations.length > 0) {
for (var x = 0; x < decorations.length; x++) {
var thisDecoration = new GlideDecoration(decorations[x]);
thisDecoration.attach(this);
}
}
if (this.elementToFocus) {
if (gel(this.elementToFocus)) {
self.focus();
gel(this.elementToFocus).focus();
}
}
this._shimResize();
},
showBody: function(show) {
if (this.divMode)
var tr = this.body;
else
var tr = this.body.parentNode.parentNode;
if (show)
tr.style.display = "";
else
tr.style.display = "none";
},
setBodyAlt: function(alt) {
this.body.title = alt;
},
setClassName: function(className) {
this.windowClass = className;
if (this.getWindowDOM())
this.getWindowDOM().className = className;
},
setColor: function(color) {
this.windowBackground = color;
if (this.getBody())
this.getBody().parentNode.style.backgroundColor = color;
},
setFocus: function(id) {
this.elementToFocus = id;
},
setFont: function(family, size, fontUnit, weight) {
this.setFontSize(size, fontUnit);
this.setStyle("fontFamily", family);
this.setFontWeight(weight);
},
setFontSize: function(size, fontUnit) {
if (!fontUnit)
fontUnit = "pt";
this.setStyle("fontSize", size + fontUnit);
},
setFontWeight: function(weight) {
this.setStyle("fontWeight", weight);
},
setStyle: function(name, value) {
if (!value)
return;
this.getTitle().style[name] = value;
this.getBody().style[name] = value;
},
setHeaderClassName: function(className) {
this.getHeader().className = className;
},
setHeaderColor: function(background) {
this.header.style.backgroundColor = background;
},
setHeaderColors: function(color, background) {
this.setHeaderColor(background);
this.title.style.color = color;
},
setOpacity: function(opacity) {
if (this.divMode) {
var element = this.getBody().parentNode;
element.style.filter = "alpha(opacity=" + (opacity * 100) + ")";
element.style.MozOpacity = opacity + "";
element.style.opacity = opacity + "";
element.style.opacity = opacity;
}
},
setPreferences : function(preferences) {
this.preferences = preferences;
},
setPreference: function(name, value) {
this.preferences[name] = value;
},
setPosition: function (name) {
if (this.getContainer() != this.getWindowDOM())
this.getContainer().style.position = name;
this.position = name;
},
setReadOnly: function(r) {
this._readOnly = r;
},
setWidth: function(width) {
this.setSize(width, "");
},
getWidth: function() {
if (this.window)
return this.window.clientWidth;
else
return;
},
setHeight: function(height) {
this.definedHeight = height;
this.setSize("", height);
},
removeHeight: function() {
this.definedHeight = null;
var obj = this.getContainer();
obj.style.height = "";
this.window.style.height = "";
var bo = this.getBody();
bo.style.height = "";
},
getHeight: function() {
if (this.window)
return this.window.clientHeight;
},
setSize: function(w, h) {
var obj = this.getContainer();
var bo = this.getBody();
var setWidth = w;
if (setWidth && !isNaN(setWidth))
setWidth = setWidth + 'px';
bo.style.width = setWidth;
obj.style.width = setWidth;
if (obj != this.window)
this.window.style.width = setWidth;
var setHeight = h;
if (h && !isNaN(setHeight)) {
setHeight = setHeight + 'px';
obj.style.height = setHeight;
}
this._setShimBounds("", "", w, h);
},
adjustBodySize: function() {
var obj = this.getContainer();
var bo = this.getBody();
var h = obj.clientHeight;
if ((h - this.header.clientHeight) > 0) {
var headerClientHeight = h - this.header.clientHeight;
bo.style.height = headerClientHeight + 'px';
} else if (!(isMSIE9 && getTopWindow().document.doctype))
bo.style.height = 0;
this.window.style.height = obj.style.height;
},
removeBody: function() {
var element = this.getBody();
element = element.parentNode;
element = element.parentNode;
var tbody = element.parentNode;
tbody.removeChild(element);
},
clearSpacing: function() {
this.window.style.padding = "0px";
this.body.style.padding = "0px";
if (!this.divMode) {
this.window.cellSpacing = 0;
this.window.cellPadding = 0;
}
},
setWindowActive: function() {
this.setHeaderClassName("drag_section_header_active");
this.active = true;
addClassName(this.getContainer(), "selected");
},
setWindowInactive: function() {
this.setHeaderClassName("drag_section_header");
this.active = false;
removeClassName(this.getContainer(), "selected");
},
toggleActive: function() {
if (this.active)
this.setWindowInactive();
else
this.setWindowActive();
},
setHeaderWrap: function(wrap) {
this.headerWrap = wrap;
if (wrap)
this.title.style.whiteSpace = "normal";
else
this.title.style.whiteSpace = "nowrap";
},
isHeaderWrap: function() {
return this.headerWrap;
},
setShim: function(b) {
if (!ie5)
return;
if (b == false) {
if (this.shim) {
var parent = this.shim.parentNode;
parent.removeChild(this.shim);
}
} else {
var iframeShim = cel("iframe");
iframeShim.id = iframeShim.name = "iframeDragShim_" + this.id;
iframeShim.src = "blank.do";
iframeShim.style.position = "absolute";
iframeShim.style.top = 0;
iframeShim.style.left = 0;
iframeShim.style.width = 0;
iframeShim.style.height = 0;
iframeShim.frameBorder = 0;
this.container.parentNode.appendChild(iframeShim);
this.shim = iframeShim;
var win = this.getWindowDOM();
Event.observe(win, 'resize', this._shimResize.bind(this));
}
},
setTitle: function(html) {
this.titleValue = html;
var titleNode = this.titleContents && !this.divMode ? 'titleContents' : 'title';
if (typeof html == 'string')
this[titleNode].innerHTML = html;
else {
this[titleNode].innerHTML = "";
this[titleNode].appendChild(html || "");
}
},
setTitleAlign: function(align) {
this.title.style.textAlign = align;
var children = this.title.children;
for (var i = 0; i < children.length; i++) {
children[0].style.textAlign = align;
}
},
setTitleSize: function(size) {
this.title.style.fontSize = size;
var children = this.title.children;
for (var i = 0; i < children.length; i++) {
children[0].style.fontSize = size;
}
},
setTitleFont: function(font) {
this.title.style.fontFamily = font;
var children = this.title.children;
for (var i = 0; i < children.length; i++) {
children[0].style.fontFamily = font;
}
},
setTitleColor: function(color) {
this.title.style.color = color;
var children = this.title.children;
for (var i = 0; i < children.length; i++) {
children[0].style.color = color;
}
},
setBorderVisibility: function(visible) {
var window = this.getWindowDOM();
if (visible !== "false" && visible) {
window.style.border = "";
window.style.boxShadow = "";
} else {
window.style.border = "none";
window.style.boxShadow = "none";
}
},
setBorderWidth: function(width) {
this.getWindowDOM().style.borderWidth = width;
},
setBorderColor: function(color) {
this.getWindowDOM().style.borderColor = color;
},
setHeaderBorderVisibility: function(visible) {
if (visible !== "false" && visible)
this.header.style.border = "solid";
else
this.header.style.border = "none";
},
setHeaderBorderWidth: function(width) {
this.header.style.borderWidth = width;
},
setHeaderBorderColor: function(color) {
this.header.style.borderColor = color;
},
setHeaderBackgroundColor: function(color) {
this.header.style.backgroundColor = color;
},
setTitleVisibility: function(visible) {
if (visible !== "false" && visible)
this.setTitle(this.titleValue);
else
this.title.innerHTML = "";
},
setZIndex: function(i) {
if (this.getContainer() != this.getWindowDOM())
this.getContainer().style.zIndex = i;
this.zIndex = i;
},
setNologValue: function(nolog) {
this.nologValue = !!nolog;
},
on: function(name, func) {
if (this.FORWARD_EVENTS[name])
this.forward(name, this.window, func);
else
GwtObservable.prototype.on.call(this, name, func);
if (name == "dblclick") {
if (isMSIE)
this.window.style.cursor = "hand";
else
this.window.style.cursor = "pointer";
}
},
_bodyRendered: function(request) {
var xml = request.responseXML;
var uid = xml.documentElement.getAttribute("sysparm_name");
var newBody = xml.getElementsByTagName("html")[0];
if (!this.body)
return;
if (newBody.xml) {
xml = newBody.xml;
} else if (window.XMLSerializer) {
xml = (new XMLSerializer()).serializeToString(newBody);
}
if (!xml)
return;
this.setEscapedBody(xml);
this._evalScripts(xml);
this.fireEvent("bodyrendered", this);
_frameChanged();
},
_centerOnScreen: function(width, height) {
var bounds = this.getAbsoluteRect();
var viewport = new WindowSize();
var w = viewport.width;
var h = viewport.height;
var windowWidth = (width? width : bounds.width);
var windowHeight = (height? height: bounds.height);
var scrollX = getScrollX();
if (typeof scrollX == "undefined")
scrollX = 0;
var scrollY = this._getScrollTop();
var leftX = parseInt((w / 2) - (windowWidth / 2)) + scrollX;
var topY = parseInt((h / 2) - (windowHeight / 2)) + scrollY;
var topWindow = getTopWindow();
var browserHeight = topWindow.innerHeight || topWindow.document.documentElement.clientHeight || topWindow.document.body.clientHeight;
var topWindowBody = $(topWindow.document.body);
if (topWindowBody && topWindowBody.select && topWindowBody.select('table.navpage').length == 0) {
var currentIframe = this._findCurrentIframe(window);
if (currentIframe && currentIframe.getBoundingClientRect) {
var rectTop = parseInt(currentIframe.getBoundingClientRect().top);
var d = h + rectTop;
topY = scrollY;
if (rectTop < 0) {
if (d > browserHeight)
topY += parseInt((browserHeight - windowHeight) / 2) - rectTop;
else
topY += parseInt((d - windowHeight) / 2) - rectTop;
} else {
if (d > browserHeight)
topY += parseInt((browserHeight - rectTop - windowHeight) / 2);
else {
topY += parseInt((h - windowHeight) / 2);
if (scrollY == 0 && (isMSIE6 || isMSIE7 || isMSIE8))
topY += window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
}
}
} else {
if (this.container) {
var containerParentHeight = this.container.parentNode.scrollHeight;
if (containerParentHeight < browserHeight)
topY = parseInt((containerParentHeight - windowHeight) / 2);
else {
if (scrollY == 0 && (isMSIE6 || isMSIE7 || isMSIE8))
topY += topWindow.pageYOffset || topWindow.document.documentElement.scrollTop || topWindow.document.body.scrollTop;
}
}
}
}
if (topY < 0)
topY = 0;
if (leftX < 0)
leftX = 0;
if (this.container) {
var headerSpacer = $(this.container.parentNode).select(".section_header_spacer");
if (headerSpacer.length > 0) {
headerSpacer = headerSpacer[0];
if (topY < headerSpacer.offsetHeight)
topY = headerSpacer.offsetHeight;
}
}
this.moveTo(leftX, topY);
},
_findCurrentIframe: function(win) {
try {
if (win && win.parent) {
var e = win.parent.document.getElementsByTagName('iframe');
for (var i =0; i < e.length; i++) {
if (e[i].contentWindow == win)
return e[i];
}
}
} catch(e) {}
return null;
},
_getScrollTop: function() {
if (this.container.parentNode != document.body)
return this.container.parentNode.scrollTop;
return getScrollY();
},
_draw: function(id) {
var e;
if (this.divMode) {
e = cel("DIV");
e.style.overflow = "hidden";
e.appendChild(this._drawTitle(id));
e.appendChild(this._drawBody(id));
} else {
e = cel("TABLE");
e.setAttribute('role', 'presentation');
var dragTableBody = cel("TBODY");
dragTableBody.appendChild(this._drawTitle(id));
dragTableBody.appendChild(this._drawBody(id));
e.appendChild(dragTableBody);
}
e.id = "window." + id;
this.window = e;
this.window.className = this.windowClass;
this.window.gWindow = this;
},
_drawTitle: function(id) {
if (!this.divMode) {
var baseTR = cel("TR");
baseTR.style.verticalAlign = "top";
var baseTD = cel("TD");
}
var dragTableHeader = cel("TABLE");
var dragTableHeaderBody = cel("TBODY");
dragTableHeader.className = "drag_section_header";
dragTableHeader.setAttribute('role', 'presentation');
dragTableHeader.style.width = "100%";
this.header = dragTableHeader;
var dragTableHeaderTR = cel("TR");
var leftDecorations = cel("TD");
leftDecorations.style.display = "none";
leftDecorations.style.top = "0px";
leftDecorations.style.left = "0px";
leftDecorations.style.verticalAlign = "top";
leftDecorations.style.whiteSpace = "nowrap";
this.leftDecorations = leftDecorations;
dragTableHeaderTR.appendChild(leftDecorations);
var dragTableHeaderTD = cel("TD");
dragTableHeaderTD.className = "drag_section_movearea";
dragTableHeaderTD.style.verticalAlign = "top";
dragTableHeaderTD.id = id + "_header";
this.title = dragTableHeaderTD;
dragTableHeaderTR.appendChild(dragTableHeaderTD);
var titleContents = cel("h1");
titleContents.id = id + "_header_contents";
this.titleContents = titleContents;
dragTableHeaderTD.appendChild(titleContents);
var headerDebugTD = cel("TD");
headerDebugTD.className = "drag_section_debug";
headerDebugTD.id = id + "_debug";
this.debugTD = headerDebugTD;
dragTableHeaderTR.appendChild(headerDebugTD);
var rightDecorations = cel("TD");
rightDecorations.style.top = "0px";
rightDecorations.style.right = "0px";
rightDecorations.style.verticalAlign = "top";
rightDecorations.style.whiteSpace = "nowrap";
rightDecorations.style.textAlign = "right";
this.rightDecorations = rightDecorations;
dragTableHeaderTR.appendChild(rightDecorations);
dragTableHeaderBody.appendChild(dragTableHeaderTR);
dragTableHeader.appendChild(dragTableHeaderBody);
if (!this.divMode) {
baseTD.appendChild(dragTableHeader);
baseTR.appendChild(baseTD);
}
dragTableHeaderTD = null;
dragTableHeaderTR = null;
dragTableHeaderBody = null;
dragTableHeader = null;
leftDecorations = null;
rightDecorations = null;
if (!this.divMode)
return baseTR;
else
return this.header;
},
_drawBody: function(id) {
var e;
if (this.divMode) {
e = cel("DIV");
this.body = e;
} else {
e = cel("TR");
e.style.height = "100%";
e.style.verticalAlign = "top";
var dragTableTD = cel("TD");
this.body = cel("SPAN");
dragTableTD.appendChild(this.body);
e.appendChild(dragTableTD);
}
this.body.id = "body_" + id;
this.body.className = "widget_body";
this.body.style.overflow = "auto";
this.body.innerHTML = this.DEFAULT_BODY;
this.body.gWindow = this;
return e;
},
_drawIndicator: function(classNames,id,altText) {
var dragTableTD = cel("TD");
dragTableTD.className = 'widget-indicator';
dragTableTD.style.display = 'none';
this.filterIndicator = cel("SPAN");
this.filterIndicator.className = classNames;
if (altText)
this.filterIndicator.title = getMessage(altText);
dragTableTD.id = id;
dragTableTD.gWindow = this;
dragTableTD.appendChild(this.filterIndicator);
return dragTableTD;
},
_toggleIndicator : function (indicator){
var $parentEl;
var preference;
if (indicator === 'real-time')
preference = 'real_time';
if (indicator === 'filter')
preference = 'filter_indicator';
$parentEl = $(indicator+'-indicator-'+this.id);
if ($parentEl) {
if (this.preferences[preference] === 'true')
$parentEl.addClassName('active');
else
$parentEl.removeClassName('active');
}
},
_enableDragging: function(element) {
var id = element.getAttribute("dragpart");
if (!id || this.isReadOnly() || this.getPreference('pinned'))
return;
var titlebar = gel(id + "_header");
this.gd = new GwtDraggable(titlebar, element);
if (typeof this.dragStart == "function")
this.gd.setStart(this.dragStart.bind(this));
if (typeof this.dragEnd == "function")
this.gd.setEnd(this.dragEnd.bind(this));
if (typeof this.dragging == "function")
this.gd.setDrag(this.dragging.bind(this));
titlebar = null;
},
_evalScripts: function(html) {
html = this._substituteGet(html);
var x = loadXML("<xml>" + html + "</xml>");
if (x) {
var scripts = x.getElementsByTagName("script");
for(var i = 0; i < scripts.length; i++)	{
var script = scripts[i];
var s = "";
if (script.getAttribute("type") == "application/xml")
continue;
if (script.getAttribute("type") == "text/ng-template")
continue;
if (script.getAttribute("src")) {
var url = script.getAttribute("src");
var req = serverRequestWait(url);
s = req.responseText;
} else {
s = getTextValue(script);
if (!s)
s = script.innerHTML;
}
if (s)
evalScript(s, true);
}
}
if (!window.G_vmlCanvasManager)
return;
window.G_vmlCanvasManager.init_(document)
},
_fixBrowserTags: function(html) {
if (!html)
return html;
var tags = [ "script", "a ", "div", "span", "select", "button" ];
for(var i = 0; i < tags.length; i++) {
var tag = tags[i];
html = html.replace(new RegExp('<' + tag + '([^>]*?)/>', 'img'), '<' + tag + '$1></' + tag + '>');
}
return html;
},
_onCloseClicked: function() {
if (!this.fireEvent("closeconfirm", this))
return false;
if (this.window){
var gWindow = $(this.window.gWindow);
if (gWindow)
gWindow.destroy();
}
},
_setShimBounds: function(x, y, w, h) {
if (x !== "")
this.cacheX = parseInt(x);
if (y !== "")
this.cacheY = parseInt(y);
if (w != "" && !isNaN(w))
this.cacheWidth = parseInt(w);
if (h != "" && !isNaN(h))
this.cacheHeight = parseInt(h);
if (!this.shim)
return;
if (x !== "")
this.shim.style.left = x + 'px';
if (y !== "")
this.shim.style.top = y + 'px';
if (w != "") {
if (!isNaN(w))
this.shim.style.width = w + 'px';
else
this.shim.style.width = w;
}
if (h != "") {
if (!isNaN(h))
this.shim.style.height = h + 'px';
else
this.shim.style.height = h;
}
},
_shimResize: function() {
if (!this.shim)
return;
var bounds = this.getAbsoluteRect();
this._setShimBounds(bounds.left, bounds.top, bounds.width, bounds.height);
},
_substituteGet: function(html) {
if (!html)
return html;
var substitutions = [this.type(), 'GlideDialogWindow', 'GlideDialogForm'];
for (var i = 0; i < substitutions.length; i++) {
var reg = new RegExp(substitutions[i] + ".get\\(", "g");
html = html.replace(reg, this.type() + ".prototype.get('" + this.getID() + "'");
}
return html;
},
getLowerSpacing : function() {
return "6px";
},
type : function() {
return "GlideWindow";
},
addClass: function(className) {
var domEl = this.getWindowDOM();
if (domEl) {
var classes = domEl.className;
if (classes.indexOf(className) < 0) {
domEl.className += " " + className;
}
}
},
removeClass: function(className) {
var domEl = this.getWindowDOM();
if (domEl) {
var classes = domEl.className;
domEl.className = classes.replace(className, "");
}
},
setScope: function(scope) {
if(scope) {
this.setPreference('sysparm_scope', scope);
}
return this;
}
});
;
/*! RESOURCE: /scripts/classes/GlideDialogWindow.js */
var GlideDialogWindow = Class.create(GlideWindow, {
BACKGROUND_COLOR: "#DDDDDD",
DEFAULT_RENDERER: "RenderForm",
WINDOW_INVISIBLE: 1,
ZINDEX: 1050,
initialize: function(id, readOnly, width, height) {
GlideWindow.prototype.initialize.call(this, id, readOnly);
if (width) {
this.setSize(width, height);
this.adjustBodySize();
}
this.grayBackground = null;
this.setTitle("Dialog");
this.setDialog(id);
this.parentElement = getFormContentParent();
this.insert(this.parentElement);
this._initDefaults();
this.setShim(true);
this.focusTrap = null;
},
destroy: function() {
var self = this;
this.disableFocusTrap();
window.setTimeout(function(){
Event.stopObserving(self.getWindowDOM(), 'resize', self.resizeFunc);
self._hideBackground();
self.parentElement = null;
GlideWindow.prototype.destroy.call(self);
if (isMSIE10 || isMSIE11)
document.body.focus();
}, 0);
},
insert: function(element) {
this.setZIndex(this._determineZIndex());
this._showBackground();
GlideWindow.prototype.insert.call(this, element, '', this.WINDOW_INVISIBLE);
this.container.setAttribute('role', 'dialog');
this.container.setAttribute('tabindex', -1);
this.onResize();
this.visible();
},
enableFocusTrap : function () {
if (window.focusTrap && this.container)
this.focusTrap = window.focusTrap(this.container, {escapeDeactivates: false});
if (this.focusTrap)
this.focusTrap.activate();
},
disableFocusTrap : function () {
if (!this.focusTrap)
return;
this.focusTrap.deactivate({returnFocus: true});
this.focusTrap = null;
},
setBody: function(html, noEvaluate, setAlt) {
GlideWindow.prototype.setBody.call(this, html, noEvaluate, setAlt);
if (typeof this.elementToFocus != 'undefined' && !this.elementToFocus) {
self.focus();
this.getWindowDOM().focus();
}
if (this.getPreference('focusTrap'))
this.enableFocusTrap();
this.onResize();
},
setDialog: function(dialogName) {
this.setPreference('table', dialogName);
},
setAriaLabel: function(label) {
if (this.container) {
this.container.setAttribute('aria-label', label);
}
},
setAriaLabelledBy: function(labelId) {
if (this.container) {
this.container.setAttribute('aria-labelledby', labelId);
}
},
onResize: function() {
this._centerOnScreen();
},
_eventKeyUp: function(e) {
e = getEvent(e);
if (e.keyCode == 27)
this.destroy();
},
hideBackground: function() {
return this._hideBackground();
},
_hideBackground: function() {
if (this.grayBackground)
this.parentElement.removeChild(this.grayBackground);
this.grayBackground = null;
},
_initDefaults: function() {
this.setPreference('renderer', this.DEFAULT_RENDERER);
this.setPreference('type', 'direct');
if (!this.isReadOnly())
Event.observe(this.getWindowDOM(), 'keyup', this._eventKeyUp.bind(this));
this.resizeFunc = this.onResize.bind(this);
Event.observe(this.getWindowDOM(), 'resize', this.resizeFunc);
},
_showBackground: function() {
var parent = document.viewport;
if (document.compatMode == 'BackCompat' && this.parentElement != document.body)
parent = this.parentElement;
if (!gel('grayBackground')) {
var gb = cel("div");
gb.id = gb.name = "grayBackground";
gb.style.top = gb.style.left = 0;
gb.style.width = "100%";
var hgt = this._getOverlayHeight();
gb.style.height =  hgt + "px";
gb.style.position = "absolute";
gb.style.display = "block";
gb.style.zIndex = this.ZINDEX - 1;
gb.style.zIndex = this.getZIndex() - 1;
gb.style.backgroundColor = this.BACKGROUND_COLOR;
gb.style.opacity = 0.33;
gb.style.filter = "alpha(opacity=33)";
this.parentElement.appendChild(gb);
this.grayBackground = gb;
}
},
_getOverlayHeight: function() {
var elements = $$('body > div.section_header_content_no_scroll');
if (elements && elements.length > 0)
return elements[0].scrollHeight;
elements = $$('body div.form_document');
if (elements && elements.length > 0)
return elements[0].scrollHeight;
if (document.body.scrollHeight)
return document.body.scrollHeight;
return document.body.offsetHeight;
},
_determineZIndex: function() {
if (!window.$j)
return this.ZINDEX;
var zIndex = this.ZINDEX;
$j('.modal:visible').each(function(index, el) {
var elZindex = $j(el).zIndex();
if (elZindex >= zIndex)
zIndex = elZindex + 2;
})
return zIndex;
},
type : function() {
return "GlideDialogWindow";
}
});
;
/*! RESOURCE: /scripts/classes/GlideDialogForm.js */
var GlideDialogForm = Class.create(GlideDialogWindow, {
REFRESH_ID: "refresh_frame",
CALLBACK_TARGET_FIELD: "glide_dialog_form_target",
DIALOG_FORM: "glide_dialog_form",
DELETE_FROM_CONF_DLG: "delete_from_confirm_dialog_ui_page",
ZINDEX: 1001,
initialize: function(title, tableName, onCompletionCallback, readOnly) {
this.parms = {};
this.fieldIDSet = false;
this.positionSet = false;
this.dialogWidth = "";
this.dialogHeight = "";
this.additionalWidth = 17;
this.additionalHeight = 17;
this.centerOnResize = true;
GlideDialogWindow.prototype.initialize.call(this, "FormDialog", readOnly);
if (title)
this.setTitle(title);
this.setPreference('renderer', 'RenderForm');
this.setPreference('table', this.DIALOG_FORM);
this.setPreference('sysparm_nameofstack', 'formDialog');
this.on("bodyrendered", this._onLoaded.bind(this));
this.tableName = tableName;
if (onCompletionCallback)
this.setCompletionCallback(onCompletionCallback);
},
destroy: function() {
this.un("bodyrendered");
if (this.callbackField) {
this.callbackField.onchange = null;
rel(this.CALLBACK_TARGET_FIELD + "_" + this.tableName);
}
if (this.refreshField) {
this.refreshField.onchange = null;
rel(this.REFRESH_ID);
}
GlideDialogWindow.prototype.destroy.call(this);
this.fireEvent("dialogclosed");
},
_onLoaded: function() {
var f = gel("dialog_form_poster");
f.action = this.tableName + '.do';
addHidden(f, 'sysparm_nameofstack', 'formDialog');
addHidden(f, 'sysparm_titleless', 'true');
addHidden(f, 'sysparm_is_dialog_form', 'true');
var sysId = this.getPreference('sys_id');
if (!sysId)
sysId = '';
var targetField = '';
if (this.fieldIDSet)
targetField = this.getPreference('sysparm_target_field');
addHidden(f, 'sys_id', sysId);
addHidden(f, 'sysparm_sys_id', sysId);
addHidden(f, 'sysparm_goto_url', this.DIALOG_FORM + '.do?sysparm_pass2=true&sysparm_skipmsgs=true&sysparm_nameofstack=formDialog&sysparm_returned_sysid=$action:$sys_id:$display_value&sysparm_target_field=' + targetField);
this.isLoaded = true;
for (id in this.parms)
addHidden(f, id, this.parms[id]);
f.submit();
},
setLoadCallback: function(func) {
this.loadCallback = func;
},
setX: function(x) {
this.x = x;
this.positionSet = true;
},
setY: function(y) {
this.y = y;
this.positionSet = true;
},
onResize: function() {
this._centerOrPosition();
},
setDialogTitle: function(title) {
this.setTitle(title);
},
setSysID: function(id) {
this.setPreference('sys_id', id);
},
setFieldID: function(fid) {
this.fieldIDSet = true;
this.setPreference('sysparm_target_field', fid);
},
setType: function(type) {
this.setPreference('type', type);
},
setMultiple: function(form) {
this.setPreference('sys_id', '-2');
this.addParm('sysparm_multiple_update', 'true');
this.addParm('sys_action', 'sysverb_multiple_update')
this.form = form;
},
setDialogSize: function(w, h) {
this.setDialogWidth(w);
this.setDialogHeight(h);
},
setDialogWidth: function(w) {
this.dialogWidth = w;
},
setDialogHeight: function(h) {
this.dialogHeight = h;
},
setDialogHeightMax: function(h) {
this.dialogHeightMax = h;
},
setCenterOnResize: function(flag) {
this.centerOnResize = flag;
},
addParm: function(parm, value) {
this.parms[parm] = value;
},
render: function() {
if (this.fieldIDSet == false)
this.setRefresh();
GlideDialogWindow.prototype.render.call(this);
},
setRefresh: function() {
var r = gel(this.REFRESH_ID)
if (r == null)
this.initRefresh();
this.setFieldID(this.REFRESH_ID);
},
setForm: function(form) {
this.form = form
},
initRefresh: function() {
this.refreshField = cel("input");
this.refreshField.type = "hidden";
this.refreshField.id = this.REFRESH_ID;
this.refreshField.onchange = this.doRefresh.bind(this);
document.body.appendChild(this.refreshField);
return this.refreshField;
},
doRefresh: function() {
var search = self.location.href;
if (search.indexOf("sysparm_refresh") == -1) {
if (search.indexOf("?") == -1)
search += "?";
else
search += "&";
search += "sysparm_refresh=refresh";
}
self.location.href = search;
},
setCompletionCallback: function(func) {
this.onCompletionFunc = func;
this.callbackField = cel("input");
this.callbackField.type = "hidden";
this.callbackField.id = this.CALLBACK_TARGET_FIELD + "_" + this.tableName;
this.callbackField.onchange = this._completionCallback.bind(this);
document.body.appendChild(this.callbackField);
this.setFieldID(this.callbackField.id);
},
frameLoaded: function() {
this._hideLoading();
if (!this.isLoaded)
return;
this._resizeDialog();
if (this.loadCallback)
this.loadCallback(this._getIframeDocument());
},
_centerOrPosition: function() {
if (!this.positionSet) {
this._centerOnScreen();
return;
}
this.moveTo(this.x, this.y);
},
_completionCallback: function() {
var e = gel(this.CALLBACK_TARGET_FIELD + "_" + this.tableName);
if (e) {
var sysId;
var action;
var displayValue;
var info = e.value.split(":");
var action = info[0];
if (info.length > 1)
sysId = info[1];
if (info.length > 2) {
displayValue = info[2].unescapeHTML();
}
this.onCompletionFunc(info[0], info[1], this.tableName, displayValue);
}
},
_resizeDialog: function() {
var doc = this._getIframeDocument();
if (!doc)
return;
var scrollable = this._getScrollable(doc.body);
if (!this.dialogWidth)
this.dialogWidth = scrollable.scrollWidth + this.additionalWidth;
if (!this.dialogHeight)
this.dialogHeight = scrollable.scrollHeight + this.additionalHeight;
if (this.dialogHeightMax)
this.dialogHeight = Math.min(this.dialogHeightMax, this.dialogHeight);
var e = gel('dialog_frame');
e.style.height = this.dialogHeight + "px";
e.style.width = this.dialogWidth + "px";
this._centerOrPosition();
},
_getScrollable: function(body) {
var elements = $(body).select('.section_header_content_no_scroll');
if (elements && elements.length > 0 ) {
return elements[0];
}
return body;
},
_hideLoading: function() {
var l = gel('loadingSpan');
if (l)
l.style.display = 'none';
},
_getIframeDocument: function() {
var e = gel('dialog_frame');
if (e)
if (e.contentDocument)
return e.contentDocument;
return document.frames['dialog_frame'].document;
},
type : function() {
return "GlideDialogForm";
}
});
function closeDialogForm(id) {
var w = parent.	gel('window.FormDialog');
if (w) {
w.gWindow.destroy();
return;
}
if (!id)
return;
w = parent.$j('#' + id).data('gWindow');
if (w)
w.destroy();
}
;
/*! RESOURCE: /scripts/classes/GlidePaneForm.js */
var GlidePaneForm = Class.create(GlideDialogForm, {
WINDOW_BORDER: 2,
INSET_SPACING : 20,
DIALOG_FORM: "glide_pane_form",
initialize: function(title, tableName, element, onCompletionCallback) {
this.divMode = true;
GlideDialogForm.prototype.initialize.call(this, title, tableName, onCompletionCallback, true);
this.setClassName("glide_pane");
this.setHeaderClassName("glide_pane_header");
this.setColor("white");
this.paneSize = this._getPaneSize();
this.setSize(this.paneSize.width, this.paneSize.height);
this.adjustBodySize();
this.moveTo(this.paneSize.left, this.paneSize.top);
this._createCloseButton();
this.getBody().style.overflow = "hidden";
},
onResize: function() {
return;
},
_getPaneSize: function(e) {
var o = new WindowSize();
var paneSize = {};
paneSize.height = o.height - ((this.WINDOW_BORDER + this.INSET_SPACING) * 2);
paneSize.width = o.width - ((this.WINDOW_BORDER + this.INSET_SPACING) * 2);
if (paneSize.height < this.INSET_SPACING) {
paneSize.height = o.height;
paneSize.top = 0;
} else {
paneSize.top = this.INSET_SPACING + document.body.scrollTop;
}
if (paneSize.width < 0) {
paneSize.width = o.width;
paneSize.left = 0;
} else {
paneSize.left = this.INSET_SPACING + document.body.scrollLeft;
}
paneSize.headerHeight = this.getHeader().clientHeight;
return paneSize;
},
_createCloseButton: function() {
var img = cel("img");
img.src = "images/x.gifx";
img.alt = getMessage("Close");
img.style.height = "12px";
img.style.width = "13px";
img.style.cursor = 'pointer';
img.setAttribute("tabindex", "0");
img.setAttribute("role", "button");
img.setAttribute("aria-label", getMessage("Close"));
var destroy = this.destroy.bind(this);
Event.observe(img, "click", destroy);
Event.observe(img, "keypress", function(event) {
var keyCode = event.which || event.keyCode;
if (keyCode === $j.ui.keyCode.SPACE)
destroy();
});
this.addDecoration(img);
},
_resizeDialog: function() {
var h = this.paneSize.height - this.paneSize.headerHeight;
var w =  this.paneSize.width;
if (isMSIE) {
h -= (this.WINDOW_BORDER * 2);
w -= (this.WINDOW_BORDER * 2);
}
var e = $('dialog_frame');
e.style.height = h + "px";
e.style.width = w + "px";
},
type : function() {
return "GlidePaneForm";
}
});
;
/*! RESOURCE: /scripts/classes/GlidePane.js */
var GlidePane = Class.create(GlidePaneForm, {
DIALOG_FORM: "glide_pane",
initialize: function(title, tableName, element, onCompletionCallback) {
GlidePaneForm.prototype.initialize.call(this, title, tableName, element, onCompletionCallback);
},
_onLoaded: function() {
var f = gel("dialog_form_poster");
f.action = this.tableName + '.do';
addHidden(f, 'sysparm_clear_stack', 'true');
addHidden(f, 'sysparm_nameofstack', 'formDialog');
addHidden(f, 'sysparm_titleless', 'true');
addHidden(f, 'sysparm_is_dialog_form', 'true');
var sysId = this.getPreference('sys_id');
if (!sysId)
sysId = '';
addHidden(f, 'sys_id', sysId);
addHidden(f, 'sysparm_sys_id', sysId);
this.isLoaded = true;
for (id in this.parms)
addHidden(f, id, this.parms[id]);
f.submit();
},
type : function() {
return "GlidePane";
}
});
;
/*! RESOURCE: /scripts/classes/GwtDraggable.js */
var GwtDraggable = Class.create(GwtObservable, {
initialize : function(header, itemDragged) {
this.header = $(header);
if (!itemDragged)
itemDragged = this.header;
this.parentElement = getFormContentParent();
this.setDraggable($(itemDragged));
this.setCursor("move");
this.setStart(this.genericStart.bind(this));
this.setDrag(this.genericDrag.bind(this));
this.setEnd(this.genericEnd.bind(this));
this.scroll = false;
this.differenceX = 0;
this.differenceY = 0;
this.shiftKey = false;
this.fDrag = this.drag.bind(this);
this.fEnd = this.end.bind(this);
this.enable();
},
enable: function() {
this.header.onmousedown = this.start.bind(this);
this.header.ontouchstart = this.start.bind(this);
},
disable: function() {
this.header.onmousedown = null;
this.header.ontouchstart = null;
},
start: function(e) {
e = getRealEvent(e);
var ex, ey;
if (e.type == 'touchstart') {
ex = e.touches[0].pageX;
ey = e.touches[0].pageY;
} else {
ex = e.clientX;
ey = e.clientY;
}
if (this.getScroll()) {
ex += getScrollX();
ey += getScrollY();
}
this.differenceX = ex - grabOffsetLeft(this.draggable) + grabScrollLeft(this.draggable);
this.differenceY = ey - grabOffsetTop(this.draggable) + grabScrollTop(this.draggable);
this.shiftKey = e.shiftKey;
Event.observe(this.parentElement, "mousemove", this.fDrag);
Event.observe(this.parentElement, "mouseup", this.fEnd);
Event.observe(this.parentElement, "touchmove", this.fDrag);
Event.observe(this.parentElement, "touchend", this.fEnd);
this.active = false;
this._stopSelection(e);
this.draggable.dragging_active = true;
var ret = this.onDragStart(this, ex, ey, e);
this.fireEvent("beforedrag", this, ex, ey, e);
return ret;
},
destroy: function() {
if (this.header) {
this.header.onmousedown = null;
this.header.ontouchstart = null;
}
this.header = null;
this.draggable = null;
this.parentElement = null;
},
drag : function(e) {
if (!this.active) {
createPageShim(this.parentElement);
this.active = true;
}
this._stopSelection(e);
e = getRealEvent(e);
var ex, ey;
if (e.type == 'touchmove') {
ex = e.touches[0].pageX;
ey = e.touches[0].pageY;
} else {
ex = e.clientX;
ey = e.clientY;
}
if (this.getScroll()) {
ex += getScrollX();
ey += getScrollY();
}
var posX = parseInt(ex - this.differenceX);
var posY = parseInt(ey - this.differenceY);
var ret = this.onDrag(this, posX, posY, e);
this.fireEvent("dragging", this, posX, posY, e);
return ret;
},
end : function(e) {
e = getRealEvent(e);
Event.stopObserving(this.parentElement, "mousemove", this.fDrag);
Event.stopObserving(this.parentElement, "mouseup", this.fEnd);
Event.stopObserving(this.parentElement, "touchmove", this.fDrag);
Event.stopObserving(this.parentElement, "touchend", this.fEnd);
this.shiftKey = e.shiftKey;
removePageShim(this.parentElement);
this._restoreSelection();
this.draggable.dragging_active = false;
var ret = this.onDragEnd(this, e);
if (!this.active)
return;
this.active = false;
this.fireEvent("dragged", this, e);
this.resetDraggable();
return ret;
},
getDraggable: function() {
return this.draggable;
},
getYDifference: function() {
return this.differenceY;
},
getXDifference: function() {
return this.differenceX;
},
getScroll: function() {
return this.scroll;
},
setDraggable: function(e) {
this.draggable = e;
},
setStart: function(f) {
this.onDragStart = f;
},
setDrag: function(f) {
this.onDrag = f;
},
setEnd: function(f) {
this.onDragEnd = f;
},
setCursor: function(c) {
if (this.header.style) {
this.header.style.cursor = c;
}
},
setScroll: function(s) {
this.scroll = s;
},
saveAndSetDraggable: function(e) {
this.origDraggable = this.draggable;
this.setDraggable(e);
},
resetDraggable: function() {
if (this.origDraggable) {
this.draggable = this.origDraggable;
this.origDraggable = null;
}
},
genericStart: function(x, y) {
return true;
},
genericEnd: function() {
return true;
},
genericDrag: function(me, x, y) {
me.draggable.style.left = x;
me.draggable.style.top = y;
return true;
},
_stopSelection: function(ev) {
stopSelection(this.parentElement);
if (ie5) {
ev.cancelBubble = true;
ev.returnValue = false;
} else {
if (typeof ev.preventDefault != 'undefined')
ev.preventDefault();
if (typeof ev.stopPropagation != 'undefined')
ev.stopPropagation();
}
},
_restoreSelection: function() {
if (this.parentElement)
restoreSelection(this.parentElement);
},
z: function() {
}
});
function createPageShim(parentElement) {
if (!parentElement)
return;
var w = (parentElement.scrollWidth? parentElement.scrollWidth : parentElement.clientWidth);
var h = (parentElement.scrollHeight? parentElement.scrollHeight : parentElement.clientHeight);
var pageShim = cel("div");
pageShim.id = pageShim.name = "pageshim";
pageShim.style.top = 0;
pageShim.style.left = 0;
pageShim.style.width = w + "px";
pageShim.style.height = h + "px";
pageShim.style.position = "absolute";
pageShim.style.display = "block";
pageShim.style.zIndex = "500";
pageShim.style.backgroundColor = "red";
pageShim.style.opacity=0;
pageShim.style.filter="alpha(opacity=0)";
parentElement.appendChild(pageShim);
}
function removePageShim(parentElement) {
var pageShim = gel("pageshim");
if (pageShim)
parentElement.removeChild(pageShim);
}
;
/*! RESOURCE: /scripts/classes/ui/GlideDraggable.js */
var GlideDraggable = Class.create({
V_SCROLL_REFRESH_FREQ_MS: 70,
H_SCROLL_REFRESH_FREQ_MS: 50,
IGNORED_DRAG_ELEMENTS: ['A', 'BUTTON', 'INPUT'],
initialize: function(hoverElem, dragElem) {
this.setHoverElem(hoverElem);
if (this.hoverElem == null)
return;
this.setDragElm(dragElem || this.hoverElem);
this.boundElem = document.body;
this.setDragFunction(this.genericDrag);
this.onScroll = {};
this.allowedClasses = [];
},
destroy: function() {
this.reset();
this.hoverElem = null;
this.dragElem = null;
this.boundElem = null;
this.onStart = null;
this.onDrag = null;
this.onScroll = null;
this.onEnd = null;
},
reset: function() {
clearInterval(this.leftScrollId);
clearInterval(this.rightScrollId);
clearInterval(this.topScrollId);
clearInterval(this.bottomScrollId);
this.leftScrollId = null;
this.rightScrollId = null;
this.topScrollId = null;
this.bottomScrollId = null;
delete this._origDragElmCoords;
delete this._origPageCoords;
delete this._shift;
delete this._pageCoords;
delete this._dragElmCoords;
},
genericDrag: function(e, dragElem, pageCoords, shift, dragCoords) {
dragElem.style.left = dragCoords.x + 'px';
dragElem.style.top = dragCoords.y + 'px';
},
setHoverCursor: function(c) {
this.hoverCursor = c;
this.hoverElem.style.cursor = c;
},
setHoverElem: function(obj) {
this.hoverElem = $(obj);
if (this.hoverElem) {
this.hoverElem.style.MozUserSelect = '-moz-none';
this.hoverElem.onselectstart = function() { return false; };
}
},
getHoverElem: function() {
return this.hoverElem;
},
setDragCursor: function(c) {
this.dragCursor = c;
if (this.pageShim)
this.pageShim.style.cursor = this.dragCursor;
},
setDragElm: function(obj) {
this.dragElem = $(obj);
this.dragElem.style.MozUserSelect = '-moz-none';
},
setStartFunction: function(f) {
if (this._fDraggableStart)
document.stopObserving('mousedown', this._fDraggableStart);
this._fDraggableStart = this._draggableStart.bind(this);
this.hoverElem.observe('mousedown', this._fDraggableStart);
this.onStart = f;
},
setDragFunction: function(f) {
this.onDrag = f;
},
setEndFunction: function(f) {
this.onEnd = f;
},
setAutoScrollLeft: function(f, x) {
this.onScroll.LEFT = f;
this.onScroll.LEFTX = x;
},
setAutoScrollRight: function(f, x) {
this.onScroll.RIGHT = f;
this.onScroll.RIGHTX = x;
},
setAutoScrollTop: function(f, y) {
this.onScroll.TOP = f;
this.onScroll.TOPX = y;
},
setAutoScrollBottom: function(f, y) {
this.onScroll.BOTTOM = f;
this.onScroll.BOTTOMX = y;
},
addAllowedTargetClass: function(className) {
this.allowedClasses.push(className);
},
start: function(event) {
this._getCoords(event);
if (window.GlideContextMenu && typeof GlideContextMenu.closeAllMenus == 'function' && event.target && !$(event.target).up('.cm_menuwrapper')) {
GlideContextMenu.closeAllMenus();
}
this._fDraggableMove = this._draggableMove.bind(this);
this._fdraggableEnd = this._draggableEnd.bind(this);
document.observe('mousemove', this._fDraggableMove);
document.observe('mouseup', this._fdraggableEnd);
if (this.dragCursor)
this.dragElem.style.cursor = this.dragCursor;
document.body.focus();
document.onselectstart = function () { return false; };
},
_createPageShim: function() {
this.pageShim = document.createElement('div');
this.boundElem.appendChild(this.pageShim);
this.pageShim.style.top = 0;
this.pageShim.style.left = 0;
this.pageShim.style.width = '100%';
this.pageShim.style.height = '100%';
this.pageShim.style.position = 'absolute';
this.pageShim.style.display = 'block';
this.pageShim.style.zIndex = '9999';
this.pageShim.style.backgroundColor = Prototype.Browser.IE ? '#ccc' : 'transparent';
this.pageShim.style.opacity = '0';
this.pageShim.style.filter = 'alpha(opacity=0)';
if (this.dragCursor) {
this.pageShim.style.cursor = this.dragCursor;
this.dragElem.style.cursor = this.dragCursor;
}
},
_removePageShim: function() {
if (this.pageShim)
this.pageShim.parentNode.removeChild(this.pageShim);
this.pageShim = null;
},
_getCoords: function(event) {
event = event || window.event;
if (!event.pageX) {
event.pageX = event.clientX;
event.pageY = event.clientY;
}
if (!this._origPageCoords)
this._origPageCoords = {x:event.pageX, y:event.pageY};
if (!this._origDragElmCoords) {
var cumulativeOffset = this.dragElem.cumulativeOffset();
if (this.dragElem.style.right) {
this.dragElem.style.left = (this.dragElem.up().getWidth() - this.dragElem.getWidth() - parseInt(this.dragElem.style.right, 10)) + 'px';
this.dragElem.setStyle({right: ''});
}
this._origDragElmCoords = {
x: parseInt(this.dragElem.style.left, 10) || cumulativeOffset.left,
y: parseInt(this.dragElem.style.top, 10) || cumulativeOffset.top
};
}
this._shift = !this._pageCoords ? {x:0,y:0} : {x:(event.pageX - this._pageCoords.x), y:(event.pageY - this._pageCoords.y)};
this._pageCoords = {x:event.pageX, y:event.pageY};
this._dragElmCoords = {x:this._origDragElmCoords.x + (this._pageCoords.x - this._origPageCoords.x),
y:this._origDragElmCoords.y + (this._pageCoords.y - this._origPageCoords.y)};
},
_draggableStart: function(event) {
var node = event.target;
while(node && !node.classList.contains('glide_box')){
if(this.IGNORED_DRAG_ELEMENTS.indexOf(node.nodeName) !== -1) return;
node = node.parentElement;
}
var l = this.allowedClasses.length;
if (l > 0) {
var boolCanStart = false;
for (var i = 0; i < l; i++) {
if (event.target.className == this.allowedClasses[i]) {
boolCanStart = true;
break;
}
}
if (!boolCanStart)
return true;
}
this.start(event);
return this.onStart(event, this.dragElem, this._pageCoords, this._shift, this._dragElmCoords, this);
},
_draggableMove: function(event) {
this._getCoords(event);
if (!this.pageShim) {
this._createPageShim();
if (Prototype.Browser.IE)
this.dragElem.up().onselectstart = function() { return false; };
}
if (this._shift.x == 0 && this._shift.y == 0)
return;
if (this.onScroll.LEFT && this._pageCoords.x < this.onScroll.LEFTX) {
if (!this.leftScrollId)
this.leftScrollId = setInterval(this._autoXScrollerInterceptor.bind(this, this.onScroll.LEFT, this.onScroll.LEFTX), this.H_SCROLL_REFRESH_FREQ_MS);
if (this._shift.y == 0)
return;
} else if (this.onScroll.LEFT && this.leftScrollId && this._pageCoords.x >= this.onScroll.LEFTX) {
clearInterval(this.leftScrollId);
this.leftScrollId = null;
}
if (this.onScroll.RIGHT && this._pageCoords.x > this.onScroll.RIGHTX) {
if (!this.rightScrollId)
this.rightScrollId = setInterval(this._autoXScrollerInterceptor.bind(this, this.onScroll.RIGHT, this.onScroll.RIGHTX), this.H_SCROLL_REFRESH_FREQ_MS);
if (this._shift.y == 0)
return;
} else if (this.onScroll.RIGHT && this.rightScrollId && this._pageCoords.x <= this.onScroll.RIGHTX) {
clearInterval(this.rightScrollId);
this.rightScrollId = null;
}
if (this.onScroll.TOP && this._pageCoords.y < this.onScroll.TOPX) {
if (!this.topScrollId)
this.topScrollId = setInterval(this._autoYScrollerInterceptor.bind(this, this.onScroll.TOP, this.onScroll.TOPX), this.V_SCROLL_REFRESH_FREQ_MS);
if (this._shift.x == 0)
return;
} else if (this.onScroll.TOP && this.topScrollId && this._pageCoords.y >= this.onScroll.TOPX) {
clearInterval(this.topScrollId);
this.topScrollId = null;
}
if (this.onScroll.BOTTOM && this._pageCoords.y > this.onScroll.BOTTOMX) {
if (!this.bottomScrollId)
this.bottomScrollId = setInterval(this._autoYScrollerInterceptor.bind(this, this.onScroll.BOTTOM, this.onScroll.BOTTOMX), this.V_SCROLL_REFRESH_FREQ_MS);
if (this._shift.x == 0)
return;
} else if (this.onScroll.BOTTOM && this.bottomScrollId && this._pageCoords.y <= this.onScroll.BOTTOMX) {
clearInterval(this.bottomScrollId);
this.bottomScrollId = null;
}
this.onDrag(event, this.dragElem, this._pageCoords, this._shift, this._dragElmCoords, this);
return false;
},
_autoXScrollerInterceptor: function(f, boundaryX) {
f(this.dragElem, this._pageCoords.x - boundaryX, this._pageCoords);
},
_autoYScrollerInterceptor: function(f, boundaryY) {
f(this.dragElem, this._pageCoords.y - boundaryY, this._pageCoords);
},
_draggableEnd: function(event) {
this._removePageShim();
document.onselectstart = null;
if (Prototype.Browser.IE)
this.dragElem.up().onselectstart = null;
if (this.hoverCursor)
this.hoverElem.style.cursor = this.hoverCursor;
document.stopObserving('mousemove', this._fDraggableMove);
document.stopObserving('mouseup', this._fdraggableEnd);
event.stopPropagation();
this._getCoords(event);
var boolReturn = this.onEnd ? this.onEnd(event, this.dragElem, this._pageCoords, this._shift, this._dragElmCoords, this) : true;
this.reset();
return boolReturn;
},
toString: function() { return 'GlideDraggable'; }
});
;
/*! RESOURCE: /scripts/classes/GwtDraggableSnap.js */
var debugId = 0;
var GwtDraggableSnap = Class.create(GwtDraggable, {
initialize : function(header, itemDragged) {
GwtDraggable.prototype.initialize.call(this, header, itemDragged);
this.snapTable = null;
this.dropZoneList = [];
this.initDropZones = null;
this.boundDirection = null;
this.boundElement = null;
this.setStart(this.snapStart.bind(this));
this.setDrag(this.snapDrag.bind(this));
this.setEnd(this.snapEnd.bind(this));
this.setCreateFloat(this._createFloat.bind(this));
this.setFloatClassName("drag_float_visible");
},
destroy: function() {
this.snapTable = null;
this.dropZoneList = null;
this.onInitDropZones = null;
this.boundElement = null;
GwtDraggable.prototype.destroy.call(this);
},
setCreateFloat: function(f) {
this.onCreateFloat = f;
if (!f)
this.onCreateFloat = this._createFloat.bind(this);
},
setFloatClassName: function(n) {
this.floatClassName = n;
},
setSnapTable: function(table) {
this.snapTable = table;
this.dropZoneList = [];
},
setInitDropZones: function(f) {
this.onInitDropZones = f;
this.snapTable = null;
this.dropZoneList = [];
},
setBoundLeftRight: function() {
this.boundDirection = "l-r";
},
setBoundUpDown: function() {
this.boundDirection = "u-d";
},
setBoundElement: function(element) {
this.boundElement = element;
},
addDropZone: function(element) {
this.dropZoneList.push(element);
},
removeDropZone: function(element) {
for (var i = 0; i < this.dropZoneList.length; i++) {
if (element.id == this.dropZoneList[i].id) {
this.dropZoneList.remove(i);
break;
}
}
},
clearDropZones: function() {
this.dropZoneList = [];
},
snapStart: function(dragObj, x, y, e) {
x -= this.differenceX;
y -= this.differenceY;
if (dragObj.draggable.style.position == "absolute")
this.snapMode = "absolute";
else
this.snapMode = "relative";
this.currentDropZone = null;
this.snapElement = null;
this.dragFloat = null;
this._initDropZones(dragObj, x, y);
this._initDragBounds(x, y);
return true;
},
snapDrag: function(dragObj, x, y, e) {
var pos = this._boundDragging(x, y);
x = pos[0];
y = pos[1];
if (!this.dragFloat)
this.dragFloat = this.onCreateFloat(dragObj, x, y);
if (this.dragFloat) {
this.dragFloat.style.left = x;
this.dragFloat.style.top = y;
}
this._findDropZoneAndMove(dragObj, x + this.differenceX, y + this.differenceY);
return true;
},
snapEnd: function(dragObj, x, y, e) {
this.dropZones = [];
if (this.dragFloat)
this.floatIntv = this._floatBackAndDelete(this, 150, 15);
return true;
},
hasSnapMoved: function() {
return this.originalDropZone != this.currentDropZone;
},
_createFloat: function(dragObj, x, y) {
var dfloat = cel("div");
dfloat.id = "floater";
dfloat.className = this.floatClassName;
dfloat.style.position = "absolute";
dfloat.style.width = dragObj.draggable.offsetWidth - (!isMSIE ? 2 : 0);
dfloat.style.height = dragObj.draggable.offsetHeight - (!isMSIE ? 2 : 0);
document.body.appendChild(dfloat);
return dfloat;
},
_boundDragging: function(x, y) {
if (this.boundDirection == "l-r")
y = this.origY;
else if (this.boundDirection == "u-d")
x = this.origX;
if (this.boundElement) {
if (y < this.boundTop)
y = this.boundTop;
if (y > this.boundBottom)
y = this.boundBottom;
if (x < this.boundLeft)
x = this.boundLeft;
if (x > this.boundRight)
x = this.boundRight;
}
return [x, y];
},
_findDropZoneAndMove: function(dragObj, x, y) {
if (this.snapMode == "absolute") {
if (this.currentDropZone && this._overlaps(this.currentDropZone, x, y))
return false;
var dz = this._findDropZoneAbsolute(dragObj, x, y);
if (dz && dz != this.currentDropZone) {
this.currentDropZone = dz;
this.snapElement = dz.element;
if (!this.fireEvent("beforedrop", dragObj, dz.element, dz.element, x, y))
return false;
dragObj.draggable.style.left = this.currentDropZone.left;
dragObj.draggable.style.top = this.currentDropZone.top;
return true;
}
} else {
var dz = this._findDropZoneRelative(dragObj, x, y);
if (dz && dragObj.draggable.nextSibling != dz.element) {
this.currentDropZone = dz;
this.snapElement = dz.element.parentNode;
if (!this.fireEvent("beforedrop", dragObj, dz.element.parentNode, dz.element, x, y))
return false;
dz.element.parentNode.insertBefore(dragObj.draggable, dz.element);
dragObj.draggable.parentNode.style.display = "none";
dragObj.draggable.parentNode.style.display = "";
return true;
}
}
return false;
},
_findDropZoneAbsolute: function(dragObj, x, y) {
var dz = null;
for (var i = 0; i < this.dropZones.length; i++) {
if (this._overlaps(this.dropZones[i], x, y)) {
dz = this.dropZones[i];
break;
}
}
return dz;
},
_findDropZoneRelative: function(dragObj, x, y) {
var draggable = dragObj.getDraggable();
var cCell = null;
var aLargeNumber = 100000000;
for (var z = 0; z < this.dropZones.length; z++) {
var dz = this.dropZones[z];
if (draggable == dz)
continue;
var ai = Math.sqrt(Math.pow(x - dz.left, 2) + Math.pow(y - dz.top, 2));
if (isNaN(ai))
continue;
if (ai < aLargeNumber){
aLargeNumber = ai;
cCell = dz;
}
}
return cCell;
},
_initDragBounds: function(x, y) {
this.origX = x;
this.origY = y;
if (this.boundElement) {
this.boundLeft = grabOffsetLeft(this.boundElement) - grabScrollLeft(this.boundElement);
this.boundTop = grabOffsetTop(this.boundElement) - grabScrollTop(this.boundElement);
this.boundRight = this.boundLeft + this.boundElement.offsetWidth - this.draggable.offsetWidth;
this.boundBottom = this.boundTop + this.boundElement.offsetHeight - this.draggable.offsetHeight;
this.boundLeft -= 4;
this.boundTop -= 4;
this.boundRight += 4;
this.boundBottom += 4;
}
},
_initDropZones: function(dragObj, x, y) {
this.dropZones = [];
var zones = [];
if (this.onInitDropZones) {
zones = this.onInitDropZones(this, x, y);
} else if (this.snapTable) {
zones = this._initDropZonesFromTable(this.snapTable);
} else {
for (var i = 0; i < this.dropZoneList.length; i++)
zones.push(this.dropZoneList[i]);
}
for (var i = 0; i < zones.length; i++) {
var zone = zones[i];
if (this.snapMode == "absolute") {
this._addDropZone(zone);
} else {
this._initDropZonesRelative(dragObj, zone);
}
}
if (this.snapMode == "absolute") {
this.originalDropZone = this._findDropZoneAbsolute(dragObj, x, y);
} else {
var nextSibling = dragObj.draggable.nextSibling;
for (var i = 0; i < this.dropZones.length; i++) {
if (this.dropZones[i].element == nextSibling) {
this.originalDropZone = this.dropZones[i];
break;
}
}
}
},
_initDropZonesFromTable: function(t) {
var zones = [];
var rowCnt = t.rows.length;
var colCnt = t.rows[0].cells.length;
for (var row = 0; row < rowCnt; row++) {
for (var col = 0; col < colCnt; col++) {
var cell = t.rows[row].cells[col];
if (getAttributeValue(cell, "dropzone") == "true" || cell.dropzone == "true")
zones.push(cell);
}
}
return zones;
},
_initDropZonesRelative: function(dragObj, zone) {
var myHeight = 0;
var lastDivExists = false;
for (var i = 0; i < zone.childNodes.length; i++) {
var node = zone.childNodes[i];
if (getAttributeValue(node, "dragpart")
|| node.dragpart == "true"
|| getAttributeValue(node, "dropzone")
|| node.dropzone == "true") {
if ((node.id == "lastdiv") || (node.name == "lastdiv"))
lastDivExists = true;
if (node == dragObj.draggable) {
myHeight = dragObj.draggable.offsetHeight;
}
if (this._isInScrollRegion(node, zone)) {
this._addDropZone(node, myHeight);
}
}
}
if (!lastDivExists) {
var lastDiv = cel("DIV");
lastDiv.name = "lastdiv";
lastDiv.dropzone = "true";
lastDiv.style.width = "100%";
lastDiv.style.height = "0";
zone.appendChild(lastDiv);
this._addDropZone(lastDiv, myHeight);
}
},
_addDropZone: function(element, topOffset) {
if (!topOffset)
topOffset = 0;
var dropZone = {};
dropZone.element = element;
dropZone.left = grabOffsetLeft(element) - grabScrollLeft(element);
dropZone.top = grabOffsetTop(element) - topOffset - grabScrollTop(element);
dropZone.right = dropZone.left + element.offsetWidth;
dropZone.bottom = dropZone.top + element.offsetHeight;
this.dropZones.push(dropZone);
},
_isInScrollRegion: function(element, region) {
var left = element.offsetLeft;
var top = element.offsetTop;
if (left < 0)
left = 0;
if (top < 0)
top = 0;
return (left >= region.scrollLeft)
&& (top  >= region.scrollTop)
&& (left <= (region.scrollLeft + region.offsetWidth))
&& (top  <= (region.scrollTop + region.offsetHeight));
},
_overlaps: function(dz, x, y) {
return ((dz.left < x) && (x < dz.right) && (dz.top < y) && (y < dz.bottom));
},
_floatBackAndDelete: function(gd, tTime, tMoves) {
var baseObj = gd.getDraggable();
var movenObj = gd.dragFloat;
var currentX = parseInt(movenObj.style.left);
var currentY = parseInt(movenObj.style.top);
var backX = (currentX - grabOffsetLeft(baseObj) - grabScrollLeft(baseObj)) / tMoves;
var backY = (currentY - grabOffsetTop(baseObj) - grabScrollTop(baseObj)) / tMoves;
return setInterval(
function(){
if (tMoves < 1) {
clearInterval(gd.floatIntv);
gd.dragFloat.parentNode.removeChild(gd.dragFloat);
gd.dragFloat = null;
return;
}
tMoves--;
currentX -= backX;
currentY -= backY;
movenObj.style.left = parseInt(currentX) + "px";
movenObj.style.top = parseInt(currentY) + "px"
}, tTime / tMoves)
},
z: null
});
;
/*! RESOURCE: /scripts/classes/AutoComplete.js */
var AutoComplete = Class.create({
initialize: function() {
this.processor = "AutoComplete";
this.table = null;
this.column = null;
this.query = null;
this.typedChars = "";
this.input = null;
this.select = null;
this.timeout = null;
this.keyDelay = 500;
},
setTable: function(name) {
this.table = name;
},
setColumn: function(name) {
this.column = name;
},
setQuery: function(query) {
this.query = query;
},
setSelect: function(o) {
this.select = gel(o);
},
setInput: function(o) {
this.input = gel(o);
},
onKeyUp: function(event) {
if (this.timeout)
clearTimeout(this.timeout);
this.timeout = setTimeout(this._onKeyUp.bind(this), this.keyDelay);
},
_onKeyUp: function() {
this.timeout = null;
this.typedChars = this.input.value;
this.ajaxRequest();
},
ajaxRequest: function(urlParameters) {
var ajax = new GlideAjax(this.processor);
ajax.addParam("sysparm_chars", this.typedChars);
ajax.addParam("sysparm_name", this.table + "." + this.column);
if (this.query)
ajax.addParam("sysparm_query", this.query);
ajax.getXML(this.ajaxResponse.bind(this));
},
ajaxResponse: function(request) {
if (!request.responseXML.documentElement)
return;
this.populateSelect(request.responseXML.documentElement);
},
populateSelect: function(xml) {
this.select.options.length = 0;
var items = xml.getElementsByTagName("item");
for (var i = 0; i < items.length; i++ ) {
var item = items[i];
var o = new Option(item.getAttribute('label'), item.getAttribute('sys_id'));
this.select.options[this.select.options.length] = o;
}
}
});
;
/*! RESOURCE: /scripts/classes/SlushBucket.js */
var SlushBucket = Class.create({
initialize: function(id) {
this.id = id;
this.leftSelectJustify = "";
this.rightSelectJustify = "";
this.rightValues = "";
this.evenOddColoring = false;
this.isTemplating = false;
this.ignoreDuplicates = false;
},
getLeftSelectJustify: function() {
return this.leftSelectJustify;
},
setLeftSelectJustify: function(justify) {
this.leftSelectJustify = justify;
this.getLeftSelect().style.textAlign = justify;
},
getRightSelectJustify: function() {
return this.rightSelectJustify;
},
setRightSelectJustify: function(justify) {
this.rightSelectJustify = justify;
this.getRightSelect().style.textAlign = justify;
},
getEvenOddColoring: function() {
return this.evenOddColoring;
},
setEvenOddColoring: function(evenOdd) {
this.evenOddColoring = evenOdd;
},
addLeftChoice: function(value, text) {
var opt = cel("option");
opt.value = value;
opt.text = text;
this.getLeftSelect().options.add(opt);
},
addRightChoice: function(value, text) {
var opt = cel("option");
opt.value = value;
opt.text = text;
this.getRightSelect().options.add(opt);
},
clear: function() {
this.clearSelect(this.getLeftSelect());
this.clearSelect(this.getRightSelect());
},
clearSelect: function(selectBox) {
selectBox.options.length = 0;
},
getValues: function(selectBox) {
var values = new Array();
var options = selectBox.options;
for (var i = 0; i < options.length; i++) {
values[i] = options[i].value;
}
return values;
},
saveRightValues: function(values) {
this.rightValues = values;
},
getRightValues: function() {
return this.rightValues;
},
getSelected : function(selectBox) {
var selectedIds = [];
var sourceOptions = selectBox.options;
for (var i = 0; i < sourceOptions.length; i++) {
option = sourceOptions[i];
if (!option.selected)
continue;
selectedIds.push(i);
}
return selectedIds;
},
getRightSelect: function() {
return gel(this.id + "_right");
},
getLeftSelect: function() {
return gel(this.id + "_left");
},
onKeyMoveLeftToRight: function(evt) {
var desiredKeyCode = this._isRTL() ? 37 : 39;
if (evt.keyCode != desiredKeyCode)
return;
this.moveOptions(this.getLeftSelect(), this.getRightSelect());
},
onKeyMoveRightToLeft: function(evt) {
var desiredKeyCode = this._isRTL() ? 39 : 37;
if (evt.keyCode != desiredKeyCode)
return;
this.moveOptions(this.getRightSelect(), this.getLeftSelect());
},
onKeyUpMoveUpDown: function(evt, select) {
for (var i = 0; i < select.options.length; i++) {
select.options[i].setAttribute('aria-selected', select.options[i].selected);
}
},
onKeyMoveUpDown: function(evt, select) {
if (evt.keyCode !== 38 && evt.keyCode !== 40)
return;
var selectedOption;
var options = select.options;
for (var i = 0; i < options.length; i++) {
var option = options[i];
if (!option.selected || (typeof selectedOption != 'undefined' && option.value === selectedOption.value))
continue;
option.selected = false;
option.setAttribute("aria-selected", false);
if (option.value !== lastFocusedOption)
continue;
if (evt.keyCode === 38)
selectedOption = options[i - 1];
if (evt.keyCode === 40)
selectedOption = options[i + 1];
selectedOption.selected = true;
selectedOption.setAttribute("aria-selected", true);
lastFocusedOption = selectedOption.value;
}
},
onOptionSelected: function(evt, select) {
lastFocusedOption = evt.target.value;
var sourceOptions = select.options;
for (var i = 0; i < select.length; i++) {
var option = sourceOptions[i];
option.setAttribute("aria-selected", option.selected);
}
},
moveLeftToRight: function() {
this.moveOptions(this.getLeftSelect(), this.getRightSelect());
},
keydownMoveLeftToRight: function(evt) {
if (evt.keyCode === 13 || evt.keyCode === 32) {
evt.preventDefault();
this.moveLeftToRight();
}
},
moveRightToLeft: function() {
this.moveOptions(this.getRightSelect(), this.getLeftSelect());
},
keydownMoveRightToLeft: function(evt) {
if (evt.keyCode === 13 || evt.keyCode === 32) {
evt.preventDefault();
this.moveRightToLeft();
}
},
copyLeftToRight: function() {
this.moveOptions(this.getLeftSelect(), this.getRightSelect(), true);
},
_isRTL: function() {
return document.documentElement.getAttribute('dir') == 'rtl';
},
moveOptions : function(sourceSelect, targetSelect, copyFlag) {
var selectedIds = this.getSelected(sourceSelect);
if (selectedIds.length < 1)
return;
var sourceOptions = sourceSelect.options;
var targetOptions = targetSelect.options;
targetSelect.selectedIndex = -1;
for (var i = 0; i < selectedIds.length; i++) {
var soption = sourceOptions[selectedIds[i]];
var label = soption.text;
if ((this.ignoreDuplicates) && (this._isDuplicate(targetOptions, soption.value)))
continue;
option = new Option(label, sourceOptions[selectedIds[i]].value);
option.cl = label;
option.style.color = sourceOptions[selectedIds[i]].style.color;
targetOptions[targetOptions.length] = option;
targetOptions[targetOptions.length - 1].selected = true;
}
if (!copyFlag) {
for (var i = selectedIds.length - 1; i > -1; i--)
sourceSelect.remove(selectedIds[i]);
}
this.evenOddColorize();
if (targetSelect["onchange"])
targetSelect.onchange();
if (sourceSelect["onchange"])
sourceSelect.onchange();
sourceSelect.disabled = true;
sourceSelect.disabled = false;
if (selectedIds.length > 0 && !this.isTemplating){
targetSelect.focus();
}
var rightElem = [gel(this.id + "_right").options];
if(rightElem[0].length > 0){
var e = gel(this.id);
var newVal = new Array;
var rightElementOptions = rightElem[0];
for(var i = 0 ; i < rightElementOptions.length; i++)
newVal[i] = rightElementOptions[i].value;
var newVal = newVal.join(',');
var oldValue = e.value;
if (oldValue != newVal) {
e.value = newVal;
multiModified(e);
}
} else{
gel(this.id).value = "";
}
},
moveUp : function() {
sourceSelect = this.getRightSelect();
var selectedIds = this.getSelected(sourceSelect);
var options = sourceSelect.options;
for (var i = 0; i < selectedIds.length; i++) {
var selId = selectedIds[i];
if (selId == 0)
break;
if (window['privateMoveUp'])
privateMoveUp(options, selId);
else
this.swap(options[selId], options[selId - 1]);
options[selId].selected = false;
options[selId - 1].selected = true;
}
this.evenOddColorize();
sourceSelect.focus();
if (sourceSelect["onLocalMoveUp"])
sourceSelect.onLocalMoveUp();
function resetFields(){
sourceSelect.removeAttribute("multiple");
setTimeout(function(){sourceSelect.setAttribute("multiple", "multiple"); $(sourceSelect).stopObserving('click', resetFields);});
}
if (isMSIE8 || isMSIE9 || isMSIE10 || isMSIE11)
$(sourceSelect).observe('click', resetFields);
},
moveDown : function() {
var sourceSelect = this.getRightSelect();
var selectedIds = this.getSelected(sourceSelect);
selectedIds.reverse();
var options = sourceSelect.options;
for (var i = 0; i < selectedIds.length; i++) {
var selId = selectedIds[i];
if (selId + 1 == options.length)
break;
if (window['privateMoveDown'])
privateMoveDown(options, selId);
else
this.swap(options[selId], options[selId + 1]);
options[selId].selected = false;
options[selId + 1].selected = true;
}
this.evenOddColorize();
sourceSelect.focus();
if (sourceSelect["onLocalMoveDown"])
sourceSelect.onLocalMoveDown();
function resetFields(){
sourceSelect.removeAttribute("multiple");
setTimeout(function(){sourceSelect.setAttribute("multiple", "multiple"); $(sourceSelect).stopObserving('click', resetFields);});
}
if (isMSIE8 || isMSIE9 || isMSIE10 || isMSIE11)
$(sourceSelect).observe('click', resetFields);
},
swap: function(option1, option2) {
if (!option2)
return;
var t = $j(option1).clone();
t = t[0];
t.text = option1.text;
option1.value = option2.value;
option1.text = option2.text;
option2.value = t.value;
option2.text = t.text;
},
evenOddColorize: function() {
if (!this.evenOddColoring)
return;
rightSelect = this.getRightSelect();
if (rightSelect.length < 1)
return;
var options = rightSelect.options;
for (var i = 0; i < rightSelect.length; i++) {
if ((i % 2) == 0)
rightSelect.options[i].style.background = "white";
else
rightSelect.options[i].style.background = "#dddddd";
}
},
_isDuplicate : function(options, value) {
for (var i = 0; i < options.length; i++) {
if (options[i].value == value)
return true;
}
return false;
},
getClassName : function() {
return "SlushBucket";
},
type: "Slushbucket"
});
;
/*! RESOURCE: /scripts/classes/ajax/AJAXCompleter.js */
var AJAXCompleter = Class.create({
KEY_BACKSPACE: 8,
KEY_TAB:       9,
KEY_RETURN:   13,
KEY_ESC:      27,
KEY_LEFT:     37,
KEY_UP:       38,
KEY_RIGHT:    39,
KEY_DOWN:     40,
KEY_DELETE:   46,
KEY_HOME:     36,
KEY_END:      35,
KEY_PAGEUP:   33,
KEY_PAGEDOWN: 34,
initialize: function(name, elementName) {
this.guid = guid();
this.className = "AJAXCompleter";
this.name = name;
this.elementName = elementName;
this.field = null;
this.menuBorderSize = 1;
this.resetSelected();
this.ieIFrameAdjust = 4;
this.initDropDown();
this.initIFrame();
},
initDropDown: function() {
var dd = gel(this.name);
if (!dd) {
dd = cel("div");
dd.id = this.name;
dd.className = "ac_dropdown";
dd.setAttribute('aria-live', 'polite');
dd.setAttribute('role', 'listbox');
var style = dd.style;
style.border = "black " + this.menuBorderSize + "px solid";
this._setCommonStyles(style);
style.backgroundColor = "white";
style.zIndex = 20000;
}
this.dropDown = $(dd);
addChild(dd);
this.clearDropDown();
this.currentMenuItems = [];
this.currentMenuCount = this.currentMenuItems.length;
},
initIFrame: function() {
var iFrame = gel(this.name + "_shim");
if (!iFrame) {
var title = this.name.replace(/\./g, ' ');
iFrame = cel("iframe");
iFrame.name = this.name + "_shim";
iFrame.scrolling = "no";
iFrame.frameborder = "no";
iFrame.src = "javascript:false;";
iFrame.id = this.name + "_shim";
iFrame.title = new GwtMessage().getMessage(title);
var style = iFrame.style;
style.height = 0;
this._setCommonStyles(style);
style.zIndex = this.dropDown.style.zIndex - 1;
addChild(iFrame);
}
this.iFrame = $(iFrame);
},
_setCommonStyles: function(style) {
style.padding = 1;
style.visibility = "hidden";
style.display = "none";
style.position = "absolute";
},
setWidth: function(w) {
this.dropDown.style.width = w + "px";
this.iFrame.style.width = w + "px";
},
setHeight: function(height) {
this.dropDown.height = height;
if (g_isInternetExplorer)
height += this.ieIFrameAdjust;
this._setIframeHeight(height);
},
_setIframeHeight: function(height) {
this.iFrame.style.height = height;
},
resetSelected: function() {
this.selectedItemObj = null;
this.selectedItemNum = -1;
},
clearDropDown: function() {
this.hideDropDown();
var dropDown = this.dropDown;
while(dropDown.childNodes.length > 0)
dropDown.removeChild(dropDown.childNodes[0]);
this.currentMenuItems = [];
this.currentMenuCount = this.currentMenuItems.length;
this._setInactive();
},
_setActive: function() {
window.g_active_ac = this;
},
_setInactive: function() {
window.g_active_ac = null;
},
hideDropDown: function() {
if (this.dropDown.style.visibility == "hidden")
return;
this._showHide("hidden", "none");
this.element.removeAttribute('aria-activedescendant');
this.element.setAttribute('aria-expanded', 'false');
this.resetSelected();
},
onDisplayDropDown: function() {
},
showDropDown: function() {
if (this.dropDown.style.visibility == "visible")
return;
this._showHide("visible", "inline");
this.element.setAttribute('aria-expanded', 'true');
this.onDisplayDropDown();
},
_showHide: function(type, display) {
this.dropDown.style.visibility = type;
this.iFrame.style.visibility = type;
this.dropDown.style.display = display;
this.iFrame.style.display = display;
},
isVisible: function() {
return this.dropDown.style.visibility == "visible";
},
appendElement: function(element) {
this.getDropDown().appendChild(element);
},
appendItem: function(item) {
this.appendElement(item);
if (this.currentMenuItems == null)
this.currentMenuItems = [];
item.acItemNumber = this.currentMenuItems.length;
this.currentMenuItems.push(item);
this.currentMenuCount = this.currentMenuItems.length;
},
selectNext: function() {
var itemNumber = this.selectedItemNum;
if (this.selectedItemNum < this.getMenuCount() - 1)
itemNumber++;
this.setSelection(itemNumber);
},
selectPrevious: function() {
var itemNumber = this.selectedItemNum;
if (this.selectedItemNum <= 0)
return false;
itemNumber--;
this.setSelection(itemNumber);
return true;
},
unsetSelection: function()  {
if (this.selectedItemNum == -1)
return;
this.setNonSelectedStyle(this.selectedItemObj);
this.resetSelected();
},
setSelection: function(itemNumber) {
this.unsetSelection();
this.selectItem(itemNumber);
this.setSelectedStyle(this.selectedItemObj);
},
selectItem: function(itemNumber) {
this.selectedItemNum = itemNumber;
this.selectedItemObj = this.currentMenuItems[itemNumber];
},
getMenuItems: function() {
return this.currentMenuItems;
},
getObject: function(itemNumber) {
return this.currentMenuItems[itemNumber];
},
getSelectedObject: function() {
return this.getObject(this.selectedItemNum);
},
setSelectedStyle: function(element) {
$(element).addClassName("ac_highlight");
element.setAttribute('aria-selected', 'true');
if (typeof element.displaySpan != "undefined") {
alert("element.displaySpan.style.color");
element.displaySpan.style.color = "white";
}
},
setNonSelectedStyle: function(element) {
$(element).removeClassName("ac_highlight");
element.removeAttribute('aria-selected');
if (element.displaySpan)
element.displaySpan.style.color = "green";
},
setTargetTable: function(targetTable) {
this.targetTable = targetTable;
},
getTargetTable: function() {
return this.targetTable;
},
isPopulated: function() {
return this.getMenuCount() > 0;
},
log: function(msg) {
jslog(this.className + ": " + msg);
},
getIFrame: function() { return this.iFrame; },
getField: function() { return this.field; },
getDropDown: function() { return this.dropDown; },
getMenuCount: function() { return this.currentMenuCount; }
});
;
/*! RESOURCE: /scripts/classes/ajax/AJAXReferenceControls.js */
var AJAXReferenceControls = Class.create({
initialize:function (tableElement, id, parentElement, refSysId, rowSysId, refQualTag) {
this.refName = id;
this.id = "LIST_EDIT_" + id;
this.tableElement = tableElement;
this.dependent = null;
this.refQual = "";
this.refImageFocused = false;
this.refSysId = refSysId;
this.rowSysId = rowSysId;
this.createAdditionalValues(refQualTag);
this.createInput(parentElement);
this.createLookup(parentElement);
this.createInputGroup(parentElement);
this.createDependent(parentElement);
},
clearDropDown:function () {
if (this.ac)
this.ac.clearDropDown();
},
createAdditionalValues:function (refQualTag) {
this.additionalValues = {};
this.additionalValues.sys_uniqueValue = this.rowSysId;
this.additionalValues.sys_target = this.tableElement.getTable().getName();
this.additionalValues.sysparm_list_edit_ref_qual_tag = refQualTag;
},
createInput:function (parentElement) {
var doctype = document.documentElement.getAttribute('data-doctype');
this._createHidden(parentElement, this.id, '');
this.input = cel("input", parentElement);
input = this.input;
if (doctype)
input.className = 'form-control list-edit-input';
input.id = "sys_display." + this.id;
input.onfocus = this._onFocus.bind(this);
input.onkeydown = this._onKeyDown.bindAsEventListener(this);
input.onkeypress = this._onKeyPress.bindAsEventListener(this);
input.onkeyup = this._onKeyUp.bindAsEventListener(this);
input.autocomplete = "off";
input.ac_columns = "";
input.ac_order_by = "";
input.setAttribute("data-ref-dynamic", this.tableElement.isDynamicCreation());
},
resolveReference:function () {
if (this.ac)
this.ac.onBlur();
},
setDisplayValue:function (value) {
this.input.value = value;
},
getInput:function () {
return this.input;
},
getValue:function () {
return gel(this.id).value;
},
getDisplayValue:function () {
return this.input.value;
},
isResolving:function () {
return (this.ac && this.ac.isResolving());
},
isReferenceValid:function () {
if (this.ac) {
return this.ac.isReferenceValid();
}
return true;
},
setResolveCallback:function (f) {
if (!this.ac)
return;
this.ac.setResolveCallback(f);
},
setReferenceQual:function (refQual) {
this.refQual = refQual;
},
createLookup:function (parent) {
var doctype = document.documentElement.getAttribute('data-doctype');
var title = getMessage("Lookup using list");
var image = $(createImage("images/reference_list.gifx", title));
if(doctype)
image = $(createIcon("icon-search", title));
image.width = 18;
image.height = 16;
image.id = "ref_list." + this.id;
image.observe("click", this._refListOpen.bind(this));
if (window.g_accessibility) {
image.observe("keydown", function(evt) {
if (evt && evt.keyCode == Event.KEY_RETURN) {
evt.stop();
return this._refListOpen(evt);
}
}.bind(this));
}
image.style.marginLeft = "5px";
image.setAttribute("tabindex", 0);
image.setAttribute("role", "button");
if(doctype)
image = image.wrap('span', {'class' : 'input-group-addon', 'id' : 'list-edit-span'});
parent.appendChild(image);
},
createDependent:function (parent) {
if (!this.tableElement.isDependent())
return;
var input = cel("input");
input.type = "hidden";
this.dependent = "sys_dependent";
input.id = this.tableElement.getTable().getName() + "." + this.dependent;
input.name = input.id;
parent.appendChild(input);
this.dependentInput = input;
},
createInputGroup:function (parent) {
if (document.documentElement.getAttribute('data-doctype') != 'true')
return;
var divInputGroup = $('sys_display.' + this.id).wrap('div', {'class' : 'input-group', 'style' : 'border-spacing:0'});
var referenceIcon = $('list-edit-span')
$('list-edit-span').remove();
divInputGroup.appendChild(referenceIcon);
},
setRecord:function (record) {
this.record = record;
},
_createHidden:function (parent, id, value) {
var input = cel("input");
input.type = "hidden";
input.id = id;
input.value = value;
parent.appendChild(input);
return input;
},
_setDependent:function () {
if (this.dependent == null)
return;
var value = this.record.getValue(this.tableElement.getDependent());
if ('NULL' === value)
this.dependentInput.value = '';
else
this.dependentInput.value = value;
},
_onFocus:function (evt) {
if (this.ac)
return;
this._setDependent();
var dep = '';
if (this.dependentInput)
dep = "sys_dependent";
var referenceValid = true;
if (this.record && this.record.isReferenceValid)
referenceValid = this.record.isReferenceValid();
this.ac = new AJAXTableCompleter(this.input, this.id, dep, null, null, referenceValid);
this.ac.elementName = this.refName;
this.ac.setRefQual(this.refQual);
this.ac.referenceSelect(this.refSysId, this.input.value, !referenceValid);
this.ac.clearDerivedFields = false;
for (var n in this.additionalValues)
this.ac.setAdditionalValue(n, this.additionalValues[n]);
},
_onKeyDown:function (evt) {
acReferenceKeyDown(this.input, evt);
},
_onKeyPress:function (evt) {
acReferenceKeyPress(this.input, evt);
},
_onKeyUp:function (evt) {
acReferenceKeyUp(this.input, evt);
},
_refListOpen:function (evt) {
var te = this.tableElement;
this._setDependent();
var url = reflistOpenUrl(this.refName, this.id, te.getName(), te.getReference());
for (var n in this.additionalValues)
url += "&" + n + "=" + encodeText(this.additionalValues[n]);
if (this.dependentInput)
url += "&sysparm_dependent=" + escape(this.dependentInput.value);
popupOpenStandard(url, "lookup");
return false;
},
type:function () {
return "AJAXReferenceControls";
}
});
;
/*! RESOURCE: /scripts/classes/ajax/AJAXOtherCompleter.js */
var AJAXOtherCompleter = Class.create(AJAXCompleter, {
initialize: function(element, reference) {
AJAXCompleter.prototype.initialize.call(this, 'AC.' + reference, reference);
this.className = "AJAXReferenceCompleter";
this.dirty = false;
this.matched = false;
this.fieldChanged = false;
this.ignoreAJAX = false;
this.type = null;
this.refField = null;
this.textValue = "";
this.invisibleTextValue = "";
this.savedTextValue = "";
this.savedInvisibleTextValue = "";
this.previousTextValue = "";
this.resultsStorage = new Object();
this.emptyResults = new Object();
this.oldFunctionJunk();
},
setInvisibleField: function(f) {
this.iField = f;
this._setAC(f);
},
setField: function(f) {
this.field = f;
this.field.autocomplete = "off";
this._setAC(f);
},
setUpdateField: function(f) {
this.updateField = f;
this._setAC(f);
},
_setAC: function(field) {
if (field)
field.ac = this;
},
setType: function(type) {
this.type = type;
},
setSavedText: function(textArray) {
if (textArray[0] != null)
this.savedInvisibleTextValue = textArray[0];
this.savedTextValue = textArray[1];
},
getMenu: function() { return this.getDropDown(); },
getUpdateField: function() {
return this.updateField;
},
oldFunctionJunk: function() {
this.isOTM = function() { return this.type == ONE_TO_MANY; };
this.getInvisibleField = function() { return this.iField; };
}
});
;
/*! RESOURCE: /scripts/classes/ajax/AJAXReferenceCompleter.js */
function acReferenceKeyDown(element, evt) {
if (!element.ac || element.getAttribute('readonly'))
return true;
return element.ac.keyDown(evt);
}
function acReferenceKeyPress(element, evt) {
if (!element.ac || element.getAttribute('readonly'))
return true;
var rv =  element.ac.keyPress(evt);
if (rv == false)
evt.cancelBubble = true;
return rv;
}
function acReferenceKeyUp(element, evt) {
if (!element.ac || element.getAttribute('readonly'))
return true;
return element.ac.keyUp(evt);
}
addRenderEvent(function() {
var statusEl = document.getElementById('ac.status');
if (!statusEl) {
statusEl = document.createElement('span');
statusEl.id = 'ac.status';
statusEl.setAttribute('role', 'status');
statusEl.setAttribute('aria-live', 'polite');
statusEl.classList.add('sr-only');
document.body.appendChild(statusEl);
}
})
var AJAXReferenceCompleter = Class.create(AJAXCompleter, {
PROCESSOR: "Reference",
initialize: function(element, reference, dependentReference, refQualElements, targetTable, referenceValid) {
AJAXCompleter.prototype.initialize.call(this, 'AC.' + reference, reference);
this.className = "AJAXReferenceCompleter";
this.element = $(element);
this.keyElement = gel(reference);
this.setDependent(dependentReference);
this.setRefQualElements(refQualElements);
this.setTargetTable(targetTable);
this.additionalValues = {};
CustomEvent.observe('domain_scope_changed', this.cacheClear.bind(this));
this._commonSetup();
this.oneMatchSelects = true;
this.clearDerivedFields = true;
this.allowInvalid = this.element.readAttribute('allow_invalid') == 'true';
this.dynamicCreate = this.element.readAttribute('data-ref-dynamic') == 'true';
this.isList = this.element.readAttribute('islist') == 'true';
if (!this.simpleQualifier)
this.refQual = "";
this.isFilterUsingContains = this.element.readAttribute('is_filter_using_contains') == 'true';
this.referenceValid = referenceValid;
},
_commonSetup: function() {
this.element.ac = this;
Event.observe(this.element, 'blur', this.onBlurEvent.bind(this));
Event.observe(this.element, 'focus', this.onFocus.bind(this));
this.saveKeyValue = this.getKeyValue();
this.currentDisplayValue = this.getDisplayValue();
this.currentRefValue = this.getKeyValue();
this.searchChars = "";
this.rowCount = 0;
this.ignoreFocusEvent = false;
this.max = 0;
this.cacheClear();
this.hasFocus = true;
this.isResolvingFlag = false;
var f = this.element.readAttribute("function");
if (f)
this.selectionCallBack = f;
addUnloadEvent(this.destroy.bind(this));
this._setupAccessibility();
this._setUpDocMouseDown();
},
isResolving: function() {
return this.isResolvingFlag;
},
destroy: function() {
this.element = null;
this.keyElement = null;
},
keyDown: function(evt) {
var typedChar = getKeyCode(evt);
if (typedChar == KEY_ARROWUP) {
if( !this.selectPrevious())
this.hideDropDown();
}  else if (typedChar == KEY_ARROWDOWN) {
if (!this.isVisible()) {
if (!this.isPopulated())
return;
this.showDropDown();
}
this.selectNext();
} else if (typedChar == KEY_TAB && !window.g_accessibility) {
if (this.hasDropDown() && this.select())
this.clearTimeout();
else
this.onBlur();
} else if (typedChar == KEY_TAB && window.g_accessibility) {
if (this.searchChars && this.searchChars != this.currentDisplayValue)
this.element.value = '';
this.clearDropDown();
} else if (typedChar == KEY_ESC) {
this.element.value = '';
this.clearDropDown();
}
},
keyUp: function(evt) {
var typedChar = getKeyCode(evt);
if (!this.isDeleteKey(typedChar))
return;
this.clearTimeout();
this.timer = setTimeout(this.ajaxRequest.bind(this), g_acWaitTime || 50);
},
setSelection: function(itemNumber) {
AJAXCompleter.prototype.setSelection.call(this, itemNumber);
this.element.setAttribute('aria-activedescendant', this.selectedItemObj.id);
this.setStatus(this.selectedItemObj.innerText);
this.selectedItemObj.setAttribute('aria-selected', 'true');
},
_handleDeleteKey: function() {
},
clearTimeout: function() {
if (this.timer != null)
clearTimeout(this.timer);
this.timer = null;
},
keyPress: function(eventArg) {
var evt = getEvent(eventArg);
var typedChar = getKeyCode(evt);
if (typedChar != KEY_ENTER && typedChar != KEY_RETURN)
this.clearTimeout();
if (this.isNavigation(typedChar))
return true;
if (this.isDeleteKey(typedChar))
return true;
if (typedChar == KEY_ENTER || typedChar == KEY_RETURN) {
if (this.hasDropDown() && this.select())
this.clearTimeout();
else
this.onBlur();
if (this.enterSubmits) {
this.element.setValue(trim(this.element.getValue()));
return true;
}
return false;
}
if (typedChar == this.KEY_ESC) {
this.clearDropDown();
return false;
}
this.resetSelected();
this.timer = setTimeout(this.ajaxRequest.bind(this), g_acWaitTime || 50);
return true;
},
isNavigation: function(typedChar) {
if (typedChar == this.KEY_TAB)
return true;
if (typedChar == this.KEY_LEFT)
return true;
if (typedChar == this.KEY_RIGHT)
return true;
},
isDeleteKey: function(typedChar) {
if (typedChar == this.KEY_BACKSPACE || typedChar == this.KEY_DELETE)
return true;
},
_getSearchChars: function() {
if (this._checkDoubleByteEncodedCharacter(this.getDisplayValue()))
return this._translateDoubleByteIntoSingleByte(this.getDisplayValue());
else
return this.getDisplayValue();
},
_checkDoubleByteEncodedCharacter: function(s) {
if (typeof s === 'undefined' || s.length === 0)
return false;
var char = s.charCodeAt(0);
return char === 12288 || (65280 < char && char < 65375);
},
_translateDoubleByteIntoSingleByte: function (s) {
var str = '';
for (var i = 0, l = s.length, char; i < l; i++) {
char = s.charCodeAt(i);
if (char == 12288)
str += String.fromCharCode(32);
else if (65280 < char && char < 65375)
str += String.fromCharCode(char - 65248);
else
str += s[i];
}
return str;
},
ajaxRequest: function() {
var s = this._getSearchChars();
if (s.length == 0 && !this.isDoctype()) {
this.clearDropDown();
this.searchChars = null;
return;
}
if (s == "*")
return;
this.searchChars = s;
var xml = this.cacheGet(s);
if (xml) {
this.processXML(xml);
return;
}
if (this.cacheEmpty()) {
this.clearDropDown();
this.hideDropDown();
return;
}
var url = "";
url += this.addSysParms();
url += this.addDependentValue();
url += this.addRefQualValues();
url += this.addTargetTable();
url += this.addAdditionalValues();
url += this.addAttributes("ac_");
this.callAjax(url);
},
callAjax: function(url) {
this.isResolvingFlag = true;
var ga = new GlideAjax(this.PROCESSOR);
ga.setQueryString(url);
ga.setErrorCallback(this.errorResponse.bind(this));
ga.getXML(this.ajaxResponse.bind(this), null, null);
},
ajaxResponse: function(response) {
if (!response.responseXML || !response.responseXML.documentElement) {
this.isResolvingFlag = false;
return;
}
var xml = response.responseXML;
var e = xml.documentElement;
var timer = e.getAttribute("sysparm_timer");
if (timer != this.timer)
return;
this.timer = null;
this.clearDropDown();
this.cachePut(this.searchChars, xml);
this.processXML(xml);
this.isResolvingFlag = false;
if (this.onResolveCallback)
this.onResolveCallback();
},
errorResponse: function() {
this.isResolvingFlag = false;
},
processXML: function(xml) {
var e = xml.documentElement;
this._processDoc(e);
var values = this._processItems(xml);
var recents = this._processRecents(xml);
if (!this.hasFocus) {
this._processBlurValue(values, recents);
return;
}
this.createDropDown(values, recents);
},
_processItems: function(xml) {
var items = xml.getElementsByTagName("item");
var values = [];
for(var i = 0; i < items.length; i++) {
var item = items[i];
var array = this.copyAttributes(item);
array['XML'] = item;
values[values.length] = array;
}
return values;
},
_processRecents: function(xml) {
var recents = [];
var items = xml.getElementsByTagName("recent");
for (var i = 0; i < items.length; i++) {
var rec = this.copyAttributes(items[i]);
rec.XML = items[i];
recents.push(rec);
}
return recents;
},
_processBlurValue: function(values, recents) {
this.ignoreFocusEvent = false;
values = values || [];
recents = recents || [];
if (values.length + recents.length === 0 && this.searchChars.length > 0) {
this.setInvalid();
return;
}
if (!this.oneMatchSelects || this.getDisplayValue() === '')
return;
var targetLabel, targetValue;
if (values.length + recents.length == 1) {
var target = recents.length == 1 ? recents[0] : values[0];
targetLabel = target.label;
targetValue = target.name;
}
if (recents[0] && recents[0].label == this.getDisplayValue()) {
var matchesRecent = recents[1] && recents[0].label == recents[1].label;
var matchesValue = values[0] && recents[0].label == values[0].label;
if (!matchesRecent && !matchesValue) {
targetLabel = recents[0].label;
targetValue = recents[0].name;
}
} else if (values[0] && values[0].label == this.getDisplayValue()) {
var matchesSecondValue = values[1] && values[0].label == values[1].label;
if (!matchesSecondValue) {
targetLabel = values[0].label;
targetValue = values[0].name;
}
}
if (targetLabel)
this.referenceSelect(targetValue, targetLabel);
},
_processDoc: function(doc) {
this.rowCount = doc.getAttribute('row_count');
this.max = doc.getAttribute('sysparm_max');
},
addSysParms: function() {
var name = this.elementName;
if (this.elementName.indexOf('IO:') > -1)
name = this.elementName.substring(this.elementName.indexOf("IO:"), this.elementName.length);
var sp = "sysparm_name=" + name +
"&sysparm_timer=" + this.timer +
"&sysparm_max=" + this.max +
"&sysparm_chars=" + encodeText(this.searchChars);
if (this.guid)
sp += "&sysparm_completer_id=" + this.guid;
if (this.ignoreRefQual)
sp += "&sysparm_ignore_ref_qual=true";
else if (this.refQual != "" && typeof this.refQual != "undefined")
sp += "&sysparm_ref_qual=" + this.refQual;
var domain = gel("sysparm_domain");
if (domain)
sp += "&sysparm_domain=" + domain.value;
return sp;
},
addTargetTable: function() {
var answer = "";
if (this.getTargetTable()) {
answer = "&sysparm_reference_target=" + this.getTargetTable();
}
return answer;
},
addAdditionalValues: function() {
var answer = "";
for (var n in this.additionalValues)
answer += "&" + n + "=" + encodeText(this.additionalValues[n]);
return answer;
},
addAttributes: function(prefix) {
var answer = "";
var attributes = this.element.attributes;
for (var n = 0; n < attributes.length; n++) {
var attr = attributes[n];
var name = attr.nodeName;
if (name.indexOf(prefix) != 0)
continue;
var v = attr.nodeValue;
answer += "&" + name + "=" + v;
}
return answer;
},
copyAttributes: function(node) {
var attributes = new Array();
for (var n = 0; n < node.attributes.length; n++) {
var attr = node.attributes[n];
var name = attr.nodeName;
var v = attr.nodeValue;
attributes[name] = v;
}
return attributes;
},
createDropDown: function(foundStrings, foundRecents) {
this.clearDropDown();
this.createInnerDropDown();
if (foundRecents && foundRecents.length > 0) {
this._showRecents();
for (var i = 0; i < foundRecents.length; i++) {
var rec = foundRecents[i];
var recchild = this.createChild(rec);
recchild.acItem = rec;
this.appendItem(recchild);
this.addMouseListeners(recchild);
}
}
if (foundStrings && foundStrings.length > 0) {
this._showMax(foundStrings, foundRecents);
for (var c = 0; c < foundStrings.length; c++) {
if (this.max > 0 && c >= this.max)
break;
var x = foundStrings[c];
var child = this.createChild(x);
child.acItem = x;
this.appendItem(child);
this.addMouseListeners(child);
}
}
if (this.currentMenuCount) {
this.setDropDownSize();
this.showDropDown();
if (isTextDirectionRTL()) {
var diff = parseInt(this.dropDown.style.width) - this.getWidth();
if(diff < 0)
diff = 0;
var w = 0;
if (isMSIE8 || isMSIE7 || isMSIE6 || (isMSIE9 && (getPreference('glide.ui11.use') == "false"))) {
if (typeof g_form != "undefined")
w =  this.element.offsetParent ? this.element.offsetParent.clientWidth : 0;
}
this.dropDown.style.left = (parseInt(this.dropDown.style.left) - diff) + w + "px";
this.iFrame.style.left = (parseInt(this.iFrame.style.left) - diff) + w + "px";
if (parseInt(this.dropDown.style.left) < 0) {
this.dropDown.style.left = 0 + "px";
this.iFrame.style.left = 0 + "px";
}
}
var height = this.dropDown.clientHeight;
this.setHeight(height);
this.firefoxBump();
var msg = '{0} suggestions. Please use the up and down arrow keys to select a value';
if (this.currentMenuCount == 1)
msg = '1 suggestion. Please use the up and down arrow keys to select a value';
var messageAPI = new GwtMessage();
messageAPI.fetch([msg], function(msgs) {
var msgWithValues = messageAPI.format(msgs[msg], this.currentMenuCount);
this.setStatus(msgWithValues);
}.bind(this))
}
this._setActive();
_frameChanged();
},
createInnerDropDown: function() {
},
_showRecents: function() {
this._addHeaderRow("Recent selections");
},
_showMax: function(foundStrings, foundRecents) {
if (foundRecents && foundRecents.length > 0)
this._addHeaderRow("Search");
},
_addHeaderRow: function(message) {
var row = cel("div");
row.className = "ac_header";
row.setAttribute("width", "100%");
row.innerHTML = new GwtMessage().getMessage(message);
this.appendElement(row);
},
select: function() {
if (this.selectedItemNum < 0)
return false;
var o = this.getSelectedObject().acItem;
this.referenceSelect(o['name'], o['label']);
this.clearDropDown();
return true;
},
_setDisplayValue: function(v) {
var e = this.getDisplayElement();
if (e.value == v)
return;
e.value = v;
},
referenceSelectTimeout: function(sys_id, displayValue) {
this.selectedID = sys_id;
this.selectedDisplayValue = displayValue;
if (typeof reflistModalPick == "function")
this._referenceSelectTimeout();
else
setTimeout(this._referenceSelectTimeout.bind(this), 0);
},
_referenceSelectTimeout: function() {
this.referenceSelect(this.selectedID, this.selectedDisplayValue);
},
referenceSelect: function(sys_id, displayValue, referenceInvalid) {
this._setDisplayValue(displayValue);
var e = this.getKeyElement();
var glideListHasItem = e && e.value && sys_id && 'glide-list' === e.getAttribute('data-type') ? !!e.value.match(new RegExp('(^|,)(' + sys_id + ')(,|$)', 'gm')) : false;
if (e.value != sys_id && !glideListHasItem) {
e.value = sys_id;
callOnChange(e);
}
this.searchChars = displayValue;
this.currentDisplayValue = displayValue;
this.showViewImage();
if (!referenceInvalid)
this.clearInvalid();
this._clearDerivedFields();
if (this.selectionCallBack && sys_id) {
if (!glideListHasItem)
eval(this.selectionCallBack);
else if (this.getDisplayElement())
this.getDisplayElement().value = '';
}
if (e["filterCallBack"]) {
e.filterCallBack();
}
},
setFilterCallBack: function(f) {
var e = this.getKeyElement();
e["filterCallBack"] = f
},
_clearDerivedFields: function() {
if (this.clearDerivedFields && window['DerivedFields']) {
var df = new DerivedFields(this.keyElement.id);
df.clearRelated();
df.updateRelated(this.getKeyValue());
}
},
showViewImage: function() {
var element = gel("view." + this.keyElement.id);
var elementR = gel("viewr." + this.keyElement.id);
var noElement = gel("view." + this.keyElement.id + ".no");
var sys_id = this.getKeyValue();
if (sys_id == "") {
hideObject(element);
hideObject(elementR);
showObjectInlineBlock(noElement);
} else {
showObjectInlineBlock(element);
showObjectInlineBlock(elementR);
hideObject(noElement);
}
},
createChild: function(item) {
return this._createChild(item, item['label']);
},
_createChild: function(item, text) {
var div = cel(TAG_DIV);
div.ac = this;
div.acItem = item;
div.id = 'ac_option_' + item.name;
div.setAttribute('role', 'option');
var itemInRow = cel(TAG_SPAN, div);
itemInRow.innerHTML = (text + '').escapeHTML();
return div;
},
addMouseListeners: function(element) {
element.onmousedown = this.onMouseDown.bind(this, element);
element.onmouseup = this.onMouseUp.bind(this, element);
element.onmouseover = this.onMouseOver.bind(this, element);
element.onmouseout = this.onMouseOut.bind(this, element);
},
onMouseUp: function(element) {
this.select();
},
onMouseDown: function(element) {
if (g_isInternetExplorer) {
this.select();
window.event.cancelBubble = true;
window.event.returnValue = false;
setTimeout(this.focus.bind(this), 50);
}
return false;
},
onMouseOut: function(element) {
this.unsetSelection();
},
onMouseOver: function(element) {
this.setSelection(element.acItemNumber);
},
focus: function() {
this.element.focus();
},
setDropDownSize: function() {
var e, mLeft, mTop;
if (window.$j) {
e = $j(this.element);
var offset = e.offset();
var parent = $j(getFormContentParent());
var parentOffset = {
left: 0,
top: 0
};
var parentIsBody = parent.get(0) == document.body;
var parentScrolltop = (parentIsBody || parent.css('overflow') == 'visible') ? 0 : parent.scrollTop();
if(!parentIsBody)
parentOffset = parent.offset();
mLeft = offset.left - parentOffset.left + 1 + 'px';
mTop = offset.top - parentOffset.top + e.outerHeight() + parentScrolltop + 'px';
} else {
e = this.element;
mLeft = grabOffsetLeft(e) + "px";
mTop =  grabOffsetTop(e) + (e.offsetHeight - 1) + "px";
}
var mWidth = this.getWidth();
var dd = this.dropDown;
if (dd.offsetWidth > parseInt(mWidth))
mWidth = dd.offsetWidth;
this.setTopLeft(dd.style, mTop, mLeft);
this.setTopLeft(this.iFrame.style, mTop, mLeft);
this.setWidth(mWidth);
},
setTopLeft: function (style, top, left) {
style.left = left;
style.top = top;
},
getWidth: function () {
var field = this.element;
if (g_isInternetExplorer)
return field.offsetWidth - (this.menuBorderSize * 2);
return field.clientWidth;
},
onFocus: function() {
if (this.ignoreFocusEvent || this.element.getAttribute('readonly'))
return;
this.hasFocus = true;
this.currentDisplayValue = this.getDisplayValue();
this.currentRefValue = this.getKeyValue();
this._setUpDocMouseDown();
if (this.isDoctype() && this.currentDisplayValue == '')
this.timer = setTimeout(this.ajaxRequest.bind(this), g_acWaitTime || 50);
},
isTablet: function() {
return !(typeof isTablet == "undefined");
},
isDoctype: function() {
return document.documentElement.getAttribute('data-doctype') == 'true';
},
_setupAccessibility: function() {
this.element.setAttribute('role', 'combobox');
this.element.setAttribute('aria-autocomplete', 'list');
this.element.setAttribute('aria-owns', this.getDropDown().id);
},
_setUpDocMouseDown: function() {
if (this.isTablet()) {
this.blurPause = true;
this._boundOnDocMouseDown = this.onDocMouseDown.bind(this);
Event.observe(document.body, 'mousedown', this._boundOnDocMouseDown);
}
},
setStatus: function(text) {
var statusEl = this._getStatusEl();
if (!statusEl)
return;
statusEl.innerText = text;
},
_getStatusEl: function() {
return document.getElementById('ac.status');
},
onDocMouseDown: function(evt) {
if (evt.target == this.element)
return;
this.blurPause = false;
},
onBlurEvent: function(evt) {
if (this.element.getAttribute('readonly'))
return;
if (this.isTablet() && this.blurPause == true)
setTimeout(this.onBlur.bind(this), 4000);
else
this.onBlur();
},
onBlur: function() {
if (this._boundOnDocMousedown) {
Event.stopObserving(document.body, 'mousedown', this._boundOnDocMouseDown);
delete this._boundOnDocMouseDown;
}
this.hasFocus = false;
if (this.getDisplayValue().length == 0) {
if (this.currentDisplayValue != "") {
if (!this.isList) {
this.referenceSelect("", "");
} else {
this.clearInvalid();
}
} else {
this.clearInvalid();
}
} else if (this.selectedItemNum > -1) {
this.select();
} else if ((this.getKeyValue() == "") || (this.currentDisplayValue != this.getDisplayValue())) {
if (!this.isFilterUsingContains) {
var refInvalid = true;
if (this.isExactMatch()) {
if (this.oneMatchSelects != false) {
var o = this.getObject(0).acItem;
this.referenceSelect(o['name'], o['label']);
refInvalid = false;
}
} else if (this.keyElement && this.currentRefValue != this.keyElement.value) {
if (this.keyElement.id.indexOf("LIST_EDIT") == -1 || this.currentRefValue != "")
refInvalid = false;
}
if (refInvalid)
this.setInvalid();
if (refInvalid || !this.isPopulated()) {
this.clearTimeout();
this.searchChars = null;
this.ignoreFocusEvent = true;
this.timer = setTimeout(this.ajaxRequest.bind(this), 0);
}
}
}
this.clearDropDown();
},
isExactMatch: function() {
if (this.isPopulated()) {
if (this.getMenuCount() == 1) {
var o0 = this.getObject(0).acItem;
if ((o0['label'].toUpperCase().startsWith(this.getDisplayValue().toUpperCase())))
return true;
return false;
}
var o0 = this.getObject(0).acItem;
var o1 = this.getObject(1).acItem;
if ((o0['label'] == this.getDisplayValue()) && (o1['label'] != this.getDisplayValue()))
return true;
}
},
getDisplayValue: function() {
return this.getDisplayElement().value;
},
getKeyValue: function() {
return this.getKeyElement().value;
},
clearKeyValue: function() {
this.referenceSelect("", this.getDisplayValue());
},
getKeyElement: function() {
return this.keyElement;
},
getDisplayElement: function() {
return this.element;
},
setResolveCallback: function(f) {
this.onResolveCallback = f;
},
setDependent: function(dependentReference) {
this.dependentReference = dependentReference;
var el = this.getDependentElement();
if (!el)
return;
var n = dependentReference.replace(/\./, "_");
n = this.getTableName() + "_" + n;
var h = new GlideEventHandler('onChange_' + n, this.onDependentChange.bind(this), dependentReference);
g_event_handlers.push(h);
},
onDependentChange: function() {
this.cacheClear();
},
getDependentElement: function() {
if (!this.dependentReference || 'null' == this.dependentReference)
return null;
var table = this.getTableName();
var dparts = this.dependentReference.split(",");
return gel(table + "." + dparts[0]);
},
addDependentValue: function() {
var el = this.getDependentElement();
if (!el) {
if (window.NOW.useHiddenDependent && this.element.hasAttribute('data-dependent-value')) {
return "&sysparm_value=" + this.element.readAttribute('data-dependent-value');
} else {
return "";
}
}
var depValue = "";
if (el.tagName == "INPUT")
depValue = el.value;
else
depValue = el.options[el.selectedIndex].value;
return "&sysparm_value=" + depValue;
},
setRefQualElements: function(elements) {
this.simpleQualifier = false;
if (!elements)
this.refQualElements = null;
else {
if (elements.startsWith("QUERY:")) {
this.setRefQual(elements.substring(6));
this.simpleQualifier = true;
return;
}
var tableDot = g_form.getTableName() + '.';
this.refQualElements = [];
var a = elements.split(';');
if (a == "*") {
a = [];
var form = gel(tableDot + 'do');
var elements = Form.getElements(form);
for (var i = 0; i < elements.length; i++) {
if ((elements[i].id != this.keyElement.id) && (elements[i].id.startsWith(tableDot)))
a.push(elements[i].id);
}
}
for (var i = 0; i < a.length; i++) {
var n = a[i];
var el = gel(n);
if (!el)
continue;
this.refQualElements.push(n);
var h = new GlideEventHandler('onChange_' + n.replace(/\./, "_"), this.onDependentChange.bind(this), a[i]);
g_event_handlers.push(h);
}
}
},
setRefQual: function(refQual) {
this.refQual = refQual;
},
setIgnoreRefQual: function(ignoreRefQual) {
this.ignoreRefQual = ignoreRefQual;
},
addRefQualValues: function() {
if (this.refQualElements) {
return "&" + g_form.serializeChanged();
} else
return "";
},
setAdditionalValue: function(name, value) {
this.additionalValues[name] = value;
},
getTableName: function() {
return this.elementName.split('.')[0];
},
setInvalid: function() {
this.messages = new GwtMessage().getMessages(
["A new record with this value will be created automatically", "Invalid reference"]);
this.referenceValid = false;
var message;
if (this.dynamicCreate) {
message = this.messages["A new record with this value will be created automatically"];
this.getDisplayElement().title = message;
addClassName(this.getDisplayElement(), "ref_dynamic");
} else {
message = this.messages["Invalid reference"];
this.getDisplayElement().title = message;
addClassName(this.getDisplayElement(), "ref_invalid");
}
if (typeof g_form != "undefined") {
var fieldName = this.elementName.substring(this.elementName.indexOf('.') + 1);
var dynamicCreate = this.dynamicCreate;
if (g_form.getGlideUIElement) {
var el = g_form.getGlideUIElement(this.elementName);
if (el)
el.isInvalid = true;
}
setTimeout(function () {
g_form.hideFieldMsg(fieldName, false, 'invalid_reference');
g_form.showFieldMsg(fieldName, message, dynamicCreate ? 'info' : 'error', null, 'invalid_reference');
});
}
if (this.getKeyValue() && !this.allowInvalid && !this.isList) {
this.getKeyElement().value = "";
callOnChange(this.getKeyElement());
}
this.showViewImage();
var displayElement = this.getDisplayElement();
if (displayElement) {
displayElement.setAttribute('aria-invalid', 'true');
}
},
clearInvalid: function() {
this.referenceValid = true;
if (this.dynamicCreate) {
removeClassName(this.getDisplayElement(), "ref_dynamic");
} else {
removeClassName(this.getDisplayElement(), "ref_invalid");
}
this.getDisplayElement().title = "";
this.getDisplayElement().removeAttribute("data-original-title");
if (typeof g_form != "undefined") {
if (g_form.getGlideUIElement) {
var el = g_form.getGlideUIElement(this.elementName);
if (el)
el.isInvalid = false;
}
}
var fieldName = this.elementName.substring(this.elementName.indexOf('.') + 1);
if (typeof g_form != "undefined" && fieldName) {
g_form.hideFieldMsg(fieldName, false, 'invalid_reference');
}
var displayElement = this.getDisplayElement();
if (displayElement && typeof g_form !== 'undefined') {
var isEmpty = !this.element.present();
if (this.isList) {
isEmpty = this.getKeyValue() === '';
}
if (g_form.isMandatory(fieldName) && g_form.submitAttemptsCount > 0 && isEmpty) {
displayElement.setAttribute('aria-invalid', 'true');
}
else {
displayElement.setAttribute('aria-invalid', 'false');
}
}
},
isReferenceValid: function() {
return this.referenceValid;
},
firefoxBump: function() {
var children = this.getMenuItems();
for(var i = 0 ; i < children.length; i++) {
if (children[i] && children[i].firstChild) {
var dparentDivWidth = children[i].offsetWidth;
var dchildSpanWidth = children[i].firstChild.offsetWidth;
if (dchildSpanWidth > dparentDivWidth)
this.setWidth(dchildSpanWidth);
}
}
},
_setIframeHeight: function(height) {
this.iFrame.style.height = height - 2;
},
hasDropDown:function() {
if (!this.dropDown)
return false;
return this.dropDown.childNodes.length > 0;
},
cachePut: function (name, value) {
if (this.refQualElements)
return;
this.cache[name] = value;
},
cacheGet: function(name) {
if (this.refQualElements)
return;
return this.cache[name];
},
cacheClear: function() {
this.cache = new Object();
},
cacheEmpty: function() {
var s = this.searchChars;
if (!s)
return false;
while (s.length > 2) {
s = s.substring(0, s.length - 1);
var xml = this.cacheGet(s);
if (!xml)
continue;
var e = xml.documentElement;
var rowCount = e.getAttribute('row_count');
if (rowCount == 0 && e.childElementCount == 0)
return true;
break;
}
return false;
}
});
;
/*! RESOURCE: /scripts/classes/ajax/AJAXReferenceCompleterMulti.js */
var AJAXReferenceCompleterMulti = Class.create(AJAXReferenceCompleter, {
_hash: new Hash(),
_SEPARATOR: ',',
_handleDeleteKey: function() {
this._rebuildFromInput();
},
_rebuildFromInput: function() {
var s = this.getDisplayElement().value;
var arr = s.split(this._SEPARATOR);
var _hashNew = new Hash();
for (var i=0; i< arr.length; i++) {
var a = arr[i].strip();
if (this._hash.keys().indexOf(a) != -1)
_hashNew.set(a, this._hash.get(a).escapeHTML());
else {
if (this.allowInvalid)
_hashNew.set(a, a.escapeHTML());
}
}
this._hash = _hashNew;
this._setFormValues();
},
_arrayToString: function(array, useSpacer) {
var s = '';
for (var i=0; i<array.length; i++) {
var a = array[i].strip();
if (a.length==0)
continue;
if (i>0) {
s += this._SEPARATOR;
if(useSpacer)
s += " ";
}
s += a;
}
return s;
},
_setFormValues: function() {
this.getDisplayElement().value = this.getDisplayValue();
this.getKeyElement().value = this.getKeyValue();
if (this.element.getAttribute("reference")== "sys_user"){
var invalidContacts = false;
var keyContacts = this.getKeyElement().value.split(",");
var displayContacts = this.getDisplayElement().value.split(",");
var matchedRef = false;
if(!this.isBlur && this.currentDisplayValue) {
keyContacts.splice((keyContacts.length - 1), 1);
displayContacts.splice((keyContacts.length - 1), 1);
this.getKeyElement().value = keyContacts;
this.getDisplayElement().value = displayContacts;
matchedRef = true;
}
for(i=0;i<keyContacts.length;i++) {
if(!matchedRef && keyContacts[i] != "" && !isEmailValid(keyContacts[i]) && !this._isGEMValue(keyContacts[i])) {
var hexSysId = /^[0-9A-F]{32}$/i.test(keyContacts[i]);
if (!hexSysId) {
keyContacts.splice(i, 1);
displayContacts.splice(i, 1);
this.getKeyElement().value = keyContacts;
this.getDisplayElement().value = displayContacts;
g_form.hideFieldMsg(this.element.parentNode, true);
g_form.showFieldMsg(this.element.parentNode, "Please enter a valid email address or User", "error");
invalidContacts = true;
this.isBlur = false;
this.onFocus();
}
}
}
if(!invalidContacts){
g_form.hideFieldMsg(this.element.parentNode, true);
}
}
},
_isGEMValue: function(value) {
return value.indexOf("{{") == 0;
},
getDisplayValue: function() {
return this._arrayToString(this._hash.keys(), true);
},
getKeyValue: function() {
return this._arrayToString(this._hash.values(), false);
},
referenceSelect: function(sys_id, displayValue) {
this._rebuildFromInput();
this._resolveReference(sys_id, displayValue);
},
_resolveReference: function(sys_id, displayValue) {
var ajax = new GlideAjax("ResolveRefMulti");
ajax.addParam("sysparm_name", this.elementName);
ajax.addParam("sysparm_value", sys_id);
ajax.getXML(this._resolveReferenceResponse.bind(this, sys_id, displayValue));
},
_resolveReferenceResponse: function(sys_id, displayValue, request) {
if (!request)
return;
var xml = request.responseXML;
if (!xml)
return;
if (xml) {
var item = xml.getElementsByTagName("item");
if (item && item.length == 1) {
displayValue = item[0].getAttribute("label");
sys_id = item[0].getAttribute("name");
}
}
this.setHash(displayValue.strip(), sys_id.escapeHTML());
this._setFormValues();
this.showViewImage();
this.clearInvalid();
this._clearDerivedFields();
if (this.selectionCallBack && sys_id) {
eval(this.selectionCallBack);
}
},
setHash: function(key, value) {
this._hash.set(key.replace(/,/g, ''), value);
},
resetHash: function() {
this._hash = new Hash();
},
_getSearchChars: function() {
var s = this.getDisplayElement().value;
var sep_pos = s.lastIndexOf(this._SEPARATOR);
if (sep_pos > 0) {
s = s.substr(sep_pos+1);
}
this.searchChars = s.replace(/^\s+|\s+$/g, '') ;
return this.searchChars;
},
setDropDownSize: function() {
var e = this.element;
var mLeft = grabOffsetLeft(e) + (this.getDisplayElement().value.length*5) + "px";
var mTop =  grabOffsetTop(e) + (e.offsetHeight - 1) + "px";
var mWidth = this.getWidth();
this.log("width:" + mWidth);
var dd = this.dropDown;
if (dd.offsetWidth > parseInt(mWidth)) {
mWidth = dd.offsetWidth;
this.log("width:" + mWidth);
}
this.setTopLeft(dd.style, mTop, mLeft);
this.setTopLeft(this.iFrame.style, mTop, mLeft);
this.setWidth(mWidth);
},
onBlur: function() {
this.isBlur = true;
this.log("blur event");
this.hasFocus = false;
this._rebuildFromInput();
this.clearDropDown();
}
});
;
/*! RESOURCE: /scripts/classes/ajax/AJAXTableCompleter.js */
var AJAXTableCompleter = Class.create(AJAXReferenceCompleter, {
_processDoc: function(doc) {
AJAXReferenceCompleter.prototype._processDoc.call(this, doc);
this.showDisplayValue = doc.getAttribute('show_display_value');
this.queryType = doc.getAttribute('query_type');
this.queryText = doc.getAttribute('sysparm_chars');
this.columnsSearch = doc.getAttribute('columns_search');
},
appendElement: function(element) {
this.tbody.appendChild(element);
},
createInnerDropDown: function() {
if (this.dropDown.childNodes.length > 0)
return;
this._createTable();
},
createChild: function(item) {
if ( this.currentMenuCount == 0) {
this.createInnerDropDown();
}
var tr = cel("tr");
if (this.showDisplayValue != "false") {
var displayValue = item['label'];
this._createTD(tr, displayValue);
}
this._addColumns(tr, item);
tr.id = 'ac_option_' + item.name;
tr.setAttribute('role', 'option');
return tr;
},
onDisplayDropDown: function() {
var width = this.table.offsetWidth + 2;
var height = this.table.offsetHeight + 2;
this.getDropDown().style.width = width + "px";
if (!g_isInternetExplorer) {
width = width - 4;
height = height - 4;
}
this.getIFrame().style.width = width + "px";
this.getIFrame().style.height = height + "px";
},
_addColumns: function(tr, item) {
var xml = item["XML"];
var fields = xml.getElementsByTagName("field");
for(var i = 0; i < fields.length; i++) {
var field = fields[i];
var value	 = field.getAttribute("value");
var td = $(this._createTD(tr, value));
if (this.prevText[i] == value)
td.addClassName("ac_additional_repeat");
else
this.prevText[i] = value;
td.addClassName("ac_additional");
}
},
_showMax: function(foundStrings, foundRecents) {
if (!this.rowCount)
return;
var max = 1 * this.max;
var showing = Math.min(foundStrings.length, max);
var recentsLength = foundRecents ? foundRecents.length : 0;
var total = this.rowCount - recentsLength;
var tr = cel("tr");
$(tr).addClassName("ac_header");
var td = cel("td", tr);
td.setAttribute("colSpan", 99);
td.setAttribute("width", "100%");
var a = cel("a", td);
a.onmousedown = this._showAll.bindAsEventListener(this);
if (this.rowCount >= 250) {
a.innerHTML = new GwtMessage().getMessage("Showing 1 through {0} of more than {1}", showing, total);
} else {
a.innerHTML = new GwtMessage().getMessage("Showing 1 through {0} of {1}", showing, total);
}
this.appendElement(tr);
},
_showRecents: function() {
var tr = cel("tr");
tr.className = "ac_header";
var td = cel("td", tr);
td.setAttribute('colspan', 99);
td.setAttribute("width", "100%");
td.innerHTML = new GwtMessage().getMessage("Recent selections");
this.appendElement(tr);
},
_showAll: function() {
this.clearTimeout();
this.max = this.rowCount;
this.timer = setTimeout(this.ajaxRequest.bind(this), g_key_delay);
},
_createTD: function(tr, text) {
var td = cel("td", tr);
$(td).addClassName("ac_cell");
td.innerHTML = text.escapeHTML();
return td;
},
_createTable: function() {
this.table = cel("table");
$(this.table).addClassName("ac_table_completer");
this.tbody = cel("tbody", this.table);
this.dropDown.appendChild(this.table);
this.prevText = new Object();
}
});
;
/*! RESOURCE: /scripts/classes/ajax/AJAXEmailClientCompleter.js */
var g_key_delay = 250;
var AJAXEmailClientCompleter = Class.create(AJAXTableCompleter, {
PROCESSOR: "com.glide.email_client.EmailClient",
initialize: function(element, reference, dependentReference, refQualElements, targetTable, inputSpan, options) {
AJAXCompleter.prototype.initialize.call(this, 'AC.' + reference, reference);
options = options || {};
this.className = "AJAXEmailClientCompleter";
this.inputSpan = inputSpan;
this.element = $(element);
this.keyElement = gel(reference);
this.setTargetTable(targetTable);
this.additionalValues = {};
this.renderItemTemplate = null;
if (options.renderItemTemplate) {
this.renderItemTemplate = options.renderItemTemplate;
}
this._commonSetup();
this.oneMatchSelects = true;
this.clearDerivedFields = true;
this.allowInvalid = this.element.readAttribute('allow_invalid')=='true';
},
_processDoc: function(doc) {
AJAXTableCompleter._processDoc(doc);
},
keyDown: function(evt) {
var typedChar = getKeyCode(evt);
if (typedChar == KEY_ARROWUP) {
if( !this.selectPrevious())
this.hideDropDown();
}  else if (typedChar == KEY_ARROWDOWN) {
if (!this.isVisible()) {
if (!this.isPopulated())
return;
this.showDropDown();
}
this.selectNext();
}
},
keyUp: function(evt) {
var typedChar = getKeyCode(evt);
if (!this.isDeleteKey(typedChar))
return;
this.clearTimeout();
this.timer = setTimeout(this.ajaxRequest.bind(this), g_acWaitTime || 50);
},
clearTimeout: function() {
if (this.timer != null)
clearTimeout(this.timer);
this.timer = null;
},
keyPress: function(evtArg) {
var evt = getEvent(evtArg);
var typedChar = getKeyCode(evt);
if (typedChar != KEY_ENTER && typedChar != KEY_RETURN)
this.clearTimeout();
if (this.isNavigation(typedChar))
return true;
if (!evt.shiftKey && (typedChar == KEY_ARROWDOWN || typedChar == KEY_ARROWUP))
return false;
if (this.isDeleteKey(typedChar))
return true;
if (typedChar == KEY_ENTER || typedChar == KEY_RETURN || typedChar == KEY_TAB) {
if (this.hasDropDown() && this.select())
this.clearTimeout();
else {
this.onBlur();
if (typedChar != KEY_TAB)
this.hasFocus = true;
}
return false;
}
if (typedChar == this.KEY_ESC) {
this.clearDropDown();
return false;
}
this.timer = setTimeout(this.ajaxRequest.bind(this), g_key_delay);
return true;
},
isNavigation: function(typedChar) {
if (typedChar == this.KEY_LEFT)
return true;
if (typedChar == this.KEY_RIGHT)
return true;
if (typedChar == KEY_TAB && this.currentDisplayValue == "")
return true;
},
ajaxRequest: function() {
var s = this.getDisplayValue();
if (s.length == 0) {
this.log("ajaxRequest returned no results");
this.clearDropDown();
this.searchChars = null;
return;
}
if (s == "*")
return;
if (s == this.searchChars) {
this.log("navigator key pressed");
return;
}
this.searchChars = s;
this.clearKeyValue();
this.log("searching for characters '" + this.searchChars + "'");
var xml = this.cacheGet(s);
if (xml) {
this.log("cached results found");
this.processXML(xml);
return;
}
if (this.cacheEmpty()) {
this.log("cache is empty");
this.clearDropDown();
this.hideDropDown();
return;
}
var url = "";
url += this.addSysParms();
url += this.addTargetTable();
url += this.addAdditionalValues();
url += this.addAttributes("ac_");
this.callAjax(url);
},
processXML: function(xml) {
this.log("processing XML results");
var e = xml.documentElement;
this.rowCount = e.getAttribute('row_count');
this.max = e.getAttribute('sysparm_max');
var items = xml.getElementsByTagName("item");
values = new Array();
for(var i = 0; i < items.length; i++) {
var item = items[i];
var array = this.copyAttributes(item);
array['XML'] = item;
values[values.length] = array;
}
if (!this.hasFocus) {
this.log("checking value without focus");
this.ignoreFocusEvent = false;
if ((values.length == 1) ||
((values.length > 1)
&& (values[0]['label'] == this.getDisplayValue())
&& (values[1]['label'] != this.getDisplayValue()))) {
this.log("setting value without focus to " + values[0]['label'] + "->" + values[0]['name']);
var selectionObj = {};
selectionObj.sysId = values[0]['name'];
selectionObj.label = values[0]['label'] || this.getEmailAddressFromACResultXML(values[0].XML);
var addressFilterIds = this.getAddressFilterIds();
if (addressFilterIds)
this.proccessXmlResultAndValidateAgainstFilters(selectionObj, xml, addressFilterIds);
else
this.renderSelection(selectionObj.sysId, selectionObj.label);
} else {
if (e.getAttribute('allow_invalid') != 'true')
this.setInvalid();
}
return;
}
this.createDropDown(values);
},
addTargetTable: function() {
var answer = "";
if (this.getTargetTable()) {
answer = "&sysparm_reference_target=" + this.getTargetTable();
}
return answer;
},
select: function() {
if (this.selectedItemNum < 0)
return false;
var acItem = this.getSelectedObject().acItem;
var selectionObj = {};
selectionObj.sysId = acItem['name'];
selectionObj.label = acItem['label'] || this.getEmailAddressFromACResultXML(acItem.XML);
var addressFilterIds = this.getAddressFilterIds();
if (addressFilterIds)
this.proccessXmlResultAndValidateAgainstFilters(selectionObj, acItem.XML, addressFilterIds);
else
this.renderSelection(selectionObj.sysId, selectionObj.label);
return true;
},
renderSelection: function(sysId, label) {
if (!sysId)
return;
var name = htmlEscape(sysId);
var label = htmlEscape(label);
this.referenceSelect(sysId, label);
var s = gel(this.inputSpan);
if (this.renderItemTemplate) {
s.innerHTML = s.innerHTML + this.renderItemTemplate(sysId, label);
} else {
s.innerHTML = s.innerHTML + '<span class="address" tabindex="-1" onclick="addressOnClick(event, this)" style="white-space:nowrap;" value="' + sysId + '" aria-label="' + label + '">' + label + ';</span> ';
}
this.resetInputField();
},
validateAgainstFilters: function(selectionObj, email, addressFilters) {
var ga = new GlideAjax('EmailAddressValidator');
ga.addParam("sysparm_name", "applyFilters");
ga.addParam("sysparm_email_address", email);
ga.addParam("sysparm_address_filters", addressFilters);
ga.getXML(this.validateAgainstFiltersCallback.bind(this), null, selectionObj);
},
validateAgainstFiltersCallback: function(answer, requestParams) {
var resultXml = answer.responseXML.documentElement.getElementsByTagName("result");
if (resultXml && resultXml.length != 0) {
var result = resultXml[0];
var isValid = result.getAttribute('is_valid');
if (isValid == 'true') {
var sysId = requestParams.sysId;
var label = requestParams.label;
this.renderSelection(sysId, label);
} else
this.renderInvalidFromFilterResult(result);
}
},
proccessXmlResultAndValidateAgainstFilters: function(selectionObj, resultXml, addressFilters) {
var emailAddress = this.getEmailAddressFromACResultXML(resultXml);
if (!emailAddress) {
var table = this.getResultTableFromACResultXML(resultXml);
if (table === 'sys_user_group') {
this.renderSelection(selectionObj.sysId, selectionObj.label);
return;
}
}
this.validateAgainstFilters(selectionObj, emailAddress, addressFilters);
},
renderInvalidFromFilterResult: function(result) {
if (!result)
return;
var invalidReason = result.getAttribute('invalid_reason');
var emailAddress = result.getAttribute('email_address');
this._setDisplayValue(emailAddress);
if (resizeInput)
resizeInput(this.element);
this.invalidateInput(invalidReason);
},
_clearDisplayValue: function(v) {
var e = this.getDisplayElement();
e.value = "";
},
referenceSelect: function(sys_id, displayValue) {
this.log("referenceSelect called with a display value of " + displayValue);
this._setDisplayValue(displayValue);
var e = this.getKeyElement();
if (e.value != sys_id) {
e.value = sys_id;
callOnChange(e);
}
this.searchChars = displayValue;
this.currentDisplayValue = displayValue;
this.resetInvalidatedField();
if (this.selectionCallBack && sys_id) {
eval(this.selectionCallBack);
}
},
onBlur: function() {
this.log("blur event");
this.hasFocus = false;
if (this.getDisplayValue().length == 0) {
if (this.currentDisplayValue != "")
this.referenceSelect("","");
} else if (this.selectedItemNum > -1) {
this.select();
} else if ((this.getKeyValue() == "") || (this.currentDisplayValue != this.getDisplayValue())) {
var refInvalid = true;
if (this.isExactMatch()) {
var selectionObj = {};
var o = this.getObject(0).acItem;
selectionObj.sysId = o['name'];
selectionObj.label = o['label'] || this.getEmailAddressFromACResultXML(o.XML);
var addressFilterIds = this.getAddressFilterIds();
if (addressFilterIds)
this.proccessXmlResultAndValidateAgainstFilters(selectionObj, o.XML, addressFilterIds);
else
this.renderSelection(selectionObj.sysId, selectionObj.label);
refInvalid = false;
}
if (refInvalid)
this.setInvalid();
if (refInvalid || !this.isPopulated()) {
this.log("onBlur with no menu items requesting the reference for " + this.getDisplayValue());
this.clearTimeout();
this.searchChars = null;
this.ignoreFocusEvent = true;
this.timer = setTimeout(this.ajaxRequest.bind(this), 0);
}
}
this.clearDropDown();
},
isExactMatch: function() {
if (this.isPopulated()) {
if (this.getMenuCount() == 1) {
var acItem = this.getObject(0).acItem;
var label = acItem['label'];
var displayValue = this.getDisplayValue();
if (displayValue)
displayValue = displayValue.toLocaleLowerCase();
if (label)
label = label.toLocaleLowerCase();
if ((label == displayValue))
return true;
return false;
}
var o0 = this.getObject(0).acItem;
var o1 = this.getObject(1).acItem;
if ((o0['label'] == this.getDisplayValue()) && (o1['label'] != this.getDisplayValue()))
return true;
}
},
getAddressFilterIds: function() {
return this.element.getAttribute('ac_email_address_filters');
},
getEmailAddressFromACResultXML: function(xml) {
var email = '';
var fields = xml.getElementsByTagName("field");
if (fields && fields.length > 0) {
var field = fields[0];
if (field.getAttribute('name') === 'email')
email = field.getAttribute('value');
}
return email;
},
getResultTableFromACResultXML: function(xml) {
if (!xml)
return "";
return xml.getAttribute('sys_class_name');
},
hasDropDownWithResults: function() {
var dropDown = this.getDropDown();
if (!dropDown)
return false;
return dropDown.getElementsByTagName('tr').length > 0;
},
setTitle: function(message) {
if (!message)
this.getDisplayElement().removeAttribute('data-original-title');
else
this.getDisplayElement().setAttribute('data-original-title', message);
this.getDisplayElement().title = message;
var srInvalidMsg = document.getElementById('sr_invalid_msg');
if (srInvalidMsg)
srInvalidMsg.innerText = message;
},
invalidateInput: function(invalidReason) {
this.setInvalid();
this.setTitle(invalidReason);
this.clearDropDown();
},
resetInputField: function() {
this.element.value = "";
this.currentDisplayValue = "";
this.resetInvalidatedField();
this.clearDropDown();
},
resetInvalidatedField: function() {
this.clearInvalid();
this.setTitle("");
},
cachePut: function (name, value) {
this.cache[name] = value;
},
cacheGet: function(name) {
return this.cache[name];
}
});
;
/*! RESOURCE: /scripts/classes/ajax/AJAXReferenceChoice.js */
var AJAXReferenceChoice = Class.create(AJAXReferenceCompleter, {
addSysParms: function() {
var sp = "sysparm_processor=PickList" +
"&sysparm_name=" + this.elementName +
"&sysparm_timer=" + this.timer +
"&sysparm_max=" + this.max +
"&sysparm_chars=" + encodeText(this.searchChars);
return sp;
},
ajaxRequest : function(onResponse) {
this.onResponse = onResponse;
var url = "";
url += this.addSysParms();
url += this.addDependentValue();
url += this.addRefQualValues();
url += this.addTargetTable();
url += this.addAdditionalValues();
url += this.addAttributes("ac_");
url += "&sysparm_max=250";
serverRequestPost("xmlhttp.do", url, this.ajaxResponse.bind(this));
},
onBlur : function() {},
onFocus : function() {},
ajaxResponse: function(response) {
if (!response.responseXML.documentElement) {
this.isResolvingFlag = false;
return;
}
var currentValue = this.element.value;
this.element.options.length = 0;
var items = response.responseXML.getElementsByTagName("item");
for (var i = 0; i < items.length; i++) {
var item = items[i];
var id = item.getAttribute('value');
var l = item.getAttribute('name');
var selected = id == currentValue;
addOption(this.element, id, l, selected) ;
}
if (typeof this.onResponse === "function") {
this.onResponse();
}
}
});
;
/*! RESOURCE: /scripts/classes/ajax/DerivedFields.js */
var DerivedFields = Class.create({
initialize : function(elementName, value) {
this.elementName = elementName;
this.value = value;
this.isDerivedWaiting = typeof g_form !== 'undefined' && g_form._isDerivedWaiting(elementName);
this.dfs = typeof g_form !== 'undefined' && g_form.getDerivedFields(elementName, true) || null;
},
clearRelated : function() {
if (typeof g_form === 'undefined')
return;
var list = this.dfs;
if (list == null)
return;
var prefix = this.elementName.split(".");
var refFieldName = prefix.shift();
prefix = prefix.join(".");
for (var i = 0; i < list.length; i++) {
var elname = prefix + "." + list[i];
g_form._addDerivedWaiting(elname, refFieldName, g_form.isDisabled(elname));
var el = gel(refFieldName + '.' + elname);
if (el && el.getAttribute('choice') !== '3')
g_form.clearValue(elname);
}
},
updateRelated : function(key) {
if (typeof key === 'undefined')
key = this.value;
if (typeof key === 'undefined' || typeof g_form  === 'undefined')
return;
var list = this.dfs;
if (list == null)
return;
if (key === '' && !this.isDerivedWaiting) {
list.forEach(function(fn) {
resetDerivedWaitingThenclearValue(this.elementName + '.' + fn);
}, this);
return;
}
list.forEach(function(fieldName) {
var widgetName = 'sys_original.' + this.elementName + '.' + fieldName;
var widget = gel(widgetName);
if (widget)
widget.value = '';
}, this);
if (key === '' && this.isDerivedWaiting)
return;
var url = "xmlhttp.do?sysparm_processor=GetReferenceRecord" +
"&sysparm_name=" + this.elementName +
"&sysparm_value=" + key +
"&sysparm_derived_fields=" + list.join(',');
var args = new Array(this.elementName,list.join(','));
serverRequest(url, refFieldChangeResponse, args);
},
isDerivedWaitingClearValue : function() {
return this.value == '' && this.isDerivedWaiting;
},
toString: function() { return 'DerivedFields'; }
});
;
/*! RESOURCE: /scripts/classes/Select.js */
var Select = Class.create({
initialize: function(select) {
this.select = $(select);
},
addOption: function(value, label) {
addOption(this.select, value, label);
},
addOptions: function(glideRecord, nameField, valueField) {
if (!valueField)
valueField = 'sys_id';
if (!nameField)
nameField = 'name';
while (glideRecord.next())
addOption(this.select, glideRecord[valueField], glideRecord[nameField]);
},
clear: function() {
this.select.options.length = 0;
},
getSelect: function() {
return this.select;
},
getValue: function() {
return this.select.options[this.select.selectedIndex].value;
},
selectValue: function(value) {
this.select.selectedIndex = -1;
var options = this.select.options;
for (oi = 0; oi < options.length; oi++) {
var option = options[oi];
var optval = option.value;
if (optval != value)
continue;
option.selected = true;
this.select.selectedIndex = oi;
}
},
contains: function(value) {
var options = this.select.options;
for (oi = 0; oi < options.length; oi++) {
if (options[oi].value == value)
return true;
}
return false;
},
getClassName: function() {
return "SelectList";
}
});
function addOption(select, value, label, selected, optionalTitle) {
var o;
if (select.multiple == true)
o = new Option(label, value, true, selected || false);
else {
if (label)
label = label.unescapeHTML();
o = new Option(label, value);
}
if (optionalTitle)
o.title = optionalTitle;
select.options[select.options.length] = o;
if (select.multiple != true && selected)
select.selectedIndex = select.options.length - 1;
return o;
}
function addOptionAt(select, value, label, idx, optionalTitle) {
for (var i = select.options.length; i > idx; i--) {
var oldOption = select.options[i - 1];
select.options[i] = new Option(oldOption.text, oldOption.value);
if (oldOption.id)
select.options[i].id = oldOption.id;
if (oldOption.style.cssText)
select.options[i].style.cssText = oldOption.style.cssText;
}
var o = new Option(label, value);
if (optionalTitle)
o.title = optionalTitle;
select.options[idx] = o;
return o;
}
function getSelectedOption(select) {
if (typeof select == "undefined" || select.multiple == true || select.selectedIndex < 0)
return null;
return select.options[select.selectedIndex];
}
;
/*! RESOURCE: /scripts/classes/GlideClientCache.js */
var GlideClientCacheEntry = Class.create({
initialize: function(value) {
this.value = value;
this.bump();
},
bump: function() {
this.stamp = new Date().getTime();
}
});
var GlideClientCache = Class.create({
_DEFAULT_SIZE : 50,
initialize: function(maxEntries) {
if (maxEntries)
this.maxEntries = maxEntries;
else
this.maxEntries = this._DEFAULT_SIZE;
this._init('default');
},
_init : function(stamp) {
this._cache = new Object();
this._stamp = stamp;
},
put: function(key, value) {
var entry = new GlideClientCacheEntry(value);
this._cache[key] = entry;
this._removeEldest();
},
get : function(key) {
var entry = this._cache[key];
if (!entry)
return null;
entry.bump();
return entry.value;
},
stamp : function(stamp) {
if (stamp == this._stamp)
return;
this._init(stamp);
},
ensureMaxEntries: function(max) {
jslog("Cache resize to " + max);
if (this.maxEntries < max)
this.maxEntries = max;
},
_removeEldest : function() {
var count = 0;
var eldest = null;
var eldestKey = null;
for (key in this._cache) {
count++;
var current = this._cache[key];
if (eldest == null || eldest.stamp > current.stamp) {
eldestKey = key;
eldest = current;
}
}
if (count <= this.maxEntries)
return;
if (eldest != null)
delete this._cache[key];
}
});
;
/*! RESOURCE: /scripts/classes/GlideURLElement.js */
var GlideURLElement = Class.create({
initialize: function(name) {
this.name = name;
},
setReadOnly: function(disabled) {
var element = gel(this.name);
if (element)
element.readOnly = disabled;
var lockElement = gel(this.name + "_lock");
if (!lockElement)
return;
var unlockElement = gel(this.name + "_unlock");
if (disabled) {
lock(lockElement, this.name, this.name, this.name + "_link", this.name, this.name + "_link");
hideObject(unlockElement);
} else {
showObjectInlineBlock(unlockElement);
}
},
setValue: function(value) {
var encodedValue = htmlEscape(value);
var update_id = this.name + "_link";
var update_element = gel(update_id);
if (update_element.href) {
update_element.href = value;
}
update_element.innerHTML = encodedValue;
var input = gel(this.name);
input.value = value;
onChange(this.name);
},
isDisabled: function() {
var unlockElement = gel(this.name + "_unlock");
return unlockElement === null || unlockElement.style.display === "none";
},
type: "GlideURLElement",
z: null
});
;
/*! RESOURCE: /scripts/classes/GlideListElement.js */
var GlideListElement = Class.create({
initialize: function(name, table) {
this.name = name;
this.table = table;
},
setValue: function(newValue, newDisplayValue) {
var isArbitraryEmail = false;
var hiddenElement = gel(this.name);
var visibleElement = gel("select_0" + this.name);
this.visibleElementId = visibleElement.id;
hiddenElement.value = "";
visibleElement.options.length = 0;
if (newValue || newDisplayValue) {
if (typeof newValue == "string" && newValue != "") {
newValue = newValue.split(",");
if (typeof newDisplayValue == "undefined" || newDisplayValue == "")
isArbitraryEmail = true;
}
if (typeof newDisplayValue == "string" && newDisplayValue != "")
newDisplayValue = newDisplayValue.split(",");
if (newDisplayValue && newValue && newDisplayValue.length != newValue.length) {
newDisplayValue = '';
isArbitraryEmail = true;
}
var allEmail = true;
if (typeof newDisplayValue == "undefined" || newDisplayValue == "") {
for (var i = 0; i < newValue.length; i++) {
var item = newValue[i];
if (item.indexOf("@") == -1) {
allEmail = false;
break;
}
}
if (!allEmail) {
hiddenElement.value = newValue.join();
var ajaxArgs = this.table + "," + newValue.join();
var aj = new GlideAjax("ElementGlideListAjax");
if(this.table === 'global') {
aj.addParam("sysparm_name", this.name);
aj.addParam("sysparm_type", "getChoiceLabels");
} else
aj.addParam("sysparm_type", "getDisplayValues");
aj.addParam("sysparm_value", ajaxArgs);
aj.getXML(this._glideListGetDisplayValuesDone.bind(this));
return;
}
} else
allEmail = false;
if (typeof newDisplayValue != "undefined" && newValue.length > 0 && newDisplayValue.length != newValue.length) {
jslog("Error: Length of first and second parameter arrays to setValue for " + this.name + " are not the same");
return;
}
if (typeof newDisplayValue != "undefined") {
for (i = 0; i < newDisplayValue.length; i++) {
if (allEmail)
this._setValue("", newValue[i]);
else
this._setValue(newValue[i], newDisplayValue[i]);
}
} else if (allEmail && isArbitraryEmail) {
for (var i = 0; i < newValue.length; i++) {
this._setValue(newValue[i], newValue[i], true);
}
} else {
this._setValue("", newValue);
}
}
this._updateDisplay();
},
clearValue : function(noOnChange) {
var hiddenElement = gel(this.name);
var visibleElement = gel("select_0" + this.name);
if (hiddenElement)
hiddenElement.value = "";
if (visibleElement)
visibleElement.options.length = 0;
this._updateDisplay(!noOnChange);
},
_setValue: function(newValue, displayValue, allEmails) {
if (!newValue)
addGlideListChoice(this.visibleElementId, displayValue, displayValue, false);
else {
addGlideListChoice(this.visibleElementId, newValue, displayValue, false);
if (allEmails !== true)
toggleAddMe(this.name);
}
},
_glideListGetDisplayValuesDone: function(response, args) {
if (!response || !response.responseXML)
return;
var hiddenElement = gel(this.name);
hiddenElement.values = "";
var references = response.responseXML.getElementsByTagName("reference");
var choices = response.responseXML.getElementsByTagName("choice");
for (var i=0; i<references.length; i++) {
var displayValue = references[i].attributes.getNamedItem("display").nodeValue;
var referenceValue = references[i].attributes.getNamedItem("sys_id").nodeValue;
this._setValue(referenceValue, displayValue);
}
for (var i=0; i<choices.length; i++) {
var displayValue = choices[i].attributes.getNamedItem("display").nodeValue;
var value = choices[i].attributes.getNamedItem("value").nodeValue;
this._setValue(value, displayValue);
}
this._updateDisplay();
},
_showSpacer: function(display) {
var spacer = gel("make_spacing_ok_" + this.name);
if (spacer)
spacer.style.display = "inline";
},
_updateDisplay: function(performOnChange) {
toggleGlideListIcons(this.name, performOnChange);
var lockImg = gel(this.name+"_lock");
var buttonContainer = gel(this.name);
var buttonContainerVisible = buttonContainer ? buttonContainer.style.display == 'none' : true;
if (lockImg && (lockImg.style.display == "none" || !buttonContainerVisible))
this.updateLockedList('select_0' + this.name, this.name + '_nonedit');
},
updateLockedList: function(current_value_id, update_id){
var current_value = gel(current_value_id);
var the_value = "";
if (current_value.options) {
for(var i=0; i<current_value.options.length ;i++) {
if (i > 0)
the_value += g_glide_list_separator;
the_value += current_value.options[i].text;
}
}
else
the_value = current_value.value;
var update_element = gel(update_id);
if (update_element.href)
update_element.href = the_value;
update_element.innerHTML = htmlEscape(the_value);
},
setReadOnly: function(disabled) {
var element = gel(this.name + "_unlock");
var addMe = $("add_me_locked." + this.name);
if (!element)
return;
element.setAttribute('list-read-only', "false");
if (addMe)
addMe.setAttribute('list-read-only', "false");
if (disabled) {
element.setAttribute('list-read-only', "true");
lock(element, this.name, this.name + '_edit', this.name + '_nonedit', 'select_0' + this.name, this.name + '_nonedit');
this._showSpacer();
element.hide();
if (addMe) {
addMe.hide();
addMe.setAttribute('list-read-only', "true");
}
} else {
element.show();
toggleAddMe(this.name);
}
},
isDisabled: function() {
var unlockElement = $(this.name + "_unlock");
if (unlockElement.style.visibility == "visible")
return false;
return true;
},
type: "GlideListElement"
});
function viewSelection(sourceSelect, tableName, urlBase, idField, clickThroughPopup, popupView) {
var sysid = glideListGetSelected(sourceSelect);
if (clickThroughPopup && window.g_form) {
var refTable = urlBase.substring(0, urlBase.lastIndexOf('.do'));
var view = popupView || g_form.getViewName();
tearOff(refTable, sysid, view, false, null);
return;
}
checkSaveID(tableName, urlBase, sysid);
}
function glideListGetSelected(sourceSelect) {
var selectedOptions = _glideListGetAllSelected(sourceSelect);
if (!selectedOptions || selectedOptions.length !== 1)
return;
return selectedOptions[0].value;
}
function _glideListGetAllSelected(sourceSelect) {
if (!sourceSelect)
return;
var options = Array.from(sourceSelect.options);
return options.filter(function (opt) {
return opt.selected;
});
}
function editList(tableName, urlBase, idField, reference, maintainOrder) {
g_form.disableMandatoryCheck();
var g_dialog = new GlideModal('element_glide_list_slush_bucket', false, 900);
g_dialog.setTitle(getMessage('Edit Members'));
g_dialog.setPreference('fieldName', idField);
g_dialog.setPreference('focusTrap', true);
var form = document.forms[tableName+'.do'];
form.setAttribute("target","add_or_remove_multiple_iframe");
addInput(form, "HIDDEN", "sysparm_collection", tableName);
addInput(form, "HIDDEN", "sysparm_collection_key", idField);
addInput(form, "HIDDEN", "sysparm_collection_related_file", reference);
if (typeof maintainOrder !== "undefined")
addInput(form, "HIDDEN", "sysparm_maintain_order", maintainOrder);
var sysid = document.getElementsByName("sys_uniqueValue")[0].value;
sysid = trim(sysid);
addInput(form, "HIDDEN", "sysparm_collectionID", sysid);
var url = tableName+'.do?sys_id='+sysid;
var view = gel('sysparm_view');
if (view != null) {
view = view.value;
if (view != '')
url = url + "&sysparm_view=" + view;
}
var changeset = gel('sysparm_changeset');
if (changeset != null) {
changeset = changeset.value;
if (changeset != '')
url = url + "&sysparm_changeset=" + changeset;
}
var sysparm_record_row = gel('sysparm_record_row');
if (sysparm_record_row)
url = url + "&sysparm_record_row=" + sysparm_record_row.value;
var sysparm_record_rows = gel('sysparm_record_rows');
if (sysparm_record_rows)
url = url + "&sysparm_record_rows=" + sysparm_record_rows.value;
var sysparm_record_list = gel('sysparm_record_list');
if (sysparm_record_list)
url = url + "&sysparm_record_list=" + encodeURIComponent(sysparm_record_list.value);
addInput(form, "HIDDEN", "sysparm_referring_url", url);
getRefQualURI(tableName, "*");
addInput(form, "HIDDEN", "sysparm_client_record", "session");
form.sys_action.value = 'sysverb_m2ms';
if (typeof form.onsubmit == "function") {
var rc = form.onsubmit();
if (!rc)
return;
}
g_dialog.render();
g_dialog.on('bodyrendered', function() {
if (this.$modalContent[0]){
this.focusTrap = window.focusTrap(this.$modalContent[0]);
this.focusTrap.activate();
form.submit();
}
});
g_dialog.on('closeconfirm', function() {
g_form.enableMandatoryCheck();
form.removeAttribute("target");
form.removeClassName('form-submitted');
if (g_form.submitted)
g_form.submitted = false;
if (this.focusTrap)
this.focusTrap.deactivate();
});
return false;
}
function addGlideListChoice(selectID, value, displayValue,  toggleIcons) {
if (!value)
return;
var ref = selectID.substring('select_0'.length);
var select = new Select(selectID);
CustomEvent.fire("element_mapping:glide_list_add", {
id: ref,
value: value,
displayValue: displayValue
});
if (select.contains(value))
return;
select.addOption(value, displayValue);
if (typeof toggleIcons == "undefined" || toggleIcons == true)
toggleGlideListIcons(ref);
if($j) {
$j(gel(ref)).trigger("change");
}
}
function addEmailAddressToList(selectID, input, msg) {
if (typeof input === "undefined")
return;
var ref = input.getAttribute('data-ref');
g_form.hideErrorBox(ref);
if (input.value == null || input.value == "")
return;
if (!isEmailValid(input.value)) {
g_form.showErrorBox(ref, msg);
return;
}
addGlideListChoice(selectID, input.value, input.value);
input.value = "";
}
function emailInputKeyPress(e, selectID, input, msg) {
if (typeof input === "undefined")
return;
var ref = input.getAttribute('data-ref');
g_form.hideErrorBox(ref);
var keyCode = getKeyCode(e);
if (keyCode != KEY_ENTER)
return;
Event.stop(e);
addEmailAddressToList(selectID, input, msg);
return false;
}
function removefieldBackgroundText(the_field, the_text, ref) {
if (the_field.value == the_text) {
the_field.value = "";
var standard_field = gel("select_0" + ref);
the_field.style.color = standard_field.style.color;
the_field.style.fontStyle = standard_field.style.fontStyle;
}
}
function selectFromFieldList(selectID, depTableElementID, refTables, types, title, evt, matchTypesAndTables) {
if (evt)
Event.stop(evt);
var depElement = gel(depTableElementID);
if (!depElement) {
jslog("Dependent table not found for list");
return;
}
var table = depElement.value;
if (!table) {
jslog("Dependent table not specified for list");
return;
}
var gDialog = new GlideDialogWindow('field_list_selector');
gDialog.setTitle(title);
gDialog.setPreference('sysparm_elementID', selectID);
gDialog.setPreference('sysparm_table', table);
gDialog.setPreference('sysparm_ref_tables', refTables);
gDialog.setPreference('sysparm_types', types);
gDialog.setPreference('sysparm_prefix', '__dollar__{');
gDialog.setPreference('sysparm_suffix', '}');
gDialog.setPreference('sysparm_match_types_and_tables', matchTypesAndTables);
gDialog.setPreference('set_request_params', 'true');
gDialog.render();
gDialog = null;
}
function addGlideListReference(fieldid) {
var value = gel(fieldid).value;
var displayWidget = gel('sys_display.' + fieldid);
var display = displayWidget.value;
displayWidget.value = '';
addGlideListChoice('select_0' + fieldid,  value, display);
}
function addGlideListFromSelect(selectID, select) {
var option = select.options[select.selectedIndex];
addGlideListChoice(selectID, option.value, option.label);
}
function addfieldBackgroundText(the_field, the_text) {
if (the_field.value == "") {
the_field.value = the_text;
the_field.save_old_color = the_field.style.color;
the_field.style.color = "blue";
the_field.style.fontStyle = "italic";
}
}
function setRemovalNotification(id) {
var msg = new GwtMessage();
var notification = gel('aria-removal-notification.' + id);
if (!notification)
return;
var select = gel('select_0' + id);
var selectedOptions = _glideListGetAllSelected(select);
if (!selectedOptions)
return;
var text = !selectedOptions.length
? msg.getMessage('nothing was selected')
: selectedOptions.map(function(opt) {
return msg.getMessage('{0} was successfully removed', opt.text);
}).join(', ');
if (notification.innerText === text)
text += '!';
notification.innerText = text;
}
function toggleGlideListIcons(id, performOnChange) {
var add_me = gel('add_me.' + id);
var remove = gel('remove.' + id);
var view2 = gel('view2.' + id);
if (!view2)
view2 = gel('view2link.' + id);
var select = gel('select_0' + id);
var options = select.options;
var selCnt = 0;
var isMe = false;
for (var i = 0; i != options.length; i++) {
if (options[i].selected)
selCnt++;
if (typeof g_user !== "undefined" && options[i].value == g_user.userID)
isMe = true;
}
if (view2) {
var isEmail = false;
var selectText = ''
if (selCnt == 1) {
var selectValue = select.options[select.selectedIndex].value;
selectText = select.options[select.selectedIndex].text;
if (selectValue.indexOf("@") > -1) {
if (selectValue == selectText)
isEmail = true;
}
}
var view2Link = gel('view2link.' + id);
if (selCnt == 1 && !isEmail) {
view2.src = 'images/icons/hover_icon_small2.gifx';
view2Link.disabled = false;
var clickThrough = (view2Link.getAttribute('data-clickthrough') === 'true');
var ariaLabel = (clickThrough) ? 'Open selected item: {0}' : 'Preview selected item: {0}';
view2Link.setAttribute('aria-label', new GwtMessage().getMessage(ariaLabel, selectText));
} else {
view2.src = 'images/icons/hover_icon_small2_off.gifx';
view2Link.disabled = true;
view2Link.removeAttribute('aria-label');
}
}
if (remove) {
if (selCnt > 0)
if (remove.tagName == "BUTTON")
remove.disabled = false;
else
remove.src = 'images/delete_edit.gifx';
else
if (remove.tagName == "BUTTON")
remove.disabled = true;
else
remove.src = 'images/delete_edit_off.gifx';
}
if (add_me) {
if (!isMe)
if (add_me.tagName == "BUTTON")
add_me.disabled = false;
else
add_me.src = 'images/icons/user_obj.gifx';
else
if (add_me.tagName == "BUTTON")
add_me.disabled = true;
else
add_me.src = 'images/icons/user_obj_off.gifx';
}
add_me = null;
remove = null;
view2 = null;
options = null;
if (typeof performOnChange != "undefined")
if (performOnChange == false)
return;
glideListSaveList(id);
if (isCatalogGlideList(id))
variableOnChange(id);
}
function isCatalogGlideList(id) {
return ((id.startsWith("IO:") || id.startsWith("ni.VE") || id.startsWith("ni.QS")) && typeof (variableOnChange) == 'function')
}
function toggleAddMe(id) {
var add_me_locked = $('add_me_locked.' + id);
if (!add_me_locked)
return;
var select = gel('select_0' + id);
var options = select.options;
var isMe = false;
for (var i = 0; i != options.length; i++) {
if (options[i].value == g_user.userID) {
isMe = true;
break;
}
}
var unlockImg = $(id + "_unlock");
if (isMe)
add_me_locked.hide();
else if (unlockImg.style.display == "none")
add_me_locked.hide();
else
add_me_locked.show();
}
function glideListSaveList(id) {
var sel0 = gel('select_0' + id);
var distribution = gel(id);
saveAllSelected([ sel0 ], [ distribution ], ',', '\\', '--None--');
if (!isCatalogGlideList(id))
onChange(id);
}
function glideListViewSelection(id, refParent, reference, clickThroughPopup) {
var view2Link = gel("view2link." + id);
if (view2Link.disabled == true)
return false;
var popupView = view2Link.getAttribute('data-popup-view');
viewSelection(gel("select_0"+id), refParent, reference + ".do", id, clickThroughPopup === 'true', popupView);
}
function glideListPopupSelection(event, id, table) {
var select = gel("select_0"+id);
var sysid = glideListGetSelected(select);
if (sysid)
popRecordDiv(event, table, sysid);
}
function glideListInit(id, ref, reference) {
var sel = gel(id);
if (sel.form) {
addOnSubmitEvent(sel.form, function() {
saveAllSelected([ gel(id) ], [ gel(ref) ], ',', '\\', '--None--');
});
}
var listObject = new GlideListElement(ref, reference);
g_form.registerHandler(ref, listObject);
toggleAddMe(ref);
toggleGlideListIcons(ref, false);
var dynamicTable = gel(ref).getAttribute("data-dynamic-table-dependent");
if (dynamicTable) {
$j(gel(dynamicTable)).on("change", function() {
var value = $j(this).val();
var display = gel("sys_display." + ref);
display.setAttribute("data-reference", value);
if (display.ac) {
display.ac.setAdditionalValue('sysparm_ref_override', value);
}
$j(gel(ref)).val("");
$j(gel('select_0' + ref)).find('option').remove().end().val("");
CustomEvent.fire("element_mapping:glide_list_table_changed", {
id: ref,
newTable: value
});
})
}
var $look = $j('[id="lookup.' + ref + '"]:not(.sn-popover-complex)');
if ($look.length) {
$look.on('click keydown', function(e) {
if (e.type === "keydown" && !($j.ui.keyCode.ENTER === e.which || $j.ui.keyCode.SPACE === e.which)) return;
var dsp = $j(gel("sys_display." + ref));
reflistOpen(ref,
dsp.attr("data-name"),
dsp.attr('data-reference'),
dsp.attr('data-dependent'),
'false',
dsp.attr('data-ref-qual'),
null,
null,
null,
true);
mousePositionSave(e);
e.preventDefault();
e.stopPropagation();
});
}
}
function safeAriaLiveAssertive(message) {
if (window.NOW && window.NOW.accessibility && window.NOW.accessibility.ariaLiveAssertive) {
window.NOW.accessibility.ariaLiveAssertive(message);
}
}
;
/*! RESOURCE: /scripts/classes/GlideUserImageElement.js */
var GlideUserImageElement = Class.create({
initialize: function(name) {
this.name = name;
this._ieResize();
},
isTemplatable: function(){
return false;
},
isReadOnly : function(){
var $element = $(this.name);
return $element.hasClassName('readonly') || $element.getAttribute("writeaccess") == "false";
},
setReadOnly: function(disabled) {
var element = gel(this.name);
var editButtons = gel("edit." + this.name);
var addButton = gel("add." + this.name);
var image = gel("image." + this.name);
if (element)
element.readOnly = disabled;
if (disabled) {
hideObject(editButtons);
hideObject(addButton);
} else {
showObjectInline(editButtons);
if (!image)
showObjectInline(addButton);
}
},
isDisabled: function() {
var editButtons = $("edit." + this.name);
if (editButtons && editButtons.visible())
return false;
var addButton = $("add." + this.name);
if (addButton && addButton.visible())
return false;
return true;
},
_ieResize: function() {
var iInput = gel("image." + this.name);
if (isMSIE && iInput) {
var image = $(iInput.value);
var height = image.getLayout().get('height');
var maxHeight = parseInt(image.getStyle('max-height').sub('px', ''), 10);
var width = image.getLayout().get('width');
var maxWidth = parseInt(image.getStyle('max-width').sub('px', ''), 10);
if (height > maxHeight || width > maxWidth) {
var widthRatio = width / maxWidth;
var heightRatio = height / maxHeight;
if (widthRatio > heightRatio)
image.width = maxWidth;
else
image.height = maxHeight;
}
}
}
});
;
/*! RESOURCE: /scripts/classes/FieldListElement.js */
var FieldListElement = Class.create({
initialize: function(name, dependent, dependentTable, defaultDisplayName, newRecord, excludeDotWalk) {
this.name = name;
this.dependent = dependent;
this.table = dependentTable == "null" ? null : dependentTable;
this.excludeDotWalk = excludeDotWalk;
this.defaultDisplayName = (defaultDisplayName == "true");
if (this.defaultDisplayName)
this.tableChanged = (newRecord == "true");
else
this.tableChanged = false;
this.displayName = "";
this.lastValue = "";
this.initialSetup = true;
this.fetching = false;
this.valuesToSet = null;
},
onLoad: function() {
if (!this.table) {
var table = resolveDependentValue(this.name, this.dependent, this.table);
this.table = table;
}
var processGlideVarInput = document.getElementById('ni.' + this.name + '.list_item_id');
processGlideVarInput.onchange = this.processGlideVars.bind(this);
this._listCols();
},
depChange: function() {
gel(this.name).value = "";
this._setTableName();
},
moveOptionUpdate: function(sourceSelect, targetSelect, keepSourceLabel, unmovableSourceValues, keepTargetLabel,
direction, property) {
moveOption(sourceSelect, targetSelect, keepSourceLabel, unmovableSourceValues, keepTargetLabel,
direction, property);
this._setListValues();
},
moveUpUpdate: function(select) {
moveUp(gel(select));
this._setListValues();
},
moveDownUpdate: function(select) {
moveDown(gel(select));
this._setListValues();
},
_listCols: function() {
this.fetching = true;
var colist = gel(this.name);
var url = "xmlhttp.do?sysparm_processor=ListColumns&sysparm_exclude_dot_walk=" + this.excludeDotWalk + "&sysparm_expanded=0&sysparm_name=" + this.table +
"&sysparm_include_display_name=true&sysparm_qualified_field_name=" + this.name;
if (colist.value.length > 0)
url += "&sysparm_col_list=" + colist.value;
jslog("FieldListElement: _listCols calling AJAX " + url);
serverRequest(url, this._colsReturned.bind(this), null);
},
_colsReturned: function(request) {
jslog("FieldListElement: _colsReturned AJAX response received");
var tcols = request.responseXML;
var scols = gel("ni." + this.name + ".select_1");
scols.options.length = 0;
var acols = gel("ni." + this.name + ".select_0");
acols.options.length = 0;
var colist = gel(this.name);
var mfields = new Array();
var useSpecFields = false;
var root = tcols.getElementsByTagName("xml")[0];
this.displayName = root.getAttribute("displayName");
if (this.tableChanged) {
if (this.defaultDisplayName)
colist.value = this.displayName;
else
colist.value = '';
}
if (colist.value.length > 0) {
mfields = colist.value.split(",");
if (mfields.length > 0)
useSpecFields = true;
}
var items = tcols.getElementsByTagName("item");
for (var i = 0; i != items.length; i++) {
var item = items[i];
var value = item.getAttribute("value");
var label = item.getAttribute("label");
var ref = item.getAttribute("reference");
if (ref) {
if(ref == '')
ref = null;
}
if (valueExistsInArray(value, mfields)) {
scols.options[scols.options.length] = this._enhanceOption(item, value, label, root, "selected");
if (ref)
acols.options[acols.options.length] = this._enhanceOption(item, value, label, root, "available");
} else {
acols.options[acols.options.length] = this._enhanceOption(item, value, label, root, "available");
}
}
if (useSpecFields) {
var newOptions = new Array();
for(var i = 0; i != mfields.length; i++) {
var s = mfields[i];
for(var z = 0; z != scols.options.length; z++) {
if (scols.options[z].value == s) {
newOptions[newOptions.length] = scols.options[z];
break;
}
}
}
scols.options.length = 0;
for(var i = 0; i != newOptions.length; i++) {
scols.options.add(newOptions[i]);
}
}
this._setListValues();
this.fetching = false;
if (this.valuesToSet === null)
return;
this.setValue(this.valuesToSet.value, this.valuesToSet.displayValue);
this.valuesToSet = null;
},
_fireSetValueEvent : function() {
if(typeof g_form != 'undefined') {
var form = g_form.getFormElement();
if(typeof form != 'undefined')
$(form).fire('glideform:setvalue');
}
},
_enhanceOption: function (item, value, label, root, status) {
var ref = null;
var xlabel = label;
if (status != "selected") {
ref = item.getAttribute("reference");
if (ref) {
if(ref != '') {
xlabel += " (+)";
} else
ref = null;
}
}
var o = new Option(xlabel, value);
o.cv = value;
o.cl = label;
if (ref) {
o.tl = item.getAttribute("reflabel");
o.style.color = 'green';
o.reference = ref;
o.doNotDelete = 'true';
if (root) {
o.bt = root.getAttribute("name");
o.btl = root.getAttribute("label");
}
}
o.type = item.getAttribute('type');
var elementAttributes = item.getAttribute('attributes');
if (elementAttributes) {
o.elementAttributes = this._setNamedAttributes(o, elementAttributes);
}
return o;
},
_setNamedAttributes: function(o, attrs) {
o.namedAttributes = o.namedAttributes || {};
if (!attrs)
return;
var pairs = attrs.split(',');
for (var i = 0; i < pairs.length; i++) {
var parts = pairs[i].split('=');
if (parts.length == 2)
o.namedAttributes[parts[0]] = parts[1];
}
},
_setTableName: function() {
var table = resolveDependentValue(this.name, this.dependent, this.table);
if (table != this.table) {
this.tableChanged = true;
this.table = table;
this._listCols(table);
}
},
_setListValues: function() {
var scols = gel("ni." + this.name + ".select_1");
var values = "";
var text = "";
var count = 0;
for (var i=0; i < scols.length; i++) {
var opt = scols.options[i];
if (opt.value && opt.value != "--None--") {
if (count > 0) {
values += ",";
text += ", ";
}
values += opt.value;
text += opt.text;
count++;
}
}
gel(this.name).value = values;
var nonedit = gel(this.name+"_nonedit");
if (nonedit){
nonedit.innerHTML = text;
}
this.tableChanged = false;
if (this.lastValue != values) {
this.lastValue = values;
if (!this.initialSetup)
onChange(this.name);
}
if (this.initialSetup)
this._fireSetValueEvent();
this.initialSetup = false;
},
setReadOnly: function(disabled) {
if (disabled) {
var unlockElement = gel(this.name + "_unlock");
lock(unlockElement, this.name, this.name + '_edit', this.name + '_nonedit', 'ni.' + this.name + '.select_1', this.name + '_nonedit');
hideObject(unlockElement);
} else if (gel(this.name + '_edit').style.display == "none") {
var unlockElement = gel(this.name + "_unlock");
if (isDoctype())
showObjectInlineBlock(unlockElement);
else
showObjectInline(unlockElement);
}
gel(this.name).disabled = disabled;
return true;
},
isDisabled: function() {
var unlockElement = $(this.name + "_unlock");
if (unlockElement && unlockElement.visible())
return false;
return true;
},
setValue: function(value, displayValue) {
if (this.fetching) {
this.valuesToSet = {
value: value,
displayValue: displayValue
};
return;
}
gel(this.name).value = value;
var acols = gel("ni." + this.name + ".select_0");
var scols = gel("ni." + this.name + ".select_1");
if (typeof value == "string"){
value = value.split(",");
}
if (typeof displayValue == "string"){
displayValue = displayValue.split(",");
}
if ( value && displayValue) {
if (value.length != displayValue.length) {
jslog("FieldListElement " + this.name +
".setValue() received value and displayValue parameters of different lengths");
return;
}
}
var selectedIds = new Array();
var index = 0;
for (var i = 0; i < scols.options.length; i++) {
selectedIds[index] = i;
index++;
}
if (index > 0) {
moveSelectedOptions(selectedIds, scols, acols, '--None--', ['home'], '--None--');
}
var text = [];
var validValue = new Array;
for (var i = 0; i < value.length; i++) {
var v = value[i];
var aIndex = this._getOptionIndex(acols, v);
if (aIndex > -1) {
selectedIds = new Array();
selectedIds[0] = aIndex;
text.push(acols.options[aIndex].text);
validValue[i] = v;
moveSelectedOptions(selectedIds, acols, scols, '--None--', [], '--None--');
} else {
if (displayValue && displayValue[i]){
addChoiceFromValueAndDisplay(scols, v, displayValue[i]);
text.push(displayValue[i]);
validValue[i] = v;
}
}
}
if(validValue.length > 0)
this.lastValue = validValue.join(',');
var nonedit = gel(this.name+"_nonedit");
if (nonedit) {
nonedit.innerHTML = text.join(', ');
}
onChange(this.name);
},
processGlideVars: function() {
if (!this.name)
return;
var prefix = 'ni.' + this.name + '.';
var item = document.getElementById(prefix + 'list_item_id');
var itemId = item && item.value;
if (itemId) {
var select = document.getElementById(prefix + 'select_0');
var option = getSingleSelectedOption(select);
var table = getTablenameFromOption(option);
var glideAjax = new GlideAjax('GlideVarItemsProcessor');
glideAjax.addParam('sysparm_type', 'get_item_variables');
glideAjax.addParam('sysparm_item_id', itemId);
glideAjax.addParam("sysparm_name", table);
glideAjax.getXML(setVariableOptions, null, [prefix, itemId, option.value]);
}
},
_getOptionIndex: function(select, value) {
for (var i=0; i<select.length; i++)
if (select.options[i].value == value)
return i;
return -1;
},
type: function() {
return "FieldListElement";
}
});
;
/*! RESOURCE: /scripts/classes/OrderListElement.js */
var OrderListElement = Class.create({
initialize: function(name, newRecord) {
this.name = name;
this.lastValue = "";
this.initialSetup = true;
var nonedit = gel(this.name+"_nonedit");
},
onLoad: function() {
var values = gel(this.name).value;
this.setValue(values);
},
moveOptionUpdate: function(sourceSelect, targetSelect, keepSourceLabel, unmovableSourceValues, keepTargetLabel,
direction, property) {
moveOption(sourceSelect, targetSelect, keepSourceLabel, unmovableSourceValues, keepTargetLabel,
direction, property);
this._setListValues();
},
moveUpUpdate: function(select) {
moveUp(gel(select));
this._setListValues();
},
moveDownUpdate: function(select) {
moveDown(gel(select));
this._setListValues();
},
_fireSetValueEvent : function() {
if(typeof g_form != 'undefined') {
var form = g_form.getFormElement();
if(typeof form != 'undefined')
$(form).fire('glideform:setvalue');
}
},
_setListValues: function() {
var scols = gel("ni." + this.name + ".select_1");
var displayValues = [];
var text = "";
var count = 0;
for (var i=0; i < scols.length; i++) {
var opt = scols.options[i];
if (opt.value && opt.value != "--None--") {
if (count > 0) {
text += ", ";
}
displayValues.push({label: opt.text, value: opt.value});
text += opt.text;
count++;
}
}
gel(this.name).value = JSON.stringify(displayValues);
var nonedit = gel(this.name+"_nonedit");
if (nonedit){
nonedit.innerText = text;
}
if (this.lastValue != displayValues) {
this.lastValue = displayValues;
if (!this.initialSetup)
onChange(this.name);
}
if (this.initialSetup)
this._fireSetValueEvent();
this.initialSetup = false;
nonedit.style.visibility = "visible";
},
setReadOnly: function(disabled) {
if (disabled) {
var unlockElement = gel(this.name + "_unlock");
lock(unlockElement, this.name, this.name + '_edit', this.name + '_nonedit', 'ni.' + this.name + '.select_1', this.name + '_nonedit');
hideObject(unlockElement);
} else if (gel(this.name + '_edit').style.display == "none") {
var unlockElement = gel(this.name + "_unlock");
if (isDoctype())
showObjectInlineBlock(unlockElement);
else
showObjectInline(unlockElement);
}
gel(this.name).disabled = disabled;
return true;
},
isDisabled: function() {
var unlockElement = $(this.name + "_unlock");
if (unlockElement && unlockElement.visible())
return false;
return true;
},
setValue: function(values) {
if(!values) return;
values = typeof values === "string" ? JSON.parse(values) : values;
var scols = gel("ni." + this.name + ".select_1");
scols.options.length = 0
values
.forEach(function(value) {
scols.options[scols.options.length] =  new Option(value.label, value.value);
});
this._setListValues();
var unlockElement = gel(this.name + "_unlock");
lock(unlockElement, this.name, this.name + '_edit', this.name + '_nonedit', 'ni.' + this.name + '.select_1', this.name + '_nonedit');
onChange(this.name);
},
type: function() {
return "OrderListElement";
}
});
;
/*! RESOURCE: /scripts/classes/GlideTimeElement.js */
var GlideTimeElement = Class.create({
initialize: function(name, initialValue) {
this.name = name;
if (initialValue)
this.setValue(initialValue)
},
setValue: function(value, displayValue) {
if (value == "")
value = "00:00:00";
var hours = 0;
var mins = 0;
var secs = 0;
var ampm = "";
var dateFormat = gel(this.name + '_format').value;
if (value == "00:00:00") {
if (dateFormat.indexOf("hh") > -1) {
hours = 12;
ampm = "AM";
}
} else {
var timeObject = this._getTimeFromFormat(value, dateFormat);
if (!timeObject) {
this.log("setValue aborted; unable to interpret time '" + value + "' for format '" + dateFormat + "'");
return;
}
hours = timeObject.hh;
mins = timeObject.mm;
secs = timeObject.ss;
ampm = timeObject.ampm;
}
hours = this._LZ(hours, (dateFormat.toLowerCase().indexOf("hh") > -1));
mins = this._LZ(mins, (dateFormat.toLowerCase().indexOf("mm") > -1));
secs = this._LZ(secs, (dateFormat.toLowerCase().indexOf("ss") > -1));
gel(this.name + 'dur_hour').value = hours;
gel(this.name + 'dur_min').value = mins;
var secondsInput = gel(this.name + 'dur_sec');
if (secondsInput)
secondsInput.value = secs;
var ampmw = gel(this.name + 'dur_ampm');
if (ampmw)
if (ampm)
ampmw.value = ampm;
if ("undefined" === typeof g_form)
GlideTimeElement.updateRealTime(this.name);
else {
g_form._internalChange = true;
GlideTimeElement.updateRealTime(this.name);
g_form._internalChange = false;
}
},
setReadOnly: function(disabled){
gel(this.name + "dur_hour").disabled = disabled;
gel(this.name + "dur_min").disabled = disabled;
var secondsInput = gel(this.name + 'dur_sec');
if (secondsInput)
secondsInput.disabled = disabled;
var dateFormat = gel(this.name + '_format').value;
if(dateFormat.indexOf("z") > -1)
gel(this.name + "dur_ampm").disabled = disabled;
gel(this.name).disabled = disabled;
},
_LZ: function(val, padded) {
if (!padded) {
if (val.length > 1)
if (val.charAt(0)=='0')
val = val.substring(1);
return val;
}
val += "";
if (val.length < 2)
val = "0" + val;
return val;
},
_getTimeFromFormat: function(val, format) {
val = trim(val);
var i_val=0;
var i_format = 0;
var c = "";
var token = "";
var hh="", mm="", ss="", ampm="";
while (i_format < format.length) {
c=format.charAt(i_format);
token="";
while ((format.charAt(i_format)==c) && (i_format < format.length)) {
token += format.charAt(i_format++);
}
if (token=="hh"||token=="h") {
hh=this._getInt(val,i_val,token.length,2);
if(hh==null||(hh<1)||(hh>12)) {
this.log("bad hours: " + hh);
return;
}
i_val+=hh.length;
} else if (token=="HH"||token=="H") {
hh=this._getInt(val,i_val,token.length,2);
if(hh==null||(hh<0)||(hh>23)) {
this.log("bad hours: " + hh);
return;
}
i_val+=hh.length;
} else if (token=="mm"||token=="m") {
mm=this._getInt(val,i_val,token.length,2);
if(mm==null||(mm<0)||(mm>59)) {
this.log("bad minutes: " + mm);
return;
}
i_val+=mm.length;
} else if (token=="ss"||token=="s") {
ss=this._getInt(val,i_val,token.length,2);
if(ss==null||(ss<0)||(ss>59)) {
this.log("bad seconds: " + ss);
return;
}
i_val+=ss.length;
} else if (token=="a"||token=="aa") {
if (val.substring(i_val,i_val+2).toLowerCase()=="am")
ampm="AM";
else if (val.substring(i_val,i_val+2).toLowerCase()=="pm")
ampm="PM";
else {
this.log("bad AM/PM: " + val.substring(i_val,i_val+2));
return;
}
i_val+=2;
} else {
if (val.substring(i_val,i_val+token.length)!=token) {
this.log("time did not match format at character " + i_val);
return;
} else
i_val+=token.length;
}
}
if (i_val != val.length) {
this.log("time includes trailing characters");
return;
}
return {hh:hh, mm:mm, ss:ss, ampm: ampm};
},
_getInt: function(str,i,minlength,maxlength) {
for (var x=maxlength; x>=minlength; x--) {
var token=str.substring(i,i+x);
var intPart = this._getInteger(token);
if (intPart != "")
return intPart;
}
return null;
},
_getInteger: function(val) {
var digits="1234567890";
for (var i=0; i < val.length; i++) {
if (digits.indexOf(val.charAt(i))==-1)
return val.substring(0,i);
}
return val;
},
log: function(msg) {
jslog("GetTimeElement - " + msg);
},
type: function() {
return "GlideTimeElement";
}
});
GlideTimeElement.updateRealTime = function(ref) {
var sdata = gel(ref);
var hour = gel(ref + 'dur_hour');
var min = gel(ref + 'dur_min');
var sec = "";
var ampm = "";
var dateFormat = gel(ref + '_format').value;
if (dateFormat.indexOf("a") > -1) {
var ampmw = gel(ref + 'dur_ampm');
if (ampmw)
ampm = ampmw.value;
}
if (dateFormat.indexOf("s") > -1) {
var secondsInput = gel(ref + 'dur_sec');
if (secondsInput)
sec = secondsInput.value;
}
sdata.value = GlideTimeElement.formatTime(parseInt(hour.value || 0, 10),
parseInt(min.value || 0, 10),
parseInt(sec || 0, 10),
ampm,
dateFormat);
onChange(ref);
}
GlideTimeElement.formatTime = function(hour, minute, second, ampm, format) {
var value=new Object();
if (ampm=="PM")
hour += 12;
value["H"]=hour;
value["HH"]=LZ(hour);
if (hour==0)
value["h"]=12;
else if (hour>12)
value["h"]=hour-12;
else
value["h"]=hour;
value["hh"]=LZ(value["h"]);
value["a"]=ampm;
value["aa"]=ampm;
value["m"]=minute;
value["mm"]=LZ(minute);
value["s"]=second;
value["ss"]=LZ(second);
var i_format=0;
var c="";
var result="";
while (i_format < format.length) {
c=format.charAt(i_format);
token="";
while ((format.charAt(i_format)==c) && (i_format < format.length)) {
token += format.charAt(i_format++);
}
if (value[token] != null)
result=result + value[token];
else
result=result + token;
}
return result;
}
;
/*! RESOURCE: /scripts/classes/GlideTimerElement.js */
var GlideTimerElement = Class.create({
initialize : function(name, tmrID) {
this.name = name;
this.tmrID = tmrID;
this._incrementInterval = 1000;
this._setTimer();
},
setValue : function(value) {
value = this._cleanDate(value);
var elem = document.getElementById("o" + this.tmrID);
elem.value = value;
this.updateTotal();
},
setReadOnly: function(readOnly) {
gel(this.tmrID + "_hour").readOnly = readOnly;
gel(this.tmrID + "_min").readOnly = readOnly;
gel(this.tmrID + "_sec").readOnly = readOnly;
gel(this.name).readOnly = readOnly;
g_form.setSensitiveDisplayValue(this.name + ".ui_policy_sensitive", readOnly ? 'none' : '');
return true;
},
_cancelTimer : function() {
if (!this.timerID)
return;
clearTimeout(this.timerID);
this.timerID = null;
this._timerStarted = null;
this._timerTicks = 0;
},
_setTimer : function() {
if (!this._timerStarted)
this._timerStarted = new Date().getTime();
if (!this._timerTicks)
this._timerTicks = 0;
var diff = (new Date().getTime() - this._timerStarted) - (this._timerTicks * this._incrementInterval);
this.timerID = setTimeout(this._incrementTimer.bind(this), this._incrementInterval - diff);
},
_incrementTimer : function() {
if (!this._isPaused()) {
var addedTime = this._incrementInterval / 1000;
var currentTime = this.fields2time() + addedTime;
if (this._isScrolling)
this._deferredTime = !!this._deferredTime ? this._deferredTime + addedTime : currentTime;
else
this.setIncrementingValue(currentTime);
}
this._timerTicks++;
this._setTimer();
},
_isPaused : function() {
var paused = $(this.tmrID + "_paused");
return (paused.value == 'true' ? 1 : 0);
},
type : function() {
return "GlideTimerElement";
},
updateTotal : function() {
var e = $(this.tmrID).getAttribute("data-ref");
var setField = $(e);
var currentTime = this.fields2time();
var otime = this.duration2time();
var newSetTime = parseInt(otime || 0) + parseInt(currentTime);
this.setTimer(newSetTime, setField);
},
fields2time : function() {
var currentTime = 0;
var eHour = $(this.tmrID + "_hour");
var eMin = $(this.tmrID + "_min");
var eSec = $(this.tmrID + "_sec");
if (eHour.value)
currentTime = 60 * 60 * parseInt((isNaN(eHour.value) ? 0 : eHour.value), 10);
if (eMin.value)
currentTime += 60 * parseInt((isNaN(eMin.value) ? 0 : eMin.value), 10);
if (eSec.value)
currentTime += parseInt((isNaN(eSec.value) ? 0 : eSec.value), 10);
return currentTime;
},
setTotalValue : function(currentTime) {
var eCalculated = $(this.tmrID);
var eHour = $(this.tmrID + "_hour");
var eMin = $(this.tmrID + "_min");
var eSec = $(this.tmrID + "_sec");
var hour = doubleDigitFormat(sGetHours(currentTime));
var minute = doubleDigitFormat(sGetMinutes(currentTime));
var second = doubleDigitFormat(sGetSeconds(currentTime));
eCalculated.value = "0 " + hour + ":" + minute + ":" + second;
eSec.value = second;
eMin.value = minute;
eHour.value = hour;
this.updateTotal();
},
setIncrementingValue : function(currentTime) {
var eCalculated = $(this.tmrID);
var eHour = $(this.tmrID + "_hour");
var eMin = $(this.tmrID + "_min");
var eSec = $(this.tmrID + "_sec");
var hour = doubleDigitFormat(sGetHours(currentTime));
var minute = doubleDigitFormat(sGetMinutes(currentTime));
var second = doubleDigitFormat(sGetSeconds(currentTime));
var hourUpdate = (parseInt(eMin.value) >= 59 ? true : false);
eCalculated.value = "0 " + hour + ":" + minute + ":" + second;
var updateTotal = false;
if (second != eSec.value) {
eSec.value = second;
updateTotal = true;
}
if (minute != eMin.value) {
eMin.value = minute;
updateTotal = true;
}
if (hourUpdate && hour != eHour.value) {
eHour.value = hour;
updateTotal = true;
}
if (updateTotal)
this.updateTotal();
},
setTimer : function(newSetTime, setField) {
var tHour = $("o" + this.tmrID + "_hour");
var tMin = $("o" + this.tmrID + "_min");
var tSec = $("o" + this.tmrID + "_sec");
var hour = doubleDigitFormat(sGetHours(newSetTime));
var minute = doubleDigitFormat(sGetMinutes(newSetTime));
var second = doubleDigitFormat(sGetSeconds(newSetTime));
tHour.innerHTML = hour;
tMin.innerHTML = minute;
tSec.innerHTML = second;
if (hour > 24) {
var days = parseInt(hour / 24);
hour = days + " " + (hour - (days * 24));
}
setField.value = hour + ":" + minute + ":" + second;
},
duration2time : function() {
var currentTime = $("o" + this.tmrID).value;
return this.duration2timeValue(currentTime);
},
duration2timeValue : function(currentTime) {
var days = 0;
if (currentTime == 0)
currentTime = "00:00:00";
if (currentTime.indexOf(" ") > -1) {
var sp = currentTime.indexOf(" ");
days = currentTime.substring(0, sp);
currentTime = currentTime.substring(sp + 1, currentTime.length);
}
var hours = parseInt(currentTime.substring(0, 2), 10);
var minutes = parseInt(currentTime.substring(3, 5), 10);
var seconds = parseInt(currentTime.substring(6, 8), 10);
currentTime = ((60 * 60) * 24) * days;
currentTime += (60 * 60) * hours;
currentTime += 60 * minutes;
currentTime += seconds;
return currentTime;
},
_cleanDate: function(dateToClean) {
if (dateToClean.indexOf(" ") > -1) {
var sp = dateToClean.indexOf(" ");
days = dateToClean.substring(0, sp);
if (days.indexOf('-') != -1)
days = Math.floor(new Date(days) / 8.64e7);
dateToClean = days + " " + dateToClean.substring(sp + 1, dateToClean.length);
}
return dateToClean;
},
toString: function() {
return 'GlideTimerElement';
}
});
;
/*! RESOURCE: /scripts/classes/UserRolesElement.js */
var UserRolesElement = Class.create({
initialize: function(name) {
this.name = name;
this._initializeEvents();
},
setReadOnly: function(disabled) {
var lockElement = gel(this.name + "_lock");
if (disabled) {
if (lockElement)
hideObject(lockElement);
var unlockElement = gel(this.name + "_unlock");
lock(unlockElement, this.name, this.name + '_edit', this.name + '_nonedit', this.name + 'select_1', this.name + '_nonedit');
hideObject(unlockElement);
} else {
if (lockElement && lockElement.style.display != "none")
return true;
var unlockElement = gel(this.name + "_unlock");
if (isDoctype())
showObjectInlineBlock(unlockElement);
else
showObjectInline(unlockElement);
}
gel(this.name).disabled = disabled;
return true;
},
isDisabled: function() {
var lockElement = $(this.name + "_lock");
if (lockElement && lockElement.visible())
return false;
var unlockElement = $(this.name + "_unlock");
if (unlockElement && unlockElement.visible())
return false;
return true;
},
setValue: function(newValue) {
var hiddenElement = $(this.name);
var visibleElement = $(this.name + "select_1");
this.visibleElementId = visibleElement.id;
var leftSideSelect = $(this.name + "select_0");
hiddenElement.value = "";
visibleElement.options.length = 0;
if (typeof newValue == "string" && newValue != "")
newValue = newValue.split(",");
for (var i = 0; i < newValue.length; i++) {
var value = newValue[i];
for (var d = leftSideSelect.length - 1; d >= 0; d--) {
if (leftSideSelect.options[d].value == value) {
leftSideSelect.remove(d);
}
}
this._setValue(value);
}
this._updateNonEditValue(newValue);
UserRolesElement.buildSelectList(this.name, true);
onChange(this.name);
},
keyDownLeft: function(evt) {
var key = evt.keyCode;
if (this._isSpaceOrEnterKey(key))
this.selectRole();
},
keyDownRight: function(evt) {
var key = evt.keyCode;
if (this._isSpaceOrEnterKey(key))
this.deselectRole();
},
_isSpaceOrEnterKey: function(keycode) {
return keycode == 32 || keycode == 13;
},
selectRole: function() {
moveOption($(this.name + 'select_0'), $(this.name + 'select_1'), '--None--', [], '--None--');
UserRolesElement.buildSelectList(this.name, true);
},
deselectRole: function() {
moveOption($(this.name + 'select_1'), $(this.name + 'select_0'), '--None--', [], '--None--');
UserRolesElement.buildSelectList(this.name, true);
},
_setValue: function(value) {
if (!value)
return;
var select = new Select(this.visibleElementId);
if (select.contains(value))
return;
select.addOption(value, value);
select = null;
},
_updateNonEditValue: function(newValue) {
var elem = $(this.name + '_nonedit');
if (newValue.length < 2) {
elem
.setStyle('display', 'inline-block')
.update(newValue);
} else {
elem
.setStyle('display', 'inline-block')
.update(newValue.join(', '));
}
},
_initializeEvents: function() {
$(this.name + 'select_0').on('keydown', this.keyDownLeft.bind(this));
$(this.name + 'select_0').on('dblclick', this.selectRole.bind(this));
$(this.name + 'select_1').on('keydown', this.keyDownRight.bind(this));
$(this.name + 'select_1').on('dblclick', this.deselectRole.bind(this));
$(this.name + '_edit').on('click', '[data-action="add"]', this.selectRole.bind(this));
$(this.name + '_edit').on('click', '[data-action="remove"]', this.deselectRole.bind(this));
}
});
UserRolesElement.buildSelectList = function(ref, performOnChange) {
var sel0 = $(ref + 'select_0');
var sel1 = $(ref + 'select_1');
var available = $(ref + 'available');
var selected = $(ref);
if (typeof sel1.options !== 'undefined' && sel1.options.length > 0)
saveAllSelected([ sel0, sel1 ], [available, selected ], ',', '\\', '--None--');
if (performOnChange == false)
return;
onChange(ref);
}
UserRolesElement.userRolesMaxWidth = function(ref) {
var minWidth = 120;
var scrollPad = 12;
if (isMSIE)
scrollPad = 0;
var prefix = ref + "select_";
var select0 = gel(prefix + "0");
minWidth = Math.max(select0.clientWidth + scrollPad, minWidth);
var select1 = gel(prefix + "1");
minWidth = Math.max(select1.clientWidth + scrollPad, minWidth);
select0.style.width = minWidth + "px";
select1.style.width = minWidth + "px";
}
;
/*! RESOURCE: /scripts/classes/DaysOfWeekElement.js */
var DaysOfWeekElement = Class.create({
initialize: function(name) {
this.name = name;
},
setReadOnly: function(disabled) {
var e = gel(this.name);
if (e) {
var checkedDays = e.value;
for (var i = 1; i != 8; i++) {
var cb = gel('ni.' + this.name + '.' + i);
if (cb) {
cb.disabled = disabled;
}
}
}
},
isDisabled: function() {
var cb = $('ni.' + this.name + '.1');
if (cb && !cb.disabled)
return false;
return true;
}
});
;
/*! RESOURCE: /scripts/classes/TextAreaElement.js */
var TextAreaElement = Class.create({
initialize: function(name) {
this.name = name;
},
setReadOnly: function(disabled) {
var d = gel(this.name);
if (disabled) {
d.readOnly = "readonly";
addClassName(d, "readonly");
} else {
d.readOnly = "";
removeClassName(d, "readonly");
}
},
setValue: function(newValue) {
if (newValue == 'XXmultiChangeXX'){
newValue = '';
}
var d = gel(this.name + ".ta");
if (d)
d.value = newValue;
d = gel(this.name);
d.value = newValue;
onChange(this.name);
if(window.jQuery)
$j(d).trigger("autosize.resize");
d = gel("sys_original." + this.name);
if (d){
d.value = "XXmultiChangeXX";
}
}
});
;
/*! RESOURCE: /scripts/classes/AttachmentUploader.js */
var AttachmentUploader = Class.create({
initialize: function(event, file, fileNumber, canAttach, showView, showPopup) {
this.target = Event.element(event);
this.file = file;
this.fileNumber = fileNumber;
this.showView = showView;
this.showPopup = showPopup;
this.canAttach = canAttach;
this.control = gel("upload_file_" + this.fileNumber);
this.progress = gel("upload_file_progress_" + this.fileNumber);
this.CRLF  = "\r\n"
var sys_id = gel("sys_uniqueValue");
if (!sys_id)
sys_id = gel("sysparm_item_guid");
this.parent_sys_id = sys_id.value;
var table = gel("sys_target");
if (!table)
table = gel("ni.attachment_target");
this.table = table.value;
},
destroy: function() {
this.target = null;
this.xhr = null;
this.file = null;
this.control = null;
this.progress = null;
},
send: function(uploadedFunction) {
this.xhr = new XMLHttpRequest();
var self = this;
Event.observe(this.xhr.upload, "load", function() {
if (self.control) {
try {
rel(self.control);
$('header_attachment').style.height = 'auto';
} catch (ex) {}
}
}, false);
Event.observe(this.xhr.upload, "progress", function(e) {
if (e.lengthComputable) {
var percentage = Math.round((e.loaded * 100) / e.total);
self._updateProgressBar(percentage);
}
}, false);
Event.observe(this.xhr.upload, "error", function() {
self._updateProgress(" error");
if (self.control)
self.control.style.backgroundColor="tomato";
self.destroy();
}, false);
Event.observe(this.xhr.upload, "loadstart", function() {
self._updateProgress("started");
if (self.control)
self.control.style.backgroundColor="LightCyan";
}, false);
Event.observe(this.xhr.upload, "abort", function() {
self._updateProgress(" aborted");
if (self.control)
self.control.style.backgroundColor="tomato";
self.destroy();
}, false);
this.xhr.onreadystatechange = function() {
if (self.xhr.readyState === 4) {
var xml = self.xhr.responseXML;
if (xml) {
var sys_id = xml.documentElement.getAttribute("sys_id");
if (sys_id == "attachment.refused") {
alert("Attachment refused because file type not allowed or type does not match file contents.");
} else if (sys_id == "create.permission") {
alert("You do not have ability to attach file to this record.");
} else if ( sys_id == "upload.error") {
alert("Attachment failed. " +
"Invalid table name and/or sys_id when attempting to create attachment.");
} else {
var ga = new GlideAjax('AttachmentAjax');
ga.addParam('sysparm_name','getIconSrc');
ga.addParam('sysparm_type', 'icon');
ga.addParam('sysparm_value', sys_id);
ga.getXMLWait();
var imgSrc = ga.getAnswer();
if( !imgSrc )
imgSrc = "images/attachment.gifx";
addAttachmentNameToForm(sys_id, self.file.name, "New", imgSrc,
self.canAttach, self.showView, self.showPopup);
ga = new GlideAjax('AttachmentAjax');
ga.addParam('sysparm_name','getCanDelete');
ga.addParam('sysparm_type', 'canDelete');
ga.addParam('sysparm_value', sys_id);
ga.getXMLWait();
var canDelete = ga.getAnswer();
if( !canDelete )
canDelete = true;
var gr = new GlideRecord('sys_attachment');
gr.get(sys_id);
addAttachmentNameToDialog(sys_id, self.file.name, canDelete,
gr.sys_created_by, gr.sys_created_on, gr.content_type, imgSrc);
_saveAttachmentClose();
if (typeof uploadedFunction == "function") {
self.sys_id = sys_id;
uploadedFunction.call(this, self);
}
}
}
self.destroy();
}
};
this._checkCompatibleFile(function() {
var formData = new FormData();
formData.append("sysparm_sys_id", self.parent_sys_id);
formData.append("sysparm_table", self.table);
formData.append("sysparm_nostack", "yes");
formData.append("sysparm_send_xml", "true");
if (window.g_ck)
formData.append("sysparm_ck", window.g_ck);
formData.append("attachFile", self.file, self.file.name);
self.xhr.open("POST", "sys_attachment.do", true);
self.xhr.send(formData);
jslog("starting send file upload for " + self.file.name);
})
},
_updateProgress: function(txt) {
if (this.progress)
this.progress.innerHTML = txt;
},
_updateProgressBar: function(percentage) {
if (this.progress)
this.progress.innerHTML = "<progress value=\"" + percentage
+ "\" max=\"100\">" + percentage + "%";
},
_checkCompatibleFile: function(sendFunction) {
var reader = new FileReader();
var self = this;
reader.onerror = function() {
self._outputIncompatible();
}
reader.onloadend = function(evt) {
if (evt.target.error)
return;
sendFunction();
}
reader.readAsArrayBuffer(this.file);
},
_isIWorkFile: function() {
var fileName = this.file.name;
return fileName.endsWith('.key') ||
fileName.endsWith('.pages') ||
fileName.endsWith('.numbers') ||
fileName.endsWith('.keynote');
},
_outputIncompatible: function() {
var errMsg = "There was an error uploading \"{0}.\" ";
if (this._isIWorkFile())
errMsg += "Some iWork files cannot be added through drag and drop. ";
errMsg += "Please select the file and upload through the paperclip icon above.";
g_form.addErrorMessage(new GwtMessage().getMessage(errMsg, this.file.name));
if (this.control)
this.control.style.display = "none";
this.destroy();
},
type: function() {
return "AttachmentUploader";
}
});
AttachmentUploader.uploadBlob = function(blob, filename, url, data, showView, showPopup) {
var form = this._getFormBuilder();
for (var key in data) {
if(data.hasOwnProperty(key)) {
form.append(key, data[key]);
}
}
form.append('file', blob, filename);
var xhr = new XMLHttpRequest();
xhr.onload = function() {
onSuccess({
data: xhr.response,
xml: xhr.responseXML,
sys_id: xhr.responseXML.documentElement.getAttribute('sys_id')
});
};
xhr.onreadystatechange = function() {
if(xhr.readyState === 4) {
try {
var sys_id = xhr.responseXML.documentElement.getAttribute("sys_id");
if(!sys_id) {
return onError(new Error("Attachment failed because file type does not match with file contents."));
}
if (sys_id == "create.permission") {
return onError(new Error("You do not have ability to attach file to this record."));
}
if (sys_id == "upload.error") {
return onError(new Error("Attachment failed. " +
"Invalid table name and/or sys_id when attempting to create attachment."));
}
if (xhr.status < 200 || xhr.status >= 300) {
return onError(new Error('server responded with: ' + xhr.status));
}
onSuccess({sys_id:sys_id });
var ga = new GlideAjax('AttachmentAjax');
ga.addParam('sysparm_name','getIconSrc');
ga.addParam('sysparm_type', 'icon');
ga.addParam('sysparm_value', sys_id);
ga.getXMLAnswer(function(imgSrc) {
if(!imgSrc)
imgSrc = "images/attachment.gifx";
addAttachmentNameToForm(sys_id, filename, "New", imgSrc, 'true', showView, showPopup);
});
} catch (e) {
onError(new Error('server responded with unusable data'));
}
}
};
xhr.open("POST", url);
xhr.send(form);
function listen(event, listener){
if (!xhr.addEventListener)
xhr.attachEvent(event, listener);
else
xhr.addEventListener(event, listener, false);
}
listen('progress', function(e) {
if (e.lengthComputable) {
onProgress({
total: e.total,
loaded: e.loaded,
percent: Math.round((e.loaded * 100) / e.total)
});
}
});
listen('error', function(e) { onError(e); });
var errFuns = [];
function onError(data) {
errFuns.forEach(function(fun){ fun(data); });
}
var sucFuns = [];
function onSuccess(data) {
sucFuns.forEach(function(fun){ fun(data); });
}
var proFuns = [];
function onProgress(data) {
proFuns.forEach(function(fun){ fun(data); });
}
return {
success: function(fun) {
sucFuns.push(fun);
return this;
},
progress: function(fun) {
proFuns.push(fun);
return this;
},
error: function(fun) {
errFuns.push(fun);
return this;
}
}
};
AttachmentUploader.uploadDataURLAttachment = function(dataUrl, name, table, sys_id) {
var parts = AttachmentUploader._parseDataUrl(dataUrl);
if(name) {
name = (parts.ext && name.indexOf('.') == -1 ) ? name + parts.ext : name;
} else {
name =  'pasted_image'+ (parts.ext ? parts.ext : '.unknown');
}
var data = {
'sysparm_sys_id': sys_id,
'sysparm_table': table
};
return this.uploadBlob(parts.blob, name, 'sys_attachment.do', data);
};
AttachmentUploader.uploadDataURLDBImage = function(dataUrl, name) {
var parts = AttachmentUploader._parseDataUrl(dataUrl);
if(name) {
name = (parts.ext && name.indexOf('.') == -1 ) ? name + parts.ext : name;
} else {
name =  'pasted_image'+ (parts.ext ? parts.ext : '.unknown');
}
var data = {
sysparm_table: 'db_image',
sysparm_sys_id: 'new_db_image'
};
return this.uploadBlob(parts, name, 'sys_user_image.do', data);
};
AttachmentUploader._getFormBuilder = function() {
var form = new FormData();
form.append('sysparm_nostack', 'yes');
form.append('sysparm_send_xml', 'true');
if (window.g_ck)
form.append('sysparm_ck', window.g_ck);
return form;
};
AttachmentUploader._parseDataUrl = function(str) {
if(typeof window.Blob == 'undefined')
return new Error('cannot create Blobs on this browser');
var exts = {
'image/jpeg': '.jpg',
'image/bmp': '.bmp',
'image/gif': '.gif',
'image/png': '.png',
'image/tiff': '.tiff',
'image/svg+xml': '.svg',
'image/x-icon': '.ico'
};
var mime = str.substring(str.indexOf(':')+1, str.indexOf(';'));
var base64Str = str.substring(str.indexOf(',')+1);
var byteString = atob(base64Str);
var ab = new ArrayBuffer(byteString.length);
var ia = new Uint8Array(ab);
for (var i = 0, l = byteString.length; i < l; i++) {
ia[i] = byteString.charCodeAt(i);
}
return {
blob: new Blob([ia], {type: mime}),
mime: mime,
ext: exts[mime]
};
};
AttachmentUploader.addDropZone = function(dropZone, maxMegabytes, canAttach, showView, showPopup, extensions, uploadedFunction) {
if (typeof FileReader == "undefined")
return;
if (canAttach == "false") {
AttachmentUploader.noDropZone("File attachments not allowed");
return;
}
if (maxMegabytes !== "")
maxMegabytes = parseInt(maxMegabytes, 10);
else
maxMegabytes = 0;
if (isNaN(maxMegabytes))
maxMegabytes = 0;
var gotExtensions = false;
if (extensions) {
extensions.toLowerCase();
extensions = extensions.split(",");
gotExtensions = true;
}
Event.observe(dropZone, "dragover", function(event) {
Event.stop(event);
var headerAttachment = gel("header_attachment");
if (headerAttachment && headerAttachment.style.backgroundColor != "orange") {
headerAttachment.style.backgroundColor = "orange";
needsReset = true;
}
var line = gel("header_attachment_line");
if (line) {
if (line.style.visibility == "hidden") {
line.reverseOnCancel = "true";
if ($$('attachment_list_items').length > 0) {
showObjectInline(gel("header_attachment_list_label"));
}
line.style.visibility = "visible";
line.style.display = "";
}
line.resetDisplay = "1";
}
setTimeout("AttachmentUploader._resetBackground(false)", 1000);
if (!(isMSIE || isMSIE11)){
event.dataTransfer.effectAllowed = "copy";
event.dataTransfer.dropEffect="copy";
}
return false;
}, true);
Event.observe(dropZone, "dragend", function(event) {
AttachmentUploader._resetBackground(true);
}, true);
Event.observe(dropZone, "drop", function(event) {
AttachmentUploader._resetBackground(true);
var files = event.dataTransfer.files
if (files.length < 1)
return;
if (event.dataTransfer != undefined && typeof event.dataTransfer.getData === "function") {
var dropData = event.dataTransfer.getData("text");
if (dropData != undefined && dropData.toString().startsWith(window.location.origin + "/"))
return;
}
Event.stop(event);
if (dropZone.disableAttachments == "true") {
alert(getMessage("Attachments are not allowed"));
return;
}
$('header_attachment').style.height = 'auto';
if (isFirefox){
$('header_attachment').style.height = '3em';
}
var line = gel("header_attachment_line");
if (line)
line.reverseOnCancel = "false";
var progressSpan = gel("attachment_upload_progress");
progressSpan.innerHTML = "";
var filesTooLarge = [];
var filesBadExtension = [];
for (var i = 0; i < files.length; i++) {
var file = files[i];
var megs = file.size / 1048576;
if (maxMegabytes > 0) {
if (megs > maxMegabytes) {
filesTooLarge.push(file.name + " (" + AttachmentUploader.getDisplaySize(file.size) + ")");
files[i] = null;
continue;
}
}
if (gotExtensions) {
var badExtension = false;
var periodIndex = file.name.lastIndexOf(".");
var extension = "(none)";
if (periodIndex == -1)
badExtension = true;
else {
extension = file.name.substring(periodIndex+1).toLowerCase();
if (extensions.indexOf(extension) == -1)
badExtension = true;
}
if (badExtension) {
filesBadExtension.push(file.name);
continue;
}
}
var p = cel("p");
p.id = "upload_file_" + i;
addClassName(p, 'file');
p.innerHTML = files[i].name + " (" + AttachmentUploader.getDisplaySize(files[i].size) + ") ";
var span = cel("span");
span.id = "upload_file_progress_" + i;
p.appendChild(span);
progressSpan.appendChild(p);
var uploader = new AttachmentUploader(event, file, i, canAttach, showView, showPopup);
uploader.send(uploadedFunction);
}
if ((filesTooLarge.length + filesBadExtension.length) > 0)
AttachmentUploader.setWarning(filesTooLarge, filesBadExtension, maxMegabytes);
}, true);
};
AttachmentUploader._resetBackground = function(doNow) {
var line = gel("header_attachment_line");
if (!line)
return;
if (doNow != true && typeof line.resetDisplay != "undefined") {
var resetDisplay = parseInt(line.resetDisplay);
resetDisplay++;
line.resetDisplay = resetDisplay;
if (resetDisplay < 10)
return;
}
var headerAttachment = gel("header_attachment");
if (headerAttachment)
headerAttachment.style.backgroundColor = "";
if (line.reverseOnCancel == "true") {
line.reverseOnCanel = "false";
hideObject(gel("header_attachment_list_label"));
line.style.visibility = "hidden";
line.style.display = "none";
}
}
AttachmentUploader.getDisplaySize = function(sizeInBytes) {
var kilobytes = Math.round(sizeInBytes / 1024);
if (kilobytes < 1)
kilobytes = 1;
var reportSize = kilobytes + "K";
if (kilobytes > 1024)
reportSize = Math.round(kilobytes / 1024) + "MB";
return reportSize;
}
AttachmentUploader.noDropZone = function(message) {
var dropZone = document.body;
Event.observe(dropZone, "dragover", function(event) {
Event.stop(event);
if (isChrome)
event.dataTransfer.dropEffect="copy";
return true;
}, true);
Event.observe(dropZone, "dragleave", function(event) {
Event.stop(event);
}, true);
Event.observe(dropZone, "drop", function(event) {
var files = event.dataTransfer.files
if (files.length < 1)
return;
Event.stop(event);
alert(message);
}, true);
}
AttachmentUploader.isAttachmentDisabled = function() {
return document.body["disableAttachments"]  === "true";
}
AttachmentUploader.disableAttachments = function() {
document.body.disableAttachments = "true";
}
AttachmentUploader.enableAttachments = function() {
document.body.disableAttachments = "false";
}
AttachmentUploader.setWarning = function (filesTooLarge, filesBadExtension, maxFileSize) {
var warningString = "The following files were not uploaded:\n\n";
if (filesTooLarge.length > 0) {
warningString += "Files larger than the maximum file size (" + maxFileSize + "MB):\n";
for (var i = 0; i < filesTooLarge.length; i++)
warningString += "\t" + filesTooLarge[i] + "\n";
warningString += "\n";
}
if (filesBadExtension.length > 0) {
warningString += "Files with prohibited extensions:\n";
for (var i = 0; i < filesBadExtension.length; i++)
warningString += "\t" + filesBadExtension[i] + "\n";
}
alert(warningString);
}
;
/*! RESOURCE: /scripts/classes/GwtDate.js */
var GwtDate = Class.create({
MINUTES_IN_DAY : 1440,
DAYS_IN_MONTH : [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
MONTHS_IN_YEAR : ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
AJAX_PROCESSOR : "xmlhttp.do?sysparm_processor=com.glide.schedules.AJAXDate",
initialize: function(s) {
if (s) {
this.deserialize(s);
} else {
this.clear();
}
},
clone: function() {
var newDate = new GwtDate(this.serialize());
return newDate;
},
clear: function() {
this.year = 0;
this.month = 0;
this.day = 0;
this.hour = 0;
this.minute = 0;
this.second = 0;
},
serialize: function(dateOnly) {
var s = this.year + "-" + (this.month + 1) + "-" + this.day;
if (!dateOnly)
s += " " + this.formatTime(true);
return s;
},
serializeInUserFormat: function(dateOnly) {
if (dateOnly)
return this.formatDate(g_user_date_format);
else
return this.formatDate(g_user_date_time_format);
},
serializeTimeInUserFormat: function(includeSeconds) {
var spaceIndex = g_user_date_time_format.indexOf(" ");
var timeFormat = g_user_date_time_format.substr(spaceIndex+1);
if (!includeSeconds)
timeFormat = timeFormat.replace(/[:\.]ss/,'');
var d = this.getDateObject(true);
return formatDate(d, timeFormat);
},
deserialize: function(s) {
this.clear();
if (typeof s == 'number')
return this.setFromMs(s);
var components = s.split(" ");
if (components) {
var parts = components[0].split("-");
this.year = parts[0] * 1;
if (parts.length > 1) {
this.month = (parts[1] * 1) - 1;
if (parts.length > 2) {
this.day = parts[2] * 1;
}
}
if (components.length >= 2) {
var parts = components[1].split(":");
this.hour = parts[0] * 1;
if (parts.length > 1) {
this.minute = parts[1] * 1;
}
if (parts.length > 2) {
this.second = parts[2] * 1;
}
}
}
},
getYear: function() {
return this.year;
},
getMonth: function() {
return this.month;
},
getDay: function() {
return this.day;
},
getHour: function() {
return this.hour;
},
getMinute: function() {
return this.minute;
},
getSecond: function() {
return this.second;
},
getTime: function() {
var h = this.hour * 60;
var m = this.minute * 1;
if (this.second >= 30) {
m++;
}
return h + m;
},
getDaysInMonth: function() {
if ((this.month == 1) && ((this.year % 4) == 0) && (((this.year % 100) != 0) || ((this.year % 400) == 0))) {
return 29;
} else {
return this.DAYS_IN_MONTH[this.month];
}
},
setYear: function(year) {
this.year = year;
},
setMonth: function(month) {
this.month = month;
},
setDay: function(day) {
this.day = day;
},
setHour: function(hour) {
this.hour = hour;
},
setMinute: function(minute) {
this.minute = minute;
},
setSecond: function(second) {
this.second = second;
},
setStartOfDay: function() {
this.hour = 0;
this.minute = 0;
this.second = 0;
},
setEndOfDay: function() {
this.hour = 23;
this.minute = 59;
this.second = 59;
},
setFromJsDate: function(date) {
this.year = date.getFullYear();
this.month = date.getMonth();
this.day = date.getDate();
this.hour = date.getHours();
this.minute = date.getMinutes();
this.second = date.getSeconds();
},
setFromMs: function(milliseconds) {
this.setFromJsDate(new Date(milliseconds));
},
setFromDate: function(date) {
this.year = date.getYear();
this.month = date.getMonth();
this.day = date.getDay();
this.hour = date.getHour();
this.minute = date.getMinute();
this.second = date.getSecond();
},
setFromInt: function(intDate, intTime) {
this.clear();
var year = Math.floor(intDate / 10000);
this.year = year;
this.month = (Math.floor((intDate - (year * 10000)) / 100)) - 1;
this.day = intDate % 100;
if (intTime) {
var hour = Math.floor(intTime / 10000);
this.hour = hour;
this.minute = Math.floor((intTime - (hour * 10000)) / 100);
this.second = intTime % 100;
}
},
formatTime: function(includeSeconds) {
var h = doubleDigitFormat(this.hour);
var m = doubleDigitFormat(this.minute);
if (!includeSeconds)
return h + ":" + m;
return h + ":" + m + ":" + doubleDigitFormat(this.second);
},
formatDate: function(format) {
var d = this.getDateObject(false);
d.setYear(this.year);
d.setMonth(this.month);
d.setDate(this.day);
d.setHours(this.hour);
d.setMinutes(this.minute);
d.setSeconds(this.second);
return formatDate(d, format);
},
getDateObject: function(includeTime) {
var d = new Date();
d.setDate(1);
d.setYear(this.year);
d.setMonth(this.month);
d.setDate(this.day);
if (includeTime) {
d.setHours(this.getHour());
d.setMinutes(this.getMinute());
d.setSeconds(this.getSecond());
} else {
d.setHours(0);
d.setMinutes(0);
d.setSeconds(0);
}
return d;
},
isAllDay: function(toDate) {
return ((this.getTime() == 0) && (toDate.getTime() >= (this.MINUTES_IN_DAY)));
},
compare: function(otherDate, includeTimes) {
if (this.getYear() != otherDate.getYear()) {
return this.getYear() - otherDate.getYear();
}
if (this.getMonth() != otherDate.getMonth()) {
return this.getMonth() - otherDate.getMonth();
}
if (this.getDay() != otherDate.getDay()) {
return this.getDay() - otherDate.getDay();
}
if (includeTimes) {
if (this.getHour() != otherDate.getHour()) {
return this.getHour() - otherDate.getHour();
}
if (this.getMinute() != otherDate.getMinute()) {
return this.getMinute() - otherDate.getMinute();
}
if (this.getSecond() != otherDate.getSecond()) {
return this.getSecond() - otherDate.getSecond();
}
}
return 0;
},
addSeconds: function(seconds) {
if (seconds < 0)
return this.subtractSeconds(seconds * -1);
for (var i = 0; i < seconds; i++) {
this._incrementSecond();
}
},
addMinutes: function(minutes) {
if (minutes < 0)
return this.subtractMinutes(minutes * -1);
for (var i = 0; i < minutes; i++) {
this._incrementMinute();
}
},
addHours: function(hours) {
if (hours < 0)
return this.subtractHours(hours * -1);
for (var i = 0; i < hours; i++) {
this._incrementHour();
}
},
addDays: function(days) {
for (var i = 0; i < days; i++) {
this._incrementDay();
}
},
addMonths: function(months) {
for (var i = 0; i < months; i++) {
this._incrementMonth();
}
if (this.day > this.getDaysInMonth()) {
this.day = this.getDaysInMonth();
}
},
addYears: function(years) {
this.year += years;
},
subtractSeconds: function(seconds) {
for (var i = 0; i < seconds; i++) {
this._decrementSecond();
}
},
subtractMinutes: function(minutes) {
for (var i = 0; i < minutes; i++) {
this._decrementMinute();
}
},
subtractHours: function(hours) {
for (var i = 0; i < hours; i++) {
this._decrementHour();
}
},
subtractDays: function(days) {
for (var i = 0; i < days; i++) {
this._decrementDay();
}
},
subtractMonths: function(months) {
for (var i = 0; i < months; i++) {
this._decrementMonth();
}
if (this.day > this.getDaysInMonth()) {
this.day = this.getDaysInMonth();
}
},
subtractYears: function(years) {
this.year -= years;
},
_incrementSecond: function() {
this.second++;
if (this.second > 59) {
this.second = 0;
this._incrementMinute();
}
},
_incrementMinute: function() {
this.minute++;
if (this.minute > 59) {
this.minute = 0;
this._incrementHour();
}
},
_incrementHour: function() {
this.hour++;
if (this.hour > 23) {
this.hour = 0;
this._incrementDay();
}
},
_incrementDay: function() {
this.day++;
if (this.day > this.getDaysInMonth()) {
this.day = 1;
this._incrementMonth();
}
},
_incrementMonth: function() {
this.month++;
if (this.month >= 12) {
this.year++;
this.month = 0;
}
},
_decrementSecond: function() {
this.second--;
if (this.second < 0) {
this.second = 59;
this._decrementMinute();
}
},
_decrementMinute: function() {
this.minute--;
if (this.minute < 0) {
this.minute = 59;
this._decrementHour();
}
},
_decrementHour: function() {
this.hour--;
if (this.hour < 0) {
this.hour = 23;
this._decrementDay();
}
},
_decrementDay: function() {
this.day--;
if (this.day == 0) {
this._decrementMonth();
this.day = this.getDaysInMonth();
}
},
_decrementMonth: function() {
this.month--;
if (this.month < 0) {
this.year--;
this.month = 11;
}
},
now: function() {
var parms = "&sysparm_type=now";
var response = serverRequestWait(this.AJAX_PROCESSOR + parms);
var xml = response.responseXML;
var e = xml.documentElement;
this.clear();
this.deserialize(e.getAttribute("now"));
return this;
},
getCurrentTimeZone: function() {
var parms = "&sysparm_type=now";
var response = serverRequestWait(this.AJAX_PROCESSOR + parms);
var xml = response.responseXML;
var e = xml.documentElement;
return e.getAttribute("time_zone");
},
getDayOfWeek: function() {
var parms = "&sysparm_type=day_of_week&date=" + this.serialize(true);
var response = serverRequestWait(this.AJAX_PROCESSOR + parms);
var xml = response.responseXML;
var e = xml.documentElement;
return e.getAttribute("day_of_week");
},
getCurrentMonth: function() {
return this.MONTHS_IN_YEAR[this.getMonth()];
},
getWeekNumber: function() {
var parms = "&sysparm_type=week_number&date=" + this.serialize(true);
var response = serverRequestWait(this.AJAX_PROCESSOR + parms);
var xml = response.responseXML;
var e = xml.documentElement;
return e.getAttribute("week_number");
},
toString: function() {
return this.formatDate('yyyy-MM-dd HH:mm:ss');
}
});
;
/*! RESOURCE: /scripts/PageTimingService.js */
(function() {
"use strict";
if (window.NOW.PageTimingService)
return;
window.NOW.PageTimingService = {
send: function(data, success, error) {
if (!data.transaction_id) {
if (window.console && window.console.warn)
console.warn("missing data.transaction_id, could not send page timing");
return;
}
var transactionID = data.transaction_id;
delete data.transaction_id;
if (!error) {
error = function(request, textStatus, errorThrown) {
if (errorThrown === '')
return;
if (request.statusText !== 'abort') {
console.error(errorThrown);
}
};
}
var headers = {
'Accept': 'application/json',
'Content-Type': 'application/json'
};
if (typeof g_ck != 'undefined')
headers['X-UserToken'] = g_ck;
return $j.ajax({
headers: headers,
'type': 'PATCH',
'url': "/api/now/ui/page_timing/" + transactionID,
'data': JSON.stringify(data),
'success': success,
'error': error
});
}
};
})();
;
/*! RESOURCE: /scripts/doctype/PageTiming14.js */
NOW.PageTiming = function() {
"use strict";
var categories = null;
initialize();
function initialize() {
CustomEvent.observe('page_timing', _pageTiming);
CustomEvent.observe('page_timing_network', _pageTimingNetwork);
CustomEvent.observe('page_timing_show', _pageTimingShow);
CustomEvent.observe('page_timing_clear', _clearTimingDiv);
CustomEvent.observe('page_timing_client', _clientTransaction);
}
function _pageTiming(timing) {
var ms;
if (timing.startTime)
ms = new Date() - timing.startTime;
else
ms = timing.ms;
if (isNaN(ms))
return;
_initCategories();
var category = timing.name + '';
ms = new Number(ms);
if (!categories[category]) {
categories[category] = {
children: [],
ms: 0
}
}
var cat = categories[category];
if (timing.child) {
if (timing.child.description)
cat.children.push({ name: timing.child.description + '', script_type: timing.child.type, ms: ms, sys_id: timing.child.sys_id, source_table: timing.child.source_table});
else
cat.children.push({ name: timing.child + '', ms: ms});
}
cat.ms += ms;
}
function _pageTimingNetwork(timing) {
if (!window._timingStartTime)
timing.ms = 0;
else if (window.performance && performance.timing.requestStart != performance.timing.responseStart)
timing.ms = window.performance.timing.requestStart - window.performance.timing.navigationStart;
else
timing.ms = Math.max(0, timing.loadTime - window._timingStartTime - _getTiming('SERV'));
if (isNaN(timing.ms))
timing.ms = 0;
_pageTiming(timing);
}
function _pageTimingShow(info) {
if (!window._timingStartTime)
return;
_setRlCatName();
var tot;
if (window.performance)
tot = (window.performance.timing.loadEventEnd - window.performance.timing.navigationStart);
else
tot = new Date().getTime() - window._timingStartTime;
if (tot > 900000) {
_clearTimingDiv(info);
return;
}
window._timingTotal = tot;
var div = _getOrCreateTimingDiv();
var o = {RESP: tot};
for (var c in categories)
o[c] = _getTiming(c) + '';
var txt = new XMLTemplate('glide:page_timing_div').evaluate(o);
div.innerHTML = txt + '';
if (tot > 0) {
var timingGraph = $j('.timing_graph');
var timingGraphDiv = $j('.timingGraphDiv');
var pageTimingExpand = $j('.page_timing_expand');
timingGraph.find('.timing_network').width(Math.round((_getTiming('NETW') / tot) * 100) + '%');
timingGraph.find('.timing_server').width(Math.round((_getTiming('SERV') / tot) * 100) + '%');
timingGraph.find('.timing_browser').width(Math.round((_getTiming('REND') / tot) * 100) + '%');
if(window.performance) {
pageTimingExpand.attr("aria-expanded", "false");
pageTimingExpand.attr("aria-controls", "glide:timingBreakdown_widget");
pageTimingExpand.addClass('icon-chevron-down');
pageTimingExpand.tooltip({
title: function() {
if (pageTimingExpand.attr('aria-expanded') === 'true') {
return pageTimingExpand.data('title-collapse');
}
return pageTimingExpand.data('title-expand');
},
placement: 'top'
}).hideFix();
pageTimingExpand.one('click', function() {
var timingBreakdown = $j('<table class="timing_breakdown" id="glide:timingBreakdown_widget" aria-describedby="glide:timing_widget" aria-hidden="false">' +
'<thead>' +
'       <th aria-hidden="true"></th>' +
'       <th class="timing_label">Timing Type</th>' +
'       <th>Time Range</th>' +
'       <th>Total Time</th>' +
'</thead>');
var events = [
['timing_network', 'Cache/DNS/TCP', 'fetchStart', 'connectEnd'],
['timing_server', 'Server', 'requestStart', 'responseEnd'],
['timing_browser', 'Unload', 'unloadEventStart', 'unloadEventEnd'],
['timing_browser', 'DOM Processing', 'domLoading', 'domComplete'],
['timing_browser', 'onLoad', 'loadEventStart', 'loadEventEnd']
];
for (var i = 0; i < events.length; i++) {
var runTime = window.performance.timing[events[i][3]] - window.performance.timing[events[i][2]];
var startTime = (window.performance.timing[events[i][2]] - window.performance.timing.navigationStart) + '-' + (window.performance.timing[events[i][3]] - window.performance.timing.navigationStart);
timingBreakdown.append($j('<tr><td aria-hidden="true" class="' + events[i][0] + '"></td><td class="timing_label">' + events[i][1] + '</td><td>' + startTime + 'ms</td><td>' + runTime + 'ms</td></tr>'));
}
timingBreakdown.insertAfter(timingGraphDiv);
});
pageTimingExpand.on('click', function(e) {
var isNotExpanded = (pageTimingExpand.attr('aria-expanded') === 'true');
if (isNotExpanded) {
pageTimingExpand.removeClass('icon-chevron-up')
.addClass('icon-chevron-down')
} else {
pageTimingExpand.removeClass('icon-chevron-down')
.addClass('icon-chevron-up')
}
var timingBreakdown = $j('.timing_breakdown');
pageTimingExpand.attr('aria-expanded', !isNotExpanded);
timingBreakdown.attr('aria-hidden', isNotExpanded);
(isNotExpanded) ? timingBreakdown.hide(): timingBreakdown.show();
pageTimingExpand.tooltip('hide');
});
}
}
var img = div.down('img');
if (!img)
img = div.down('button');
if (!img)
return;
img.observe('click', toggle.bindAsEventListener(this));
img.setAttribute('aria-expanded', info.show);
if (info.show == 'true')
_toggle(img);
var a = div.down('a');
$j(a).on('click keydown',toggleDetails)
a.next().down().down().next().observe('click', toggleDetails);
}
function toggle(evt) {
var img = Event.element(evt);
var isVisible = _toggle(img);
img.setAttribute('aria-expanded', isVisible);
_setPreference(isVisible);
}
function _toggle(img) {
var span = img.up().down('.timing_span');
if (!span)
return false;
span.toggle();
return span.visible();
}
function _setPreference(flag) {
try {
setPreference('glide.ui.response_time', flag + '');
} catch (e) {}
}
function toggleDetails(e) {
if (e.type === 'keydown' && e.which !== 32)
return;
var span = gel('page_timing_details');
var a = gel('page_timing_div').down('a');
var state = span.getAttribute('data-state');
if (state === 'shown') {
span.setAttribute('data-state', 'hidden');
a.setAttribute('aria-expanded', 'false');
span.up().up().setAttribute('aria-hidden', 'true');
span.hide();
return false;
}
if (state === 'hidden') {
span.setAttribute('data-state', 'shown');
a.setAttribute('aria-expanded', 'true');
span.up().up().setAttribute('aria-hidden', 'false');
span.show();
return;
}
span.innerHTML = _buildDetails();
span.setAttribute('data-state', 'shown');
a.setAttribute('aria-expanded', 'true');
span.up().up().setAttribute('aria-hidden', 'false');
span.on('click', 'div.timing_detail_line', function (evt, element) {
if (element.getAttribute('data-children') === '0')
return;
var ariaExpandedElement = element.firstElementChild;
if ( ariaExpandedElement ) {
var ariaExp = ariaExpandedElement.getAttribute('aria-expanded') === 'true';
ariaExpandedElement.setAttribute('aria-expanded', !ariaExp);
}
var div = element.down('div');
if (div)
div.toggle();
});
}
function _buildDetails() {
var txt = '';
var o;
var other = _getTiming('REND');
var detailLine = new XMLTemplate('glide:page_timing_detail_line');
var currentCategoryIndex  = 1;
var totalCategories = _getTotalValidCategories(other);
CATEGORIES.forEach(function(cat) {
if (!categories[cat.category])
return;
var ms = _getTiming(cat.category) + '';
if ('RLV2' !== cat.category)
other -= ms;
var children = categories[cat.category].children;
var ariaLabel  = new GwtMessage().getMessage("{0} of {1} {2}: {3}", currentCategoryIndex, totalCategories, cat.name, ms);
o = { name: cat.name, ms: ms, child_count: (children.length + ''), children: '', has_children: '', has_aria_label: ariaLabel};
if (children.length > 0) {
o.children = _buildChildren(children);
o.has_children = 'timing_detail_line_has_children';
o.has_role = 'button';
o.has_expanded = 'false';
}
currentCategoryIndex  = currentCategoryIndex + 1;
txt += detailLine.evaluate(o);
});
if (other > 10) {
var ariaLabel  = new GwtMessage().getMessage("{0} of {1} Other: {2}", totalCategories, totalCategories, other);
txt += detailLine.evaluate({ name: 'Other', ms: other, child_count: 0, has_children: '' ,  has_aria_label: ariaLabel});
}
o = { details: txt };
return new XMLTemplate('glide:page_timing_details').evaluate(o);
}
function _getTotalValidCategories(other) {
var totalCategories = 0;
CATEGORIES.forEach(function(cat) {
if (!categories[cat.category])
return;
else {
totalCategories =  totalCategories + 1;
var ms = _getTiming(cat.category) + '';
if ('RLV2' !== cat.category)
other -= ms;
}
});
return other > 10 ? (totalCategories + 1) : totalCategories;
}
function _buildChildren(children) {
var txt = '<div style="display:none; cursor:default">';
var detailChild = new XMLTemplate('glide:page_timing_child_line');
for (var i = 0; i < children.length; i++) {
var child = children[i];
var childNumber = i+1;
var childAriaLabel  = new GwtMessage().getMessage("{0} of {1} {2}: {3}", childNumber, children.length, child.name, child.ms);
var o = { name: child.name, ms: (child.ms + ''), childAriaLabel: childAriaLabel };
txt += detailChild.evaluate(o);
}
txt += '</div>';
return txt;
}
function _initCategories() {
if (categories)
return;
categories = {};
var startTime = 0;
if (window.performance)
startTime = window.performance.timing.navigationStart;
else
startTime = parseInt(new CookieJar().get('g_startTime'), 10);
window._timingStartTime = startTime;
}
function _getTiming(category) {
if (!categories[category])
return 0;
return Math.max(0, categories[category].ms);
}
function _setRlCatName() {
var isDeferred = window.g_related_list_timing != 'default';
var postFix = (isDeferred === true) ? ' (async)' :' (sync)';
for (var i = 0; i < CATEGORIES.length; i++) {
if ((CATEGORIES[i].category === 'RLV2') && (!hasPostFix(CATEGORIES[i].name)))
CATEGORIES[i].name = CATEGORIES[i].name + postFix;
}
function hasPostFix(cat_name) {
var cat_name_split = cat_name.split(' ');
var len = cat_name_split.length;
return !!((cat_name_split[len - 1] === '(async)') || (cat_name_split[len - 1] === '(sync)'));
}
}
function _clearTimingDiv() {
window._timingTotal = -1;
var div = gel('page_timing_div');
if (div) {
div.innerHTML = '';
div.style.visibility = 'hidden';
}
}
function _getOrCreateTimingDiv() {
var div = gel('page_timing_div');
if (!div) {
div = cel('div');
div.id = 'page_timing_div';
div.setAttribute("role", "complementary");
div.setAttribute("aria-label", getMessage("Timing details"));
div.className = 'timingDiv';
document.body.appendChild(div);
}
div.style.visibility = '';
return div;
}
function _clientTransaction(o) {
if (!window._timingStartTime || !window._timingTotal || window._timingTotal <= 0 || getActiveUser() === false || getTopWindow().loggingOut === true)
return;
if (!Object.entries) {
Object.entries = function(obj) {
var ownProps = Object.keys(obj);
var i = ownProps.length;
var resArray = new Array(i);
while (i--)
resArray[i] = [ownProps[i], obj[ownProps[i]]];
return resArray;
}
};
if (o === undefined || o === null || !Object.entries(o).length)
return;
var det = [];
for (var i = 0; i < CATEGORIES.length; i++) {
var cat = CATEGORIES[i];
if (!o.types[cat.category])
continue;
if (!categories[cat.category])
continue;
var children = categories[cat.category].children;
if (!children)
continue;
for (var ndx = 0; ndx < children.length; ndx++) {
var child = children[ndx];
var t = {};
t.type_code = cat.category;
t.type = cat.name;
t.script_detail = child.script_type;
t.name = child.name;
t.duration = child.ms;
t.sys_id = child.sys_id;
t.source_table = child.source_table;
det.push(t);
}
}
var data = {
'transaction_id': o.transaction_id,
'table_name': o.table_name,
'form_name': o.form_name,
'view_id': o.view_id,
'transaction_time': window._timingTotal,
'browser_server_time': _getTiming('SERV'),
'network_time': _getTiming('NETW'),
'browser_time': _getTiming('REND'),
'client_script_time': (_getTiming('CSOL') + _getTiming('CSOC')),
'policy_time': _getTiming('UIOL'),
'client_details': Object.toJSON(det)
};
if (o.logged_in !== false)
window.NOW.PageTimingService.send(data);
}
var CATEGORIES = [
{ category: 'SCPT', name: 'Script Load/Parse' },
{ category: 'PARS', name: 'CSS and JS Parse' },
{ category: 'SECT', name: 'Form Sections' },
{ category: 'UIOL', name: 'UI Policy - On Load' },
{ category: 'CSOL', name: 'Client Scripts - On Load' },
{ category: 'CSOC', name: 'Client Scripts - On Change (initial load)' },
{ category: 'PROC', name: 'Browser processing before onload' },
{ category: 'DOMC', name: 'DOMContentLoaded to LoadEventEnd' },
{ category: 'LOADF', name: 'addLoadEvent functions' },
{ category: 'RLV2', name: 'Related Lists' }
]
};
addTopRenderEvent(function() {
NOW.PageTiming();
});
;
/*! RESOURCE: /scripts/classes/GlideUI.js */
var GlideUI = Class.create({
initialize: function() {
this.topWindow = getTopWindow() || window;
this.outputMessagesTag = "output_messages";
this.outputMsgDivClass = ".outputmsg_div";
this.messages = {};
if (window.NOW && window.NOW.ngLegacySessionNotificationSupport) {
return;
}
CustomEvent.observe(GlideUI.UI_NOTIFICATION_SYSTEM, this._systemNotification.bind(this));
CustomEvent.observe(GlideUI.UI_NOTIFICATION_INFO, this._systemNotification.bind(this));
CustomEvent.observe(GlideUI.UI_NOTIFICATION_ERROR, this._systemNotification.bind(this));
CustomEvent.observe(GlideUI.UI_NOTIFICATION_SYSTEM_EVENT, this._eventNotification.bind(this));
this._setupAnnouncer();
this._scrapePageLoadMessages();
},
setMsgTags: function(msgTag,msgDivClass) {
this.outputMessagesTag = msgTag;
this.outputMsgDivClass = msgDivClass;
},
display: function(htmlTextOrOptions) {
alert('GlideUI.display() needs to be implemented in an overriding class');
},
fireNotifications: function() {
var spans = $$('span.ui_notification');
for (var i = 0; i < spans.length; i++) {
var span = spans[i];
this.fire(new GlideUINotification({xml: span}));
}
},
fire: function( notification) {
this.topWindow.CustomEvent.fireTop(GlideUI.UI_NOTIFICATION + '.' + notification.getType(), notification);
},
_systemNotification: function( notification) {
if (window.NOW && window.NOW.ngLegacySessionNotificationSupport) {
return;
}
var options = {
text: notification.getText(),
type: notification.getType()
};
if (!options.text)
return;
this.display(options);
},
_eventNotification: function( notification) {
var type = notification.getAttribute('event');
if (type == 'refresh_nav')
CustomEvent.fireTop('navigator.refresh');
},
addOutputMessage: function(options) {
srMessage = {
info: "Info Message",
warning: "Warning Message",
error: "Error Message",
success: "Success Message"
};
options = Object.extend({
msg: '',
id: '',
icon: 'icon-info',
iconSr: srMessage.info,
type: 'info',
preventDuplicates: true
}, options || {});
document.addEventListener("DOMContentLoaded", function(event) {
if(window.nowapi) {
window.nowapi.g_i18n.getMessages([srMessage.info, srMessage.warning, srMessage.error, srMessage.success], function(translations) {
srMessage.info = translations[srMessage.info];
srMessage.warning = translations[srMessage.warning];
srMessage.error = translations[srMessage.error];
srMessage.success = translations[srMessage.success];
});
}
});
if (options.type === 'error') {
options.icon = 'icon-cross-circle';
options.iconSr = srMessage.error;
} else if (options.type === 'warning') {
options.icon = 'icon-alert';
options.iconSr = srMessage.warning;
} else if (options.type === 'success') {
options.icon = 'icon-check-circle';
options.iconSr = srMessage.success;
}
var divs = this._getOutputMessageDivs();
if (!divs)
return false;
var newMsg;
if (typeof options.id == 'undefined' || options.id == '')
newMsg = GlideUI.OUTPUT_MESSAGE_TEMPLATE.evaluate(options);
else
newMsg = GlideUI.OUTPUT_MESSAGE_TEMPLATE_WITH_ID.evaluate(options);
var messageKey = options.type + "_" + options.msg;
if (options.preventDuplicates && this.messages[messageKey])
return false;
this.messages[messageKey] = true;
divs.container.insert(newMsg);
this.show(divs.messages);
if (options.msg && this._shouldAnnounce(divs.container))
this._announce(options.type, options.msg);
if (window._frameChanged)
_frameChanged();
return true;
},
clearOutputMessages: function( closeImg) {
var divs;
if (closeImg) {
closeImg = $(closeImg);
divs = {
messages: closeImg.up(),
container:  closeImg.up().select(this.outputMsgDivClass)[0]
}
} else
divs = this._getOutputMessageDivs();
if (!divs)
return false;
this.hide(divs.messages);
divs.container.innerHTML = '';
this.messages = {};
return true;
},
scrollIntoView: function() {
this._getOutputMessageDivs().container.scrollIntoView();
},
setNavMessage: function(options) {
options = Object.extend({
msg: ''
}, options || {});
var navMessage = $('nav_message');
if(navMessage) {
navMessage.replace(GlideUI.NAV_MESSAGE_TEMPLATE.evaluate(options));
this.adjustTopScrollHeight();
return true;
}
var firstNavElement = $$('nav.navbar')[0];
if(firstNavElement) {
firstNavElement.setStyle({marginBottom: '0px'});
firstNavElement.insert({after: GlideUI.NAV_MESSAGE_TEMPLATE.evaluate(options)});
this.adjustTopScrollHeight();
return true;
}
return false;
},
clearNavMessage: function() {
var navMessage = $('nav_message');
if(!navMessage)
return false;
navMessage.remove();
var firstNavElement = $$('nav.navbar')[0];
if(firstNavElement)
firstNavElement.setStyle({marginBottom: '5px'});
this.adjustTopScrollHeight();
return true;
},
adjustTopScrollHeight: function() {
var fixedContent = $$('div[data-position-fixed-header="true"]')[0];
if(!fixedContent)
return;
var scrollContent = $$('div[data-position-below-header="true"]')[0];
if(!scrollContent)
return;
scrollContent.setStyle({
top: fixedContent.getHeight() + 'px'
});
if (fixedContent.getHeight() > 60) {
var debugRelated = $$('div#debug_related')[0];
if (debugRelated) {
var marginHeight = fixedContent.getHeight() + 20;
debugRelated.setStyle({
marginTop: marginHeight + 'px'
});
}
}
},
show: function(el) {
if (el.classList.contains('outputmsg_hide'))
el.classList.remove('outputmsg_hide');
else if (el.style.display === 'none')
el.style.display = '';
},
hide: function(el) {
el.classList.add('outputmsg_hide');
},
_getOutputMessageDivs: function() {
var divs = {};
divs.messages = $(this.outputMessagesTag);
if (!divs.messages)
return null;
divs.container = divs.messages.select(this.outputMsgDivClass)[0];
if (!divs.container)
return null;
return divs;
},
_setupAnnouncer: function() {
var self = this;
addRenderEvent(function() {
var element = document.createElement('span');
element.setAttribute('aria-live', 'polite');
element.setAttribute('class', 'sr-only');
document.body.appendChild(element);
self._announcer = element;
}, false);
},
_scrapePageLoadMessages: function() {
var self = this;
setTimeout(function() {
var messages = document.querySelectorAll('.outputmsg_div .outputmsg');
for (var i = 0; i < messages.length; i++) {
var msg = messages[i];
var text = msg.textContent;
var type = 'info';
if (msg.classList.contains('outputmsg_error'))
type = 'error';
if (msg.classList.contains('outputmsg_warning'))
type = 'warning';
if (self._shouldAnnounce(msg))
self._announce(type, text);
}
}, 2000);
},
_announce: function(type, text) {
if (this._announcer && text) {
var that = this;
var textNode;
setTimeout(function() {
textNode = document.createTextNode(type + ': ' + text);
that._announcer.appendChild(textNode);
that._announcer.appendChild(textNode);
}, 500);
}
},
_pruneOldMessages: function() {
var nodes = this._announcer.childNodes;
for (var i = 0; i < nodes.length; i++) {
var node = nodes[i];
if (node.readyToDelete)
node.parentNode.removeChild(node);
}
},
_shouldAnnounce: function(el) {
if (!el)
return false;
var container = el;
while(!container.hasClassName('outputmsg_div')) {
container = container.parentElement;
}
if (container.getAttribute('data-server-messages') === 'true') {
container.removeAttribute('data-server-messages');
return true;
}
return (!container.hasAttribute('aria-live')) && container.querySelectorAll('[aria-live]').length === 0;
},
toString: function() {
return 'GlideUI';
}
});
GlideUI.UI_NOTIFICATION = 'glide:ui_notification';
GlideUI.UI_NOTIFICATION_SYSTEM = GlideUI.UI_NOTIFICATION + '.system';
GlideUI.UI_NOTIFICATION_INFO = GlideUI.UI_NOTIFICATION + '.info';
GlideUI.UI_NOTIFICATION_ERROR = GlideUI.UI_NOTIFICATION + '.error';
GlideUI.UI_NOTIFICATION_SYSTEM_EVENT = GlideUI.UI_NOTIFICATION + '.system_event';
GlideUI.OUTPUT_MESSAGE_TEMPLATE = new Template(
'<div role="alert" class="outputmsg outputmsg_#{type} notification notification-#{type}">' +
'<span class="notification-icon #{icon}">' +
'<span class="sr-only">#{iconSr}</span>' +
'</span>' +
'<span class="outputmsg_text">#{msg}</span>' +
'</div>'
);
GlideUI.OUTPUT_MESSAGE_TEMPLATE_WITH_ID = new Template(
'<div role="alert" class="outputmsg outputmsg_#{type} notification notification-#{type}" id="#{id}">' +
'<span class="notification-icon #{icon}">' +
'<span class="sr-only">#{iconSr}</span>' +
'</span>' +
'<span class="outputmsg_text">#{msg}</span>' +
'</div>'
);
GlideUI.NAV_MESSAGE_TEMPLATE = new Template(
'<div role="alert" id="nav_message" class="outputmsg_nav">' +
'<img src="images/icon_nav_info.png"/>' +
'<span class="outputmsg_text outputmsg_nav_inner">&nbsp;#{msg}</span>' +
'</div>'
);
window.g_GlideUI = new GlideUI();
GlideUI.get = function() {
return window.g_GlideUI;
};
;
/*! RESOURCE: /scripts/classes/GlideUINotification.js */
var GlideUINotification = Class.create({
initialize: function(options) {
options = Object.extend({
type: 'system',
text: '',
duration: 0,
attributes: {},
xml: null,
window: window
}, options || {});
this.window = options.window;
if (!options.xml) {
this.type = options.type;
this.text = options.text;
this.attributes = options.attributes;
this.duration = options.duration;
} else
this.xml = options.xml;
},
getType: function() {
if (this.xml)
return this.xml.getAttribute('data-type') || '';
return this.type;
},
getText: function() {
if (this.xml)
return this.xml.getAttribute('data-text') || '';
return this.text;
},
getDuration: function() {
if (this.xml)
return parseInt(this.xml.getAttribute('data-duration'), 10) || 0;
return this.duration;
},
getAttribute: function(n) {
var v;
if (this.xml)
v = this.xml.getAttribute('data-attr-' + n) || '';
else
v = this.attributes[n] || '';
return v;
},
getWindow: function() {
return this.window;
},
getChildren: function() {
if (!this.xml)
return [];
var children = [];
var spans = this.xml.childNodes;
for (var i = 0; i < spans.length; i++) {
if ((spans[i].getAttribute('class') == 'ui_notification_child') || (spans[i].getAttribute('className') == 'ui_notification_child'))
children.push(new GlideUINotification({xml: spans[i], window: this.window}));
}
return children;
},
toString: function() { return 'GlideUINotification'; }
});
;
/*! RESOURCE: /scripts/classes/GlideUIDefault.js */
var GlideUIDefault = {
init: function() {},
display: function(htmlTextOrOptions) {
if (typeof htmlTextOrOptions == 'string')
new NotificationMessage({ text: htmlTextOrOptions });
else
new NotificationMessage(htmlTextOrOptions);
}
};
if (GlideUI.get())
Object.extend(GlideUI.get(), GlideUIDefault).init();
;
/*! RESOURCE: /scripts/classes/doctype/NotificationMessage.js */
var NotificationMessage = Class.create({
FADE_IN_DEFAULT_MS: 400,
FADE_OUT_DEFAULT_MS: 200,
CLOSE_DEFAULT_MS: 3000,
initialize: function(options) {
this.options = Object.extend({
text: '',
type: 'info',
image: '',
styles: {},
sticky: false,
fadeIn: this.FADE_IN_DEFAULT_MS,
fadeOut: this.FADE_OUT_DEFAULT_MS,
closeDelay: this.CLOSE_DEFAULT_MS,
classPrefix: 'notification',
container: 'ui_notification',
classContainer: 'panel-body',
bundleMessages: false,
singleMessage: false,
onBeforeOpen: function() {},
onAfterOpen: function() {},
onBeforeClose: function() {},
onAfterClose: function() {}
}, options || {});
if (this.options.type == 'warn')
this.options.type = 'warning';
if (this.options.type === '')
this.options.type = 'info';
if (this.options.type == 'system')
this.options.type = 'info';
this.options.fadeIn = this._validNumber(this.options.fadeIn, this.FADE_IN_DEFAULT_MS);
this.options.fadeOut = this._validNumber(this.options.fadeOut, this.FADE_OUT_DEFAULT_MS);
this.options.closeDelay = this._validNumber(this.options.closeDelay, this.CLOSE_DEFAULT_MS);
this._show();
},
_show: function() {
var container = this._getContainer(this.options.container);
this.options.onBeforeOpen.call(this);
if (this.options.singleMessage)
container.update("");
this.notification = this._create();
if (!this.options.bundleMessages || container.childElements().length === 0) {
container.insert(this.notification);
if (!this.options.sticky) {
this.timeoutId = setTimeout(this._close.bind(this, false),
this.options.closeDelay + this.options.fadeIn);
this.notification.observe('mouseover', this._makeSticky.bind(this));
}
} else {
var notification = container.down('.' + this.options.classPrefix);
if (!notification)
notification = this.notification;
this._showOuterPanel(notification);
NotificationMessage.prototype.messages.push(this.notification);
this._updateMoreText(notification, NotificationMessage.prototype.messages.length + " more...");
}
this.notification.on('click', '.notification_close_action', this._close.bind(this, true));
this.notification.fadeIn(this.options.fadeIn, function() {
this.options.onAfterOpen.call(this);
}.bind(this));
},
_close: function(boolCloseImmediately, closeEvent) {
if (!this.notification || this._isClosing === true)
return;
this._isClosing = true;
this.options.onBeforeClose.call(this);
clearTimeout(this.timeoutId);
this.timeoutId = null;
function _onClose(notification) {
this._isClosing = false;
notification.stopObserving();
var parent = notification.up();
if (notification.up('.' + this.options.classContainer)
&& notification
.up('.' + this.options.classContainer).select('.' + this.options.classPrefix).length  <= 1)
notification.up('#' + this.options.container).remove();
else {
if (notification.parentNode)
notification.remove();
notification = null;
}
this.options.onAfterClose.call(this);
if (isMSIE && parent) {
parent.style.display = "none"
parent.style.display = "block";
}
}
var notification = this.notification;
if (closeEvent && closeEvent.element)
notification = closeEvent.element().up('.' + this.options.classPrefix + '-closable');
if (boolCloseImmediately)
_onClose.call(this, notification);
else
notification.animate({ height: 0, opacity: 0.2 }, this.options.fadeOut, _onClose.bind(this, notification));
},
_makeSticky: function() {
clearTimeout(this.timeoutId);
this.notification.stopObserving('mouseover');
this.notification.down('.close').show();
this.notification.addClassName(this.options.classPrefix + '_message_sticky');
},
_showAll: function(more) {
if (this.notification.up(".panel-body").length === 0) {
var notificationContainer = this._createContainer();
this.notification.insert(notificationContainer)
this.notification.wrap(notificationContainer);
this.notification.addClassName("notification_inner");
this.notification = notificationContainer;
}
for (var i = 0; i < NotificationMessage.prototype.messages.length; i++) {
var notification = NotificationMessage.prototype.messages[i];
this.notification.up('.panel-body').insert(notification);
notification.stopObserving('mouseover');
notification.down('.close').show();
notification.addClassName(this.options.classPrefix + '_message_sticky');
}
more.up('.notification-more-container').hide();
NotificationMessage.prototype.messages = [];
},
_getContainer: function(n) {
var c = $(n);
if (c)
return c.down('.' + this.options.classContainer);
c = new Element('div', {
'id': n,
'className': this.options.classPrefix + '_container notification-closable'
});
document.body.appendChild(c);
this._createHeading(c);
var body = this._createBody(c);
this._createFooter(c);
return body;
},
_createContainer: function() {
return this._createMainDiv(true);
},
_createHeading: function(container) {
var heading = new Element('div', {className: "panel-heading", style: 'display: none;' });
var close = this._createCloseIcon();
close.setStyle({display:"block"});
heading.insert(close);
heading.insert("<h3 class=\"panel-title\">Current Notification Messages</h3>");
container.insert(heading);
},
_createBody: function(container) {
var el = new Element('div', { className: this.options.classContainer, style: 'padding: 0;' });
container.insert(el);
return el;
},
_createFooter: function(container) {
var el = new Element('div', { className: 'panel-footer notification-more-container', style: 'display:none; '});
container.insert(el);
el.insert(this._createMoreIcon());
},
_create: function() {
var e = this._createMainDiv();
e.appendChild(this._createCloseIcon());
e.insert(sanitizeHtml(this.options.text));
e.style.display = 'none';
return e;
},
_createCloseIcon: function() {
var close = new Element('span', {
className: 'icon-cross close',
style: 'display: ' + (this.options.sticky ? 'block' : 'none')
});
close.observe('click', this._close.bind(this,true));
return close;
},
_createMainDiv: function(isContainer) {
var className = this.options.classPrefix;
if (!isContainer && this.options.type)
className += ' notification-closable ' + this.options.classPrefix + '-' + this.options.type;
else if (isContainer)
className = this.options.classPrefix + '_message_container panel-body';
if (this.options.sticky)
className += ' ' + this.options.classPrefix + '_sticky';
var e = new Element('div', { 'className' : className });
e.setStyle(this.options.styles);
return e;
},
_createMoreIcon: function(){
var more = new Element("a", { "className": "notification-more" });
more.observe('click',this._showAll.bind(this, more));
return more;
},
_showOuterPanel: function(notification) {
notification.up('.notification_container').down('.panel-heading').show();
notification.up('.notification_container').down('.panel-body').style.padding = '';
notification.up('.notification_container').addClassName('panel panel-default');
notification.up('.panel').down(".notification-more-container").show();
},
_updateMoreText: function(notification, text) {
notification.up('.panel').select(".notification-more")[0].update(sanitizeHtml(text));
},
_validNumber: function(n, v) {
n = parseInt(n, 10);
return isNaN(n) ? v : n;
},
toString: function() { return 'NotificationMessage'; }
});
NotificationMessage.prototype.messages = [];
;
/*! RESOURCE: /scripts/section.js */
function expandCollapseAllSections(expandFlag) {
var spans = document.getElementsByTagName('span');
for (var i = 0; i < spans.length; i++) {
if (spans[i].id.substr(0, 8) != "section.")
continue;
var id = spans[i].id.substring(8);
var state = collapsedState(id);
if (state == expandFlag)
toggleSectionDisplay(id);
}
CustomEvent.fire('toggle.sections', expandFlag);
}
function collapsedState(sectionName) {
var el = $(sectionName);
if (el)
return (el.style.display == "none");
}
function setCollapseAllIcons(action, sectionID) {
var exp = gel('img.' + sectionID + '_expandall');
var col = gel('img.' + sectionID + '_collapseall');
if (!exp || !col)
return;
if (action == "expand") {
exp.style.display = "none";
col.style.display = "inline";
return;
}
exp.style.display = "inline";
col.style.display = "none";
}
function toggleSectionDisplay(id,imagePrefix,sectionID) {
var collapsed = collapsedState(id);
setPreference("collapse.section." + id, !collapsed, null);
hideReveal(id, imagePrefix);
toggleDivDisplay(id + '_spacer');
if (collapsed) {
CustomEvent.fire("section.expanded", id);
setCollapseAllIcons("expand",sectionID);
}
}
;
/*! RESOURCE: /scripts/classes/doctype/GlideTabs2.js */
var GlideTabs2 = Class.create({
initialize: function(className, parentElement, offset, tabClassPrefix, isPreloaded) {
this._timeout = null;
this._lastIndex = null;
this.tabs = [];
this.tabIDs = [];
this.tabNames = [];
this.isHidable = [];
this.className = className;
if (parentElement == null)
return;
this.parentElement = parentElement;
this.omitCountTotalCount = {};
this.endPage = {};
this.endPageCount = {};
this.doesNextPageExist = {};
this.isFormTabs = window.g_form && parentElement == g_form.getFormElement();
this.tabs = this.getChildNodesWithClass(parentElement, className);
if (offset == 1)
this.tabs.shift();
if (this.isFormTabs) {
CustomEvent.observe("form.loaded", this.markMandatoryTabs.bind(this));
CustomEvent.observe("ui_policy.loaded", this.startCatchingMandatory.bind(this));
var initialIndex = parseInt($j('#tabs2_section').attr('data-initial-tab-index'), 10);
this._lastIndex = isNaN(initialIndex) ? 0 : initialIndex;
}
CustomEvent.observe("change.handlers.run", this.showTabs.bind(this));
CustomEvent.observe("change.handlers.run.all", this.showTabs.bind(this));
if (className !== 'tabs2_list' || !window.NOW.g_relatedLists)
CustomEvent.observe("partial.page.reload", this.updateTabs.bind(this));
this.activated = false;
this.tabDiv = gel(className);
this.activeTab = -1;
this.createTabs(tabClassPrefix, isPreloaded);
this.state = new GlideTabs2State(className + "_" + g_tabs_reference);
if (this.tabDiv) {
var $tabDiv = $j(this.tabDiv);
$tabDiv.attr('role', 'tablist');
$tabDiv.attr('aria-label', new GwtMessage().getMessage("Related Lists"));
$tabDiv.on('keydown', this, this.handleKeydown);
setTimeout(function (tabDiv) {
$j(tabDiv.getElementsByClassName('tabs2_tab')).not('.tabs2_active').attr({'tabindex':-1,'aria-selected':false});
}, 0, this.tabDiv);
}
},
handleKeydown: function (e) {
var self = e.data;
if (e.which == 37) {
var newIndex = (self.activeTab -1 + self.tabsTabs.length) % self.tabsTabs.length;
var loopCount = 0;
while (self.tabsTabs[newIndex].element.style['display'] == 'none' && loopCount < self.tabsTabs.length) {
newIndex = (newIndex - 1 + self.tabsTabs.length) % self.tabsTabs.length;
loopCount++;
}
self.setActive(newIndex);
} else if (e.which == 39) {
var newIndex = (self.activeTab + 1 + self.tabsTabs.length) % self.tabsTabs.length;
var loopCount = 0;
while (self.tabsTabs[newIndex].element.style['display'] == 'none' && loopCount < self.tabsTabs.length) {
newIndex = (newIndex + 1 + self.tabsTabs.length) % self.tabsTabs.length;
loopCount++;
}
self.setActive(newIndex);
} else if (e.which === 36) {
e.preventDefault();
self.setActive(0);
} else if (e.which === 35) {
e.preventDefault();
self.setActive(self.tabsTabs.length - 1);
}
for (var i = 0; i < self.tabs.length; i++) {
self.tabs[i].setAttribute('aria-hidden', i != self.activeTab);
}
var activeTab = $j(this.getElementsByClassName('tabs2_active')[0]);
activeTab.attr('tabindex', 0);
activeTab.attr('aria-selected', true);
activeTab.focus();
$j(this.getElementsByClassName('tabs2_tab')).not('.tabs2_active').attr({'tabindex':-1,'aria-selected':false});
},
setActive: function(index) {
if (index < 0 || index > this.tabs.length - 1)
index = 0;
var tab = this.tabs[index];
if (this.activeTab != -1) {
var previousTab = this.tabs[this.activeTab];
hide(previousTab);
this.tabsTabs[this.activeTab].setActive(false);
}
show(tab);
this.activeTab = parseInt(index, 10);
this.state.set(this.activeTab);
this._configureTabbable(tab);
if (this.isFormTabs && this._lastIndex !== this.activeTab && this.tabsTabs[this._lastIndex]) {
$j(this.tabsTabs[this._lastIndex].element).removeClass('tabs2_active');
this.setFormTabIndex();
}
this.tabsTabs[index].setActive(true);
},
isActivated: function() {
return this.activated;
},
setFormTabIndex: function() {
clearTimeout(this._timeout);
this._timeout = setTimeout(function() {
this._lastIndex = this.activeTab;
setPreference('tabs2.section.' + g_form.getTableName(), this.activeTab);
}.bind(this), 2000);
},
deactivate: function() {
removeClassName(this.parentElement, 'tabs_enabled');
removeClassName(this.parentElement ,'tabs_disabled');
addClassName(this.parentElement, 'tabs_disabled');
if (this.tabs.length == 0)
return;
if (isDoctype){
for (var i = 0; i < this.tabs.length; i++)
$(this.tabs[i]).removeClassName("tab_section");
}
var count = this.tabsTabs.length;
for (var i = 0; i < count; i++) {
var tabsTab = this.tabsTabs[i];
if (tabsTab.isVisible())
show(this.tabs[i]);
}
for (var i = 0; i < this.tabs.length; i++) {
this.tabs[i].setAttribute('aria-hidden', false);
}
hide(this.tabDiv);
this.activated = false;
},
activate: function() {
if (this.className === "tabs2_vars")
return;
removeClassName(this.parentElement, 'tabs_enabled');
removeClassName(this.parentElement, 'tabs_disabled');
addClassName(this.parentElement, 'tabs_enabled');
if (this.tabs.length < 2) {
this.deactivate();
return;
}
if (isDoctype){
for (var i = 0; i < this.tabs.length; i++)
$(this.tabs[i]).addClassName("tab_section");
}
show(this.tabDiv);
this.hideAll();
var index = this.state.get();
if (index == null)
index = 0;
if (!this.tabsTabs[index] || !this.tabsTabs[index].isVisible()) {
index = this._findFirstVisibleTab();
if (index != -1)
this.setActive(index);
}
if (index != -1)
this.setActive(index);
for (var i = 0; i < this.tabs.length; i++) {
if (i != index) {
this.tabs[i].setAttribute('aria-hidden', true);
}
}
this.activated = true;
},
hideAll: function() {
var tabs = this.tabs;
for (var i = 0; i < tabs.length; i++)
hide(tabs[i]);
},
hideTabByID: function(tabID) {
var tabIndex = this.findTabIndexByID(tabID);
if (tabIndex == -1)
return;
this.hideTab(tabIndex);
},
hideTabByName: function(name) {
var tabIndex = this.findTabIndexByName(name);
if (tabIndex == -1)
return;
this.hideTab(tabIndex);
},
hideTab: function(index) {
if(this.isHidable[index] === true) {
hide(this.tabs[index].firstChild);
this.showTabs();
}
},
_findFirstVisibleTab: function() {
var count = this.tabsTabs.length;
for (var i = 0; i < count; i++) {
var tabsTab = this.tabsTabs[i];
if (tabsTab.isVisible()) {
this.setActive(i);
return i;
}
}
return -1;
},
showAll: function() {
var tabs = this.tabs;
for (var i = 0; i < tabs.length; i++)
show(tabs[i]);
},
showTabByID: function(tabID) {
var tabIndex = this.findTabIndexByID(tabID);
if (tabIndex == -1)
return;
this.showTab(tabIndex);
},
showTabByName: function(name) {
var tabIndex = this.findTabIndexByName(name);
if (tabIndex == -1)
return;
this.showTab(tabIndex);
},
isVisible: function(index) {
var visibility = this.tabs[index].firstChild.style.display;
return !(visibility == 'none');
},
showTab: function(index) {
show(this.tabs[index].firstChild);
this.showTabs();
},
findTabIndexByID: function(tabID) {
var count = this.tabIDs.length;
for (var i = 0; i < count; i++) {
if (this.tabIDs[i] == tabID)
return i;
}
this.log("findTabIndexByID could not find " + tabID);
return -1;
},
findTabIndexByName: function(tabName) {
var index = this.tabNames.indexOf(tabName);
if(index === -1)
this.log("findTabIndexByName could not find " + tabName);
return index;
},
createTabs: function(tabClassPrefix, isPreloaded) {
var tabs = this.tabs;
this.tabsTabs = [];
for (var i = 0, n = tabs.length, tab, title, name; i < n; i++) {
tab = tabs[i];
title = this._getCaption(tab);
name = tab.getAttribute('tab_caption_raw');
this.tabsTabs[i] = new GlideTabs2Tab(this, i, title, tabClassPrefix, isPreloaded);
this.tabIDs[i] = tab.getAttribute('id');
this.isHidable[i] = true;
if (name) {
this.tabNames[i] = name.toLowerCase().replace(" ", "_").replace(/[^0-9a-z_]/gi, "");
} else {
this.tabNames[i] = tab.getAttribute('tab_list_name_raw');
}
tab.setAttribute('role','tabpanel');
tab.setAttribute('aria-hidden',true);
tab.setAttribute('aria-labelledby',this.tabIDs[i]);
if (!isPreloaded) {
var header = isDoctype ? cel('span') : cel('h3');
header.className = 'tab_header';
if (isTextDirectionRTL()) {
header.dir = 'rtl';
}
header.appendChild(this.tabsTabs[i].getElement());
if (!this.tabDiv) {
continue;
}
this.tabDiv.appendChild(header);
var img = cel('img');
img.className = 'tab_spacer';
img.src = 'images/s.gifx';
img.width = '4';
img.height = '24';
this.tabDiv.appendChild(img);
}
}
this.showTabs();
},
showTabs: function() {
for (var i = 0; i < this.tabs.length; i++) {
var tab = this.tabs[i];
var s = tab.firstChild;
var displayed = s.style.display != 'none';
this.tabsTabs[i].showTab(displayed);
}
this._setActiveTab();
},
updateTabs: function() {
var tabs = this.tabs;
for (var i = 0; i < tabs.length; i++) {
var tab = tabs[i];
var t = this._getCaption(tab)
this.tabsTabs[i].updateCaption(t);
}
},
_setActiveTab: function() {
if (this.activeTab == -1)
return;
var currentTab = this.tabsTabs[this.activeTab];
if (currentTab.isVisible())
return;
for (var i = 0; i < this.tabsTabs.length; i++) {
var t = this.tabsTabs[i];
if (!t.isVisible())
continue;
this.setActive(i);
break;
}
},
startCatchingMandatory: function() {
this.markMandatoryTabs();
CustomEvent.observe("mandatory.changed", this.markMandatoryTabs.bind(this));
},
markMandatoryTabs: function() {
this.markAllTabsOK();
if (typeof(g_form) == 'undefined')
return;
var missingFields = g_form.getMissingFields();
for (var i = 0; i < missingFields.length; i++)
this.markTabMandatoryByField(missingFields[i]);
},
markTabMandatoryByField: function(field) {
var i = this.findTabIndex(field);
if (i == -1)
return;
this.isHidable[i] = false;
if(!this.isVisible(i))
this.showTab(i);
this.tabsTabs[i].markAsComplete(false);
},
findTabIndex: function(fieldName) {
var answer = -1;
if (typeof(g_form) == 'undefined')
return;
var element = g_form.getControl(fieldName);
var tabSpan = findParentByTag(element, "span");
while (tabSpan) {
if (hasClassName(tabSpan, 'tabs2_section'))
break;
tabSpan = findParentByTag(tabSpan, "span");
}
for (i = 0; i < this.tabs.length; i++) {
if (this.tabs[i] == tabSpan) {
answer = i;
break;
}
}
return answer;
},
markAllTabsOK: function() {
for (var i = 0; i < this.tabsTabs.length; i++)  {
this.isHidable[i] = true;
this.tabsTabs[i].markAsComplete(true);
}
},
hasTabs: function() {
return this.tabs.length > 1;
},
_configureTabbable: function(tab) {
if (window.tabbable) {
var tabbableItems = window.tabbable(tab);
if (tabbableItems.length === 0)
tab.setAttribute("tabindex", "0");
}
},
_bumpSpacer: function(newHeight) {
var spacerDiv = gel('tabs2_spacer');
if (!spacerDiv || !newHeight)
return;
var spacerHeight = spacerDiv.offsetHeight;
if (newHeight < spacerHeight)
return;
spacerDiv.style.height = newHeight + "px";
spacerDiv.style.minHeight = newHeight +"px";
},
_getCaption: function(tab) {
var caption = tab.getAttribute('tab_caption');
var rows = this._getRowCount(tab);
if (!rows || rows == 0)
return caption;
if (tab) {
if (tab.getAttribute('glide_list_omit_count') == 'false')
rows = formatNumber(rows);
}
if (rows == 0)
return caption;
return new GwtMessage().getMessage("{0} ({1})", caption, rows);
},
_getRowCount: function(tab) {
if (tab.firstChild && (tab.firstChild.tagName.toLowerCase() == "span") && tab.id && tab.id.endsWith("_tab")) {
var rows = tab.getAttribute('tab_rows');
if (!rows)
return null;
var span = tab.firstChild;
if (!span)
return null;
var f;
for (var i = 0; i < span.childNodes.length; i++) {
f = span.childNodes[i];
if (f.tagName.toLowerCase() == "form")
break;
}
if (!f || !f[rows])
return 0;
return f[rows].value;
}
var id = tab.id.substring(0, tab.id.length - 5) + "_table";
var idList = tab.id;
var tab = gel(id);
if (tab) {
var omitCount = tab.getAttribute('glide_list_omit_count') == 'true',
rowsPerPage = parseInt(tab.getAttribute('rows_per_page'), 10),
totalRows = parseInt(tab.getAttribute('total_rows'), 10),
firstRow = parseInt(tab.getAttribute('first_row'), 10);
this.doesNextPageExist[id] = (rowsPerPage + 1) === totalRows;
if (omitCount) {
if (isNaN(this.omitCountTotalCount[id]))
this.omitCountTotalCount[id] = 0;
if (this.activeTab != -1 && this.tabs[this.activeTab].id != idList && !this.endPage[id])
return Math.max(totalRows - 1, this.omitCountTotalCount[id]) + '+';
if (this.doesNextPageExist[id] && !this.endPage[id] && firstRow > this.omitCountTotalCount[id]) {
this.omitCountTotalCount[id] += totalRows - 1;
if (this.omitCountTotalCount[id] > totalRows - 1)
return this.omitCountTotalCount[id] + '+';
return (totalRows - 1) + '+';
}
if (!this.doesNextPageExist[id] && !this.endPage[id]) {
this.endPage[id] = true;
this.endPageCount[id] = this.omitCountTotalCount[id] += totalRows;
}
if (this.endPage[id])
return this.endPageCount[id];
if (this.omitCountTotalCount[id] != 0)
return this.omitCountTotalCount[id] + '+';
return (totalRows - 1) + '+';
}
return tab.getAttribute('total_rows');
}
return "";
},
getChildNodesWithClass: function(p, className) {
var children = p.childNodes;
var answer = [];
for (var i = 0, nodes = 0, n = children.length; i < n; i++) {
var node = children[i];
if (hasClassName(node, className))
answer.push(node);
}
return answer;
},
log: function(msg) {
jslog("GlideTabs2 " + msg);
},
type: 'GlideTabs2'
});
;
/*! RESOURCE: /scripts/classes/doctype/GlideTabs2Tab.js */
var GlideTabs2Tab = Class.create({
initialize: function(parent, index, caption, classPrefix, isPreloaded) {
var el;
var tabs = isPreloaded ? $j('#tabs2_section').find('.tabs2_tab') : '';
this.caption = caption.replace(/\s/g, "\u00a0");
this.parent = parent;
this.index = index;
if (isPreloaded && tabs.length !== 0 && tabs[index]) {
el = tabs[index];
this.element = el;
this.classPrefix = "tabs2";
this.mandatorySpan = $j(el).find('[mandatory=true]')[0];
this._createMandatorySpan(this.mandatorySpan);
} else {
this.element = cel("span");
el = this.element;
if (!classPrefix)
this.classPrefix = "tabs2";
else
this.classPrefix = classPrefix;
el.className = this.classPrefix + '_tab';
el.tabIndex = "0";
el.setAttribute('role', 'tab');
this.mandatorySpan = this._createMandatorySpan();
el.appendChild(this.mandatorySpan);
var c = cel("span");
c.className = "tab_caption_text";
c.innerHTML = this.caption;
el.appendChild(c);
}
if (isTextDirectionRTL() && (isMSIE6 || isMSIE7 || isMSIE8 || (isMSIE9 && !getTopWindow().document.getElementById('edge_west'))))
$j(el).addClass('tabs2_tab_ie');
Event.observe(el, 'click', this.onClick.bind(this));
Event.observe(el, 'mouseover', this.onMouseOver.bind(this));
Event.observe(el, 'mouseout', this.onMouseOut.bind(this));
},
setActive: function(yesNo) {
if (yesNo) {
this.element.setAttribute('tabindex',0);
addClassName(this.element, this.classPrefix + '_active');
CustomEvent.fire("tab.activated", this.parent.className + (this.index+1));
} else {
this.element.setAttribute('tabindex',-1);
removeClassName(this.element, this.classPrefix + '_active');
}
this.element.setAttribute('aria-selected',yesNo);
this.element.setAttribute('aria-controls',this.parent.tabIDs[this.index]);
this.parent.tabs[this.index].setAttribute('aria-hidden',!yesNo);
},
showTab: function(yesNo) {
var display = 'none';
if (yesNo)
display = '';
this.element.style.display = display;
var elementParent = this.element.parentElement;
if (!elementParent || elementParent.tagName != 'H3')
return;
var elementParentSibling = elementParent.nextSibling;
if (elementParentSibling && elementParentSibling.tagName == 'IMG')
elementParentSibling.style.display = display;
},
updateCaption: function(caption) {
this.caption = caption;
this.getElement().getElementsByClassName('tab_caption_text')[0].innerHTML = this.caption;
},
isVisible: function() {
return this.element.style.display == '';
},
getElement: function() {
return this.element;
},
onClick: function() {
this.parent.setActive(this.index);
},
onMouseOver: function() {
addClassName(this.element, this.classPrefix + '_hover');
},
onMouseOut: function() {
removeClassName(this.element, this.classPrefix + '_hover');
},
markAsComplete: function(yesNo) {
this.mandatorySpan.style.visibility = yesNo ? 'hidden' : '';
if (yesNo)
this.element.removeAttribute('aria-describedby');
else
this.element.setAttribute('aria-describedby', 'tab2_section_mandatory_text_' + this.index);
if (isDoctype())
this.mandatorySpan.style.display = yesNo ? 'none' : 'inline-block';
},
_createMandatorySpan: function(element) {
var answer = element || cel("span");
answer.style.marginRight = '2px';
answer.style.visibility = 'hidden';
if (isDoctype()) {
answer.setAttribute('mandatory', 'true');
answer.setAttribute('aria-hidden', 'true');
answer.className = 'label_description';
answer.innerHTML = '*';
answer.style.display = 'none';
} else {
answer.className = 'mandatory';
var img = cel("img", answer);
img.src = 'images/s.gifx';
img.alt = '';
img.style.width = '4px';
img.style.height = '12px';
img.style.margin = '0px';
}
return answer;
}
});
;
/*! RESOURCE: /scripts/classes/GlideTabs2State.js */
var GlideTabs2State = Class.create({
initialize: function(name) {
this.name = name;
this.cj = new CookieJar();
},
get: function() {
return this.cj.get(this.name);
},
set: function(value) {
this.cj.put(this.name, value);
},
type: 'GlideTabs2State'
});
;
/*! RESOURCE: /scripts/doctype/tabs2_14.js */
(function() {
"use strict";
window.g_tabs2Sections = null;
window.g_tabs2List = null;
function tabs2Init() {
initFormTabs();
}
function initFormTabs() {
var f = document.forms[0];
window.g_tabs2Sections = new GlideTabs2('tabs2_section', f, 1, undefined, true);
initTabs(window.g_tabs2Sections);
initVariablesTabs();
}
function initRelatedListTabs() {
var f = $j('#related_lists_wrapper')[0];
window.g_tabs2List = new GlideTabs2('tabs2_list', f, 0);
initTabs(window.g_tabs2List);
for (var i = 0; i < hiddenOnLoad.length; i++)
hideTab(hiddenOnLoad[i]);
for (var i = 0; i <showOnLoad.length; i++)
showTab(showOnLoad[i]);
showOnLoad = [];
hiddenOnLoad = [];
}
function initVariablesTabs() {
var f = $j('[id^="var_container"]');
for (var i = 0, l = f.length; l > i; i++) {
var varTabs = new GlideTabs2("tabs2_vars", f[i], 0);
initTabs(varTabs);
varTabs.deactivate();
}
}
function initTabs(tabSet) {
if (window.g_tabs_print) {
tabSet.deactivate();
return;
}
if (window.g_tabs_preference)
tabSet.activate();
else
tabSet.deactivate();
if (!hasTabs(window.g_tabs2Sections) && !hasTabs(window.g_tabs2List))
tabs2ToggleDisable();
}
function hasTabs( tabSet) {
if (tabSet === null)
return true;
return tabSet.hasTabs();
}
function tabs2ToggleDisable() {
}
function tabs2Toggle() {
window.g_tabs_preference = !window.g_tabs_preference;
CustomEvent.fireAll('tabbed', window.g_tabs_preference);
}
CustomEvent.observe('tabbed', function(trueFalse) {
window.NOW.tabbed = trueFalse;
window.g_tabs_preference = window.NOW.tabbed;
setPreference('tabbed.forms', window.g_tabs_preference);
setTabbed();
})
function setTabbed() {
if (window.g_tabs_preference) {
window.g_tabs2Sections.activate();
if (window.g_tabs2List)
window.g_tabs2List.activate();
CustomEvent.fire('tabs.enable');
} else {
window.g_tabs2Sections.deactivate();
if (window.g_tabs2List)
window.g_tabs2List.deactivate();
CustomEvent.fire('tabs.disable');
}
}
window.tabs2Init = tabs2Init;
window.tabs2Toggle = tabs2Toggle;
CustomEvent.observe('related_lists.ready', initRelatedListTabs);
var hiddenOnLoad = [];
var showOnLoad = [];
CustomEvent.observe('related_lists.show', function(listTableName) {
if (window.NOW.g_relatedLists) {
if (!window.NOW.g_relatedLists.loaded) {
showOnLoad.push(listTableName);
return;
}
}
if (!window.g_tabs2List) {
if (showOnLoad.indexOf(listTableName) == -1)
showOnLoad.push(listTableName);
return;
}
showTab(listTableName);
});
CustomEvent.observe('related_lists.hide', function(listTableName) {
if (window.NOW.g_relatedLists) {
if (!window.NOW.g_relatedLists.loaded) {
hiddenOnLoad.push(listTableName);
return;
}
}
if (!window.g_tabs2List) {
if (hiddenOnLoad.indexOf(listTableName) == -1)
hiddenOnLoad.push(listTableName);
return;
}
hideTab(listTableName);
});
function showTab(listTableName) {
var relatedListID = g_form._getRelatedListID(listTableName);
window.g_tabs2List.showTabByID(relatedListID);
if (!window.g_tabs2List.isActivated())
show(relatedListID);
formatLastTabRoundedBorder();
if (window.NOW.g_relatedLists)
if (window.NOW.g_relatedLists.loaded)
CustomEvent.fire('calculate_fixed_headers');
}
function hideTab(listTableName) {
var relatedListID = g_form._getRelatedListID(listTableName);
window.g_tabs2List.hideTabByID(relatedListID);
if (!g_tabs2List.isActivated())
hide(relatedListID);
formatLastTabRoundedBorder();
}
function formatLastTabRoundedBorder() {
$j('.tabs2_strip .tabs2_tab:visible').removeClass('last_tab_closure');
$j('.tabs2_strip .tabs2_tab:visible:last').addClass('last_tab_closure');
}
})();
;
/*! RESOURCE: /scripts/annotations_toggle.js */
var SN = SN || {};
SN.formAnnotations = {
preference: false,
annotations: null,
hide: function() {
SN.formAnnotations.annotations.fadeOut();
SN.formAnnotations.preference = false;
},
show: function() {
SN.formAnnotations.annotations.fadeIn();
SN.formAnnotations.preference = true;
},
toggle: function() {
if (SN.formAnnotations.preference)
SN.formAnnotations.hide();
else
SN.formAnnotations.show();
setPreference('glide.ui.show_annotations', SN.formAnnotations.preference);
},
toggleFromInfoMsg: function() {
SN.formAnnotations.toggle();
GlideUI.get().clearOutputMessages();
},
init: function() {
var selectors = ['.annotation-row[data-annotation-type="Info Box Blue"]',
'.annotation-row[data-annotation-type="Info Box Red"]',
'.annotation-row[data-annotation-type="Section Details"]',
'.annotation-row[data-annotation-type="Text"]'];
SN.formAnnotations.annotations = $j(selectors.join(','));
var $annotationButton = $j('#header_toggle_annotations');
if (SN.formAnnotations.annotations.length) {
$annotationButton.show().click(SN.formAnnotations.toggle);
if (!SN.formAnnotations.preference && SN.formAnnotations.infoPreference) {
SN.formAnnotations.addHiddenAnnotationMessage();
$j("#info_toggle_annotations").show().click(SN.formAnnotations.toggleFromInfoMsg);
}
} else {
$annotationButton.prop('disabled', true)
var $annotationTooltip = $annotationButton.closest('.annotation-tooltip');
$annotationTooltip.attr('title', $annotationTooltip.attr('data-title-disabled'));
}
if (SN.formAnnotations.preference)
SN.formAnnotations.show();
},
setInfoPref: function() {
setPreference("glide.ui.annotations.show_hidden_msg", "false");
GlideUI.get().clearOutputMessages();
},
addHiddenAnnotationMessage: function() {
var msg = getMessage('This form has annotations - click');
msg += ' <span id="info_toggle_annotations" tabindex="0" class="icon-button icon-help sn-cloak" title="Toggle annotations on / off" style="display: inline-block;color:#678;cursor:pointer;font-size:1.4em"></span> ';
msg += getMessage("to toggle them");
msg += ' - (<span style="text-decoration:underline;cursor:pointer;" onclick="SN.formAnnotations.setInfoPref()">';
msg += getMessage("click here");
msg += '</span> ';
msg += getMessage("to never show this again");
msg += ')';
g_form.addInfoMessage(msg);
}
};
;
/*! RESOURCE: scripts/GlideFlow.js */
var GlideFlow=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=178)}([function(e,t,n){var r=n(2),o=n(9),i=n(20),u=n(29),a=n(14),c=function(e,t,n){var s,f,l,d,p=e&c.F,h=e&c.G,v=e&c.S,g=e&c.P,b=e&c.B,y=h?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,m=h?o:o[t]||(o[t]={}),_=m.prototype||(m.prototype={});for(s in h&&(n=t),n)l=((f=!p&&y&&void 0!==y[s])?y:n)[s],d=b&&f?a(l,r):g&&"function"==typeof l?a(Function.call,l):l,y&&u(y,s,l,e&c.U),m[s]!=l&&i(m,s,d),g&&_[s]!=l&&(_[s]=l)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){var r=n(97)("wks"),o=n(58),i=n(2).Symbol,u="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=u&&i[e]||(u?i:o)("Symbol."+e))}).store=r},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(32),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){"use strict";var r=n(116),o=n(238),i=Object.prototype.toString;function u(e){return"[object Array]"===i.call(e)}function a(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function s(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),u(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:u,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return a(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";var r=n(21);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t,n){var r=n(125),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(28));var o=function(e){function t(t){window.console&&console.log(e+" "+t)}return{debug:function(e){"debug"===r.default.logLevel&&t("[DEBUG] "+e)},addInfoMessage:function(e){t("[INFO] "+e)},addErrorMessage:function(e){t("[ERROR] "+e)},addWarnMessage:function(e){t("[WARN] "+e)}}};t.default=o},function(e,t){var n=e.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(61);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(1)("unscopables"),o=Array.prototype;void 0==o[r]&&n(20)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t,n){var r=n(13);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(15);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(14),o=n(39),i=n(10),u=n(4),a=n(68);e.exports=function(e,t){var n=1==e,c=2==e,s=3==e,f=4==e,l=6==e,d=5==e||l,p=t||a;return function(t,a,h){for(var v,g,b=i(t),y=o(b),m=r(a,h,3),_=u(y.length),x=0,w=n?p(t,_):c?p(t,0):void 0;_>x;x++)if((d||x in y)&&(g=m(v=y[x],x,b),e))if(n)w[x]=g;else if(g)switch(e){case 3:return!0;case 5:return v;case 6:return x;case 2:w.push(v)}else if(f)return!1;return l?-1:s||f?f:w}}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(290),o=n(293);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(30),o=n(60);e.exports=n(31)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(23),o=n(270),i=n(271),u="[object Null]",a="[object Undefined]",c=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?a:u:c&&c in Object(e)?o(e):i(e)}},function(e,t,n){var r=n(7).Symbol;e.exports=r},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var r=n(92),o=n(379),i=n(380),u="[object Null]",a="[object Undefined]",c=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?a:u:c&&c in Object(e)?o(e):i(e)}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.TOKEN_MANAGEMENT_EXTENSION=t.WEBSOCKET_TYPE_NAME=void 0;t.WEBSOCKET_TYPE_NAME="websocket";t.TOKEN_MANAGEMENT_EXTENSION="tokenManagementExtension";var r={servletPath:"amb",logLevel:"info",loginWindow:"true",wsConnectTimeout:1e4,overlayStyle:"",subscribeCommandsFlow:{enable:!1,maxInflight:1,maxWait:1e4,retries:3,retryDelay:{min:2e3,max:3e5,increaseFactor:2}}};t.default=r},function(e,t,n){var r=n(2),o=n(20),i=n(38),u=n(58)("src"),a=Function.toString,c=(""+a).split("toString");n(9).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var s="function"==typeof n;s&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(s&&(i(n,u)||o(n,u,e[t]?""+e[t]:c.join(String(t)))),e===r?e[t]=n:a?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||a.call(this)})},function(e,t,n){var r=n(12),o=n(181),i=n(182),u=Object.defineProperty;t.f=n(31)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(21)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports={}},function(e,t,n){var r=n(39),o=n(61);e.exports=function(e){return r(o(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.FLOW_TYPES={FLOW:"flow",SUBFLOW:"subflow",ACTION:"action"},t.FLOWOBJECT_API_PATH="api/now/processflow/flowobject",t.START="start",t.OUTPUTS="outputs",t.STATUS="status"},function(e,t,n){var r=n(124),o=n(274),i=n(42);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(19);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(32),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){(function(e){var r=n(7),o=n(272),i="object"==typeof t&&t&&!t.nodeType&&t,u=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=u&&u.exports===i?r.Buffer:void 0,c=(a?a.isBuffer:void 0)||o;e.exports=c}).call(t,n(37)(e))},function(e,t,n){var r=n(78),o=n(75);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t){e.exports=function(e){return e}},function(e,t,n){var r=n(280),o=n(281),i=n(282),u=n(283),a=n(284);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,e.exports=c},function(e,t,n){var r=n(82);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(18)(Object,"create");e.exports=r},function(e,t,n){var r=n(302);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(88),o=1/0;e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}},function(e,t,n){var r=n(151),o=n(152);e.exports=function(e,t,n,i){var u=!n;n||(n={});for(var a=-1,c=t.length;++a<c;){var s=t[a],f=i?i(n[s],e[s],s,n,e):void 0;void 0===f&&(f=e[s]),u?o(n,s,f):r(n,s,f)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,r.default)((0,o.default)(e),"executionId is a required string argument"),!0};var r=i(n(160)),o=i(n(91));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){var r=n(161),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t,n){var r=n(25),o=n(27),i="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||o(e)&&r(e)==i}},function(e,t,n){var r=n(177)(Object,"create");e.exports=r},function(e,t,n){var r=n(435);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(441);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(19),o=n(1)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,u;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(u=r(t))&&"function"==typeof t.callee?"Arguments":u}},function(e,t){e.exports=!1},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(13),o=n(2).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(34),o=n(4),i=n(40);e.exports=function(e){return function(t,n,u){var a,c=r(t),s=o(c.length),f=i(u,s);if(e&&n!=n){for(;s>f;)if((a=c[f++])!=a)return!0}else for(;s>f;f++)if((e||f in c)&&c[f]===n)return e||f||0;return!e&&-1}}},function(e,t,n){var r=n(97)("keys"),o=n(58);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(2).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(30).f,o=n(38),i=n(1)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){"use strict";var r=n(15);e.exports.f=function(e){return new function(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}(e)}},function(e,t,n){var r=n(19);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(208);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(233);var o=(0,function(e){return e&&e.__esModule?e:{default:e}}(n(378)).default)();t.default=function(e,t,n){var i=n.body,u=n.transform,a=(0,r.snHttpFactory)({xsrfToken:o.g_ck});return new Promise(function(n,r){a.request(e,t,{data:i,batch:!1}).then(function(e){var t=e.data.result;n(u(t))}).catch(function(e){var t=e.response,n=(t=void 0===t?{}:t).data.error;r(n)})})}},function(e,t,n){"use strict";(function(t){var r=n(5),o=n(241),i={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a={adapter:function(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(117):void 0!==t&&(e=n(117)),e}(),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(u(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(e){a.headers[e]={}}),r.forEach(["post","put","patch"],function(e){a.headers[e]=r.merge(i)}),e.exports=a}).call(t,n(240))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.b64EncodeUnicode=t.b64DecodeUnicode=t.createBatchId=void 0;var r=u(n(258)),o=u(n(261)),i=u(n(262));function u(e){return e&&e.__esModule?e:{default:e}}t.createBatchId=r.default,t.b64DecodeUnicode=o.default,t.b64EncodeUnicode=i.default},function(e,t,n){var r=n(265),o=n(276)(r);e.exports=o},function(e,t,n){var r=n(269),o=n(17),i=Object.prototype,u=i.hasOwnProperty,a=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(e){return o(e)&&u.call(e,"callee")&&!a.call(e,"callee")};e.exports=c},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(22),o=n(24),i="[object AsyncFunction]",u="[object Function]",a="[object GeneratorFunction]",c="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==u||t==a||t==i||t==c}},function(e,t){e.exports=function(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}},function(e,t,n){var r=n(278),o=n(319),i=n(43),u=n(3),a=n(328);e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?u(e)?o(e[0],e[1]):r(e):a(e)}},function(e,t,n){var r=n(44),o=n(285),i=n(286),u=n(287),a=n(288),c=n(289);function s(e){var t=this.__data__=new r(e);this.size=t.size}s.prototype.clear=o,s.prototype.delete=i,s.prototype.get=u,s.prototype.has=a,s.prototype.set=c,e.exports=s},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(18)(n(7),"Map");e.exports=r},function(e,t,n){var r=n(294),o=n(301),i=n(303),u=n(304),a=n(305);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,e.exports=c},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(313),o=n(140),i=Object.prototype.propertyIsEnumerable,u=Object.getOwnPropertySymbols,a=u?function(e){return null==e?[]:(e=Object(e),r(u(e),function(t){return i.call(e,t)}))}:o;e.exports=a},function(e,t,n){var r=n(3),o=n(88),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,u=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||u.test(e)||!i.test(e)||null!=t&&e in Object(t)}},function(e,t,n){var r=n(22),o=n(17),i="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||o(e)&&r(e)==i}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t,n){var r=n(135);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){var r=n(25),o=n(26),i=n(27),u="[object String]";e.exports=function(e){return"string"==typeof e||!o(e)&&i(e)&&r(e)==u}},function(e,t,n){var r=n(51).Symbol;e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(8));var o=function(e,t,n){var o,i,u=new r.default("amb.ChannelListener"),a=e;return{getCallback:function(){return i},getSubscriptionCallback:function(){return n},getID:function(){return o},setNewChannel:function(e){a.unsubscribe(this),a=e,this.subscribe(i)},subscribe:function(e){return i=e,o=a.subscribe(this),this},resubscribe:function(){return this.subscribe(i)},unsubscribe:function(){return a.unsubscribe(this),u.debug("Unsubscribed from channel: "+a.getName()),this},publish:function(e){a.publish(e)},getName:function(){return a.getName()}}};t.default=o},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.isEmptyObject=t.isObject=t.isNil=t.isNull=t.isUndefined=void 0;var o=function(e){return void 0===e};t.isUndefined=o;var i=function(e){return null===e};t.isNull=i;t.isNil=function(e){return i(e)||o(e)};var u=function(e){return null!=e&&"object"===r(e)};t.isObject=u;t.isEmptyObject=function(e){return u(e)&&0===Object.keys(e).length}},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var r=n(9),o=n(2),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(57)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){"use strict";var r=n(183)(!0);n(99)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";var r=n(57),o=n(0),i=n(29),u=n(20),a=n(33),c=n(184),s=n(65),f=n(188),l=n(1)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,v,g,b){c(n,t,h);var y,m,_,x=function(e){if(!d&&e in T)return T[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},w=t+" Iterator",O="values"==v,j=!1,T=e.prototype,S=T[l]||T["@@iterator"]||v&&T[v],C=S||x(v),E=v?O?x("entries"):C:void 0,A="Array"==t&&T.entries||S;if(A&&(_=f(A.call(new e)))!==Object.prototype&&_.next&&(s(_,w,!0),r||"function"==typeof _[l]||u(_,l,p)),O&&S&&"values"!==S.name&&(j=!0,C=function(){return S.call(this)}),r&&!b||!d&&!j&&T[l]||u(T,l,C),a[t]=C,a[w]=p,v)if(y={values:O?C:x("values"),keys:g?C:x("keys"),entries:E},b)for(m in y)m in T||i(T,m,y[m]);else o(o.P+o.F*(d||j),t,y);return y}},function(e,t,n){var r=n(187),o=n(101);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){"use strict";var r=n(11),o=n(190),i=n(33),u=n(34);e.exports=n(99)(Array,"Array",function(e,t){this._t=u(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){var r=n(12);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(33),o=n(1)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){var r=n(56),o=n(1)("iterator"),i=n(33);e.exports=n(9).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){var r=n(12),o=n(15),i=n(1)("species");e.exports=function(e,t){var n,u=r(e).constructor;return void 0===u||void 0==(n=r(u)[i])?t:o(n)}},function(e,t,n){var r,o,i,u=n(14),a=n(194),c=n(64),s=n(59),f=n(2),l=f.process,d=f.setImmediate,p=f.clearImmediate,h=f.MessageChannel,v=f.Dispatch,g=0,b={},y=function(){var e=+this;if(b.hasOwnProperty(e)){var t=b[e];delete b[e],t()}},m=function(e){y.call(e.data)};d&&p||(d=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return b[++g]=function(){a("function"==typeof e?e:Function(e),t)},r(g),g},p=function(e){delete b[e]},"process"==n(19)(l)?r=function(e){l.nextTick(u(y,e,1))}:v&&v.now?r=function(e){v.now(u(y,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=m,r=u(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(e){f.postMessage(e+"","*")},f.addEventListener("message",m,!1)):r="onreadystatechange"in s("script")?function(e){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),y.call(e)}}:function(e){setTimeout(u(y,e,1),0)}),e.exports={set:d,clear:p}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(12),o=n(13),i=n(66);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(2),o=n(30),i=n(31),u=n(1)("species");e.exports=function(e){var t=r[e];i&&t&&!t[u]&&o.f(t,u,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(1)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},e(i)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(30),o=n(60);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(15),o=n(10),i=n(39),u=n(4);e.exports=function(e,t,n,a,c){r(t);var s=o(e),f=i(s),l=u(s.length),d=c?l-1:0,p=c?-1:1;if(n<2)for(;;){if(d in f){a=f[d],d+=p;break}if(d+=p,c?d<0:l<=d)throw TypeError("Reduce of empty array with no initial value")}for(;c?d>=0:l>d;d+=p)d in f&&(a=t(a,f[d],d,s));return a}},function(e,t,n){"use strict";var r=n(67),o=n(13),i=n(4),u=n(14),a=n(1)("isConcatSpreadable");e.exports=function e(t,n,c,s,f,l,d,p){for(var h,v,g=f,b=0,y=!!d&&u(d,p,3);b<s;){if(b in c){if(h=y?y(c[b],b,n):c[b],v=!1,o(h)&&(v=void 0!==(v=h[a])?!!v:r(h)),v&&l>0)g=e(t,n,h,i(h.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();t[g]=h}g++}b++}return g}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(232)),o=a(n(162)),i=a(n(50)),u=a(n(381));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return(0,i.default)(e),{getExecutionId:function(){return e},getExecutionStatus:function(){return(0,r.default)(e)},getOutputs:function(){return(0,o.default)(e)},awaitCompletion:function(){return(0,u.default)(e)}}}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(5),o=n(242),i=n(244),u=n(245),a=n(246),c=n(118),s="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(247);e.exports=function(e){return new Promise(function(t,f){var l=e.data,d=e.headers;r.isFormData(l)&&delete d["Content-Type"];var p=new XMLHttpRequest,h="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||a(e.url)||(p=new window.XDomainRequest,h="onload",v=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var g=e.auth.username||"",b=e.auth.password||"";d.Authorization="Basic "+s(g+":"+b)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[h]=function(){if(p&&(4===p.readyState||v)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,f,r),p=null}},p.onerror=function(){f(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){f(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var y=n(248),m=(e.withCredentials||a(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;m&&(d[e.xsrfHeaderName]=m)}if("setRequestHeader"in p&&r.forEach(d,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),f(e),p=null)}),void 0===l&&(l=null),p.send(l)})}},function(e,t,n){"use strict";var r=n(243);e.exports=function(e,t,n,o,i){var u=new Error(e);return r(u,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(256);Object.defineProperty(t,"createHttpRequestBatcher",{enumerable:!0,get:function(){return a(r).default}});var o=n(333);Object.defineProperty(t,"createBatchRequestInterceptor",{enumerable:!0,get:function(){return a(o).default}});var i=n(338);Object.defineProperty(t,"createBatchResponseSuccessInterceptor",{enumerable:!0,get:function(){return a(i).default}});var u=n(339);function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"createBatchResponseFailedInterceptor",{enumerable:!0,get:function(){return a(u).default}})},function(e,t){e.exports=function(e,t){var n="000000000"+e;return n.substr(n.length-t)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},function(e,t,n){var r=n(268),o=n(73),i=n(3),u=n(41),a=n(126),c=n(127),s=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),f=!n&&o(e),l=!n&&!f&&u(e),d=!n&&!f&&!l&&c(e),p=n||f||l||d,h=p?r(e.length,String):[],v=h.length;for(var g in e)!t&&!s.call(e,g)||p&&("length"==g||l&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,v))||h.push(g);return h}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(t,n(74))},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){return!!(t=null==t?n:t)&&("number"==typeof e||r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(273),o=n(76),i=n(128),u=i&&i.isTypedArray,a=u?o(u):r;e.exports=a},function(e,t,n){(function(e){var r=n(125),o="object"==typeof t&&t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,u=i&&i.exports===o&&r.process,a=function(){try{return u&&u.binding&&u.binding("util")}catch(e){}}();e.exports=a}).call(t,n(37)(e))},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(79),o=n(72),i=n(80),u=n(331),a=n(3);e.exports=function(e,t,n){var c=a(e)?r:u,s=arguments.length<3;return c(e,i(t,4),n,s,o)}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(306),o=n(17);e.exports=function e(t,n,i,u,a){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,i,u,e,a))}},function(e,t,n){var r=n(307),o=n(134),i=n(310),u=1,a=2;e.exports=function(e,t,n,c,s,f){var l=n&u,d=e.length,p=t.length;if(d!=p&&!(l&&p>d))return!1;var h=f.get(e);if(h&&f.get(t))return h==t;var v=-1,g=!0,b=n&a?new r:void 0;for(f.set(e,t),f.set(t,e);++v<d;){var y=e[v],m=t[v];if(c)var _=l?c(m,y,v,t,e,f):c(y,m,v,e,t,f);if(void 0!==_){if(_)continue;g=!1;break}if(b){if(!o(t,function(e,t){if(!i(b,t)&&(y===e||s(y,e,n,c,f)))return b.push(t)})){g=!1;break}}else if(y!==m&&!s(y,m,n,c,f)){g=!1;break}}return f.delete(e),f.delete(t),g}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t,n){var r=n(7).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}},function(e,t,n){var r=n(139),o=n(86),i=n(36);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(85),o=n(3);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(314),o=n(83),i=n(315),u=n(316),a=n(317),c=n(22),s=n(131),f=s(r),l=s(o),d=s(i),p=s(u),h=s(a),v=c;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||u&&"[object Set]"!=v(new u)||a&&"[object WeakMap]"!=v(new a))&&(v=function(e){var t=c(e),n="[object Object]"==t?e.constructor:void 0,r=n?s(n):"";if(r)switch(r){case f:return"[object DataView]";case l:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=v},function(e,t,n){var r=n(24);e.exports=function(e){return e==e&&!r(e)}},function(e,t){e.exports=function(e,t){return function(n){return null!=n&&n[e]===t&&(void 0!==t||e in Object(n))}}},function(e,t,n){var r=n(145),o=n(48);e.exports=function(e,t){for(var n=0,i=(t=r(t,e)).length;null!=e&&n<i;)e=e[o(t[n++])];return n&&n==i?e:void 0}},function(e,t,n){var r=n(3),o=n(87),i=n(321),u=n(146);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:i(u(e))}},function(e,t,n){var r=n(324);e.exports=function(e){return null==e?"":r(e)}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}();t.arrayToObject=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n},t.merge=function(e,n,o){if(!n)return e;if("object"!=typeof n){if(Array.isArray(e))e.push(n);else{if("object"!=typeof e)return[e,n];(o.plainObjects||o.allowPrototypes||!r.call(Object.prototype,n))&&(e[n]=!0)}return e}if("object"!=typeof e)return[e].concat(n);var i=e;return Array.isArray(e)&&!Array.isArray(n)&&(i=t.arrayToObject(e,o)),Array.isArray(e)&&Array.isArray(n)?(n.forEach(function(n,i){r.call(e,i)?e[i]&&"object"==typeof e[i]?e[i]=t.merge(e[i],n,o):e.push(n):e[i]=n}),e):Object.keys(n).reduce(function(e,i){var u=n[i];return r.call(e,i)?e[i]=t.merge(e[i],u,o):e[i]=u,e},i)},t.assign=function(e,t){return Object.keys(t).reduce(function(e,n){return e[n]=t[n],e},e)},t.decode=function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(t){return e}},t.encode=function(e){if(0===e.length)return e;for(var t="string"==typeof e?e:String(e),n="",r=0;r<t.length;++r){var i=t.charCodeAt(r);45===i||46===i||95===i||126===i||i>=48&&i<=57||i>=65&&i<=90||i>=97&&i<=122?n+=t.charAt(r):i<128?n+=o[i]:i<2048?n+=o[192|i>>6]+o[128|63&i]:i<55296||i>=57344?n+=o[224|i>>12]+o[128|i>>6&63]+o[128|63&i]:(r+=1,i=65536+((1023&i)<<10|1023&t.charCodeAt(r)),n+=o[240|i>>18]+o[128|i>>12&63]+o[128|i>>6&63]+o[128|63&i])}return n},t.compact=function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var o=t[r],i=o.obj[o.prop],u=Object.keys(i),a=0;a<u.length;++a){var c=u[a],s=i[c];"object"==typeof s&&null!==s&&-1===n.indexOf(s)&&(t.push({obj:i,prop:c}),n.push(s))}return function(e){for(var t;e.length;){var n=e.pop();if(t=n.obj[n.prop],Array.isArray(t)){for(var r=[],o=0;o<t.length;++o)void 0!==t[o]&&r.push(t[o]);n.obj[n.prop]=r}}return t}(t)},t.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},t.isBuffer=function(e){return null!==e&&void 0!==e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))}},function(e,t,n){"use strict";var r=String.prototype.replace,o=/%20/g;e.exports={default:"RFC3986",formatters:{RFC1738:function(e){return r.call(e,o,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},function(e,t,n){var r=n(89),o=n(80),i=n(337),u=n(3);e.exports=function(e,t){return(u(e)?r:i)(e,o(t,3))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.XUserTokenHeader="X-UserToken"},function(e,t,n){var r=n(152),o=n(82),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var u=e[t];i.call(e,t)&&o(u,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(153);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var r=n(18),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){var r=n(124),o=n(344),i=n(42);e.exports=function(e){return i(e)?r(e,!0):o(e)}},function(e,t,n){var r=n(85),o=n(156),i=n(86),u=n(140),a=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,i(e)),e=o(e);return t}:u;e.exports=a},function(e,t,n){var r=n(129)(Object.getPrototypeOf,Object);e.exports=r},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(157),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var i=arguments,u=-1,a=o(i.length-t,0),c=Array(a);++u<a;)c[u]=i[t+u];u=-1;for(var s=Array(t+1);++u<t;)s[u]=i[u];return s[t]=n(c),r(e,this,s)}}},function(e,t,n){var r=n(368),o=n(370)(r);e.exports=o},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,u,a){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,u,a],f=0;(c=new Error(t.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(t,n(74))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(35),o=u(n(69)),i=u(n(50));function u(e){return e&&e.__esModule?e:{default:e}}var a=function(e){return e};t.default=function(e){(0,i.default)(e);var t=r.FLOWOBJECT_API_PATH+"/"+r.OUTPUTS+"/"+e;return(0,o.default)(t,"GET",{transform:a})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){var t=[],n=0;return{subscribe:function(e,r){var o=n++;return t.push({event:e,callback:r,id:o}),o},unsubscribe:function(e){for(var n=0;n<t.length;n++)e===t[n].id&&t.splice(n,1)},publish:function(e,t){for(var n=this._getSubscriptions(e),r=0;r<n.length;r++)n[r].callback.apply(null,t)},getEvents:function(){return e},_getSubscriptions:function(e){for(var n=[],r=0;r<t.length;r++)t[r].event===e&&n.push(t[r]);return n}}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=p(n(163)),o=p(n(8)),i=function(e){if(e&&e.__esModule)return e;var t=d();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(28)),u=p(n(165)),a=p(n(166)),c=p(n(390)),s=n(94),f=p(n(391)),l=p(n(392));function d(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return d=function(){return e},e}function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new c.default,n=!1,d=!1,p=new r.default({CONNECTION_INITIALIZED:"connection.initialized",CONNECTION_OPENED:"connection.opened",CONNECTION_CLOSED:"connection.closed",CONNECTION_BROKEN:"connection.broken",SESSION_LOGGED_IN:"session.logged.in",SESSION_LOGGED_OUT:"session.logged.out",SESSION_INVALIDATED:"session.invalidated",SESSION_REESTABLISHED:"session.reestablished"}),h={SESSION_LOGGED_IN:"session.logged.in",SESSION_LOGGED_OUT:"session.logged.out",SESSION_INVALIDATED:"session.invalidated"},v="closed",g={},b=new o.default("amb.ServerConnection");!function(){e.addListener("/meta/handshake",this,M),e.addListener("/meta/connect",this,H),e.addListener("/meta/subscribe",this,D),e.addListener("/meta/unsubscribe",this,D)}();var y=h.SESSION_INVALIDATED,m=null,_="true"===i.default.loginWindow,x=null,w={UNKNOWN_CLIENT:"402::Unknown client"},O=!1,j={},T=!1,S=new u.default(e,j),C=!1,E="glide.amb.session.logout.overlay.style",A="glide.session.status",k="session.touch.http",P="amb.ServerConnection.reestablish.session",L=e.getExtension(i.TOKEN_MANAGEMENT_EXTENSION),I=null;function M(e){var t=N(e,E);t&&(i.default.overlayStyle=t),y=N(e,A),function(e){if(e.ext){var t=e.ext.subscribeCommandsFlow;if(t){var n=i.default.subscribeCommandsFlow;if(i.default.subscribeCommandsFlow.enable=function(e,t){var n=t;return(0,s.isNil)(e)||(n=!!e),n}(t.enable,n.enable),i.default.subscribeCommandsFlow.enable){i.default.subscribeCommandsFlow.retries=B(t.retries,n.retries),i.default.subscribeCommandsFlow.maxInflight=B(t.maxInflight,n.maxInflight),i.default.subscribeCommandsFlow.maxWait=B(t.maxWait,n.maxWait);var r=t.retryDelay;if(r){var o=i.default.subscribeCommandsFlow.retryDelay;i.default.subscribeCommandsFlow.retryDelay.min=B(r.min,o.min),i.default.subscribeCommandsFlow.retryDelay.max=B(r.max,o.max),i.default.subscribeCommandsFlow.retryDelay.increaseFactor=B(r.increaseFactor,o.increaseFactor)}}i.default.subscribeCommandsFlow.enable&&(b.addInfoMessage("_initializeSubscriptionCommandSender: SubscriptionCommandSender is enabled"),null!=L&&L.updateTokenCount(i.default.subscribeCommandsFlow.maxInflight),I&&I.stop(),I=new l.default(new f.default(1e4),L))}}}(e),setTimeout(function(){e.successful&&z()},0)}function N(e,t){if((0,s.isObject)(e.ext))return e.ext[t]}function F(t,n){if(t in g)return g[t];var r=new a.default(e,t,C,n);return g[t]=r,r}function R(e){delete g[e]}function D(t){if(t.ext){!1===t.ext["glide.amb.active"]&&j.disconnect();var n=N(t,"glide.amb.client.log.level");n&&(i.default.logLevel=n,e.setLogLevel(i.default.logLevel))}}function B(e,t){var n=Math.floor(parseInt(e));return(isNaN(n)||n<0)&&(n=t),n}function U(){for(var e in b.debug("Resubscribing to all!"),g){var t=g[e];t&&t.resubscribeToCometD()}}function q(){for(var e in b.debug("Unsubscribing from all!"),g){var t=g[e];t&&t.unsubscribeFromCometD()}}function H(t){if(D(t),d)setTimeout(function(){n=!1,b.debug("Connection closed"),v="closed",X(p.getEvents().CONNECTION_CLOSED)},0);else{var r=N(t,k);i.WEBSOCKET_TYPE_NAME===e.getTransport().getType()&&!0===r&&j._touchHttpSession();var o=t.error;o&&(x=o),function(e){var t=N(e,A);t&&t!==y&&(O=!0===N(e,"glide.amb.login.window.override"),V(t))}(t);var u=n;n=!0===t.successful,!u&&n?W():u&&!n&&(b.addErrorMessage("Connection broken"),v="broken",T=!0,X(p.getEvents().CONNECTION_BROKEN),I&&(I.stop(),I=null))}}function z(){b.debug("Connection initialized"),C=!0,v="initialized",X(p.getEvents().CONNECTION_INITIALIZED)}function W(){b.debug("Connection opened"),T?j.getLastError()===j.getErrorMessages().UNKNOWN_CLIENT&&(j.setLastError(null),j._sendSessionSetupRequest(function(e){var t=e.status;200===t&&(T=!1,S.initialize(G))})):S.initialize(G)}function G(){U(),v="opened",X(p.getEvents().CONNECTION_OPENED)}function V(e){b.debug("session.status - "+e),function(e){return(y===h.SESSION_LOGGED_IN||y===h.SESSION_LOGGED_OUT)&&e===h.SESSION_INVALIDATED}(e)?(b.debug("INVALIDATED event fire!"),q(),X(p.getEvents().SESSION_INVALIDATED)):function(e){return y===h.SESSION_LOGGED_IN&&e===h.SESSION_LOGGED_OUT}(e)?(b.debug("LOGGED_OUT event fire!"),q(),X(p.getEvents().SESSION_LOGGED_OUT),_&&!O&&j.loginShow()):function(e){return y===h.SESSION_INVALIDATED&&e===h.SESSION_LOGGED_OUT}(e)?(b.debug("REESTABLISHED event fire!"),U(),X(p.getEvents().SESSION_REESTABLISHED)):function(e){return(y===h.SESSION_INVALIDATED||y===h.SESSION_LOGGED_OUT)&&e===h.SESSION_LOGGED_IN}(e)&&(b.debug("LOGGED_IN event fire!"),U(),X(p.getEvents().SESSION_LOGGED_IN),j.loginHide()),y=e}function X(e){try{p.publish(e)}catch(t){b.addErrorMessage("error publishing '"+e+"' - "+t)}}return j.connect=function(){n?b.debug(">>> connection exists, request satisfied"):(b.debug("Connecting to glide amb server -> "+i.default.servletURI),e.configure({url:j.getURL(i.default.servletPath),logLevel:i.default.logLevel,connectTimeout:i.default.wsConnectTimeout}),e.handshake(),t.on(P,function(){j._reestablishSession(!1)}))},j.reload=function(){e.reload()},j.abort=function(){e.getTransport().abort()},j.disconnect=function(){b.debug("Disconnecting from glide amb server.."),d=!0,e.disconnect()},j.getURL=function(e){return window.location.protocol+"//"+window.location.host+"/"+e},j.unsubscribeAll=function(){q()},j.resubscribeAll=function(){U()},j.removeChannel=function(e){R(e)},j.getEvents=function(){return p.getEvents()},j.getConnectionState=function(){return v},j.getLastError=function(){return x},j.setLastError=function(e){x=e},j.getErrorMessages=function(){return w},j.isLoggedIn=function(){return y===h.SESSION_LOGGED_IN},j.isSessionActive=function(){return y!==h.SESSION_INVALIDATED},j.getChannelRedirect=function(){return S},j.getChannel=function(e,t){return F(e,t)},j.getChannels=function(){return g},j.getState=function(){return v},j.getLoginWindowOverlayStyle=function(){return i.default.overlayStyle},j.loginShow=function(){b.debug("Show login window");var e='<iframe src="/amb_login.do" frameborder="0" height="400px" width="405px" scrolling="no"></iframe>',t='<div id="amb_disconnect_modal" tabindex="-1" aria-hidden="true" class="modal" role="dialog" style="'.concat(i.default.overlayStyle,'">\n\t\t\t\t<div class="modal-dialog small-modal" style="width:450px">\n\t\t\t\t   <div class="modal-content">\n\t\t\t\t\t  <header class="modal-header">\n\t\t\t\t\t\t <h4 id="small_modal1_title" class="modal-title">Login</h4>\n\t\t\t\t\t  </header>\n\t\t\t\t\t  <div class="modal-body">\n\t\t\t\t\t  </div>\n\t\t\t\t   </div>\n\t\t\t\t</div>\n\t\t\t</div>');try{var n=new GlideModal("amb_disconnect_modal");n.renderWithContent?(n.template=t,n.renderWithContent(e)):(n.setBody(e),n.render()),m=n}catch(e){b.debug(e)}},j.loginHide=function(){m&&(m.destroy(),m=null)},j.loginComplete=function(){j.reestablishSession()},j.reestablishSession=function(){j._reestablishSession(!0)},j.subscribeToEvent=function(e,t){return p.getEvents().CONNECTION_OPENED===e&&n&&t(),p.subscribe(e,t)},j.unsubscribeFromEvent=function(e){p.unsubscribe(e)},j.isLoginWindowEnabled=function(){return _},j.setLoginWindowEnabled=function(e){_=e},j.isLoginWindowOverride=function(){return O},j.getSubscriptionCommandSender=function(){return I},j._metaConnect=H,j._metaHandshake=M,j._sendSessionSetupRequest=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=function(){b.debug("sending /amb_session_setup.do!");var t=new XMLHttpRequest;return t.open("POST","/amb_session_setup.do",!0),t.setRequestHeader("Content-type","application/json;charset=UTF-8"),t.setRequestHeader("X-UserToken",window.g_ck),t.setRequestHeader("X-CometD_SessionID",e.getClientId()),t}();n.onload=function(){return t(n)},n.send()},j._onChannelRedirectSubscriptionComplete=G,j._getChannel=F,j._removeChannel=R,j._connectionInitialized=z,j._connectionOpened=W,j._reestablishSession=function(e){j._sendSessionSetupRequest(function(e){var t=e.response;t&&V(JSON.parse(t)["glide.session.status"])}),e&&t.emit(P,P)},j._touchHttpSession=function(){var e=new XMLHttpRequest;e.open("POST","/amb",!0),e.setRequestHeader("Content-type","application/json"),e.send()},j};t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(8)),o=i(n(93));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n,i=e,u=new r.default("amb.ChannelRedirect");function a(e){u.debug("_onAdvice:"+e.data.clientId);var n=t.getChannel(e.data.fromChannel),r=t.getChannel(e.data.toChannel);n&&r?(function(e,t){for(var n=e.getChannelListeners(),r=0;r<n.length;r++)n[r].setNewChannel(t)}(n,r),u.debug("published channel switch event, fromChannel:"+n.getName()+", toChannel:"+r.getName())):u.debug("Could not redirect from "+e.data.fromChannel+" to "+e.data.toChannel)}return{initialize:function(e){var r="/sn/meta/channel_redirect/"+i.getClientId(),c=t.getChannel(r);n&&c===n?n.subscribeToCometD():(n&&t.removeChannel(n.getName()),n=c,new o.default(n,t,e).subscribe(a)),u.debug("ChannelRedirect initialized: "+r)},_onAdvice:a}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(8)),o=n(94),i=u(n(167));function u(e){return e&&e.__esModule?e:{default:e}}var a=function(e,t,n){var u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){return{}},a=null,c=null,s=[],f=[],l=new r.default("amb.Channel"),d=0,p=n;function h(){return(0,i.default)().getServerConnection().getSubscriptionCommandSender()}return{subscribe:function(e){if(e.getCallback()){for(var n=0;n<s.length;n++)if(s[n]===e)return l.debug("Channel listener already in the list"),e.getID();s.push(e);var r=e.getSubscriptionCallback();if(r&&(c?r(c):f.push(r)),!a&&p)try{this.subscribeToCometD()}catch(e){return void l.addErrorMessage(e)}return++d}l.addErrorMessage("Cannot subscribe to channel: "+t+", callback not provided")},resubscribe:function(){a=null;for(var e=0;e<s.length;e++)s[e].resubscribe()},_handleResponse:function(e){for(var t=0;t<s.length;t++)s[t].getCallback()(e)},unsubscribe:function(n){if(n){for(var r=0;r<s.length;r++)if(s[r].getID()===n.getID()){s.splice(r,1);break}s.length<1&&a&&!function(){var t=e.getStatus();return"disconnecting"===t||"disconnected"===t}()&&this.unsubscribeFromCometD()}else l.addErrorMessage("Cannot unsubscribe from channel: "+t+", listener argument does not exist")},publish:function(n){e.publish(t,n)},subscribeToCometD:function(){l.debug("subscribeToCometD channelName : "+t+", subscription : "+a),h()?h().subscribeToChannel(this):this._subscribeToCometD(this.subscriptionCallback)},_subscribeToCometD:function(n){l.debug("_subscribeToCometD channelName : "+t);var r=u();if((0,o.isNil)(r)||(0,o.isEmptyObject)(r))a=e.subscribe(t,this._handleResponse.bind(this),n);else{var i={subscribeOptions:r};a=e.subscribe(t,this._handleResponse.bind(this),i,n)}l.debug("Successfully subscribed to channel: "+t+", Subscribe options: "+r)},subscriptionCallback:function(e){l.debug("Cometd subscription callback completed for channel: "+t),l.debug("Listener callback queue size: "+f.length),c=e,f.map(function(e){e(c)}),f=[]},unsubscribeFromCometD:function(){l.debug("unsubscribeFromCometD  from : "+t+", subscription : "+a),null!==a&&(h()?h().unsubscribeToChannel(this):this._unsubscribeFromCometD())},_unsubscribeFromCometD:function(){l.debug("_unsubscribeFromCometD  from : "+t+", subscription : "+a),null!==a&&(e.unsubscribe(a),a=null,c=null,l.debug("Successfully unsubscribed from channel: "+t))},resubscribeToCometD:function(){l.debug("Resubscribe to "+t),h()?h().subscribeToChannel(this):this._subscribeToCometD(this.subscriptionCallback)},getSubscribeOptionsCallback:function(){return u},getName:function(){return t},getChannelListeners:function(){return s},getListenerCallbackQueue:function(){return f},setSubscriptionCallbackResponse:function(e){c=e}}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(168)),o=u(n(388)),i=u(n(389));function u(e){return e&&e.__esModule?e:{default:e}}function a(e){return e.MSInputMethodContext&&e.document.documentMode}function c(e,t){if(void 0!==e.getClientWindow&&e.getClientWindow()===t)return e;var n=function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e);return n.getChannel=function(n,r,o){return e.getChannel(n,r,o||t)},n.getRecordWatcherChannel=function(n,r,o,i,u){return e.getRecordWatcherChannel(n,r,o,i,u||t)},n.subscribeToEvent=function(n,r,o){return e.subscribeToEvent(n,r,o||t)},n.unsubscribeFromEvent=function(n,r){return e.unsubscribeFromEvent(n,r||t)},n.getClientWindow=function(){return t},n}var s=function(){var e=function(e){try{if(!a(e))for(;e!==e.parent&&!e.g_ambClient;)e=e.parent;if(e.g_ambClient)return e.g_ambClient}catch(e){console.log("AMB getClient() tried to access parent from an iFrame. Caught error: "+e)}return null}(window);e||function(e){var t=window.self;t.g_ambClient=e,t.addEventListener("unload",function(){t.g_ambClient.disconnect()}),"complete"===(t.document?t.document.readyState:null)?r():t.addEventListener("load",r),setTimeout(r,1e4);var n=!1;function r(){n||(n=!0,t.g_ambClient.connect())}}(e=c(function(e){return function(){var t=new r.default,n=function(){var e=[];function t(e,t,r){if(e&&r){var o=n(e);if(o)for(var i=o.subscriptions,u=i.length-1;u>=0;u--)i[u].id===t&&i[u].callback===r&&i.splice(u,1)}}function n(t){for(var n=0,r=e.length;n<r;n++)if(e[n].window===t)return e[n];return null}function r(t){var n={window:t,onUnload:function(){n.unloading=!0;for(var t,r=n.subscriptions;t=r.pop();)t.unsubscribe();!function(t){for(var n=0,r=e.length;n<r;n++)if(e[n].window===t.window){e.splice(n,1);break}t.subscriptions=[],t.window.removeEventListener("unload",t.onUnload),t.onUnload=null,t.window=null}(n)},unloading:!1,subscriptions:[]};return t.addEventListener("unload",n.onUnload),e.push(n),n}return{add:function(e,o,i,u){if(e&&i&&u){t(e,o,i);var a=n(e);a||(a=r(e)),a.unloading||a.subscriptions.push({id:o,callback:i,unsubscribe:u})}},remove:t}}(),u=t.getServerConnection();return e&&u.setLoginWindowEnabled(!1),{getServerConnection:function(){return u},connect:function(){t.connect()},abort:function(){t.abort()},disconnect:function(){t.disconnect()},getConnectionState:function(){return t.getConnectionState()},getState:function(){return t.getConnectionState()},getClientId:function(){return t.getClientId()},getChannel:function(e,r,o){var i=t.getChannel(e,r),a=i.subscribe,c=i.unsubscribe;return o=o||window,i.subscribe=function(r){return n.add(o,i,r,function(){i.unsubscribe(r)}),o.addEventListener("unload",function(){t.removeChannel(e)}),a.call(i,r),i},i.unsubscribe=function(r){n.remove(o,i,r);var a=c.call(i,r);return 0===u.getChannel(e).getChannelListeners().length&&t.removeChannel(e),a},i},getChannel0:function(e,n){return t.getChannel(e,n)},getRecordWatcherChannel:function(e,t,n,r,u){var a=o.default.stringify(i.default.parse(t)).replace(/=/g,"-");return n=n||"default",this.getChannel("/rw/"+n+"/"+e+"/"+a,r,u)},registerExtension:function(e,n){t.registerExtension(e,n)},unregisterExtension:function(e){t.unregisterExtension(e)},batch:function(e){t.batch(e)},subscribeToEvent:function(e,r,o){o=o||window;var i=t.subscribeToEvent(e,r);return n.add(o,i,!0,function(){t.unsubscribeFromEvent(i)}),i},unsubscribeFromEvent:function(e,r){r=r||window,n.remove(r,e,!0),t.unsubscribeFromEvent(e)},isLoggedIn:function(){return t.isLoggedIn()},getConnectionEvents:function(){return t.getConnectionEvents()},getEvents:function(){return t.getConnectionEvents()},reestablishSession:function(){t.reestablishSession()},loginComplete:function(){t.loginComplete()},getChannels:function(){return t.getChannels()},extendSession:function(){return t.extendSession()},getTokenManagementExtension:function(){return t.getTokenManagementExtension()}}}()}(a(window)&&null!==window.frameElement),window));return c(e,window)};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=l(n(384)),o=l(n(164)),i=l(n(8)),u=l(n(93)),a=l(n(385)),c=n(28),s=l(n(386)),f=l(n(387));function l(e){return e&&e.__esModule?e:{default:e}}var d=function(){var e=new r.default.CometD;e.registerTransport(c.WEBSOCKET_TYPE_NAME,new r.default.WebSocketTransport,0),e.registerTransport("long-polling",new r.default.LongPollingTransport,1),e.unregisterTransport("callback-polling");var t=new a.default;e.registerExtension("graphQLSubscription",t);var n=new s.default;e.registerExtension("sessionExtension",n);var l=new f.default;e.registerExtension(c.TOKEN_MANAGEMENT_EXTENSION,l);var d=new o.default(e),p=new i.default("amb.MessageClient"),h=!1;return{getServerConnection:function(){return d},isLoggedIn:function(){return d.isLoggedIn()},loginComplete:function(){d.loginComplete()},reestablishSession:function(){d.reestablishSession()},connect:function(){h?p.addInfoMessage(">>> connection exists, request satisfied"):(h=!0,d.connect())},reload:function(){h=!1,d.reload()},abort:function(){h=!1,d.abort()},disconnect:function(){h=!1,d.disconnect()},isConnected:function(){return h},getConnectionEvents:function(){return d.getEvents()},subscribeToEvent:function(e,t){return d.subscribeToEvent(e,t)},unsubscribeFromEvent:function(e){d.unsubscribeFromEvent(e)},getConnectionState:function(){return d.getConnectionState()},getClientId:function(){return e.getClientId()},getChannel:function(e,n){var r=n||{},o=r.subscriptionCallback,i=r.serializedGraphQLSubscription,a=r.subscribeOptionsCallback,c=d.getChannel(e,a);return t.isGraphQLChannel(e)&&(i?t.addGraphQLChannel(e,i):p.addErrorMessage("Serialized subscription not present for GraphQL channel "+e)),new u.default(c,d,o)},removeChannel:function(e){d.removeChannel(e),t.isGraphQLChannel(e)&&t.removeGraphQLChannel(e)},getChannels:function(){return d.getChannels()},extendSession:function(){n.extendSession()},getTokenManagementExtension:function(){return l},registerExtension:function(t,n){e.registerExtension(t,n)},unregisterExtension:function(t){e.unregisterExtension(t)},batch:function(t){e.batch(t)}}};t.default=d},function(e,t,n){!function(t,n){e.exports=n()}(0,function(){var e=e||function(e,t){var n=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),r={},o=r.lib={},i=o.Base={extend:function(e){var t=n(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},u=o.WordArray=i.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=void 0!=t?t:4*e.length},toString:function(e){return(e||c).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var u=n[i>>>2]>>>24-i%4*8&255;t[r+i>>>2]|=u<<24-(r+i)%4*8}else for(i=0;i<o;i+=4)t[r+i>>>2]=n[i>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=i.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,r=[],o=function(t){t=t;var n=987654321,r=4294967295;return function(){var o=((n=36969*(65535&n)+(n>>16)&r)<<16)+(t=18e3*(65535&t)+(t>>16)&r)&r;return o/=4294967296,(o+=.5)*(e.random()>.5?1:-1)}},i=0;i<t;i+=4){var a=o(4294967296*(n||e.random()));n=987654071*a(),r.push(4294967296*a()|0)}return new u.init(r,t)}}),a=r.enc={},c=a.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new u.init(n,t/2)}},s=a.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new u.init(n,t)}},f=a.Utf8={stringify:function(e){try{return decodeURIComponent(escape(s.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return s.parse(unescape(encodeURIComponent(e)))}},l=o.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=f.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,r=n.words,o=n.sigBytes,i=this.blockSize,a=o/(4*i),c=(a=t?e.ceil(a):e.max((0|a)-this._minBufferSize,0))*i,s=e.min(4*c,o);if(c){for(var f=0;f<c;f+=i)this._doProcessBlock(r,f);var l=r.splice(0,c);n.sigBytes-=s}return new u.init(l,s)},clone:function(){var e=i.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),d=(o.Hasher=l.extend({cfg:i.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){l.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new d.HMAC.init(e,n).finalize(t)}}}),r.algo={});return r}(Math);return e})},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(397),o=n(398);e.exports=function(e){return null==e?[]:r(e,o(e))}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t,n){var r=n(401),o=n(27),i=Object.prototype,u=i.hasOwnProperty,a=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(e){return o(e)&&u.call(e,"callee")&&!a.call(e,"callee")};e.exports=c},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?n:t)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(176),o=n(95);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(25),o=n(96),i="[object AsyncFunction]",u="[object Function]",a="[object GeneratorFunction]",c="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==u||t==a||t==i||t==c}},function(e,t,n){var r=n(423),o=n(427);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){n(179),n(200),n(224),e.exports=n(228)},function(e,t,n){n(180),n(98),n(189),n(191),n(198),n(199),e.exports=n(9).Promise},function(e,t,n){"use strict";var r=n(56),o={};o[n(1)("toStringTag")]="z",o+""!="[object z]"&&n(29)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(e,t,n){e.exports=!n(31)&&!n(21)(function(){return 7!=Object.defineProperty(n(59)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(13);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(32),o=n(61);e.exports=function(e){return function(t,n){var i,u,a=String(o(t)),c=r(n),s=a.length;return c<0||c>=s?e?"":void 0:(i=a.charCodeAt(c))<55296||i>56319||c+1===s||(u=a.charCodeAt(c+1))<56320||u>57343?e?a.charAt(c):i:e?a.slice(c,c+2):u-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(185),o=n(60),i=n(65),u={};n(20)(u,n(1)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(u,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(12),o=n(186),i=n(101),u=n(63)("IE_PROTO"),a=function(){},c=function(){var e,t=n(59)("iframe"),r=i.length;for(t.style.display="none",n(64).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=r(e),n=new a,a.prototype=null,n[u]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(30),o=n(12),i=n(100);e.exports=n(31)?Object.defineProperties:function(e,t){o(e);for(var n,u=i(t),a=u.length,c=0;a>c;)r.f(e,n=u[c++],t[n]);return e}},function(e,t,n){var r=n(38),o=n(34),i=n(62)(!1),u=n(63)("IE_PROTO");e.exports=function(e,t){var n,a=o(e),c=0,s=[];for(n in a)n!=u&&r(a,n)&&s.push(n);for(;t.length>c;)r(a,n=t[c++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){var r=n(38),o=n(10),i=n(63)("IE_PROTO"),u=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,n){for(var r=n(102),o=n(100),i=n(29),u=n(2),a=n(20),c=n(33),s=n(1),f=s("iterator"),l=s("toStringTag"),d=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),v=0;v<h.length;v++){var g,b=h[v],y=p[b],m=u[b],_=m&&m.prototype;if(_&&(_[f]||a(_,f,d),_[l]||a(_,l,b),c[b]=d,y))for(g in r)_[g]||i(_,g,r[g],!0)}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r,o,i,u,a=n(57),c=n(2),s=n(14),f=n(56),l=n(0),d=n(13),p=n(15),h=n(192),v=n(193),g=n(106),b=n(107).set,y=n(195)(),m=n(66),_=n(108),x=n(196),w=n(109),O=c.TypeError,j=c.process,T=j&&j.versions,S=T&&T.v8||"",C=c.Promise,E="process"==f(j),A=function(){},k=o=m.f,P=!!function(){try{var e=C.resolve(1),t=(e.constructor={})[n(1)("species")]=function(e){e(A,A)};return(E||"function"==typeof PromiseRejectionEvent)&&e.then(A)instanceof t&&0!==S.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(e){}}(),L=function(e){var t;return!(!d(e)||"function"!=typeof(t=e.then))&&t},I=function(e,t){if(!e._n){e._n=!0;var n=e._c;y(function(){for(var r=e._v,o=1==e._s,i=0,u=function(t){var n,i,u,a=o?t.ok:t.fail,c=t.resolve,s=t.reject,f=t.domain;try{a?(o||(2==e._h&&F(e),e._h=1),!0===a?n=r:(f&&f.enter(),n=a(r),f&&(f.exit(),u=!0)),n===t.promise?s(O("Promise-chain cycle")):(i=L(n))?i.call(n,c,s):c(n)):s(r)}catch(e){f&&!u&&f.exit(),s(e)}};n.length>i;)u(n[i++]);e._c=[],e._n=!1,t&&!e._h&&M(e)})}},M=function(e){b.call(c,function(){var t,n,r,o=e._v,i=N(e);if(i&&(t=_(function(){E?j.emit("unhandledRejection",o,e):(n=c.onunhandledrejection)?n({promise:e,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=E||N(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},N=function(e){return 1!==e._h&&0===(e._a||e._c).length},F=function(e){b.call(c,function(){var t;E?j.emit("rejectionHandled",e):(t=c.onrejectionhandled)&&t({promise:e,reason:e._v})})},R=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),I(t,!0))},D=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw O("Promise can't be resolved itself");(t=L(e))?y(function(){var r={_w:n,_d:!1};try{t.call(e,s(D,r,1),s(R,r,1))}catch(e){R.call(r,e)}}):(n._v=e,n._s=1,I(n,!1))}catch(e){R.call({_w:n,_d:!1},e)}}};P||(C=function(e){h(this,C,"Promise","_h"),p(e),r.call(this);try{e(s(D,this,1),s(R,this,1))}catch(e){R.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(197)(C.prototype,{then:function(e,t){var n=k(g(this,C));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=E?j.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&I(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=s(D,e,1),this.reject=s(R,e,1)},m.f=k=function(e){return e===C||e===u?new i(e):o(e)}),l(l.G+l.W+l.F*!P,{Promise:C}),n(65)(C,"Promise"),n(110)("Promise"),u=n(9).Promise,l(l.S+l.F*!P,"Promise",{reject:function(e){var t=k(this);return(0,t.reject)(e),t.promise}}),l(l.S+l.F*(a||!P),"Promise",{resolve:function(e){return w(a&&this===u?C:this,e)}}),l(l.S+l.F*!(P&&n(111)(function(e){C.all(e).catch(A)})),"Promise",{all:function(e){var t=this,n=k(t),r=n.resolve,o=n.reject,i=_(function(){var n=[],i=0,u=1;v(e,!1,function(e){var a=i++,c=!1;n.push(void 0),u++,t.resolve(e).then(function(e){c||(c=!0,n[a]=e,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=k(t),r=n.reject,o=_(function(){v(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(14),o=n(103),i=n(104),u=n(12),a=n(4),c=n(105),s={},f={};(t=e.exports=function(e,t,n,l,d){var p,h,v,g,b=d?function(){return e}:c(e),y=r(n,l,t?2:1),m=0;if("function"!=typeof b)throw TypeError(e+" is not iterable!");if(i(b)){for(p=a(e.length);p>m;m++)if((g=t?y(u(h=e[m])[0],h[1]):y(e[m]))===s||g===f)return g}else for(v=b.call(e);!(h=v.next()).done;)if((g=o(v,y,h.value,t))===s||g===f)return g}).BREAK=s,t.RETURN=f},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(2),o=n(107).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,c="process"==n(19)(u);e.exports=function(){var e,t,n,s=function(){var r,o;for(c&&(r=u.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(c)n=function(){u.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var f=a.resolve(void 0);n=function(){f.then(s)}}else n=function(){o.call(r,s)};else{var l=!0,d=document.createTextNode("");new i(s).observe(d,{characterData:!0}),n=function(){d.data=l=!l}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){var r=n(2).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){var r=n(29);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){"use strict";var r=n(0),o=n(9),i=n(2),u=n(106),a=n(109);r(r.P+r.R,"Promise",{finally:function(e){var t=u(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return a(t,e()).then(function(){return n})}:e,n?function(n){return a(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){"use strict";var r=n(0),o=n(66),i=n(108);r(r.S,"Promise",{try:function(e){var t=o.f(this),n=i(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){n(98),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(219),n(221),n(222),n(223),n(102),e.exports=n(9).Array},function(e,t,n){var r=n(0);r(r.S,"Array",{isArray:n(67)})},function(e,t,n){"use strict";var r=n(14),o=n(0),i=n(10),u=n(103),a=n(104),c=n(4),s=n(112),f=n(105);o(o.S+o.F*!n(111)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,l,d=i(e),p="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,g=void 0!==v,b=0,y=f(d);if(g&&(v=r(v,h>2?arguments[2]:void 0,2)),void 0==y||p==Array&&a(y))for(n=new p(t=c(d.length));t>b;b++)s(n,b,g?v(d[b],b):d[b]);else for(l=y.call(d),n=new p;!(o=l.next()).done;b++)s(n,b,g?u(l,v,[o.value,b],!0):o.value);return n.length=b,n}})},function(e,t,n){"use strict";var r=n(0),o=n(112);r(r.S+r.F*n(21)(function(){function e(){}return!(Array.of.call(e)instanceof e)}),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(0),o=n(34),i=[].join;r(r.P+r.F*(n(39)!=Object||!n(6)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(0),o=n(64),i=n(19),u=n(40),a=n(4),c=[].slice;r(r.P+r.F*n(21)(function(){o&&c.call(o)}),"Array",{slice:function(e,t){var n=a(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return c.call(this,e,t);for(var o=u(e,n),s=u(t,n),f=a(s-o),l=new Array(f),d=0;d<f;d++)l[d]="String"==r?this.charAt(o+d):this[o+d];return l}})},function(e,t,n){"use strict";var r=n(0),o=n(15),i=n(10),u=n(21),a=[].sort,c=[1,2,3];r(r.P+r.F*(u(function(){c.sort(void 0)})||!u(function(){c.sort(null)})||!n(6)(a)),"Array",{sort:function(e){return void 0===e?a.call(i(this)):a.call(i(this),o(e))}})},function(e,t,n){"use strict";var r=n(0),o=n(16)(0),i=n(6)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(13),o=n(67),i=n(1)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(0),o=n(16)(1);r(r.P+r.F*!n(6)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(16)(2);r(r.P+r.F*!n(6)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(16)(3);r(r.P+r.F*!n(6)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(16)(4);r(r.P+r.F*!n(6)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(113);r(r.P+r.F*!n(6)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(0),o=n(113);r(r.P+r.F*!n(6)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(0),o=n(62)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!n(6)(i)),"Array",{indexOf:function(e){return u?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(34),i=n(32),u=n(4),a=[].lastIndexOf,c=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!n(6)(a)),"Array",{lastIndexOf:function(e){if(c)return a.apply(this,arguments)||0;var t=o(this),n=u(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(0);r(r.P,"Array",{copyWithin:n(218)}),n(11)("copyWithin")},function(e,t,n){"use strict";var r=n(10),o=n(40),i=n(4);e.exports=[].copyWithin||function(e,t){var n=r(this),u=i(n.length),a=o(e,u),c=o(t,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:o(s,u))-c,u-a),l=1;for(c<a&&a<c+f&&(l=-1,c+=f-1,a+=f-1);f-- >0;)c in n?n[a]=n[c]:delete n[a],a+=l,c+=l;return n}},function(e,t,n){var r=n(0);r(r.P,"Array",{fill:n(220)}),n(11)("fill")},function(e,t,n){"use strict";var r=n(10),o=n(40),i=n(4);e.exports=function(e){for(var t=r(this),n=i(t.length),u=arguments.length,a=o(u>1?arguments[1]:void 0,n),c=u>2?arguments[2]:void 0,s=void 0===c?n:o(c,n);s>a;)t[a++]=e;return t}},function(e,t,n){"use strict";var r=n(0),o=n(16)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(11)("find")},function(e,t,n){"use strict";var r=n(0),o=n(16)(6),i="findIndex",u=!0;i in[]&&Array(1)[i](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(11)(i)},function(e,t,n){n(110)("Array")},function(e,t,n){n(225),n(226),n(227),e.exports=n(9).Array},function(e,t,n){"use strict";var r=n(0),o=n(62)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(11)("includes")},function(e,t,n){"use strict";var r=n(0),o=n(114),i=n(10),u=n(4),a=n(15),c=n(68);r(r.P,"Array",{flatMap:function(e){var t,n,r=i(this);return a(e),t=u(r.length),n=c(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(11)("flatMap")},function(e,t,n){"use strict";var r=n(0),o=n(114),i=n(10),u=n(4),a=n(32),c=n(68);r(r.P,"Array",{flatten:function(){var e=arguments[0],t=i(this),n=u(t.length),r=c(t,0);return o(r,t,t,n,0,void 0===e?1:a(e)),r}}),n(11)("flatten")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(229);Object.defineProperty(t,"startFlow",{enumerable:!0,get:function(){return r.startFlow}}),Object.defineProperty(t,"startSubflow",{enumerable:!0,get:function(){return r.startSubflow}}),Object.defineProperty(t,"startAction",{enumerable:!0,get:function(){return r.startAction}}),Object.defineProperty(t,"getExecution",{enumerable:!0,get:function(){return r.getExecution}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(230);Object.defineProperty(t,"startFlow",{enumerable:!0,get:function(){return r.startFlow}}),Object.defineProperty(t,"startSubflow",{enumerable:!0,get:function(){return r.startSubflow}}),Object.defineProperty(t,"startAction",{enumerable:!0,get:function(){return r.startAction}}),Object.defineProperty(t,"getExecution",{enumerable:!0,get:function(){return r.getExecution}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExecution=t.startAction=t.startSubflow=t.startFlow=void 0;var r=n(35),o=u(n(231)),i=u(n(115));function u(e){return e&&e.__esModule?e:{default:e}}t.startFlow=function(e,t){return(0,o.default)({type:r.FLOW_TYPES.FLOW,name:e,inputs:t})},t.startSubflow=function(e,t){return(0,o.default)({type:r.FLOW_TYPES.SUBFLOW,name:e,inputs:t})},t.startAction=function(e,t){return(0,o.default)({type:r.FLOW_TYPES.ACTION,name:e,inputs:t})},t.getExecution=function(e){return Promise.resolve((0,i.default)(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(35),o=a(n(115)),i=a(n(393)),u=a(n(69));function a(e){return e&&e.__esModule?e:{default:e}}var c=function(e){return(0,o.default)(e.execution_id)};t.default=function(e){(0,i.default)(e);var t=e.type,n=e.name,o=e.inputs,a=r.FLOWOBJECT_API_PATH+"/"+r.START+"/"+t,s={name:n,inputs:o};return(0,u.default)(a,"POST",{body:s,transform:c})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(35),o=u(n(69)),i=u(n(50));function u(e){return e&&e.__esModule?e:{default:e}}var a=function(e){return e.status};t.default=function(e){(0,i.default)(e);var t=r.FLOWOBJECT_API_PATH+"/"+r.STATUS+"/"+e;return(0,o.default)(t,"GET",{transform:a})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(234);Object.defineProperty(t,"snHttpFactory",{enumerable:!0,get:function(){return function(e){return e&&e.__esModule?e:{default:e}}(r).default}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){return e&&e.__esModule?e:{default:e}}(n(235)),i=n(121),u=n(363);var a=function(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.methods||["get","post","put","patch","delete","head"],o=t.maxConcurrent||2,a=t.queue||[],c=!1!==t.batching;t.xsrfToken?e.setXsrfToken(t.xsrfToken):console.warn("No XSRF token supplied in snHttp construction.  Setting an initial XSRF token (typically found on window.g_ck) is highly advised to avoid a 401 on initial request.");var s=(0,i.createHttpRequestBatcher)({sendRequest:b}),f=[];function l(){return f.length}function d(){f.length>0&&f.shift(),h()}function p(){return a.splice(0,o-l())}function h(){p().forEach(v)}function v(t){var n=t.config,r=t.deferredResolve,o=t.deferredReject,i=t.cancel;e.request(n).then(function(e){r(e)}).catch(function(e){o(e)}).then(d),function(e){f.push(e)}({config:n,cancel:i})}function g(){f.slice().forEach(function(e){(0,e.cancel)(),f.shift()})}function b(t,n,r){var o=void 0,i=void 0,u=new Promise(function(e,t){o=e,i=t}),c=r.source||e.getSource(),s=c.token;return function(e){a.push(e)}({config:Object.assign({},{url:t,method:n,cancelToken:s},r),deferredResolve:o,deferredReject:i,cancel:function(){return c.cancel("Request cancelled by user")}}),0===l()&&h(),u}function y(e,t,o){if(!t)throw new Error("Must supply method");if(!n.includes(t.toLowerCase()))throw new Error('Method "'+t+'" is not supported (supported methods are '+n+")");return(0,u.shouldBatch)(r({},o,{batching:c}))?function(e,t,n){return s.enqueueRequest(e,t,Object.assign({},n,{batch:!0}))}(e,t,r({},o,{batch:!0})):b(e,t,r({},o,{batch:!1}))}var m={get client(){return e},get queue(){return a},get interceptors(){return e.interceptors},cancelRequests:function(){g(),a.slice().forEach(function(e){e.deferredReject("Request cancelled by user"),a.shift()})},cancelInFlightRequests:g,request:y};return n.reduce(function(e,t){return r({},e,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return y(e,t,n)}))},m)}}(o.default);t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(236)),i=n(121),u=n(150),a=c(n(340));function c(e){return e&&e.__esModule?e:{default:e}}var s=function(){var e=o.default.create(),t=void 0;return e.interceptors.request.use(function(e){return r({},e,{headers:r({},e.headers,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},u.XUserTokenHeader,t))})}),e.interceptors.response.use(void 0,function(n){var r=n.response;return r&&401===r.status&&r.config?new Promise(function(o,i){var c=r.headers["x-usertoken-response"];if(!c||c===t)return i(n);t=c;var s=(0,a.default)(r.config);return s.headers[u.XUserTokenHeader]=c,o(e(s))}):Promise.reject(n)}),e.interceptors.request.use((0,i.createBatchRequestInterceptor)(t)),e.interceptors.response.use((0,i.createBatchResponseSuccessInterceptor)(),(0,i.createBatchResponseFailedInterceptor)()),e.getSource=function(){return o.default.CancelToken.source()},e.setXsrfToken=function(e){t=e},e}();t.default=s},function(e,t,n){e.exports=n(237)},function(e,t,n){"use strict";var r=n(5),o=n(116),i=n(239),u=n(70);function a(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var c=a(u);c.Axios=i,c.create=function(e){return a(r.merge(u,e))},c.Cancel=n(120),c.CancelToken=n(254),c.isCancel=n(119),c.all=function(e){return Promise.all(e)},c.spread=n(255),e.exports=c,e.exports.default=c},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(70),o=n(5),i=n(249),u=n(250);function a(e){this.defaults=e,this.interceptors={request:new i,response:new i}}a.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,this.defaults,{method:"get"},e)).method=e.method.toLowerCase();var t=[u,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(e){r=u}}();var c,s=[],f=!1,l=-1;function d(){f&&c&&(f=!1,c.length?s=c.concat(s):l=-1,s.length&&p())}function p(){if(!f){var e=a(d);f=!0;for(var t=s.length;t;){for(c=s,s=[];++l<t;)c&&c[l].run();l=-1,t=s.length}c=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||f||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(118);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(5);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var u=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)&&(t+="[]"),r.isArray(e)||(e=[e]),r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),u.push(o(t)+"="+o(e))}))}),i=u.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(5),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,u={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(u[t]&&o.indexOf(t)>=0)return;u[t]="set-cookie"===t?(u[t]?u[t]:[]).concat([n]):u[t]?u[t]+", "+n:n}}),u):u}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),u="",a=0,c=r;i.charAt(0|a)||(c="=",a%1);u+=c.charAt(63&t>>8-a%1*8)){if((n=i.charCodeAt(a+=.75))>255)throw new o;t=t<<8|n}return u}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,u){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===u&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(5);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(5),o=n(251),i=n(119),u=n(70),a=n(252),c=n(253);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.baseURL&&!a(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||u.adapter)(e).then(function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(120);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(257),i=n(71),u=f(n(263)),a=f(n(264)),c=f(n(130)),s=f(n(332));function f(e){return e&&e.__esModule?e:{default:e}}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.batchUrl,n=void 0===t?o.DEFAULT_BATCH_URL:t,f=e.batchMethod,l=void 0===f?o.DEFAULT_BATCH_METHOD:f,d=e.batchMax,p=void 0===d?o.DEFAULT_BATCH_MAX:d,h=e.batchInterval,v=void 0===h?o.DEFAULT_BATCH_INTERVAL:h,g=e.sendRequest;(0,u.default)(g,"createHttpRequestBatcher: options must contain 'sendRequest' function.");var b=[],y=new Map;function m(e){b.push(e),1===b.length&&setTimeout(function(){b.length&&w()},v),b.length===p&&w()}function _(e){var t=e.response||{},n=(e.config||{}).data||{};(0,a.default)(n.rest_requests,function(n){var o=n.id;void 0!==o&&y.has(o)&&((0,y.get(o).deferredReject)(r({},e,{response:{headers:t.headers,data:t.data,status:t.status,statusText:t.statusText}})),y.delete(o))})}function x(e){var t=e.data,n=void 0===t?{}:t,r=e.config,o=void 0===r?{}:r,i=n.serviced_requests,u=void 0===i?[]:i,c=n.unserviced_requests,s=void 0===c?[]:c;(0,a.default)(u,function(e){var t=e.id,n=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["id"]);if(void 0!==t&&y.has(t)){var r=y.get(t),i=r.deferredResolve,u=r.deferredReject;!function(e){return e>=200&&e<300}(e.status)?u({config:o,response:n}):i(n),y.delete(t)}}),(0,a.default)(s,function(e){m(y.get(e))})}function w(){for(var e=(0,i.createBatchId)(),t=[];b.length;){var r=b.shift();t.push(r.request),y.set(r.requestId,r)}g(n,l,{batch:!0,data:{batch_request_id:e,enforce_order:!1,rest_requests:t}}).then(x).catch(_)}return{get currentQueueSize(){return b.length},enqueueRequest:function(e,t,n){var o=(0,i.createBatchId)(),u=void 0,a=void 0,f=new Promise(function(e,t){u=e,a=t}),l=n.data,d=n.params,p=n.headers;return m({requestId:o,request:r({id:o,headers:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,c.default)(e,function(e,t,n){return e.push({name:n,value:t}),e},[])}(p),url:e,method:(0,s.default)(n.method||t)},l&&{body:l},d&&{params:d}),deferredReject:a,deferredResolve:u}),f}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.DEFAULT_BATCH_URL="/api/now/v1/batch",t.DEFAULT_BATCH_METHOD="post",t.DEFAULT_BATCH_MAX=10,t.DEFAULT_BATCH_INTERVAL=50},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return(0,r.default)()};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(259))},function(e,t,n){var r=n(260),o=n(122),i=0,u=4,a=36,c=Math.pow(a,u);function s(){return o((Math.random()*c<<0).toString(a),u)}function f(){return i=i<c?i:0,++i-1}function l(){return"c"+(new Date).getTime().toString(a)+o(f().toString(a),u)+r()+(s()+s())}l.slug=function(){var e=(new Date).getTime().toString(36),t=f().toString(36).slice(-4),n=r().slice(0,1)+r().slice(-1),o=s().slice(-2);return e.slice(-2)+t+n+o},l.fingerprint=r,e.exports=l},function(e,t,n){var r=n(122),o="object"==typeof window?window:self,i=Object.keys(o),u=r(((navigator.mimeTypes?navigator.mimeTypes.length:0)+navigator.userAgent.length).toString(36)+i.toString(36),4);e.exports=function(){return u}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return decodeURIComponent(atob(e).split("").map(function(e){return"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)}).join(""))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return btoa(encodeURIComponent(e).replace(/%([0-9A-F]{2})/g,function(e,t){return String.fromCharCode("0x"+t)}))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,u,a){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,u,a],f=0;(c=new Error(t.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){var r=n(123),o=n(72),i=n(277),u=n(3);e.exports=function(e,t){return(u(e)?r:o)(e,i(t))}},function(e,t,n){var r=n(266),o=n(36);e.exports=function(e,t){return e&&r(e,t,o)}},function(e,t,n){var r=n(267)();e.exports=r},function(e,t){e.exports=function(e){return function(t,n,r){for(var o=-1,i=Object(t),u=r(t),a=u.length;a--;){var c=u[e?a:++o];if(!1===n(i[c],c,i))break}return t}}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(22),o=n(17),i="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(23),o=Object.prototype,i=o.hasOwnProperty,u=o.toString,a=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),n=e[a];try{e[a]=void 0;var r=!0}catch(e){}var o=u.call(e);return r&&(t?e[a]=n:delete e[a]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(22),o=n(75),i=n(17),u={};u["[object Float32Array]"]=u["[object Float64Array]"]=u["[object Int8Array]"]=u["[object Int16Array]"]=u["[object Int32Array]"]=u["[object Uint8Array]"]=u["[object Uint8ClampedArray]"]=u["[object Uint16Array]"]=u["[object Uint32Array]"]=!0,u["[object Arguments]"]=u["[object Array]"]=u["[object ArrayBuffer]"]=u["[object Boolean]"]=u["[object DataView]"]=u["[object Date]"]=u["[object Error]"]=u["[object Function]"]=u["[object Map]"]=u["[object Number]"]=u["[object Object]"]=u["[object RegExp]"]=u["[object Set]"]=u["[object String]"]=u["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!u[r(e)]}},function(e,t,n){var r=n(77),o=n(275),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var r=n(129)(Object.keys,Object);e.exports=r},function(e,t,n){var r=n(42);e.exports=function(e,t){return function(n,o){if(null==n)return n;if(!r(n))return e(n,o);for(var i=n.length,u=t?i:-1,a=Object(n);(t?u--:++u<i)&&!1!==o(a[u],u,a););return n}}},function(e,t,n){var r=n(43);e.exports=function(e){return"function"==typeof e?e:r}},function(e,t,n){var r=n(279),o=n(318),i=n(143);e.exports=function(e){var t=o(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},function(e,t,n){var r=n(81),o=n(132),i=1,u=2;e.exports=function(e,t,n,a){var c=n.length,s=c,f=!a;if(null==e)return!s;for(e=Object(e);c--;){var l=n[c];if(f&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++c<s;){var d=(l=n[c])[0],p=e[d],h=l[1];if(f&&l[2]){if(void 0===p&&!(d in e))return!1}else{var v=new r;if(a)var g=a(p,h,d,e,t,v);if(!(void 0===g?o(h,p,i|u,a,v):g))return!1}}return!0}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(45),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():o.call(t,n,1),--this.size,0))}},function(e,t,n){var r=n(45);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(45);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(45);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(44);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(44),o=n(83),i=n(84),u=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!o||a.length<u-1)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(a)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(78),o=n(291),i=n(24),u=n(131),a=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,f=c.toString,l=s.hasOwnProperty,d=RegExp("^"+f.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?d:a).test(u(e))}},function(e,t,n){var r=n(292),o=function(){var e=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();e.exports=function(e){return!!o&&o in e}},function(e,t,n){var r=n(7)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(295),o=n(44),i=n(83);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(296),o=n(297),i=n(298),u=n(299),a=n(300);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,e.exports=c},function(e,t,n){var r=n(46);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(46),o="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(46),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(46),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t,n){var r=n(47);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(47);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(47);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(47);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(81),o=n(133),i=n(311),u=n(312),a=n(141),c=n(3),s=n(41),f=n(127),l=1,d="[object Arguments]",p="[object Array]",h="[object Object]",v=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,g,b,y){var m=c(e),_=c(t),x=m?p:a(e),w=_?p:a(t),O=(x=x==d?h:x)==h,j=(w=w==d?h:w)==h,T=x==w;if(T&&s(e)){if(!s(t))return!1;m=!0,O=!1}if(T&&!O)return y||(y=new r),m||f(e)?o(e,t,n,g,b,y):i(e,t,x,n,g,b,y);if(!(n&l)){var S=O&&v.call(e,"__wrapped__"),C=j&&v.call(t,"__wrapped__");if(S||C){var E=S?e.value():e,A=C?t.value():t;return y||(y=new r),b(E,A,n,g,y)}}return!!T&&(y||(y=new r),u(e,t,n,g,b,y))}},function(e,t,n){var r=n(84),o=n(308),i=n(309);function u(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}u.prototype.add=u.prototype.push=o,u.prototype.has=i,e.exports=u},function(e,t){var n="__lodash_hash_undefined__";e.exports=function(e){return this.__data__.set(e,n),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(23),o=n(135),i=n(82),u=n(133),a=n(136),c=n(137),s=1,f=2,l="[object Boolean]",d="[object Date]",p="[object Error]",h="[object Map]",v="[object Number]",g="[object RegExp]",b="[object Set]",y="[object String]",m="[object Symbol]",_="[object ArrayBuffer]",x="[object DataView]",w=r?r.prototype:void 0,O=w?w.valueOf:void 0;e.exports=function(e,t,n,r,w,j,T){switch(n){case x:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case _:return!(e.byteLength!=t.byteLength||!j(new o(e),new o(t)));case l:case d:case v:return i(+e,+t);case p:return e.name==t.name&&e.message==t.message;case g:case y:return e==t+"";case h:var S=a;case b:var C=r&s;if(S||(S=c),e.size!=t.size&&!C)return!1;var E=T.get(e);if(E)return E==t;r|=f,T.set(e,t);var A=u(S(e),S(t),r,w,j,T);return T.delete(e),A;case m:if(O)return O.call(e)==O.call(t)}return!1}},function(e,t,n){var r=n(138),o=1,i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,u,a,c){var s=n&o,f=r(e),l=f.length;if(l!=r(t).length&&!s)return!1;for(var d=l;d--;){var p=f[d];if(!(s?p in t:i.call(t,p)))return!1}var h=c.get(e);if(h&&c.get(t))return h==t;var v=!0;c.set(e,t),c.set(t,e);for(var g=s;++d<l;){var b=e[p=f[d]],y=t[p];if(u)var m=s?u(y,b,p,t,e,c):u(b,y,p,e,t,c);if(!(void 0===m?b===y||a(b,y,n,u,c):m)){v=!1;break}g||(g="constructor"==p)}if(v&&!g){var _=e.constructor,x=t.constructor;_!=x&&"constructor"in e&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof x&&x instanceof x)&&(v=!1)}return c.delete(e),c.delete(t),v}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var u=e[n];t(u,n,e)&&(i[o++]=u)}return i}},function(e,t,n){var r=n(18)(n(7),"DataView");e.exports=r},function(e,t,n){var r=n(18)(n(7),"Promise");e.exports=r},function(e,t,n){var r=n(18)(n(7),"Set");e.exports=r},function(e,t,n){var r=n(18)(n(7),"WeakMap");e.exports=r},function(e,t,n){var r=n(142),o=n(36);e.exports=function(e){for(var t=o(e),n=t.length;n--;){var i=t[n],u=e[i];t[n]=[i,u,r(u)]}return t}},function(e,t,n){var r=n(132),o=n(320),i=n(325),u=n(87),a=n(142),c=n(143),s=n(48),f=1,l=2;e.exports=function(e,t){return u(e)&&a(t)?c(s(e),t):function(n){var u=o(n,e);return void 0===u&&u===t?i(n,e):r(t,u,f|l)}}},function(e,t,n){var r=n(144);e.exports=function(e,t,n){var o=null==e?void 0:r(e,t);return void 0===o?n:o}},function(e,t,n){var r=/^\./,o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,u=n(322)(function(e){var t=[];return r.test(e)&&t.push(""),e.replace(o,function(e,n,r,o){t.push(r?o.replace(i,"$1"):n||e)}),t});e.exports=u},function(e,t,n){var r=n(323),o=500;e.exports=function(e){var t=r(e,function(e){return n.size===o&&n.clear(),e}),n=t.cache;return t}},function(e,t,n){var r=n(84),o="Expected a function";function i(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(o);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var u=e.apply(this,r);return n.cache=i.set(o,u)||i,u};return n.cache=new(i.Cache||r),n}i.Cache=r,e.exports=i},function(e,t,n){var r=n(23),o=n(89),i=n(3),u=n(88),a=1/0,c=r?r.prototype:void 0,s=c?c.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return o(t,e)+"";if(u(t))return s?s.call(t):"";var n=t+"";return"0"==n&&1/t==-a?"-0":n}},function(e,t,n){var r=n(326),o=n(327);e.exports=function(e,t){return null!=e&&o(e,t,r)}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t,n){var r=n(145),o=n(73),i=n(3),u=n(126),a=n(75),c=n(48);e.exports=function(e,t,n){for(var s=-1,f=(t=r(t,e)).length,l=!1;++s<f;){var d=c(t[s]);if(!(l=null!=e&&n(e,d)))break;e=e[d]}return l||++s!=f?l:!!(f=null==e?0:e.length)&&a(f)&&u(d,f)&&(i(e)||o(e))}},function(e,t,n){var r=n(329),o=n(330),i=n(87),u=n(48);e.exports=function(e){return i(e)?r(u(e)):o(e)}},function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},function(e,t,n){var r=n(144);e.exports=function(e){return function(t){return r(t,e)}}},function(e,t){e.exports=function(e,t,n,r,o){return o(e,function(e,o,i){n=r?(r=!1,e):t(n,e,o,i)}),n}},function(e,t,n){var r=n(146);e.exports=function(e){return r(e).toUpperCase()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(334)),i=c(n(149)),u=n(71),a=n(150);function c(e){return e&&e.__esModule?e:{default:e}}function s(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}t.default=function(e){return function(t){if(!t.data||!t.data.batch_request_id)return t;var n=t.transformRequest[0],c=t.data.rest_requests||[],f=(0,i.default)(c,function(t){var i=t.headers,c=t.body,f=t.url,l=t.params,d=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["headers","body","url","params"]),p=function(e,t){return""+e+o.default.stringify(t,{addQueryPrefix:!0})}(f,l),h=c?(0,u.b64EncodeUnicode)(n(c)):c,v=e?[].concat(s(i),[{name:a.XUserTokenHeader,value:e}]):[].concat(s(i));return r({},d,{url:p,headers:v,body:h})});return r({},t,{data:r({},t.data,{rest_requests:f})})}}},function(e,t,n){"use strict";var r=n(335),o=n(336),i=n(148);e.exports={formats:i,parse:o,stringify:r}},function(e,t,n){"use strict";var r=n(147),o=n(148),i={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},u=Date.prototype.toISOString,a={delimiter:"&",encode:!0,encoder:r.encode,encodeValuesOnly:!1,serializeDate:function(e){return u.call(e)},skipNulls:!1,strictNullHandling:!1},c=function e(t,n,o,i,u,c,s,f,l,d,p,h){var v=t;if("function"==typeof s)v=s(n,v);else if(v instanceof Date)v=d(v);else if(null===v){if(i)return c&&!h?c(n,a.encoder):n;v=""}if("string"==typeof v||"number"==typeof v||"boolean"==typeof v||r.isBuffer(v))return c?[p(h?n:c(n,a.encoder))+"="+p(c(v,a.encoder))]:[p(n)+"="+p(String(v))];var g,b=[];if(void 0===v)return b;if(Array.isArray(s))g=s;else{var y=Object.keys(v);g=f?y.sort(f):y}for(var m=0;m<g.length;++m){var _=g[m];u&&null===v[_]||(b=Array.isArray(v)?b.concat(e(v[_],o(n,_),o,i,u,c,s,f,l,d,p,h)):b.concat(e(v[_],n+(l?"."+_:"["+_+"]"),o,i,u,c,s,f,l,d,p,h)))}return b};e.exports=function(e,t){var n=e,u=t?r.assign({},t):{};if(null!==u.encoder&&void 0!==u.encoder&&"function"!=typeof u.encoder)throw new TypeError("Encoder has to be a function.");var s=void 0===u.delimiter?a.delimiter:u.delimiter,f="boolean"==typeof u.strictNullHandling?u.strictNullHandling:a.strictNullHandling,l="boolean"==typeof u.skipNulls?u.skipNulls:a.skipNulls,d="boolean"==typeof u.encode?u.encode:a.encode,p="function"==typeof u.encoder?u.encoder:a.encoder,h="function"==typeof u.sort?u.sort:null,v=void 0!==u.allowDots&&u.allowDots,g="function"==typeof u.serializeDate?u.serializeDate:a.serializeDate,b="boolean"==typeof u.encodeValuesOnly?u.encodeValuesOnly:a.encodeValuesOnly;if(void 0===u.format)u.format=o.default;else if(!Object.prototype.hasOwnProperty.call(o.formatters,u.format))throw new TypeError("Unknown format option provided.");var y,m,_=o.formatters[u.format];"function"==typeof u.filter?n=(m=u.filter)("",n):Array.isArray(u.filter)&&(y=m=u.filter);var x,w=[];if("object"!=typeof n||null===n)return"";x=u.arrayFormat in i?u.arrayFormat:"indices"in u?u.indices?"indices":"repeat":"indices";var O=i[x];y||(y=Object.keys(n)),h&&y.sort(h);for(var j=0;j<y.length;++j){var T=y[j];l&&null===n[T]||(w=w.concat(c(n[T],T,O,f,l,d?p:null,m,h,v,g,_,b)))}var S=w.join(s),C=!0===u.addQueryPrefix?"?":"";return S.length>0?C+S:""}},function(e,t,n){"use strict";var r=n(147),o=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,decoder:r.decode,delimiter:"&",depth:5,parameterLimit:1e3,plainObjects:!1,strictNullHandling:!1},u=function(e,t,n){if(e){var r=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,u=/(\[[^[\]]*])/.exec(r),a=u?r.slice(0,u.index):r,c=[];if(a){if(!n.plainObjects&&o.call(Object.prototype,a)&&!n.allowPrototypes)return;c.push(a)}for(var s=0;null!==(u=i.exec(r))&&s<n.depth;){if(s+=1,!n.plainObjects&&o.call(Object.prototype,u[1].slice(1,-1))&&!n.allowPrototypes)return;c.push(u[1])}return u&&c.push("["+r.slice(u.index)+"]"),function(e,t,n){for(var r=t,o=e.length-1;o>=0;--o){var i,u=e[o];if("[]"===u)i=(i=[]).concat(r);else{i=n.plainObjects?Object.create(null):{};var a="["===u.charAt(0)&&"]"===u.charAt(u.length-1)?u.slice(1,-1):u,c=parseInt(a,10);!isNaN(c)&&u!==a&&String(c)===a&&c>=0&&n.parseArrays&&c<=n.arrayLimit?(i=[])[c]=r:i[a]=r}r=i}return r}(c,t,n)}};e.exports=function(e,t){var n=t?r.assign({},t):{};if(null!==n.decoder&&void 0!==n.decoder&&"function"!=typeof n.decoder)throw new TypeError("Decoder has to be a function.");if(n.ignoreQueryPrefix=!0===n.ignoreQueryPrefix,n.delimiter="string"==typeof n.delimiter||r.isRegExp(n.delimiter)?n.delimiter:i.delimiter,n.depth="number"==typeof n.depth?n.depth:i.depth,n.arrayLimit="number"==typeof n.arrayLimit?n.arrayLimit:i.arrayLimit,n.parseArrays=!1!==n.parseArrays,n.decoder="function"==typeof n.decoder?n.decoder:i.decoder,n.allowDots="boolean"==typeof n.allowDots?n.allowDots:i.allowDots,n.plainObjects="boolean"==typeof n.plainObjects?n.plainObjects:i.plainObjects,n.allowPrototypes="boolean"==typeof n.allowPrototypes?n.allowPrototypes:i.allowPrototypes,n.parameterLimit="number"==typeof n.parameterLimit?n.parameterLimit:i.parameterLimit,n.strictNullHandling="boolean"==typeof n.strictNullHandling?n.strictNullHandling:i.strictNullHandling,""===e||null===e||void 0===e)return n.plainObjects?Object.create(null):{};for(var a="string"==typeof e?function(e,t){for(var n={},r=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,u=t.parameterLimit===1/0?void 0:t.parameterLimit,a=r.split(t.delimiter,u),c=0;c<a.length;++c){var s,f,l=a[c],d=l.indexOf("]="),p=-1===d?l.indexOf("="):d+1;-1===p?(s=t.decoder(l,i.decoder),f=t.strictNullHandling?null:""):(s=t.decoder(l.slice(0,p),i.decoder),f=t.decoder(l.slice(p+1),i.decoder)),o.call(n,s)?n[s]=[].concat(n[s]).concat(f):n[s]=f}return n}(e,n):e,c=n.plainObjects?Object.create(null):{},s=Object.keys(a),f=0;f<s.length;++f){var l=s[f],d=u(l,a[l],n);c=r.merge(c,d,n)}return r.compact(c)}},function(e,t,n){var r=n(72),o=n(42);e.exports=function(e,t){var n=-1,i=o(e)?Array(e.length):[];return r(e,function(e,r,o){i[++n]=t(e,r,o)}),i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=a(n(149)),i=a(n(130)),u=n(71);function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(){function e(e){return(0,i.default)(e,function(e,t){var n=t.name,o=t.value;return r({},e,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},n,o))},{})}function t(t){return r({id:t.id,data:function(e){var t=(0,u.b64DecodeUnicode)(e);if("string"==typeof t)try{t=JSON.parse(t)}catch(e){}return t}(t.body),headers:e(t.headers),status:t.status_code,statusText:t.status_text},t.error_message&&{error:!0,errorMessage:t.error_message})}return function(e){var n=e.config,i=e.data,u=void 0===i?{}:i;if(!0===n.batch){var a=u.serviced_requests,c=void 0===a?[]:a,s=(0,o.default)(c,t);return r({},e,{data:r({},u,{serviced_requests:s})})}return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(){function e(e){if("string"==typeof e)try{return JSON.parse(e)}catch(e){}return e}return function(t){var n=t.config,o=t.response,i=t.message;return n&&!0===n.batch?Promise.reject(r({},t,{config:r({},n,{data:e(n.data)})},o&&r({},o,{data:e(o.data)}),{message:i})):Promise.reject(t)}}},function(e,t,n){var r=n(341),o=1,i=4;e.exports=function(e){return r(e,o|i)}},function(e,t,n){var r=n(81),o=n(123),i=n(151),u=n(342),a=n(343),c=n(346),s=n(347),f=n(348),l=n(349),d=n(138),p=n(350),h=n(141),v=n(351),g=n(352),b=n(361),y=n(3),m=n(41),_=n(24),x=n(36),w=1,O=2,j=4,T="[object Arguments]",S="[object Function]",C="[object GeneratorFunction]",E="[object Object]",A={};A[T]=A["[object Array]"]=A["[object ArrayBuffer]"]=A["[object DataView]"]=A["[object Boolean]"]=A["[object Date]"]=A["[object Float32Array]"]=A["[object Float64Array]"]=A["[object Int8Array]"]=A["[object Int16Array]"]=A["[object Int32Array]"]=A["[object Map]"]=A["[object Number]"]=A[E]=A["[object RegExp]"]=A["[object Set]"]=A["[object String]"]=A["[object Symbol]"]=A["[object Uint8Array]"]=A["[object Uint8ClampedArray]"]=A["[object Uint16Array]"]=A["[object Uint32Array]"]=!0,A["[object Error]"]=A[S]=A["[object WeakMap]"]=!1,e.exports=function e(t,n,k,P,L,I){var M,N=n&w,F=n&O,R=n&j;if(k&&(M=L?k(t,P,L,I):k(t)),void 0!==M)return M;if(!_(t))return t;var D=y(t);if(D){if(M=v(t),!N)return s(t,M)}else{var B=h(t),U=B==S||B==C;if(m(t))return c(t,N);if(B==E||B==T||U&&!L){if(M=F||U?{}:b(t),!N)return F?l(t,a(M,t)):f(t,u(M,t))}else{if(!A[B])return L?t:{};M=g(t,B,e,N)}}I||(I=new r);var q=I.get(t);if(q)return q;I.set(t,M);var H=R?F?p:d:F?keysIn:x,z=D?void 0:H(t);return o(z||t,function(r,o){z&&(r=t[o=r]),i(M,o,e(r,n,k,o,t,I))}),M}},function(e,t,n){var r=n(49),o=n(36);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(49),o=n(154);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(24),o=n(77),i=n(345),u=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=o(e),n=[];for(var a in e)("constructor"!=a||!t&&u.call(e,a))&&n.push(a);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){(function(e){var r=n(7),o="object"==typeof t&&t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,u=i&&i.exports===o?r.Buffer:void 0,a=u?u.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=a?a(n):new e.constructor(n);return e.copy(r),r}}).call(t,n(37)(e))},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t,n){var r=n(49),o=n(86);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t,n){var r=n(49),o=n(155);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t,n){var r=n(139),o=n(155),i=n(154);e.exports=function(e){return r(e,i,o)}},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,t,n){var r=n(90),o=n(353),i=n(354),u=n(356),a=n(357),c=n(359),s=n(360),f="[object Boolean]",l="[object Date]",d="[object Map]",p="[object Number]",h="[object RegExp]",v="[object Set]",g="[object String]",b="[object Symbol]",y="[object ArrayBuffer]",m="[object DataView]",_="[object Float32Array]",x="[object Float64Array]",w="[object Int8Array]",O="[object Int16Array]",j="[object Int32Array]",T="[object Uint8Array]",S="[object Uint8ClampedArray]",C="[object Uint16Array]",E="[object Uint32Array]";e.exports=function(e,t,n,A){var k=e.constructor;switch(t){case y:return r(e);case f:case l:return new k(+e);case m:return o(e,A);case _:case x:case w:case O:case j:case T:case S:case C:case E:return s(e,A);case d:return i(e,A,n);case p:case g:return new k(e);case h:return u(e);case v:return a(e,A,n);case b:return c(e)}}},function(e,t,n){var r=n(90);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t,n){var r=n(355),o=n(79),i=n(136),u=1;e.exports=function(e,t,n){var a=t?n(i(e),u):i(e);return o(a,r,new e.constructor)}},function(e,t){e.exports=function(e,t){return e.set(t[0],t[1]),e}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var r=n(358),o=n(79),i=n(137),u=1;e.exports=function(e,t,n){var a=t?n(i(e),u):i(e);return o(a,r,new e.constructor)}},function(e,t){e.exports=function(e,t){return e.add(t),e}},function(e,t,n){var r=n(23),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},function(e,t,n){var r=n(90);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(362),o=n(156),i=n(77);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},function(e,t,n){var r=n(24),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(364);Object.defineProperty(t,"shouldBatch",{enumerable:!0,get:function(){return function(e){return e&&e.__esModule?e:{default:e}}(r).default}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.batching,n=void 0===t||t,a=e.batch,c=e.data,s=void 0===c?{}:c;return(!0===a||!1===a?a:n)&&function(e){return!(0,r.default)([o.default,u.isArrayBufferView,u.isBlob,i.default,u.isFile,u.isFormData,u.isStream,u.isURLSearchParams])(e)}(s)};var r=a(n(365)),o=a(n(375)),i=a(n(41)),u=n(377);function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){var r=n(134),o=n(366)(r);e.exports=o},function(e,t,n){var r=n(157),o=n(89),i=n(80),u=n(367),a=n(76),c=n(371);e.exports=function(e){return c(function(t){return t=o(t,a(i)),u(function(n){var o=this;return e(t,function(e){return r(e,o,n)})})})}},function(e,t,n){var r=n(43),o=n(158),i=n(159);e.exports=function(e,t){return i(o(e,t,r),e+"")}},function(e,t,n){var r=n(369),o=n(153),i=n(43),u=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:i;e.exports=u},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t){var n=800,r=16,o=Date.now;e.exports=function(e){var t=0,i=0;return function(){var u=o(),a=r-(u-i);if(i=u,a>0){if(++t>=n)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var r=n(372),o=n(158),i=n(159);e.exports=function(e){return i(o(e,void 0,r),e+"")}},function(e,t,n){var r=n(373);e.exports=function(e){return null!=e&&e.length?r(e,1):[]}},function(e,t,n){var r=n(85),o=n(374);e.exports=function e(t,n,i,u,a){var c=-1,s=t.length;for(i||(i=o),a||(a=[]);++c<s;){var f=t[c];n>0&&i(f)?n>1?e(f,n-1,i,u,a):r(a,f):u||(a[a.length]=f)}return a}},function(e,t,n){var r=n(23),o=n(73),i=n(3),u=r?r.isConcatSpreadable:void 0;e.exports=function(e){return i(e)||o(e)||!!(u&&e&&e[u])}},function(e,t,n){var r=n(376),o=n(76),i=n(128),u=i&&i.isArrayBuffer,a=u?o(u):r;e.exports=a},function(e,t,n){var r=n(22),o=n(17),i="[object ArrayBuffer]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFormData=function(e){return"undefined"!=typeof FormData&&e instanceof FormData},t.isArrayBufferView=function(e){var t=void 0;t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer;return t},t.isFile=function(e){return"[object File]"===u.call(e)},t.isBlob=function(e){return"[object Blob]"===u.call(e)},t.isStream=function(e){return(0,o.default)(e)&&(0,r.default)(e.pipe)},t.isURLSearchParams=function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams};var r=i(n(78)),o=i(n(17));function i(e){return e&&e.__esModule?e:{default:e}}var u=Object.prototype.toString},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("Unable to locate global object")}}).call(t,n(74))},function(e,t,n){var r=n(92),o=Object.prototype,i=o.hasOwnProperty,u=o.toString,a=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),n=e[a];try{e[a]=void 0;var r=!0}catch(e){}var o=u.call(e);return r&&(t?e[a]=n:delete e[a]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(50)),o=u(n(162)),i=u(n(382));function u(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){(0,r.default)(e);var t=(0,i.default)(),n="/flow/execution/"+e,o=t.getChannel(n);return new Promise(function(t,n){o.subscribe(function(r){var i=r.data,u=i.status,f=i.outputs,l=i.error,d=i.fetchOutputs;l?s(l,n):d?a(e,u,{resolve:t,reject:n}):c(u,f,t),setTimeout(function(){return o.unsubscribe()},0)})})};var a=function(e,t,n){(0,o.default)(e).then(function(e){c(t,e,n.resolve)},function(e){s(e,n.reject)})},c=function(e,t,n){n({status:e,outputs:t})},s=function(e,t){t({error:e})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(383));t.default=function(){return r.default.getClient()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=d(n(28)),o=d(n(8)),i=d(n(163)),u=d(n(164)),a=d(n(165)),c=d(n(93)),s=d(n(166)),f=d(n(168)),l=d(n(167));function d(e){return e&&e.__esModule?e:{default:e}}var p={properties:r.default,Logger:o.default,EventManager:i.default,ServerConnection:u.default,ChannelRedirect:a.default,ChannelListener:c.default,Channel:s.default,MessageClient:f.default,getClient:l.default};t.default=p},function(e,t,n){!function(t,n){e.exports=n()}(0,function(){var e={isString:function(e){return void 0!==e&&null!==e&&("string"==typeof e||e instanceof String)},isArray:function(e){return void 0!==e&&null!==e&&e instanceof Array},inArray:function(e,t){for(var n=0;n<t.length;++n)if(e===t[n])return n;return-1},setTimeout:function(e,t,n){return window.setTimeout(function(){try{e._debug("Invoking timed function",t),t()}catch(n){e._debug("Exception invoking timed function",t,n)}},n)},clearTimeout:function(e){window.clearTimeout(e)}},t=function(){var t,n,r;this.registered=function(e,r){t=e,n=r},this.unregistered=function(){t=null,n=null},this._debug=function(){n._debug.apply(n,arguments)},this._mixin=function(){return n._mixin.apply(n,arguments)},this.getConfiguration=function(){return n.getConfiguration()},this.getAdvice=function(){return n.getAdvice()},this.setTimeout=function(t,r){return e.setTimeout(n,t,r)},this.clearTimeout=function(t){e.clearTimeout(t)},this.convertToMessages=function(t){if(e.isString(t))try{return JSON.parse(t)}catch(e){throw this._debug("Could not convert to JSON the following string",'"'+t+'"'),e}if(e.isArray(t))return t;if(void 0===t||null===t)return[];if(t instanceof Object)return[t];throw"Conversion Error "+t+", typeof "+typeof t},this.accept=function(e,t,n){throw"Abstract"},this.getType=function(){return t},this.getURL=function(){return r},this.setURL=function(e){r=e},this.send=function(e,t){throw"Abstract"},this.reset=function(e){this._debug("Transport",t,"reset",e?"initial":"retry")},this.abort=function(){this._debug("Transport",t,"aborted")},this.toString=function(){return this.getType()}};t.derive=function(e){function t(){}return t.prototype=e,new t};var n=function(){var n=new t,r=t.derive(n),o=0,i=null,u=[],a=[];function c(e,t){if(this.transportSend(e,t),t.expired=!1,!e.sync){var n=this.getConfiguration().maxNetworkDelay,r=n;!0===t.metaConnect&&(r+=this.getAdvice().timeout),this._debug("Transport",this.getType(),"waiting at most",r,"ms for the response, maxNetworkDelay",n);var o=this;t.timeout=this.setTimeout(function(){t.expired=!0;var n="Request "+t.id+" of transport "+o.getType()+" exceeded "+r+" ms max network delay",i={reason:n},u=t.xhr;i.httpCode=o.xhrStatus(u),o.abortXHR(u),o._debug(n),o.complete(t,!1,t.metaConnect),e.onFailure(u,e.messages,i)},r)}}function s(e){var t=++o,n={id:t,metaConnect:!1,envelope:e};u.length<this.getConfiguration().maxConnections-1?(u.push(n),c.call(this,e,n)):(this._debug("Transport",this.getType(),"queueing request",t,"envelope",e),a.push([e,n]))}function f(t,n){var r=e.inArray(t,u);if(r>=0&&u.splice(r,1),a.length>0){var o=a.shift(),i=o[0],c=o[1];if(this._debug("Transport dequeued request",c.id),n)this.getConfiguration().autoBatch&&function(e){for(;a.length>0;){var t=a[0],n=t[0],r=t[1];if(n.url!==e.url||n.sync!==e.sync)break;a.shift(),e.messages=e.messages.concat(n.messages),this._debug("Coalesced",n.messages.length,"messages from request",r.id)}}.call(this,i),s.call(this,i),this._debug("Transport completed request",t.id,i);else{var f=this;this.setTimeout(function(){f.complete(c,!1,c.metaConnect);var e={reason:"Previous request failed"},t=c.xhr;e.httpCode=f.xhrStatus(t),i.onFailure(t,i.messages,e)},0)}}}return r.complete=function(e,t,n){n?function(e){var t=e.id;if(this._debug("Transport",this.getType(),"metaConnect complete, request",t),null!==i&&i.id!==t)throw"Longpoll request mismatch, completing request "+t;i=null}.call(this,e):f.call(this,e,t)},r.transportSend=function(e,t){throw"Abstract"},r.transportSuccess=function(e,t,n){t.expired||(this.clearTimeout(t.timeout),this.complete(t,!0,t.metaConnect),n&&n.length>0?e.onSuccess(n):e.onFailure(t.xhr,e.messages,{httpCode:204}))},r.transportFailure=function(e,t,n){t.expired||(this.clearTimeout(t.timeout),this.complete(t,!1,t.metaConnect),e.onFailure(t.xhr,e.messages,n))},r.send=function(e,t){t?function(e){if(null!==i)throw"Concurrent metaConnect requests not allowed, request id="+i.id+" not yet completed";var t=++o;this._debug("Transport",this.getType(),"metaConnect send, request",t,"envelope",e);var n={id:t,metaConnect:!0,envelope:e};c.call(this,e,n),i=n}.call(this,e):s.call(this,e)},r.abort=function(){n.abort();for(var e=0;e<u.length;++e){var t=u[e];t&&(this._debug("Aborting request",t),this.abortXHR(t.xhr)||this.transportFailure(t.envelope,t,{reason:"abort"}))}var r=i;r&&(this._debug("Aborting metaConnect request",r),this.abortXHR(r.xhr)||this.transportFailure(r.envelope,r,{reason:"abort"})),this.reset(!0)},r.reset=function(e){n.reset(e),i=null,u=[],a=[]},r.abortXHR=function(e){if(e)try{var t=e.readyState;return e.abort(),t!==window.XMLHttpRequest.UNSENT}catch(e){this._debug(e)}return!1},r.xhrStatus=function(e){if(e)try{return e.status}catch(e){this._debug(e)}return-1},r},r=function(){var e=new n,r=t.derive(e),o=!0;return r.accept=function(e,t,n){return o||!t},r.newXMLHttpRequest=function(){return new window.XMLHttpRequest},r.xhrSend=function(e){var t=r.newXMLHttpRequest();t.context=r.context,t.withCredentials=!0,t.open("POST",e.url,!0!==e.sync);var n=e.headers;if(n)for(var o in n)n.hasOwnProperty(o)&&t.setRequestHeader(o,n[o]);return t.setRequestHeader("Content-Type","application/json;charset=UTF-8"),t.onload=function(){200===t.status?e.onSuccess(t.responseText):e.onError(t.statusText)},t.onerror=function(){e.onError(t.statusText)},t.send(e.body),t},r.transportSend=function(e,t){this._debug("Transport",this.getType(),"sending request",t.id,"envelope",e);var n=this;try{var r=!0;t.xhr=this.xhrSend({transport:this,url:e.url,sync:e.sync,headers:this.getConfiguration().requestHeaders,body:JSON.stringify(e.messages),onSuccess:function(r){n._debug("Transport",n.getType(),"received response",r);var i=!1;try{var u=n.convertToMessages(r);0===u.length?(o=!1,n.transportFailure(e,t,{httpCode:204})):(i=!0,n.transportSuccess(e,t,u))}catch(r){if(n._debug(r),!i){o=!1;var a={exception:r};a.httpCode=n.xhrStatus(t.xhr),n.transportFailure(e,t,a)}}},onError:function(i,u){n._debug("Transport",n.getType(),"received error",i,u),o=!1;var a={reason:i,exception:u};a.httpCode=n.xhrStatus(t.xhr),r?n.setTimeout(function(){n.transportFailure(e,t,a)},0):n.transportFailure(e,t,a)}}),r=!1}catch(r){o=!1,this.setTimeout(function(){n.transportFailure(e,t,{exception:r})},0)}},r.reset=function(t){e.reset(t),o=!0},r},o=function(){var e=new n,r=t.derive(e),o=0;function i(e,t,n){var r=this;return function(){r.transportFailure(e,t,"error",n)}}return r.accept=function(e,t,n){return!0},r.jsonpSend=function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script"),r="_cometd_jsonp_"+o++;window[r]=function(o){t.removeChild(n),delete window[r],e.onSuccess(o)};var i=e.url;i+=i.indexOf("?")<0?"?":"&",i+="jsonp="+r,i+="&message="+encodeURIComponent(e.body),n.src=i,n.async=!0!==e.sync,n.type="application/javascript",n.onerror=function(t){e.onError("jsonp "+t.type)},t.appendChild(n)},r.transportSend=function(e,t){for(var n=this,r=0,o=e.messages.length,u=[];o>0;){var a=JSON.stringify(e.messages.slice(r,r+o)),c=e.url.length+encodeURI(a).length,s=this.getConfiguration().maxURILength;if(c>s){if(1===o){var f="Bayeux message too big ("+c+" bytes, max is "+s+") for transport "+this.getType();return void this.setTimeout(i.call(this,e,t,f),0)}--o}else u.push(o),r+=o,o=e.messages.length-r}var l=e;if(u.length>1){var d=0,p=u[0];this._debug("Transport",this.getType(),"split",e.messages.length,"messages into",u.join(" + ")),(l=this._mixin(!1,{},e)).messages=e.messages.slice(d,p),l.onSuccess=e.onSuccess,l.onFailure=e.onFailure;for(var h=1;h<u.length;++h){var v=this._mixin(!1,{},e);d=p,p+=u[h],v.messages=e.messages.slice(d,p),v.onSuccess=e.onSuccess,v.onFailure=e.onFailure,this.send(v,t.metaConnect)}}this._debug("Transport",this.getType(),"sending request",t.id,"envelope",l);try{var g=!0;this.jsonpSend({transport:this,url:l.url,sync:l.sync,headers:this.getConfiguration().requestHeaders,body:JSON.stringify(l.messages),onSuccess:function(e){var r=!1;try{var o=n.convertToMessages(e);0===o.length?n.transportFailure(l,t,{httpCode:204}):(r=!0,n.transportSuccess(l,t,o))}catch(e){n._debug(e),r||n.transportFailure(l,t,{exception:e})}},onError:function(e,r){var o={reason:e,exception:r};g?n.setTimeout(function(){n.transportFailure(l,t,o)},0):n.transportFailure(l,t,o)}}),g=!1}catch(e){this.setTimeout(function(){n.transportFailure(l,t,{exception:e})},0)}},r},i=function(){var n,r=new t,o=t.derive(r),i=!0,u=!1,a=!0,c=null,s=null,f=!1,l=null;function d(e,t){e&&(this.webSocketClose(e,t.code,t.reason),this.onClose(e,t))}function p(e){return e===s||e===c}function h(e,t,n){for(var r=[],o=0;o<t.messages.length;++o){var i=t.messages[o];i.id&&r.push(i.id)}e.envelopes[r.join(",")]=[t,n],this._debug("Transport",this.getType(),"stored envelope, envelopes",e.envelopes)}function v(e,t,r){var o=JSON.stringify(t.messages);e.webSocket.send(o),this._debug("Transport",this.getType(),"sent",t,"metaConnect =",r);var i=this.getConfiguration().maxNetworkDelay,u=i;r&&(u+=this.getAdvice().timeout,f=!0);for(var a=this,c=[],s=0;s<t.messages.length;++s)!function(){var r=t.messages[s];r.id&&(c.push(r.id),e.timeouts[r.id]=a.setTimeout(function(){n._debug("Transport",a.getType(),"timing out message",r.id,"after",u,"on",e),d.call(a,e,{code:1e3,reason:"Message Timeout"})},u))}();this._debug("Transport",this.getType(),"waiting at most",u,"ms for messages",c,"maxNetworkDelay",i,", timeouts:",e.timeouts)}function g(e,t,r){try{null===e?(e=s||{envelopes:{},timeouts:{}},h.call(this,e,t,r),function(e){if(!s){var t=n.getURL().replace(/^http/,"ws");this._debug("Transport",this.getType(),"connecting to URL",t);try{var r=n.getConfiguration().protocol;e.webSocket=r?new window.WebSocket(t,r):new window.WebSocket(t),s=e}catch(e){throw i=!1,this._debug("Exception while creating WebSocket object",e),e}a=!1!==n.getConfiguration().stickyReconnect;var o=this,f=n.getConfiguration().connectTimeout;f>0&&(e.connectTimer=this.setTimeout(function(){n._debug("Transport",o.getType(),"timed out while connecting to URL",t,":",f,"ms"),d.call(o,e,{code:1e3,reason:"Connect Timeout"})},f));var l=function(t){t=t||{code:1e3},n._debug("WebSocket onclose",e,t,"connecting",s,"current",c),e.connectTimer&&o.clearTimeout(e.connectTimer),o.onClose(e,t)};e.webSocket.onopen=function(){n._debug("WebSocket onopen",e),e.connectTimer&&o.clearTimeout(e.connectTimer),p(e)?(s=null,c=e,u=!0,o.onOpen(e)):(n._warn("Closing extra WebSocket connection",this,"active connection",c),d.call(o,e,{code:1e3,reason:"Extra Connection"}))},e.webSocket.onclose=l,e.webSocket.onerror=function(){l({code:1e3,reason:"Error"})},e.webSocket.onmessage=function(t){n._debug("WebSocket onmessage",t,e),o.onMessage(e,t)},this._debug("Transport",this.getType(),"configured callbacks on",e)}}.call(this,e)):(h.call(this,e,t,r),v.call(this,e,t,r))}catch(t){var o=this;this.setTimeout(function(){d.call(o,e,{code:1e3,reason:"Exception",exception:t})},0)}}return o.reset=function(e){r.reset(e),i=!0,e&&(u=!1),a=!0,c=null,s=null,f=!1},o._notifySuccess=function(e,t){e.call(this,t)},o._notifyFailure=function(e,t,n,r){e.call(this,t,n,r)},o.onOpen=function(e){var t=e.envelopes;for(var n in this._debug("Transport",this.getType(),"opened",e,"pending messages",t),t)if(t.hasOwnProperty(n)){var r=t[n],o=r[0],i=r[1];l=o.onSuccess,v.call(this,e,o,i)}},o.onMessage=function(t,n){this._debug("Transport",this.getType(),"received websocket message",n,t);for(var r=!1,o=this.convertToMessages(n.data),i=[],u=0;u<o.length;++u){var a=o[u];if((/^\/meta\//.test(a.channel)||void 0===a.data)&&a.id){i.push(a.id);var c=t.timeouts[a.id];c&&(this.clearTimeout(c),delete t.timeouts[a.id],this._debug("Transport",this.getType(),"removed timeout for message",a.id,", timeouts",t.timeouts))}"/meta/connect"===a.channel&&(f=!1),"/meta/disconnect"!==a.channel||f||(r=!0)}for(var s=!1,d=t.envelopes,p=0;p<i.length;++p){var h=i[p];for(var v in d)if(d.hasOwnProperty(v)){var g=v.split(","),b=e.inArray(h,g);if(b>=0){s=!0,g.splice(b,1);var y=d[v][0],m=d[v][1];delete d[v],g.length>0&&(d[g.join(",")]=[y,m]);break}}}s&&this._debug("Transport",this.getType(),"removed envelope, envelopes",d),this._notifySuccess(l,o),r&&this.webSocketClose(t,1e3,"Disconnect")},o.onClose=function(e,t){this._debug("Transport",this.getType(),"closed",e,t),p(e)&&(i=a&&u,s=null,c=null);var n=e.timeouts;for(var r in e.timeouts={},n)n.hasOwnProperty(r)&&this.clearTimeout(n[r]);var o=e.envelopes;for(var l in e.envelopes={},o)if(o.hasOwnProperty(l)){var d=o[l][0];o[l][1]&&(f=!1);var h={websocketCode:t.code,reason:t.reason};t.exception&&(h.exception=t.exception),this._notifyFailure(d.onFailure,e,d.messages,h)}},o.registered=function(e,t){r.registered(e,t),n=t},o.accept=function(e,t,r){return this._debug("Transport",this.getType(),"accept, supported:",i),i&&!!window.WebSocket&&!1!==n.websocketEnabled},o.send=function(e,t){this._debug("Transport",this.getType(),"sending",e,"metaConnect =",t),g.call(this,c,e,t)},o.webSocketClose=function(e,t,n){try{e.webSocket&&e.webSocket.close(t,n)}catch(e){this._debug(e)}},o.abort=function(){r.abort(),d.call(this,c,{code:1e3,reason:"Abort"}),this.reset(!0)},o},u=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z",".","-",":","+","=","^","!","/","*","?","&","<",">","(",")","[","]","{","}","@","%","$","#"],a=[0,68,0,84,83,82,72,0,75,76,70,65,0,63,62,69,0,1,2,3,4,5,6,7,8,9,64,0,73,66,74,71,81,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,77,0,78,67,0,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,79,0,80,0,0];return{CometD:function(t){var n,u,a,c,s,f=this,l=t||"default",d=!1,p=new function(){var e=[],t={};this.getTransportTypes=function(){return e.slice(0)},this.findTransportTypes=function(n,r,o){for(var i=[],u=0;u<e.length;++u){var a=e[u];!0===t[a].accept(n,r,o)&&i.push(a)}return i},this.negotiateTransport=function(n,r,o,i){for(var u=0;u<e.length;++u)for(var a=e[u],c=0;c<n.length;++c)if(a===n[c]){var s=t[a];if(!0===s.accept(r,o,i))return s}return null},this.add=function(n,r,o){for(var i=!1,u=0;u<e.length;++u)if(e[u]===n){i=!0;break}return i||("number"!=typeof o?e.push(n):e.splice(o,0,n),t[n]=r),!i},this.find=function(n){for(var r=0;r<e.length;++r)if(e[r]===n)return t[n];return null},this.remove=function(n){for(var r=0;r<e.length;++r)if(e[r]===n){e.splice(r,1);var o=t[n];return delete t[n],o}return null},this.clear=function(){e=[],t={}},this.reset=function(n){for(var r=0;r<e.length;++r)t[e[r]].reset(n)}},h="disconnected",v=0,g=null,b=0,y=[],m=!1,_=0,x={},w=0,O=null,j=[],T={},S={},C={},E=!1,A=!1,k=0,P=0,L={protocol:null,stickyReconnect:!0,connectTimeout:0,maxConnections:2,backoffIncrement:1e3,maxBackoff:6e4,logLevel:"info",maxNetworkDelay:1e4,requestHeaders:{},appendMessageTypeToURL:!0,autoBatch:!1,urls:{},maxURILength:2e3,advice:{timeout:6e4,interval:0,reconnect:void 0,maxInterval:0}};function I(e,t){try{return e[t]}catch(e){return}}function M(t){return e.isString(t)}function N(e){return void 0!==e&&null!==e&&"function"==typeof e}function F(e,t){for(var n="";--t>0&&!(e>=Math.pow(10,t));)n+="0";return n+=e}function R(e,t){if(window.console){var n=window.console[e];if(N(n)){var r=new Date;[].splice.call(t,0,0,F(r.getHours(),2)+":"+F(r.getMinutes(),2)+":"+F(r.getSeconds(),2)+"."+F(r.getMilliseconds(),3)),n.apply(window.console,t)}}}function D(e){return/(^https?:\/\/)?(((\[[^\]]+\])|([^:\/\?#]+))(:(\d+))?)?([^\?#]*)(.*)?/.exec(e)}function B(e){if(e){var t=x[e.channel];t&&t[e.id]&&(delete t[e.id],f._debug("Removed",e.listener?"listener":"subscription",e))}}function U(e){e&&!e.listener&&B(e)}function q(){for(var e in x)if(x.hasOwnProperty(e)){var t=x[e];if(t)for(var n in t)t.hasOwnProperty(n)&&U(t[n])}}function H(e){h!==e&&(f._debug("Status",h,"->",e),h=e)}function z(){return"disconnecting"===h||"disconnected"===h}function W(){return""+ ++v}function G(e,t,n,r,o){try{return t.call(e,r)}catch(e){var i=f.onExtensionException;if(N(i)){f._debug("Invoking extension exception handler",n,e);try{i.call(f,e,n,o,r)}catch(e){f._info("Exception during execution of extension exception handler",n,e)}}else f._info("Exception during execution of extension",n,e);return r}}function V(e){for(var t=j.length-1;t>=0&&void 0!==e&&null!==e;--t){var n=j[t],r=n.extension.outgoing;if(N(r)){var o=G(n.extension,r,n.name,e,!0);e=void 0===o?e:o}}return e}function X(e,t){var n=x[e];if(n)for(var r in n)if(n.hasOwnProperty(r)){var o=n[r];if(o)try{o.callback.call(o.scope,t)}catch(e){var i=f.onListenerException;if(N(i)){f._debug("Invoking listener exception handler",o,e);try{i.call(f,e,o,o.listener,t)}catch(e){f._info("Exception during execution of listener exception handler",o,e)}}else f._info("Exception during execution of listener",o,t,e)}}}function $(e,t){X(e,t);for(var n=e.split("/"),r=n.length-1,o=r;o>0;--o){var i=n.slice(0,o).join("/")+"/*";o===r&&X(i,t),X(i+="*",t)}}function Q(){null!==O&&e.clearTimeout(O),O=null}function J(t,n){Q();var r=T.interval+n;f._debug("Function scheduled in",r,"ms, interval =",T.interval,"backoff =",w,t),O=e.setTimeout(f,t,r)}function K(e,t,r,o){for(var i=0;i<t.length;++i){var u=t[i],a=u.id;g&&(u.clientId=g),void 0!==(u=V(u))&&null!==u?(u.id=a,t[i]=u):(delete S[a],t.splice(i--,1))}if(0!==t.length){var l=f.getURL();L.appendMessageTypeToURL&&(l.match(/\/$/)||(l+="/"),o&&(l+=o));var d={url:l,sync:e,messages:t,onSuccess:function(e){try{c.call(f,e)}catch(e){f._info("Exception during handling of messages",e)}},onFailure:function(e,t,n){try{var r=f.getTransport();n.connectionType=r?r.getType():"unknown",s.call(f,e,t,n)}catch(e){f._info("Exception during handling of failure",e)}}};f._debug("Send",d),n.send(d,r)}}function Y(e){b>0||!0===m?y.push(e):K(!1,[e],!1)}function Z(){w=0}function ee(){var e=y;y=[],e.length>0&&K(!1,e,!1)}function te(e){H("connecting"),J(function(){!function(){if(!z()){var e={id:W(),channel:"/meta/connect",connectionType:n.getType()};A||(e.advice={timeout:0}),H("connecting"),f._debug("Connect sent",e),K(!1,[e],!0,"connect"),H("connected")}}()},e)}function ne(e){e&&(T=f._mixin(!1,{},L.advice,e),f._debug("New advice",T))}function re(e){if(Q(),e&&n&&n.abort(),g=null,H("disconnected"),b=0,Z(),n=null,E=!1,A=!1,y.length>0){var t=y;y=[],s.call(f,void 0,t,{reason:"Disconnected"})}}function oe(e,t,n){var r=f.onTransportException;if(N(r)){f._debug("Invoking transport exception handler",e,t,n);try{r.call(f,n,e,t)}catch(e){f._info("Exception during execution of transport exception handler",e)}}}function ie(e,t){N(e)&&(t=e,e=void 0),g=null,q(),z()&&p.reset(!0),ne({}),b=0,m=!0,u=e,a=t;var r=f.getURL(),o=p.findTransportTypes("1.0",d,r),i={id:W(),version:"1.0",minimumVersion:"1.0",channel:"/meta/handshake",supportedConnectionTypes:o,advice:{timeout:T.timeout,interval:T.interval}},c=f._mixin(!1,{},u,i);if(f._putCallback(c.id,t),!n&&!(n=p.negotiateTransport(o,"1.0",d,r))){var s="Could not find initial transport among: "+p.getTransportTypes();throw f._warn(s),s}f._debug("Initial transport is",n.getType()),H("handshaking"),f._debug("Handshake sent",c),K(!1,[c],!1,"handshake")}function ue(e,t){try{e.call(f,t)}catch(e){var n=f.onCallbackException;if(N(n)){f._debug("Invoking callback exception handler",e);try{n.call(f,e,t)}catch(e){f._info("Exception during execution of callback exception handler",e)}}else f._info("Exception during execution of message callback",e)}}function ae(e){var t=f._getCallback([e.id]);N(t)&&(delete S[e.id],ue(t,e))}function ce(t){var n=C[t.id];if(delete C[t.id],n){f._debug("Handling remote call response for",t,"with context",n);var r=n.timeout;r&&e.clearTimeout(r);var o=n.callback;if(N(o))return ue(o,t),!0}return!1}function se(e){f._debug("Transport failure handling",e),e.transport&&(n=e.transport),e.url&&n.setURL(e.url);var t=e.action,r=e.delay||0;switch(t){case"handshake":!function(e){H("handshaking"),m=!0,J(function(){ie(u,a)},e)}(r);break;case"retry":te(r);break;case"none":re(!0);break;default:throw"Unknown action "+t}}function fe(e,t){ae(e),$("/meta/handshake",e),$("/meta/unsuccessful",e),z()&&(t.action="none"),f.onTransportFailure.call(f,e,t,se)}function le(e){fe(e,{cause:"failure",action:"handshake",transport:null})}function de(e,t){$("/meta/connect",e),$("/meta/unsuccessful",e),z()&&(t.action="none"),f.onTransportFailure.call(f,e,t,se)}function pe(e){A=!1,de(e,{cause:"failure",action:"retry",transport:null})}function he(e){re(!0),ae(e),$("/meta/disconnect",e),$("/meta/unsuccessful",e)}function ve(e){he(e)}function ge(e){var t=x[e.subscription];if(t)for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];r&&!r.listener&&(delete t[n],f._debug("Removed failed subscription",r))}ae(e),$("/meta/subscribe",e),$("/meta/unsuccessful",e)}function be(e){ge(e)}function ye(e){ae(e),$("/meta/unsubscribe",e),$("/meta/unsuccessful",e)}function me(e){ye(e)}function _e(e){ce(e)||(ae(e),$("/meta/publish",e),$("/meta/unsuccessful",e))}function xe(e){_e(e)}function we(e){if(k=0,void 0!==(e=function(e){for(var t=0;t<j.length&&void 0!==e&&null!==e;++t){var n=j[t],r=n.extension.incoming;if(N(r)){var o=G(n.extension,r,n.name,e,!1);e=void 0===o?e:o}}return e}(e))&&null!==e)switch(ne(e.advice),e.channel){case"/meta/handshake":!function(e){var t=f.getURL();if(e.successful){var r=f._isCrossDomain(D(t)[2]),o=p.negotiateTransport(e.supportedConnectionTypes,e.version,r,t);if(null===o)return e.successful=!1,void fe(e,{cause:"negotiation",action:"none",transport:null});n!==o&&(f._debug("Transport",n.getType(),"->",o.getType()),n=o),g=e.clientId,m=!1,ee(),e.reestablish=E,E=!0,ae(e),$("/meta/handshake",e),P=e["x-messages"]||0;var i=z()?"none":T.reconnect||"retry";switch(i){case"retry":Z(),0===P?te(0):f._debug("Processing",P,"handshake-delivered messages");break;case"none":re(!0);break;default:throw"Unrecognized advice action "+i}}else fe(e,{cause:"unsuccessful",action:T.reconnect||"handshake",transport:n})}(e);break;case"/meta/connect":!function(e){if(A=e.successful){$("/meta/connect",e);var t=z()?"none":T.reconnect||"retry";switch(t){case"retry":Z(),te(w);break;case"none":re(!1);break;default:throw"Unrecognized advice action "+t}}else de(e,{cause:"unsuccessful",action:T.reconnect||"retry",transport:n})}(e);break;case"/meta/disconnect":!function(e){e.successful?(re(!1),ae(e),$("/meta/disconnect",e)):he(e)}(e);break;case"/meta/subscribe":!function(e){e.successful?(ae(e),$("/meta/subscribe",e)):ge(e)}(e);break;case"/meta/unsubscribe":!function(e){e.successful?(ae(e),$("/meta/unsubscribe",e)):ye(e)}(e);break;default:!function(e){void 0!==e.data?ce(e)||($(e.channel,e),P>0&&0==--P&&(f._debug("Processed last handshake-delivered message"),te(0))):void 0===e.successful?f._warn("Unknown Bayeux Message",e):e.successful?(ae(e),$("/meta/publish",e)):_e(e)}(e)}}function Oe(e){var t=x[e];if(t)for(var n in t)if(t.hasOwnProperty(n)&&t[n])return!0;return!1}function je(e,t){var n={scope:e,method:t};if(N(e))n.scope=void 0,n.method=e;else if(M(t)){if(!e)throw"Invalid scope "+e;if(n.method=e[t],!N(n.method))throw"Invalid callback "+t+" for scope "+e}else if(!N(t))throw"Invalid callback "+t;return n}function Te(e,t,n,r){var o=je(t,n);f._debug("Adding",r?"listener":"subscription","on",e,"with scope",o.scope,"and callback",o.method);var i=++_,u={id:i,channel:e,scope:o.scope,callback:o.method,listener:r},a=x[e];return a||(a={},x[e]=a),a[i]=u,f._debug("Added",r?"listener":"subscription",u),u}this._mixin=function(e,t,n){for(var r=t||{},o=2;o<arguments.length;++o){var i=arguments[o];if(void 0!==i&&null!==i)for(var u in i)if(i.hasOwnProperty(u)){var a=I(i,u),c=I(r,u);if(a===t)continue;if(void 0===a)continue;if(e&&"object"==typeof a&&null!==a)if(a instanceof Array)r[u]=this._mixin(e,c instanceof Array?c:[],a);else{var s="object"!=typeof c||c instanceof Array?{}:c;r[u]=this._mixin(e,s,a)}else r[u]=a}}return r},this._warn=function(){R("warn",arguments)},this._info=function(){"warn"!==L.logLevel&&R("info",arguments)},this._debug=function(){"debug"===L.logLevel&&R("debug",arguments)},this._isCrossDomain=function(e){return!!(window.location&&window.location.host&&e)&&e!==window.location.host},this.send=Y,this._getCallback=function(e){return S[e]},this._putCallback=function(e,t){var n=this._getCallback(e);return N(t)&&(S[e]=t),n},this.onTransportFailure=function(e,t,r){this._debug("Transport failure",t,"for",e);var o=this.getTransportRegistry(),i=this.getURL(),u=this._isCrossDomain(D(i)[2]),a=o.findTransportTypes("1.0",u,i);if("none"===t.action){if("/meta/handshake"===e.channel&&!t.transport){var c="Could not negotiate transport, client=["+a+"], server=["+e.supportedConnectionTypes+"]";this._warn(c),oe(n.getType(),null,{reason:c,connectionType:n.getType(),transport:n})}}else if(t.delay=this.getBackoffPeriod(),"/meta/handshake"===e.channel){if(!t.transport){var s=o.negotiateTransport(a,"1.0",u,i);s?(this._debug("Transport",n.getType(),"->",s.getType()),oe(n.getType(),s.getType(),e.failure),t.action="handshake",t.transport=s):(this._warn("Could not negotiate transport, client=["+a+"]"),oe(n.getType(),null,e.failure),t.action="none")}"none"!==t.action&&this.increaseBackoffPeriod()}else{var l=(new Date).getTime();if(0===k&&(k=l),"retry"===t.action){t.delay=this.increaseBackoffPeriod();var d=T.maxInterval;if(d>0){var p=T.timeout+T.interval+d;l-k+w>p&&(t.action="handshake")}}"handshake"===t.action&&(t.delay=0,o.reset(!1),this.resetBackoffPeriod())}r.call(f,t)},this.receive=we,c=function(e){f._debug("Received",e);for(var t=0;t<e.length;++t)we(e[t])},s=function(e,t,n){f._debug("handleFailure",e,t,n),n.transport=e;for(var r=0;r<t.length;++r){var o=t[r],i={id:o.id,successful:!1,channel:o.channel,failure:n};switch(n.message=o,o.channel){case"/meta/handshake":le(i);break;case"/meta/connect":pe(i);break;case"/meta/disconnect":ve(i);break;case"/meta/subscribe":i.subscription=o.subscription,be(i);break;case"/meta/unsubscribe":i.subscription=o.subscription,me(i);break;default:xe(i)}}},this.registerTransport=function(e,t,n){var r=p.add(e,t,n);return r&&(this._debug("Registered transport",e),N(t.registered)&&t.registered(e,this)),r},this.unregisterTransport=function(e){var t=p.remove(e);return null!==t&&(this._debug("Unregistered transport",e),N(t.unregistered)&&t.unregistered()),t},this.unregisterTransports=function(){p.clear()},this.getTransportTypes=function(){return p.getTransportTypes()},this.findTransport=function(e){return p.find(e)},this.getTransportRegistry=function(){return p},this.configure=function(e){(function(e){f._debug("Configuring cometd object with",e),M(e)&&(e={url:e}),e||(e={}),L=f._mixin(!1,L,e);var t=f.getURL();if(!t)throw"Missing required configuration parameter 'url' specifying the Bayeux server URL";var n=D(t),r=n[2],o=n[8],i=n[9];if(d=f._isCrossDomain(r),L.appendMessageTypeToURL)if(void 0!==i&&i.length>0)f._info("Appending message type to URI "+o+i+" is not supported, disabling 'appendMessageTypeToURL' configuration"),L.appendMessageTypeToURL=!1;else{var u=o.split("/"),a=u.length-1;o.match(/\/$/)&&(a-=1),u[a].indexOf(".")>=0&&(f._info("Appending message type to URI "+o+" is not supported, disabling 'appendMessageTypeToURL' configuration"),L.appendMessageTypeToURL=!1)}}).call(this,e)},this.init=function(e,t){this.configure(e),this.handshake(t)},this.handshake=function(e,t){if("disconnected"!==h)throw"Illegal state: handshaken";ie(e,t)},this.disconnect=function(e,t,n){if(!z()){"boolean"!=typeof e&&(n=t,t=e,e=!1),N(t)&&(n=t,t=void 0);var r={id:W(),channel:"/meta/disconnect"},o=this._mixin(!1,{},t,r);f._putCallback(o.id,n),H("disconnecting"),K(!0===e,[o],!1,"disconnect")}},this.startBatch=function(){++b,f._debug("Starting batch, depth",b)},this.endBatch=function(){!function(){if(--b,f._debug("Ending batch, depth",b),b<0)throw"Calls to startBatch() and endBatch() are not paired";0!==b||z()||m||ee()}()},this.batch=function(e,t){var n=je(e,t);this.startBatch();try{n.method.call(n.scope),this.endBatch()}catch(e){throw this._info("Exception during execution of batch",e),this.endBatch(),e}},this.addListener=function(e,t,n){if(arguments.length<2)throw"Illegal arguments number: required 2, got "+arguments.length;if(!M(e))throw"Illegal argument type: channel must be a string";return Te(e,t,n,!0)},this.removeListener=function(e){if(!(e&&e.channel&&"id"in e))throw"Invalid argument: expected subscription, not "+e;B(e)},this.clearListeners=function(){x={}},this.subscribe=function(e,t,n,r,o){if(arguments.length<2)throw"Illegal arguments number: required 2, got "+arguments.length;if(!M(e))throw"Illegal argument type: channel must be a string";if(z())throw"Illegal state: disconnected";N(t)&&(o=r,r=n,n=t,t=void 0),N(r)&&(o=r,r=void 0);var i=!Oe(e),u=Te(e,t,n,!1);if(i){var a={id:W(),channel:"/meta/subscribe",subscription:e},c=this._mixin(!1,{},r,a);f._putCallback(c.id,o),Y(c)}return u},this.unsubscribe=function(e,t,n){if(arguments.length<1)throw"Illegal arguments number: required 1, got "+arguments.length;if(z())throw"Illegal state: disconnected";N(t)&&(n=t,t=void 0),this.removeListener(e);var r=e.channel;if(!Oe(r)){var o={id:W(),channel:"/meta/unsubscribe",subscription:r},i=this._mixin(!1,{},t,o);f._putCallback(i.id,n),Y(i)}},this.resubscribe=function(e,t){if(U(e),e)return this.subscribe(e.channel,e.scope,e.callback,t)},this.clearSubscriptions=function(){q()},this.publish=function(e,t,n,r){if(arguments.length<1)throw"Illegal arguments number: required 1, got "+arguments.length;if(!M(e))throw"Illegal argument type: channel must be a string";if(/^\/meta\//.test(e))throw"Illegal argument: cannot publish to meta channels";if(z())throw"Illegal state: disconnected";N(t)?(r=t,t={},n=void 0):N(n)&&(r=n,n=void 0);var o={id:W(),channel:e,data:t},i=this._mixin(!1,{},n,o);f._putCallback(i.id,r),Y(i)},this.publishBinary=function(e,t,n,r,o){N(t)?(o=t,t=new ArrayBuffer(0),n=!0,r=void 0):N(n)?(o=n,n=!0,r=void 0):N(r)&&(o=r,r=void 0);var i={meta:r,data:t,last:n};this.publish(e,i,{ext:{binary:{}}},o)},this.remoteCall=function(t,n,r,o,i){if(arguments.length<1)throw"Illegal arguments number: required 1, got "+arguments.length;if(!M(t))throw"Illegal argument type: target must be a string";if(z())throw"Illegal state: disconnected";if(N(n)?(i=n,n={},r=L.maxNetworkDelay,o=void 0):N(r)?(i=r,r=L.maxNetworkDelay,o=void 0):N(o)&&(i=o,o=void 0),"number"!=typeof r)throw"Illegal argument type: timeout must be a number";t.match(/^\//)||(t="/"+t);var u="/service"+t,a={id:W(),channel:u,data:n},c=this._mixin(!1,{},o,a),s={callback:i};r>0&&(s.timeout=e.setTimeout(f,function(){f._debug("Timing out remote call",c,"after",r,"ms"),_e({id:c.id,error:"406::timeout",successful:!1,failure:{message:c,reason:"Remote Call Timeout"}})},r),f._debug("Scheduled remote call timeout",c,"in",r,"ms")),C[c.id]=s,Y(c)},this.remoteCallBinary=function(e,t,n,r,o,i){N(t)?(i=t,t=new ArrayBuffer(0),n=!0,r=void 0,o=L.maxNetworkDelay):N(n)?(i=n,n=!0,r=void 0,o=L.maxNetworkDelay):N(r)?(i=r,r=void 0,o=L.maxNetworkDelay):N(o)&&(i=o,o=L.maxNetworkDelay);var u={meta:r,data:t,last:n};this.remoteCall(e,u,o,{ext:{binary:{}}},i)},this.getStatus=function(){return h},this.isDisconnected=z,this.setBackoffIncrement=function(e){L.backoffIncrement=e},this.getBackoffIncrement=function(){return L.backoffIncrement},this.getBackoffPeriod=function(){return w},this.increaseBackoffPeriod=function(){return w<L.maxBackoff&&(w+=L.backoffIncrement),w},this.resetBackoffPeriod=function(){Z()},this.setLogLevel=function(e){L.logLevel=e},this.registerExtension=function(e,t){if(arguments.length<2)throw"Illegal arguments number: required 2, got "+arguments.length;if(!M(e))throw"Illegal argument type: extension name must be a string";for(var n=!1,r=0;r<j.length;++r)if(j[r].name===e){n=!0;break}return n?(this._info("Could not register extension with name",e,"since another extension with the same name already exists"),!1):(j.push({name:e,extension:t}),this._debug("Registered extension",e),N(t.registered)&&t.registered(e,this),!0)},this.unregisterExtension=function(e){if(!M(e))throw"Illegal argument type: extension name must be a string";for(var t=!1,n=0;n<j.length;++n){var r=j[n];if(r.name===e){j.splice(n,1),t=!0,this._debug("Unregistered extension",e);var o=r.extension;N(o.unregistered)&&o.unregistered();break}}return t},this.getExtension=function(e){for(var t=0;t<j.length;++t){var n=j[t];if(n.name===e)return n.extension}return null},this.getName=function(){return l},this.getClientId=function(){return g},this.getURL=function(){if(n){var e=n.getURL();if(e)return e;if(e=L.urls[n.getType()])return e}return L.url},this.getTransport=function(){return n},this.getConfiguration=function(){return this._mixin(!0,{},L)},this.getAdvice=function(){return this._mixin(!0,{},T)},window.WebSocket&&this.registerTransport("websocket",new i),this.registerTransport("long-polling",new r),this.registerTransport("callback-polling",new o)},Transport:t,RequestTransport:n,LongPollingTransport:r,CallbackPollingTransport:o,WebSocketTransport:i,Utils:e,Z85:{encode:function(e){var t=null;if(e instanceof ArrayBuffer?t=e:e.buffer instanceof ArrayBuffer?t=e.buffer:Array.isArray(e)&&(t=new Uint8Array(e).buffer),null==t)throw"Cannot Z85 encode "+e;for(var n=t.byteLength,r=n%4,o=4-(0===r?4:r),i=new DataView(t),a="",c=0,s=0;s<n+o;++s){var f=s>=n;if(c=256*c+(f?0:i.getUint8(s)),(s+1)%4==0){for(var l=52200625,d=5;d>0;--d){if(!f||d>o){var p=Math.floor(c/l)%85;a+=u[p]}l/=85}c=0}}return a},decode:function(e){for(var t=e.length%5,n=5-(0===t?5:t),r=0;r<n;++r)e+=u[u.length-1];for(var o=e.length,i=new ArrayBuffer(4*o/5-n),c=new DataView(i),s=0,f=0,l=0,d=0;d<o;++d){var p=e.charCodeAt(f++)-32;if(s=85*s+a[p],f%5==0){for(var h=16777216;h>=1;)l<c.byteLength&&c.setUint8(l++,Math.floor(s/h)%256),h/=256;s=0}}return i}}}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(8));var o=function(){var e=new r.default("amb.GraphQLSubscriptionExtension"),t={};this.isGraphQLChannel=function(e){return e&&e.startsWith("/rw/graphql")},this.addGraphQLChannel=function(e,n){t[e]=n},this.removeGraphQLChannel=function(e){delete t[e]},this.getGraphQLSubscriptions=function(){return t},this.outgoing=function(n){return"/meta/subscribe"===n.channel&&this.isGraphQLChannel(n.subscription)&&(n.ext||(n.ext={}),t[n.subscription]&&(e.debug("Subscribing with GraphQL subscription:"+t[n.subscription]),n.ext.serializedGraphQLSubscription=t[n.subscription])),n}};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(8));var o=function(){var e=new r.default("amb.SessionExtension"),t=!1;this.extendSession=function(){t=!0},this.outgoing=function(n){return"/meta/connect"===n.channel&&t&&(n.ext||(n.ext={}),e.debug("extendSession"),n.ext.extendSession=!0,t=!1),n}};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(8)),o=i(n(28));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(){var e=new r.default("amb.TokenManagementExtension"),t="/meta/subscribe",n="/meta/unsubscribe",i="/meta/handshake",u=o.default.subscribeCommandsFlow.maxInflight,a=[];function c(e){return e.channel==t||e.channel==n}function s(){e.debug("notifyOnAvailabilityOfToken - current tokenCount: "+u);try{a.forEach(function(e){e()})}catch(t){e.addErrorMessage("notifyOnAvailabilityOfToken - failed to call tokenEventListeners. Error Details : "+t)}}this.updateTokenCount=function(e){u=e},this.refillTokens=function(){u=o.default.subscribeCommandsFlow.maxInflight,s(),e.debug("refillTokens -- tokenCount : "+u)},this.outgoing=function(e){return function(e){return e.channel===i}(e)&&(e.ext||(e.ext={}),e.ext.supportsSubscribeCommandFlow=!0),o.default.subscribeCommandsFlow.enable?(c(e)&&u>0&&u--,e):e},this.incoming=function(e){return o.default.subscribeCommandsFlow.enable?(c(e)?(u<o.default.subscribeCommandsFlow.maxInflight&&u++,s()):function(e){if(!e.ext)return!1;var t=e.ext.received_by_glide;return!!t&&t&&c(t)}(e)&&(e=null),e):e},this.getTokenCount=function(){return u},this.addTokenAvailabilityListener=function(t){t&&(e.debug("addTokenAvailabilityListener - tokenEventListener : "+t),a.push(t))},this.removeTokenAvailabilityListener=function(t){if(t){e.debug("removeTokenAvailabilityListener - tokenEventListener : "+t);var n=a.findIndex(function(e){return t===e});-1!==n&&(e.debug("removeTokenAvailabilityListener - removing listener at index : "+n),a.splice(n,1))}}};t.default=u},function(e,t,n){!function(t,r){e.exports=r(n(169))}(0,function(e){return function(){var t=e,n=t.lib.WordArray;t.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,r=this._map;e.clamp();for(var o=[],i=0;i<n;i+=3)for(var u=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,a=0;a<4&&i+.75*a<n;a++)o.push(r.charAt(u>>>6*(3-a)&63));var c=r.charAt(64);if(c)for(;o.length%4;)o.push(c);return o.join("")},parse:function(e){var t=e.length,r=this._map,o=this._reverseMap;if(!o){o=this._reverseMap=[];for(var i=0;i<r.length;i++)o[r.charCodeAt(i)]=i}var u=r.charAt(64);if(u){var a=e.indexOf(u);-1!==a&&(t=a)}return function(e,t,r){for(var o=[],i=0,u=0;u<t;u++)if(u%4){var a=r[e.charCodeAt(u-1)]<<u%4*2,c=r[e.charCodeAt(u)]>>>6-u%4*2;o[i>>>2]|=(a|c)<<24-i%4*8,i++}return n.create(o,i)}(e,t,o)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),e.enc.Base64})},function(e,t,n){!function(t,r){e.exports=r(n(169))}(0,function(e){return e.enc.Utf8})},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"emit",function(e,t){window.localStorage.setItem(e,JSON.stringify(t)),window.localStorage.removeItem(e)}),r(this,"on",function(e,t){window.addEventListener("storage",function(n){var r=n.key,o=n.newValue;r===e&&o&&t(JSON.parse(o))})})};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:134217727,t=[],n=Math.max(1,Math.floor(e));return{enqueue:function(e){return this.getAvailableSpace()>0&&(t.push(e),!0)},enqueueMultiple:function(e){return this.getAvailableSpace()>=e.length&&(t=t.concat(e),!0)},dequeue:function(){var e;return t.length>0&&(e=t.shift()),e},dequeueMultiple:function(e){var n;return e>=0&&t.length>=e&&(n=[],e>0&&(n=t.slice(0,e),t=t.slice(e))),n},clear:function(){t=[]},getSize:function(){return t.length},getCapacity:function(){return n},getAvailableSpace:function(){return n-t.length},getQueueBuffer:function(){return t}}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(28)),o=n(94),i=u(n(8));function u(e){return e&&e.__esModule?e:{default:e}}var a=function(e,t){var n={SUBSCRIBE:"subscribe",UNSUBSCRIBE:"unsubscribe"},u=202,a=429,c=3e5,s=new i.default("amb.SubscriptionCommandSender");t.addTokenAvailabilityListener(function(){w()});var f=!r.default.subscribeCommandsFlow.enable,l=null;function d(e,t,n){return Math.min(n,Math.max(t,e))}function p(){return t.getTokenCount()>=r.default.subscribeCommandsFlow.maxInflight}function h(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(e||(0,o.isNil)(l)){var n=d(r.default.subscribeCommandsFlow.maxWait,0,c);s.debug("restartTimer - force: "+e+", timerObject : "+l+", timeInterval : "+n),v(),l=setTimeout(function(){l=null,s.debug("onTimer - stopping : "+f),f||(t.refillTokens(),w())},n)}}function v(){(0,o.isNil)(l)||(s.debug("stopTimer"),clearTimeout(l),l=null)}function g(){var e=parseInt(r.default.subscribeCommandsFlow.retryDelay.min);return e=d(e,0,c)}function b(e,t,i,u){var a;s.debug("scheduleRetry - channel : "+e.getName()+", triesLeft : "+t+", mode : "+i);var c=function(e){return d(r.default.subscribeCommandsFlow.retryDelay.increaseFactor*e,r.default.subscribeCommandsFlow.retryDelay.min,r.default.subscribeCommandsFlow.retryDelay.max)}(u);switch(i){case n.SUBSCRIBE:a=function(){return _(e,t,c)};break;case n.UNSUBSCRIBE:a=function(){return x(e,t,c)}}(0,o.isNil)(a)||setTimeout(a,u)}function y(e,n,r,o,i){s.debug("onResponse - response ".concat(JSON.stringify(e),", channel ").concat(JSON.stringify(n),", mode : ").concat(r,", \n\t\t\ttriesLeft ").concat(o,", stopping : ").concat(f,", tokenCount : ").concat(t.getTokenCount(),", isBucketFull - ").concat(p(),", retryDelay - ").concat(i)),f?n.subscriptionCallback(e):(o-=1,p()&&v(),o>0&&function(e){if(s.debug("isRetriable - response : "+e),e&&e.ext){var t=e.ext.rejected_by_glide;if(t){var n=parseInt(e.ext["glide.amb.reply.status.code"]);if(s.addWarnMessage("isRetriable - rejected_by_glide : "+t+", glide.amb.reply.status.code : "+n),!isNaN(n))return n==a||n==u}}return s.debug("isRetriable -  "+!1),!1}(e)?b(n,o,r,i):n.subscriptionCallback(e),w())}function m(t){return s.debug("addItemToQueue - item : "+t),!!e.enqueue(t)&&(w(),!0)}function _(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:g();return s.debug("enqueueSubscribe - channel: "+e.getName()+", triesLeft : "+t+", stopping : "+f+", retryDelay : "+i),!!(!f&&(0,o.isObject)(e)&&((0,o.isNil)(t)&&(t=1+Math.floor(r.default.subscribeCommandsFlow.retries)),t>0))&&m(function(){s.debug("enqueueSubscribe - inside the item execution. Calling channel._subscribeToCometD - channel: "+e.getName()+", triesLeft : "+t),e._subscribeToCometD(function(r){return y(r,e,n.SUBSCRIBE,t,i)})})}function x(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:g();return s.debug("enqueueUnsubscribe - channel: "+e.getName()+", triesLeft : "+t+", stopping : "+f+", retryDelay : "+i),!!(!f&&(0,o.isObject)(e)&&((0,o.isNil)(t)&&(t=1+Math.floor(r.default.subscribeCommandsFlow.retries)),t>0))&&m(function(){e._unsubscribeFromCometD(function(r){return y(r,e,n.UNSUBSCRIBE,t,i)})})}function w(){var n=Math.min(e.getSize(),d(t.getTokenCount(),0,r.default.subscribeCommandsFlow.maxInflight));s.debug("processQueue - numberToProcess : "+n),n>0&&(e.dequeueMultiple(n).forEach(function(e){return(0,o.isNil)(e)||e()}),h(!1))}return{subscribeToChannel:function(e){return s.debug("subscribeToChannel - to : "+e.getName()),_(e)},unsubscribeToChannel:function(e){return s.debug("unsubscribeToChannel - from : "+e.getName()),x(e)},stop:function(){s.debug("stop"),s.debug("signalStop - stopping : "+f),f||(f=!0,v(),e.clear())},isStopping:function(){return f},getQueue:function(){return e},isBucketEmpty:function(){return!p()},getTimerObject:function(){return l},getTokenCountFromTokenManager:function(){return t.getTokenCount()}}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,o.default)(!(0,i.default)(e)&&(0,u.default)(e),"Expected startConfig to be an object"),(0,o.default)((0,s.default)(e,"type")&&(0,a.default)(e.type)&&(0,f.default)(d,e.type),"Expected type to be one of: "+d.join(", ")),(0,o.default)((0,s.default)(e,"name")&&(0,a.default)(e.name),"Expected name string argument"),(0,o.default)((0,u.default)(e.inputs)||(0,i.default)(e.inputs),"Expected inputs to be object or undefined"),!0};var r=n(35),o=l(n(160)),i=l(n(394)),u=l(n(395)),a=l(n(91)),c=l(n(171)),s=l(n(411)),f=l(n(448));function l(e){return e&&e.__esModule?e:{default:e}}var d=(0,c.default)(r.FLOW_TYPES)},function(e,t){e.exports=function(e){return void 0===e}},function(e,t,n){var r=n(25),o=n(396),i=n(27),u="[object Object]",a=Function.prototype,c=Object.prototype,s=a.toString,f=c.hasOwnProperty,l=s.call(Object);e.exports=function(e){if(!i(e)||r(e)!=u)return!1;var t=o(e);if(null===t)return!0;var n=f.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&s.call(n)==l}},function(e,t,n){var r=n(170)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(172);e.exports=function(e,t){return r(t,function(t){return e[t]})}},function(e,t,n){var r=n(399),o=n(408),i=n(175);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,t,n){var r=n(400),o=n(173),i=n(26),u=n(402),a=n(174),c=n(404),s=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),f=!n&&o(e),l=!n&&!f&&u(e),d=!n&&!f&&!l&&c(e),p=n||f||l||d,h=p?r(e.length,String):[],v=h.length;for(var g in e)!t&&!s.call(e,g)||p&&("length"==g||l&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,v))||h.push(g);return h}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(25),o=n(27),i="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){(function(e){var r=n(51),o=n(403),i="object"==typeof t&&t&&!t.nodeType&&t,u=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=u&&u.exports===i?r.Buffer:void 0,c=(a?a.isBuffer:void 0)||o;e.exports=c}).call(t,n(37)(e))},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(405),o=n(406),i=n(407),u=i&&i.isTypedArray,a=u?o(u):r;e.exports=a},function(e,t,n){var r=n(25),o=n(95),i=n(27),u={};u["[object Float32Array]"]=u["[object Float64Array]"]=u["[object Int8Array]"]=u["[object Int16Array]"]=u["[object Int32Array]"]=u["[object Uint8Array]"]=u["[object Uint8ClampedArray]"]=u["[object Uint16Array]"]=u["[object Uint32Array]"]=!0,u["[object Arguments]"]=u["[object Array]"]=u["[object ArrayBuffer]"]=u["[object Boolean]"]=u["[object DataView]"]=u["[object Date]"]=u["[object Error]"]=u["[object Function]"]=u["[object Map]"]=u["[object Number]"]=u["[object Object]"]=u["[object RegExp]"]=u["[object Set]"]=u["[object String]"]=u["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!u[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(161),o="object"==typeof t&&t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,u=i&&i.exports===o&&r.process,a=function(){try{return u&&u.binding&&u.binding("util")}catch(e){}}();e.exports=a}).call(t,n(37)(e))},function(e,t,n){var r=n(409),o=n(410),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(170)(Object.keys,Object);e.exports=r},function(e,t,n){var r=n(412),o=n(413);e.exports=function(e,t){return null!=e&&o(e,t,r)}},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e,t){return null!=e&&n.call(e,t)}},function(e,t,n){var r=n(414),o=n(173),i=n(26),u=n(174),a=n(95),c=n(447);e.exports=function(e,t,n){for(var s=-1,f=(t=r(t,e)).length,l=!1;++s<f;){var d=c(t[s]);if(!(l=null!=e&&n(e,d)))break;e=e[d]}return l||++s!=f?l:!!(f=null==e?0:e.length)&&a(f)&&u(d,f)&&(i(e)||o(e))}},function(e,t,n){var r=n(26),o=n(415),i=n(416),u=n(445);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:i(u(e))}},function(e,t,n){var r=n(26),o=n(52),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,u=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||u.test(e)||!i.test(e)||null!=t&&e in Object(t)}},function(e,t,n){var r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,i=n(417)(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(r,function(e,n,r,i){t.push(r?i.replace(o,"$1"):n||e)}),t});e.exports=i},function(e,t,n){var r=n(418),o=500;e.exports=function(e){var t=r(e,function(e){return n.size===o&&n.clear(),e}),n=t.cache;return t}},function(e,t,n){var r=n(419),o="Expected a function";function i(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(o);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var u=e.apply(this,r);return n.cache=i.set(o,u)||i,u};return n.cache=new(i.Cache||r),n}i.Cache=r,e.exports=i},function(e,t,n){var r=n(420),o=n(440),i=n(442),u=n(443),a=n(444);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,e.exports=c},function(e,t,n){var r=n(421),o=n(432),i=n(439);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(422),o=n(428),i=n(429),u=n(430),a=n(431);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,e.exports=c},function(e,t,n){var r=n(53);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t,n){var r=n(176),o=n(424),i=n(96),u=n(426),a=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,f=c.toString,l=s.hasOwnProperty,d=RegExp("^"+f.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?d:a).test(u(e))}},function(e,t,n){var r=n(425),o=function(){var e=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();e.exports=function(e){return!!o&&o in e}},function(e,t,n){var r=n(51)["__core-js_shared__"];e.exports=r},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(53),o="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(53),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(53),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t,n){var r=n(433),o=n(434),i=n(436),u=n(437),a=n(438);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=u,c.prototype.set=a,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(54),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():o.call(t,n,1),--this.size,0))}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(54);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(54);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(54);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(177)(n(51),"Map");e.exports=r},function(e,t,n){var r=n(55);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(55);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(55);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(55);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(446);e.exports=function(e){return null==e?"":r(e)}},function(e,t,n){var r=n(92),o=n(172),i=n(26),u=n(52),a=1/0,c=r?r.prototype:void 0,s=c?c.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return o(t,e)+"";if(u(t))return s?s.call(t):"";var n=t+"";return"0"==n&&1/t==-a?"-0":n}},function(e,t,n){var r=n(52),o=1/0;e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}},function(e,t,n){var r=n(449),o=n(175),i=n(91),u=n(453),a=n(171),c=Math.max;e.exports=function(e,t,n,s){e=o(e)?e:a(e),n=n&&!s?u(n):0;var f=e.length;return n<0&&(n=c(f+n,0)),i(e)?n<=f&&e.indexOf(t,n)>-1:!!f&&r(e,t,n)>-1}},function(e,t,n){var r=n(450),o=n(451),i=n(452);e.exports=function(e,t,n){return t==t?i(e,t,n):r(e,o,n)}},function(e,t){e.exports=function(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}},function(e,t){e.exports=function(e){return e!=e}},function(e,t){e.exports=function(e,t,n){for(var r=n-1,o=e.length;++r<o;)if(e[r]===t)return r;return-1}},function(e,t,n){var r=n(454);e.exports=function(e){var t=r(e),n=t%1;return t==t?n?t-n:t:0}},function(e,t,n){var r=n(455),o=1/0,i=1.7976931348623157e308;e.exports=function(e){return e?(e=r(e))===o||e===-o?(e<0?-1:1)*i:e==e?e:0:0===e?e:0}},function(e,t,n){var r=n(96),o=n(52),i=NaN,u=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,s=/^0o[0-7]+$/i,f=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return i;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(u,"");var n=c.test(e);return n||s.test(e)?f(e.slice(2),n?2:8):a.test(e)?i:+e}}]);
;
/*! RESOURCE: scripts/classes/WFStageSet.js */
var WFStageSet = (function() {
function getWorkflowVersionFromQuery(qry) {
if (!qry)
return null;
var exps = qry.split("^");
for (var i = 0; i < exps.length; i++) {
var exp = exps[i];
var parts = exp.split('=');
if (parts.length == 2 && parts[0].trim() == 'workflow_version' && parts[1].trim() != '')
return parts[1].trim();
}
return null;
}
function exportStageSet(setName, workflowVersionId, filter) {
var ga = new GlideAjax('WFStageSet');
ga.addParam('sysparm_name',     'exportStageSet');
ga.addParam('sysparm_set_name', setName);
ga.addParam('sysparm_workflow', workflowVersionId);
if (filter != null)
ga.addParam('sysparm_filter', filter);
ga.getXMLWait();
return ga.getAnswer();
}
function importStages(source, workflowVersionId, setId) {
var ga = new GlideAjax('WFStageSet');
ga.addParam('sysparm_name',     'import'+source);
ga.addParam('sysparm_set_id',   setId);
ga.addParam('sysparm_workflow', workflowVersionId);
ga.getXMLWait();
return ga.getAnswer();
}
function incrementCounter(table, column, sys_id, increment) {
var ga = new GlideAjax('WFStageSet');
ga.addParam('sysparm_name',      'incrementCounter');
ga.addParam('sysparm_sys_id',    sys_id);
ga.addParam('sysparm_table',     table);
ga.addParam('sysparm_column',    column);
ga.addParam('sysparm_increment', increment);
ga.getXMLWait();
return ga.getAnswer();
}
function warnNoWorkflow(msg) {
var dialog = new GlideDialogWindow('glide_warn');
var msgs = new GwtMessage();
dialog.setPreference('title', msgs.getMessage('Operation not supported.')
+ '<br/>'
+ msgs.getMessage(msg) );
dialog.render();
return 'ok';
}
return {
getWorkflowVersionFromQuery: getWorkflowVersionFromQuery,
exportStageSet: exportStageSet,
importStages: importStages,
incrementCounter: incrementCounter,
warnNoWorkflow: warnNoWorkflow
}
}());
;
/*! RESOURCE: scripts/classes/GlideMenu.js */
var GlideMenu = Class.create();
GlideMenu.prototype = {
initialize: function(idSuffix, type) {
this.suffix = idSuffix;
this.type = type;
this.clear();
},
destroy: function() {
this.clear();
},
clear: function() {
this.menuItems = [];
this.variables = {};
this.onShowScripts = [];
},
isEmpty: function() {
var e = gel('context.' + this.type + "." + this.suffix);
if (e) {
var script = e.innerHTML;
if (window.execScript)
window.execScript(script);
else
eval.call(window, script);
Element.remove(e);
}
for ( var i = 0; i < this.menuItems.length; i++) {
if (this.menuItems[i].parentId == '')
return false;
}
return true;
},
load: function() {
},
add: function(sysId, id, parentId, label, type, action, order, img, trackSelected) {
var item = {};
item.sysId = sysId;
item.id = id;
item.parentId = parentId;
item.label = label;
item.type = type;
item.action = action || "";
item.order = order;
item.image = img;
item.trackSelected = (trackSelected == "true");
this._add(item);
},
addItem: function(id, parentId, label, type, action, order, img, trackSelected, onShowScript) {
var item = {};
item.id = id;
item.parentId = parentId;
item.label = label;
item.type = type;
item.action = action;
item.order = order;
item.image = img;
item.trackSelected = (trackSelected == "true");
item.onShowScript = onShowScript;
this._add(item);
},
_add: function(item) {
if (!item.order)
item.order = 0;
this.menuItems.push(item);
},
increaseItemsOrder: function(increase){
for (var i = 0; i < this.menuItems.length; i++)
this.menuItems[i].order += increase;
},
addAction: function(label, action, order) {
this.addItem("", "", label, "action", action, order);
},
showContextMenu: function(evt, id, variables) {
this.variables = variables;
id += this.suffix;
if (!getMenuByName(id))
this._createMenu(id);
var cm = getMenuByName(id);
if (cm.context.isEmpty())
return;
this._loadVariables(variables);
for ( var i = 0; i < this.onShowScripts.length; i++) {
var onShow = this.onShowScripts[i];
g_menu = getMenuByName(onShow.menuId);
if (!g_menu)
continue;
g_menu = g_menu.context;
if (!g_menu)
continue;
g_item = g_menu.getItem(onShow.itemId);
if (!g_item)
continue;
this._runOnShowScript(onShow.script, onShow.itemId);
}
this._clearVariables(variables);
g_menu = null;
g_item = null;
return contextShow(evt, id, 0, 0, 0, 0);
},
setOnShow: function(onshow) {
this.onshow = onshow;
},
setOnHide: function(onhide) {
this.onhide = onhide;
},
_createMenu: function(id) {
var cm = new GwtContextMenu(id);
cm.setOnShow(this.onshow);
cm.setOnHide(this.onhide);
cm.clear();
this._sort();
this._buildMenu("", cm);
},
_sort: function() {
this.menuItems = this.menuItems.sort(function(a, b) {
var aOrder = parseInt("0" + a.order, 10);
var bOrder = parseInt("0" + b.order, 10);
if ((aOrder) < (bOrder)) {
return -1;
}
if ((aOrder) > (bOrder)) {
return 1;
}
return 0;
});
},
_buildMenu: function(parentId, cm) {
var lastType;
var itemsAfterLine = 0;
for ( var i = 0; i < this.menuItems.length; i++) {
var item = this.menuItems[i];
if (parentId != item.parentId)
continue;
if (lastType == "line" && item.type == "line")
continue;
if (lastType == "line" && itemsAfterLine > 0) {
this._addLine(cm);
itemsAfterLine = 0;
}
lastType = item.type;
if (lastType == "line")
continue;
if (this._addMenuItem(cm, item))
itemsAfterLine++;
}
},
_addLine: function(cm) {
cm.addLine();
},
_addMenuItem: function(cm, item) {
var added = true;
var mi;
if (item.type == "action") {
if (!this._getAction(item))
mi = cm.addLabel(item.label);
else
mi = cm.addFunc(item.label, this._runMenuAction.bind(this, item), item.id);
} else if (item.type == "label") {
mi = cm.addLabel(item.label);
} else if (item.type == "menu") {
var sm = new GwtContextMenu(item.id + '_' + this.suffix);
if (item.trackSelected)
sm.setTrackSelected(true);
this._buildMenu(item.id, sm);
if (sm.isEmpty())
added = false;
else
mi = cm.addMenu(item.label, sm, item.id);
}
if (mi && item.image)
cm.setImage(mi, item.image);
if (added && this._getOnShowScript(item)) {
var o = {};
o.menuId = cm.id;
o.itemId = item.id;
o.script = this._getOnShowScript(item);
this.onShowScripts.push(o);
}
return added;
},
_getAction: function(item) {
var action = '';
if (item.action)
action = item.action;
if (item.sysId)
action += '\n' + GlideMenu.scripts[item.sysId];
return action;
},
_getOnShowScript: function(item) {
if (item.sysId)
return GlideMenu.onScripts[item.sysId];
return item.onShowScript;
},
_runMenuAction: function(item) {
this._loadVariables(this.variables);
try {
eval(this._getAction(item));
} catch (ex) {
jslog("Error running context menu '" + item.label + "': " + ex);
}
this._clearVariables(this.variables);
},
_runOnShowScript: function(script, itemId) {
try {
eval(script);
} catch (ex) {
jslog("Error running onShow script for item '" + itemId + "': " + ex);
}
},
_loadVariables: function(variables) {
for ( var n in variables) {
var s = n + '=variables["' + n + '"]';
eval(s);
}
},
_clearVariables: function(variables) {
for ( var n in variables) {
var s = n + '=null;';
eval(s);
}
},
type: 'GlideMenu'
};
GlideMenu.scripts = {};
GlideMenu.onScripts = {};
GlideMenu.addScripts = function(o) {
if (o == null)
return;
for (var s in o.scripts)
GlideMenu.scripts[s] = o.scripts[s];
for (var s in o.onScripts)
GlideMenu.onScripts[s] = o.onScripts[s];
}
;
/*! RESOURCE: scripts/TestClient.js */
function popTestClient(test_definition, test_subject) {
var test_execution;
if (!test_subject)
test_execution = test_definition;
var dialog = new GlideDialogWindow('test_client', false, "50em", "25em");
if (test_execution) {
dialog.setPreference('sysparm_test_execution', test_execution);
} else {
dialog.setPreference('sysparm_test_definition', test_definition);
dialog.setPreference('sysparm_test_subject', test_subject);
}
dialog.render();
}
var TestClient = Class.create();
TestClient.prototype = {
TEST_STATES : [ "Pending", "Running", "Succeeded", "Failed" ],
STATUS_IMAGES : [ "images/workflow_skipped.gif",
"images/loading_anim2.gifx", "images/workflow_complete.gifx",
"images/workflow_rejected.gifx" ],
TRANSLATED_TEXT : [ "Pending", "Running", "Succeeded", "Failed",
"Details", "more", "Hide Details", "Show Details" ],
TIMEOUT_INTERVAL : 1000,
translator : new GwtMessage(),
detailStates : {},
id : "",
container : null,
initialize : function(test_definition, test_subject) {
this.container = $("container");
this._setContainerStyles(this.container);
this.translator.getMessages(this.TRANSLATED_TEXT);
var test_execution;
if (!test_subject) {
this.id = test_definition
return
}
this.testDefinition = test_definition;
this.testSubject = test_subject;
},
start : function() {
if (this.id) {
this.getStatus();
return;
}
var ga = new GlideAjax('AJAXTestProcessor');
ga.addParam('sysparm_name', 'startTest');
ga.addParam('sysparm_test_definition', this.testDefinition);
ga.addParam('sysparm_test_subject', this.testSubject);
ga.getXML(this.handleStart.bind(this));
},
handleStart : function(response) {
this.id = response.responseXML.documentElement.getAttribute("answer");
this.getStatus();
},
getStatus : function() {
var ga = new GlideAjax('AJAXTestProcessor');
ga.addParam('sysparm_name', 'getStatus');
ga.addParam('sysparm_execution_id', this.id);
if (typeof this.id != "string" || this.id == "")
return;
ga.getXML(this.handleGetStatus.bind(this));
},
handleGetStatus : function(response) {
var answer = response.responseXML.documentElement.getAttribute("answer");
eval("var so = " + answer);
this.renderStatus(so);
this.container = $("container");
if (this.container == null)
return;
if (so.state == "0" || so.state == "1")
setTimeout(this.getStatus.bind(this), this.TIMEOUT_INTERVAL);
},
renderStatus : function(so) {
if (!so)
return;
var new_container = new Element("div");
this._setContainerStyles(new_container);
new_container.appendChild(this.getStatusRow(so));
this.container.replace(new_container);
this.container = new_container;
},
getStatusRow : function(obj, order) {
var name = obj.name;
var state = obj.state;
var message = obj.message;
var percent = NaN;
if (obj.percent_complete) {
percent = parseInt(obj.percent_complete);
}
var hasPercent = (!isNaN(percent) && percent > 0 && percent <= 100);
var hasDetails = (obj.results.length >= 1 || message != "");
var tr = new Element("div", {
id : "row_container-" + obj.sys_id
});
tr.style.padding = "5px";
var simp = new Element("div");
simp.appendChild(this._getImage(obj));
simp.appendChild(this._getItemTitleElement(name, order));
var det = this._getDetailElement();
var dtl;
if (hasDetails || hasPercent)
dtl = det.appendChild(this._getShowDetailsLink(obj.sys_id));
simp.appendChild(det);
simp.appendChild(this._getFloatClear("both"));
tr.appendChild(simp);
if (hasDetails || hasPercent) {
var dtd = new Element("div");
var ddc = new Element("div");
ddc.style.marginTop = ".5em";
ddc.style.marginLeft = "30px";
ddc.id = "detail_cont-" + obj.sys_id;
dtd.appendChild(ddc);
if (hasPercent) {
ddc.appendChild(this._getProgressBar(percent));
ddc.appendChild(this._getFloatClear("both"));
}
if (message != "") {
var dds = new Element("div");
dds.appendChild(this._getDetailsText(message, obj));
dds.style.fontSize = "smaller";
dds.style.marginBottom = ".5em";
ddc.appendChild(dds);
}
dtl.details_container = ddc;
if (typeof this.detailStates[obj.sys_id] == "boolean" && this.detailStates[obj.sys_id] == false && dtl != null)
dtl.onclick();
tr.appendChild(dtd);
this.renderChildren(obj, ddc);
}
return tr;
},
_getItemTitleElement : function (name, order) {
var nameHtml = "<b>" + name + "</b>";
if (order) {
nameHtml = "\t" + order + ".\t" + nameHtml;
}
var nsp = new Element("span");
nsp.innerHTML = nameHtml;
nsp.style.float = "left";
return nsp;
},
_getImage : function(obj) {
var state = obj.state;
var si = new Element("img");
si.id = "img-" + obj.sys_id;
si.src = this.STATUS_IMAGES[state];
si.style.marginRight = "10px";
si.style.float = "left";
si.title = this.TEST_STATES[state];
return si;
},
_getDetailElement : function () {
var det = new Element("span");
det.style.marginLeft = "10px";
det.style.float = "left";
return det;
},
_getShowDetailsLink : function(objSysID) {
var da = new Element("a");
da.id = objSysID;
da.controller = this;
da.innerHTML = "(" + this.translator.getMessage("Hide Details") + ")";
da.toggleText = "(" + this.translator.getMessage("Show Details") + ")";
da.style.fontSize = "8pt";
da.style.float = "left";
da.onclick = this.__detailsToggle;
return da;
},
__detailsToggle : function() {
var cont = this.details_container;
cont.toggle();
this.controller.detailStates[this.id] = cont.visible();
var nt = this.toggleText;
this.toggleText = this.innerHTML;
this.innerHTML = nt;
},
_getDetailsText : function(message, obj) {
if (message.length > 150) {
var new_message = new Element("span");
new_message.innerHTML = "<b>"
+ this.translator.getMessage("Details") + ": </b>"
+ message.slice(0, 150) + "... ";
var anch = new Element("a");
anch.href = "test_execution.do?sys_id=" + obj.sys_id;
anch.innerHTML = "<b>(" + this.translator.getMessage("more")
+ ")</b>";
new_message.appendChild(anch);
return new_message;
} else {
var new_message = new Element("span")
new_message.innerHTML = "<b>"
+ this.translator.getMessage("Details") + ": </b>"
+ message;
return new_message;
}
},
_getProgressBar : function (percent) {
percent = Math.max(0, Math.min(100, percent));
var progressContainer = new Element("div");
progressContainer.style.width = "300px";
progressContainer.style.height = "8px";
progressContainer.style.border = "1px solid black";
progressContainer.style.borderRadius = "10px";
progressContainer.style.padding = "2px";
progressContainer.style.marginTop = "2px";
progressContainer.style.marginBottom = "2px";
progressContainer.style.float = "left";
var progressBar = new Element("div");
progressBar.style.width = percent + "%";
progressBar.style.height = "100%";
progressBar.style.borderRadius = "10px";
progressBar.style.backgroundColor = "#667788";
progressContainer.appendChild(progressBar);
return progressContainer;
},
_getFloatClear : function (which) {
var br = new Element("br");
br.style.clear = which;
return br;
},
renderChildren : function(so, pr_cont) {
if (!so.results)
return;
for ( var i = 0; i < so.results.length; i++) {
pr_cont.appendChild(this.getStatusRow(so.results[i], i + 1)).style.marginLeft = "15px";
}
},
_setContainerStyles : function(container) {
container.id = "container";
container.style.overflowY = "auto";
container.style.maxHeight = "50em";
container.style.marginRight = ".25em";
container.style.marginLeft = ".25em";
},
type : 'TestClient'
};
;
/*! RESOURCE: scripts/labels.js */
var refreshRateProperty = "60";
var refreshLabelRate = (refreshRateProperty != null && refreshRateProperty > 0? refreshRateProperty : 60);
var refreshLabelTimer = null;
var g_label_status = initLabelStatus();
CustomEvent.observe('nav.loaded', refreshLabels);
function initLabelStatus() {
var answer = new Object();
answer.loading = false;
answer.error_count = 0;
return answer;
}
function refreshLabels() {
var labelList = new Array();
var divTags = document.getElementsByTagName('div');
if (divTags) {
for(var c=0;c != divTags.length; ++c) {
var divTag = divTags[c];
var label = divTag.sclabel || divTag.getAttribute('sclabel');
if (label && label == 'true') {
var id = divTag.appid || divTag.getAttribute('appid');
labelList.push(id);
}
}
}
startRefresh(labelList);
}
function clearLabelRefresh() {
if (refreshLabelTimer == null)
return;
clearTimeout(refreshLabelTimer);
refreshLabelTimer = null;
}
function startRefresh(labelRefresh) {
clearLabelRefresh();
if (labelRefresh.length < 1)
return;
if (labelsGetRequest(labelRefresh))
refreshLabelTimer = setTimeout(refreshLabels, refreshLabelRate * 1000);
}
function labelsGetRequest(labelIds) {
if (g_label_status.loading)
return true;
if (g_label_status.error_count > 3) {
jslog('Stopped tag fetch due to excessive error counts');
return false;
}
g_label_status.loading = true;
var aj = new GlideAjax("LabelsAjax");
aj.addParam("sysparm_value", labelIds.join(","));
aj.addParam("sysparm_type", 'get');
aj.getXML(labelsGetResponse);
return true;
}
function labelsGetResponse(request) {
g_label_status.loading = false;
if (request.status == 200)
g_label_status.error_count = 0;
else
g_label_status.error_count += 1;
if (!request.responseXML)
return;
var labels = request.responseXML.getElementsByTagName("label");
if (labels && labels.length > 0 ) {
for (var i = 0; i < labels.length; i++) {
var labelEntry = labels[i];
updateMenuItems(labelEntry);
}
}
}
function updateMenuItems(labelElement) {
var appid = labelElement.getAttribute("id");
var divElem = gel('div.' + appid)
var tds = divElem.getElementsByTagName("td");
var appTD = tds[0];
var notRead = 0;
var span = gel(appid);
var table = cel("table");
var tbody = cel("tbody", table);
var label;
var items = labelElement.getElementsByTagName("item");
if (items && items.length > 0 ) {
for (var i=0; i < items.length; i++) {
label = items[i].getAttribute("label");
var lid = items[i].getAttribute("name");
var style = items[i].getAttribute("style");
var read = items[i].getAttribute("read");
if ("true" != read)
notRead++;
var url = items[i].getAttribute("url");
var title = items[i].getAttribute("title");
var image = items[i].getAttribute("image");
createLabelMod(tbody, style, lid, url, title, image, appid);
}
}
updateLabelReadCount(appTD, notRead);
clearNodes(span)
span.appendChild(table);
table = null;
}
function createLabelMod(parent, style, id, url, title, image, appid) {
var tr = cel("tr", parent);
var scrollIcon = isTextDirectionRTL() ? "images/scroll_lft.gifx" : "images/scroll_rt.gifx";
if (image == "images/s.gifx")
image = scrollIcon;
var img;
if (image == null || image == '')
img = '<img style="width:16px; cursor:hand" src="images/icons/remove.gifx" alt="Click me to remove the tag entry" onmouseover="this.src = \'images/closex_hover.gifx\'" onmouseout="this.src = \'images/icons/remove.gifx\'" src="images/icons/remove.gifx"/>';
else
img = "<img style='width:16px' src='"+image+"' alt='' />";
var tdimg = cel("td", tr);
tdimg.style.width = "16px";
var tdhtml;
if (image == scrollIcon)
tdhtml = img;
else
tdhtml = '<a onclick="removeLabel(\'' + appid + '\',\'' + id + '\');" onmouseover="this.src = \'images/closex_hover.gifx\'" onmouseout="this.src = \'images/icons/remove.gifx\'" title="Click me to remove the tag entry">' + img+'</a>';
tdimg.innerHTML = tdhtml;
var td = cel("td", tr);
var html = '<a class="menulabel" style="' + style + '" id= "' + id + '"';
html += ' target="gsft_main" href="' + url +'">'+ title +'</a>';
td.innerHTML = html;
tr = null;
tdimg = null;
td = null;
}
function updateLabelReadCount(appTD, notRead) {
var inner = appTD.innerHTML;
var term = '</H2>';
var paren = inner.indexOf("</H2>");
if (paren < 0) {
paren = inner.indexOf("</h2");
term = '</h2>';
}
if (paren > -1 ) {
inner = inner.substring(0, paren);
paren--;
var c = inner.substring(paren,paren+1);
if (c == ')') {
while (paren > 0 && c != '(') {
paren--;
c = inner.substring(paren,paren+1)
}
if (paren > 0 ) {
inner = inner.substring(0, paren);
}
}
inner = inner.trim();
if (notRead > 0)
inner = inner + ' (' + notRead + ')';
inner = inner + term;
clearNodes(appTD);
appTD.innerHTML = inner;
}
}
function doAssignLabel(tableName, label, sysId) {
var form = getFormByTableName(tableName);
if (sysId == null || !sysId) {
if (!populateParmQuery(form, '', 'NULL'))
return false;
} else {
addInput(form, 'HIDDEN', 'sysparm_checked_items', sysId);
}
if (!label && typeof option != 'undefined' && option.getAttribute("gsft_base_label"))
label = option.getAttribute("gsft_base_label");
addInput(form, 'HIDDEN', 'sys_action', 'java:com.glide.labels.LabelActions');
addInput(form, 'HIDDEN', 'sys_action_type', 'assign_label');
addInput(form, 'HIDDEN', 'sysparm_label_picked', label);
form.submit();
}
function doRemoveLabel(tableName, label, sysId) {
var form = getFormByTableName(tableName);
if (sysId == null || !sysId) {
if (!populateParmQuery(form, '', 'NULL'))
return false;
} else {
addInput(form, 'HIDDEN', 'sysparm_checked_items', sysId);
}
if (!label && typeof option != 'undefined' && option.getAttribute("gsft_base_label"))
label = option.getAttribute("gsft_base_label");
addInput(form, 'HIDDEN', 'sys_action', 'java:com.glide.labels.LabelActions');
addInput(form, 'HIDDEN', 'sys_action_type', 'remove_label');
addInput(form, 'HIDDEN', 'sysparm_label_picked', label);
form.submit();
}
function assignLabelActionViaLookupModal(tableName, listId) {
var list = GlideList2.get(listId);
if (!list)
return;
var sysIds = list.getChecked();
if (!sysIds)
return;
assignLabelViaLookup(tableName, sysIds, list.getView());
}
function assignLabelViaLookup(tableName, sysId, viewName) {
var assignCallback = function (labelId) {
assignLabel(labelId, tableName, sysId, viewName);
};
showLabelLookupWindow("Assign Tag", tableName, sysId, assignCallback);
}
function removeLabelActionViaLookupModal(tableName, listId) {
var list = GlideList2.get(listId);
if (!list)
return;
var sysIds = list.getChecked();
if (!sysIds)
return;
removeLabelViaLookup(tableName, sysIds);
}
function removeLabelViaLookup(tableName, sysId) {
var removeCallback = function (labelId) {
removeLabelById(labelId, sysId);
};
showLabelLookupWindow("Remove Tag", tableName, sysId, removeCallback);
}
function showLabelLookupWindow(actionName, tableName, sysID, callback) {
var tagLookupForm = new GlideDialogWindow("tag_lookup_form");
tagLookupForm.setTitle(actionName);
tagLookupForm.setPreference("sys_ids", sysID);
tagLookupForm.setPreference("table_name", tableName);
tagLookupForm.setPreference('on_accept', callback);
tagLookupForm.removeCloseDecoration();
tagLookupForm.render();
}
function newLabel(tableName, sysID,  callback,  focusTrap) {
var isDoctype = document.documentElement.getAttribute("data-doctype") == "true";
if (isDoctype) {
var tagForm = new GlideDialogWindow("tag_form");
tagForm.setTitle("");
tagForm.setPreference("sys_ids", sysID);
tagForm.setPreference("table_name", tableName);
tagForm.removeCloseDecoration();
tagForm.render();
if (focusTrap) {
$j('#tag_form').on('ft-ready', function() {tagForm.enableFocusTrap();});
$j('#tag_form').on('select2-open', function() {tagForm.disableFocusTrap();});
$j('#tag_form').on('select2-close', function() {tagForm.enableFocusTrap();});
}
} else {
var keys = ["Please enter the name for the new tag", "New tag"];
var msgs = getMessages(keys);
if (!callback)
gsftPrompt(msgs["New tag"], msgs["Please enter the name for the new tag"],  function(labelName) { newLabelRequest(tableName, labelName, sysID)} );
else
gsftPrompt(msgs["New tag"], msgs["Please enter the name for the new tag"],  callback);
}
}
function newLabelRequest(tableName, labelName, sysID) {
if (labelName == null)
return;
var viewName;
var view = gel('sysparm_view');
if (view != null)
viewName = view.value;
assignLabel(labelName, tableName, sysID, viewName);
}
function assignLabel(labelName, tableName, sysId, viewName) {
if (!labelName)
return;
var url = new GlideAjax("LabelsAjax");
url.addParam("sysparm_name", tableName);
url.addParam("sysparm_value", sysId);
url.addParam("sysparm_chars", labelName);
url.addParam("sysparm_type", "create");
if (viewName)
url.addParam("sysparm_view", viewName);
url.getXML(function(){ reloadWindow(window); });
}
function removeLabel(appid, labelid) {
var aj = new GlideAjax("LabelsAjax");
aj.addParam("sysparm_name", appid);
aj.addParam("sysparm_value", labelid);
aj.addParam("sysparm_type", 'delete');
aj.getXML(removeLabelResponse);
}
function removeLabelByName(labelName, sysId) {
var aj = new GlideAjax("LabelsAjax");
aj.addParam("sysparm_name", labelName);
aj.addParam("sysparm_value", sysId);
aj.addParam("sysparm_type", 'removeByName');
aj.getXML(function(){ reloadWindow(window); });
}
function removeLabelById(labelId, sysId) {
var aj = new GlideAjax("LabelsAjax");
aj.addParam("sysparm_name", labelId);
aj.addParam("sysparm_value", sysId);
aj.addParam("sysparm_type", 'remove');
aj.getXML(refreshNavIfNotDoctypeUI);
}
function removeLabelResponse(response, args) {
var labelId = response.responseXML.documentElement.getAttribute("sysparm_name");
if (!labelId)
refreshNavIfNotDoctypeUI();
else {
var labelIds = new Array();
labelIds.push(labelId);
labelsGetRequest(labelIds);
}
}
function newLabelPromptListAction(tableName, listId) {
var nonDoctypeUICallback = function (labelName) { assignLabelToCheckedSysIds(labelName, tableName, listId) };
var list = GlideList2.get(listId);
if (!list)
return;
var sysIds = list.getChecked();
if (!sysIds)
return;
newLabel(tableName, sysIds, nonDoctypeUICallback, true);
}
function assignLabelToCheckedSysIds(labelName, tableName, listId) {
if (!labelName || labelName.strip() == '')
return;
var list = GlideList2.get(listId);
if (!list)
return;
var sysIds = list.getChecked();
if (!sysIds)
return;
assignLabel(labelName, tableName, sysIds, list.getView());
}
function removeLabelFromCheckedSysIds(labelName, listId) {
var list = GlideList2.get(listId);
var sysIds = list.getChecked();
if (!sysIds)
return;
removeLabelByName(labelName, sysIds);
}
function getFormByTableName(tableName) {
var form = getControlForm(tableName);
if (!form)
form = document.forms[tableName + '.do'];
return form;
}
function refreshNavIfNotDoctypeUI() {
var isDoctype = document.documentElement.getAttribute("data-doctype") == "true";
if (!isDoctype)
refreshNav();
}
;
/*! RESOURCE: scripts/OpticsInspector.js */
var OpticsInspector = Class
.create({
CATEGORIES : {
"sys_script" : "BUSINESS RULE",
"sys_script_client" : "CLIENT SCRIPT",
"data_lookup" : "DATA LOOKUP",
"sys_data_policy2" : "DATA POLICY",
"ui_policy" : "UI POLICY",
"wf_context" : "WORKFLOW",
"request_action" : "REQUEST ACTION",
"script_engine" : "SCRIPT ENGINE",
"wf_activity" : "WORKFLOW ACTIVITY",
"acl" : "ACL",
"sys_ui_action" : "UI ACTION",
"reference_qual" : "REFERENCE QUALIFIER QUERY",
"container_action" : "CONTAINER ACTION"
},
initialize : function() {
this.opticsContextStack = new Array();
this.tableName = null;
this.fieldName = null;
this.enabled = false;
},
pushOpticsContext : function(category, name, sys_id, sourceTable) {
if(category == 'sys_script_client')
name = "\""+name+"\"";
var context = {
"category" : category,
"name" : name,
"sys_id" : sys_id,
"startTime" : new Date(),
actions : [],
type : 'context',
"sourceTable": sourceTable || category
};
if ((typeof g_form !== 'undefined') && g_form.actionStack)
g_form.actionStack.push(context);
if (this.isInspecting() && category !== 'container_action')
this.opticsContextStack.push(context);
},
popOpticsContext : function() {
var context ;
if ((typeof g_form !== 'undefined') && g_form.actionStack) {
context = g_form.actionStack.pop();
if (g_form._pushAction)
g_form._pushAction(context);
}
if (this.isInspecting() && this.opticsContextStack.length > 0 && (context && context.category !== 'container_action'))
return this.opticsContextStack.pop();
return null;
},
isInspecting : function(tableName, fieldName) {
if (this.tableName == null && this.fieldName == null)
return false;
if (arguments.length == 0)
return (this.tableName && this.tableName.length > 0
&& this.fieldName && this.fieldName.length > 0);
if (arguments.length == 2)
return tableName == this.tableName
&& fieldName == this.fieldName;
return false;
},
getTableName : function() {
return (this.tableName && this.tableName.length > 0) ? this.tableName
: '';
},
getFieldName : function() {
return (this.fieldName && this.fieldName.length > 0) ? this.fieldName
: '';
},
hideWatchIcons: function(){
if(isDoctype()) {
$$(".icon-debug.watch_icon").each(function (element) {
$(element).hide()
});
} else {
$$("img.watch_icon").each(function (element) {
$(element).hide()
});
}
},
addWatchIcon:function(watchField){
if (!watchField) {
return;
}
var td = $('label.' + watchField);
if (!td) {
var fieldParts = watchField.split(".");
if ((fieldParts.length == 2 && fieldParts[0].length > 0 && fieldParts[1].length > 0)) {
td = $('label_' + fieldParts[1]);
if (td && td.tagName !== 'TD') {
var tds = td.getElementsByTagName("TD");
if (tds && tds.length > 0) {
td = tds[0];
}
}
if (!td) {
td = $('ni.' + fieldParts[1] + '_label');
}
}
}
var icon;
if (td) {
if(isDoctype()) {
var label = td.select('label');
if (label.length > 0) {
label = label[0];
} else {
label = td.select('legend');
if (label.length > 0) {
label = label[0];
} else if (td.nodeName == "LABEL") {
label = td;
}
}
icon = '<span class="label-icon icon-debug watch_icon" id="'
+ watchField
+ '.watch_icon"'
+ ' onclick="CustomEvent.fireTop(\'showFieldWatcher\')" '
+ ' src="images/debug.gifx" '
+ ' alt="Field is being watched"'
+ ' title="Field is being watched"></span>';
if(label){
$(label).insert(icon);
}
} else {
if (fieldParts.length === 2
&& fieldParts[1].startsWith("IO:")) {
var legend = td.select('legend');
if (legend.length > 0) {
td = legend[0];
}
}
icon = '<img class="watch_icon" id="'
+ watchField
+ '.watch_icon"'
+ ' onclick="CustomEvent.fireTop(\'showFieldWatcher\')" '
+ ' src="images/debug.gifx" '
+ ' alt="Field is being watched"'
+ ' title="Field is being watched" />';
td.insert(icon);
}
}
},
clearWatchField : function(watchfield) {
this.opticsContextStack = new Array();
this.tableName = null;
this.fieldName = null;
this.hideWatchIcons();
var debuggerTools = getTopWindow().debuggerTools;
if (debuggerTools && debuggerTools.isDebugPanelVisible()) {
var wndw = debuggerTools.getJsDebugWindow();
if (wndw.updateFieldInfo)
wndw.updateFieldInfo(null);
} else {
debuggerTools = parent.parent.debuggerTools;
if (debuggerTools && debuggerTools.isDebugPanelVisible()) {
var wndw = debuggerTools.getJsDebugWindow();
if (wndw.updateFieldInfo)
wndw.updateFieldInfo(null);
}
}
},
setWatchField : function(watchField) {
if (!watchField)
return;
var fieldParts = watchField.split(".");
if (!(fieldParts.length == 2 && fieldParts[0].length > 0 && fieldParts[1].length > 0))
return;
this.tableName = fieldParts[0];
this.fieldName = fieldParts[1];
this.hideWatchIcons();
var icon = $(watchField + ".watch_icon");
if (icon) {
icon.show();
}
else {
this.addWatchIcon(watchField);
}
var debuggerTools = getTopWindow().debuggerTools;
if (debuggerTools && debuggerTools.isDebugPanelVisible()) {
var wndw = debuggerTools.getJsDebugWindow();
if (wndw.updateFieldInfo)
wndw.updateFieldInfo(watchField);
} else{
debuggerTools = parent.parent.debuggerTools;
if (debuggerTools && debuggerTools.isDebugPanelVisible()) {
var wndw = debuggerTools.getJsDebugWindow();
if (wndw.updateFieldInfo)
wndw.updateFieldInfo(watchField);
}
}
},
showWatchField : function(watchField) {
var debuggerTools = getTopWindow().debuggerTools;
if (debuggerTools) {
if (!debuggerTools.isDebugPanelVisible())
debuggerTools.showFieldWatcher();
setWatchField(watchField);
} else {
debuggerTools = parent.parent.debuggerTools;
if (debuggerTools) {
if (!debuggerTools.isDebugPanelVisible())
debuggerTools.showFieldWatcher();
setWatchField(watchField);
}
}
},
processClientMessage : function(notification) {
var opticsContext = this.opticsContextStack[this.opticsContextStack.length - 1];
if (!opticsContext) {
jslog("No optics context found");
return;
}
var info = {
type : 'CLIENT ',
message : notification.message,
message_type : "static",
category : opticsContext.category,
name : opticsContext.name,
level : this.opticsContextStack.length,
time : getFormattedTime(new Date()),
call_trace : this._getCallTrace(this.opticsContextStack),
sys_id : opticsContext["sys_id"],
sourceTable: opticsContext["sourceTable"]
};
if (notification["oldvalue"] && notification["newvalue"]) {
info.message_type = "change";
info.oldvalue = notification["oldvalue"];
info.newvalue = notification["newvalue"];
}
this.process(info);
},
processServerMessages : function() {
var spans = $$('span[data-type="optics_debug"]');
for (var i = 0; i < spans.length; i++) {
var notification = new GlideUINotification({
xml : spans[i]
});
this.processServerMessage(notification);
spans[i].setAttribute("data-attr-processed", "true");
}
},
processServerMessage : function(notification) {
if (notification.getAttribute('processed') == "true")
return;
var info = {
type : 'SERVER',
category : notification.getAttribute('category'),
name : notification.getAttribute('name'),
message : notification.getAttribute('message'),
message_type : notification.getAttribute('message_type'),
oldvalue : notification.getAttribute('oldvalue'),
newvalue : notification.getAttribute('newvalue'),
level : notification.getAttribute('level'),
time : notification.getAttribute('time'),
sys_id : notification.getAttribute('sys_id'),
sourceTable : notification.getAttribute('sourceTable'),
call_trace : this._getCallTrace(eval(notification
.getAttribute('call_trace')))
};
this.process(info);
},
process : function(notification) {
var msg = '<div class="debug_line ' + notification['category'] + '">' + this._getMessage(notification) + '</div>';
this._log(msg);
},
addLine : function() {
this._log('<hr class="logs-divider"/>');
},
openScriptWindow : function(tablename, sysid) {
if (tablename && sysid) {
if (tablename == "request_action")
tablename = "sys_ui_action";
var url = "/" + tablename + ".do?sys_id=" + sysid;
window.open(url, "tablewindow");
}
},
_log : function(msg) {
var debuggerTools = getTopWindow().debuggerTools;
if (debuggerTools && debuggerTools.isDebugPanelVisible()) {
var wndw = debuggerTools.getJsDebugWindow();
if (wndw.insertJsDebugMsg)
wndw.insertJsDebugMsg(msg);
} else {
if(parent && parent.parent) {
debuggerTools = parent.parent.debuggerTools;
if (debuggerTools && debuggerTools.isDebugPanelVisible()) {
var wndw = debuggerTools.getJsDebugWindow();
if (wndw.insertJsDebugMsg)
wndw.insertJsDebugMsg(msg);
}
}
}
},
_getCallTrace : function(contextStack) {
var trace = '';
var arrows = '<span class="rtl-arrow"> &larr;</span><span class="lrt-arrow">&rarr; </span>';
var space = arrows;
for (i = 0, maxi = contextStack.length; i < maxi; i++) {
var context = contextStack[i];
if (i > 0)
space = arrows + space;
if (context['name'] && context['name'].length > 0)
trace += '<div>' + space
+ this._getCategoryName(context['category'])
+ '&nbsp;-&nbsp;' + context['name'] + '</div>';
else
trace += '<div>' + space
+ this._getCategoryName(context['category'])
+ '</div>';
}
if (trace && trace.length > 0)
trace = '<div class="call_trace">' + trace + '</div>';
return trace;
},
_getMessage : function(notification) {
var notif_type = notification['type'];
var legend_title = (notif_type.indexOf('CLIENT') > -1) ? 'Client-side activity'
: 'Server-side activity';
var msg = '<span class="expand-button" onclick="toggleCallTrace(this);">&nbsp;</span>';
msg += '<img class="infoIcon" height="16"  width="16" border="0" src="images/info-icon.png" title="'
+ legend_title + '" alt="' + legend_title + '">';
msg += '<span class="log-time ' + notif_type + '">'
+ notification['time'] + '</span>';
msg += '<span class="log-category">'
+ this.CATEGORIES[notification['category']];
if (notification['name'] && notification['name'].length > 0) {
if (notification["sys_id"])
msg += '&nbsp;-&nbsp;<a data-tablename="'
+ notification['sourceTable']
+ '" data-sys_id="'
+ notification['sys_id']
+ '" onclick="javascript:openScriptWindow(this);">'
+ notification['name'] + '</a></span>';
else
msg += '&nbsp;-&nbsp;' + notification['name']
+ '</span>';
} else
msg += '</span>';
msg += '<span class="log-value">';
if ("request_action" === notification['category']) {
msg += 'Value received from client is: <span class="value" title="Value">'
+ notification['message'] + '</span>';
} else if (notification["message_type"] == "change") {
msg += '<span>'
+ notification["oldvalue"]
+ '</span><span class="rtl-arrow"> &larr; </span><span class="lrt-arrow"> &rarr; </span><span>'
+ notification["newvalue"] + '</span>';
} else {
msg += notification['message'];
}
msg += '</span>';
msg += notification['call_trace'];
return msg;
},
_getCategoryName : function(category) {
var name = this.CATEGORIES[category];
if (name === 'undefined' || name === null)
name = category;
return name;
},
_getLevelStr : function(level) {
if (level == 'undefined' || level == null || level <= 0)
level = 1;
var levelStr = '';
for (i = 0; i < level; i++)
levelStr += '-';
return levelStr + '>';
},
toString : function() {
return 'OpticsInspector';
}
});
var g_optics_inspect_handler = new OpticsInspector();
OpticsInspector.WATCH_EVENT = 'glide:ui_notification.optics_debug';
OpticsInspector.WATCH_EVENT_UI = 'glide:ui_notification.optics_debug_ui';
OpticsInspector.WATCH_FIELD = 'glide_optics_inspect_watchfield';
OpticsInspector.SHOW_WATCH_FIELD = 'glide_optics_inspect_watchfield';
OpticsInspector.UPDATE_WATCH_FIELD = 'glide_optics_inspect_update_watchfield';
OpticsInspector.CLEAR_WATCH_FIELD = 'glide_optics_inspect_clear_watchfield';
OpticsInspector.SHOW_WATCH_FIELD = 'glide_optics_inspect_show_watchfield';
OpticsInspector.PUT_CONTEXT = 'glide_optics_inspect_put_context';
OpticsInspector.POP_CONTEXT = 'glide_optics_inspect_pop_context';
OpticsInspector.PUT_CS_CONTEXT = 'glide_optics_inspect_put_cs_context';
OpticsInspector.POP_CS_CONTEXT = 'glide_optics_inspect_pop_cs_context';
OpticsInspector.PUT_CONTEXT = 'glide_optics_inspect_put_context';
OpticsInspector.POP_CONTEXT = 'glide_optics_inspect_pop_context';
OpticsInspector.LOG_MESSAGE = 'glide_optics_inspect_log_message';
OpticsInspector.WINDOW_OPEN = 'glide_optics_inspect_window_open';
function getClientScriptContextName(name, type) {
var csname = null;
if (type === "submit")
csname = g_event_handlers_onSubmit[name];
else if (type === "load")
csname = g_event_handlers_onLoad[name];
else if (type === "change")
csname = g_event_handlers_onChange[name];
return csname;
}
CustomEvent.observe(OpticsInspector.PUT_CONTEXT, function(category, name, sys_id, sourceTable) {
g_optics_inspect_handler.pushOpticsContext(category, name, sys_id, sourceTable);
});
CustomEvent.observe(OpticsInspector.POP_CONTEXT, function() {
g_optics_inspect_handler.popOpticsContext();
});
CustomEvent.observe(OpticsInspector.PUT_CS_CONTEXT, function(name, type) {
var csname = getClientScriptContextName(name, type);
if (csname)
g_optics_inspect_handler.pushOpticsContext("sys_script_client", csname,
g_event_handler_ids[name]);
});
CustomEvent.observe(OpticsInspector.POP_CS_CONTEXT, function(name, type) {
var csname = getClientScriptContextName(name, type);
if (csname)
g_optics_inspect_handler.popOpticsContext();
});
CustomEvent.observe(OpticsInspector.LOG_MESSAGE, function(notification) {
if (g_optics_inspect_handler.isInspecting(notification["table"],
notification["field"])) {
g_optics_inspect_handler.processClientMessage(notification);
}
});
CustomEvent.observe(OpticsInspector.WATCH_EVENT_UI, function(notification) {
g_optics_inspect_handler.process(notification);
});
CustomEvent.observe(OpticsInspector.WATCH_EVENT, function(notification) {
g_optics_inspect_handler.processServerMessage(notification);
});
CustomEvent.observe(OpticsInspector.WATCH_FIELD, function(watchfield) {
g_optics_inspect_handler.setWatchField(watchfield);
});
CustomEvent.observe(OpticsInspector.SHOW_WATCH_FIELD, function(watchfield) {
g_optics_inspect_handler.showWatchField(watchfield);
});
CustomEvent.observe(OpticsInspector.CLEAR_WATCH_FIELD, function(watchfield) {
g_optics_inspect_handler.clearWatchField(watchfield);
});
CustomEvent.observe(OpticsInspector.UPDATE_WATCH_FIELD, function(watchfield) {
g_optics_inspect_handler.setWatchField(watchfield);
if (window.name !== "jsdebugger") {
g_optics_inspect_handler.addLine();
g_optics_inspect_handler.processServerMessages();
}
});
;
/*! RESOURCE: scripts/SNCredStoreFormUtil.js */
var SNCredStoreFormUtil = {
mandatoryFieldMap: {
name: 'Name',
type: 'Type',
hostname: 'Hostname',
},
validateMandatoryFields: function() {
var unfilledMandatoryFields = [];
for (var key in this.mandatoryFieldMap) {
g_form.hideErrorBox(key);
if (!g_form.getValue(key)) {
g_form.showErrorBox(key, this.mandatoryFieldMap[key] + " is required");
unfilledMandatoryFields.push(this.mandatoryFieldMap[key]);
}
}
if (unfilledMandatoryFields.length > 0)
g_form.addErrorMessage(g_scratchpad.unfilledMandatoryFieldsMsg + unfilledMandatoryFields.join());
return unfilledMandatoryFields;
},
isValidHistoryLimit: function() {
var limit;
if (g_form.getBooleanValue('enforce_history_policy')) {
limit = this.getPwdHistoryLimit();
if (limit === -1) {
g_form.addErrorMessage(g_scratchpad.mandatoryHistoryParamMsg);
return false;
}
}
return true;
},
_showHistoryLimitConfirmation: function(newLimit, oldLimit, action) {
var modal = new GlideModal('pwd_history_change_confirmation');
modal.setTitle('Confirmation');
modal.setPreference('sysparm_old_limit', oldLimit);
modal.setPreference('sysparm_new_limit', newLimit);
modal.setPreference('sysparm_action', action);
modal.setPreference('sysparm_conf_type', 'limit_decrease_confirmation');
modal.setWidth(350);
modal.render();
},
_showEnforceHistoryUncheckConfirmation: function(action) {
var modal = new GlideModal('pwd_history_change_confirmation');
modal.setTitle('Confirmation');
modal.setPreference('sysparm_action', action);
modal.setPreference('sysparm_conf_type', 'history_uncheck_confirmation');
modal.setWidth(350);
modal.render();
},
getPwdHistoryLimit: function() {
var list = GlideList2.getListsForTable('pwd_cred_store_param')[0];
if (list) {
var numRows = list.table.rows.length;
for (var i = 1; i < numRows-1; i++) {
var curRow = list.table.rows[i];
var paramId  = curRow.getAttribute('sys_id');
var paramName = list.getCell(paramId, 'name').textContent;
if (paramName == 'password_history_limit') {
if (curRow.className.indexOf("list_delete") > 0) {
return -1;
}
if (list.getCell(paramId, 'value').textContent)
return parseInt(list.getCell(paramId, 'value').textContent);
return -1;
}
}
}
return -1;
},
save: function() {
this.saveOrSubmit("save");
},
update: function() {
this.saveOrSubmit("submit");
},
saveOrSubmit: function(action) {
if (!action)
action = "submit";
var hasIssues = false;
if (this.validateMandatoryFields().length > 0) {
hasIssues = true;
return;
}
if (!g_form.getBooleanValue('enforce_history_policy') && g_scratchpad.cur_enforce_history_policy) {
hasIssues = true
this._showEnforceHistoryUncheckConfirmation(action);
}
if (g_form.getBooleanValue('enforce_history_policy')) {
if (!this.isValidHistoryLimit()) {
hasIssues = true;
return;
}
var newLimit = this.getPwdHistoryLimit();
var oldLimit = g_scratchpad.cur_password_history_limit;
if (newLimit < oldLimit) {
hasIssues = true;
this._showHistoryLimitConfirmation(newLimit, oldLimit, action);
}
}
if (!hasIssues) {
if (action == "submit") {
gsftSubmit(null, g_form.getFormElement(), "sysverb_update");
return;
}
gsftSubmit(null, g_form.getFormElement(), "sysverb_update_and_stay");
}
}
};
;
/*! RESOURCE: scripts/CSDCatItemUtilClient.js */
var CSDCatItemUtilClient = {
g_formError: [],
};
;
/*! RESOURCE: scripts/CfgMgmtSCClient.js */
var CfgMgmtSCClient = {
_fieldsInfo: {},
validateCatItemParameterVariables: function(ajaxProcessor, variableSysId, oldValue, newValue, isLoading, g_form) {
if (isLoading || oldValue == newValue)
return;
var parameters = {};
parameters.variableSysId = variableSysId;
parameters.parameterValue = newValue.trim();
this.callAjax(ajaxProcessor, "validateVariableValue", parameters, function(answer) {
var result = JSON.parse(answer);
result.variableSysId = "IO:" + variableSysId;
CfgMgmtSCClient._fieldsInfo[result["name"]] = result;
CfgMgmtSCClient.showAllFieldMessages(g_form);
});
},
callAjax: function(ajaxName, methodName, parameters, callback) {
var glideAjax = new GlideAjax(ajaxName);
glideAjax.addParam("sysparm_name", methodName);
if (parameters) {
for (var name in parameters) {
glideAjax.addParam(name, parameters[name]);
}
}
if (callback) {
glideAjax.getXMLAnswer(callback);
} else {
glideAjax.getXMLWait();
return glideAjax.getAnswer();
}
},
beforeSubmitCloudRsrcTemplate: function(g_form) {
if (this.isFormValid())
return true;
var msg = "Please correct errors to submit order";
g_form.addErrorMessage(msg);
this.showAllFieldMessages(g_form);
return false;
},
isFormValid: function() {
if (!this._fieldsInfo)
return true;
for (var name in this._fieldsInfo) {
if (!this._fieldsInfo[name].isValid)
return false;
}
return true;
},
showAllFieldMessages: function(g_form) {
g_form.hideAllFieldMsgs("error");
g_form.hideAllFieldMsgs("error");
g_form.clearMessages();
for (var name in this._fieldsInfo) {
var fieldInfo = this._fieldsInfo[name];
if (fieldInfo.message.length > 0) {
for (var i = 0; i < fieldInfo.message.length; i++) {
g_form.showFieldMsg(fieldInfo.variableSysId, fieldInfo.message[i], fieldInfo.msgtype);
}
}
}
}
};
;
/*! RESOURCE: scripts/spell.js */
var TAG_DIV			= "div";
var TAG_SPAN		= "span";
var TAG_FORM		= "form";
var TAG_TEXTAREA	= "textarea";
var TAG_INPUT		= "input";
var TAG_A			= "a";
var SMENU_TAG		= "_suggestmenu";
var DISPLAY_TAG		= "_display";
var MENU_BGCOLOR	= "#DDDDDD";
var HTML_TEXT		= 0;
var FLAT_TEXT		= 1;
var POSITION		= 0;
var WORD 			= 1;
var SETWORD 		= 2;
var MODE 			= 3;
var SUGGESTS		= 4;
var TEXT_MODE		= 0;
var BOX_MODE		= 1;
var ITEM_HEIGHT		= 16;
var FONT_SIZE		= 9;
var FONT_FACE		= "Arial";
var PREVIEW_BORDER	= 1;
var PREVIEW_PADDING	= 2;
var SUGGEST_TOP_BORDER	= 3;
var SUGGEST_BOT_BORDER	= 2;
var mods		= new Array();
var originalSpellValue = new Array();
var keys = ["Checking...", "Resume", "Resume editing", "No misspellings found"];
var processing = false;
function spellCheck(elementName) {
var msgs = getMessages(keys);
var linkName = "link." + elementName;
var link = getObjectByName(linkName, TAG_A);
var textField = getObjectByName(elementName, TAG_TEXTAREA);
if (textField == null)
textField = getObjectByName(elementName, TAG_INPUT);
textField.parentNode.onsubmit = saveAllChanges;
if (!link.savedHTML)
link.savedHTML = link.innerHTML;
setStatus(linkName, msgs["Checking..."]);
jslog("element:  " + elementName);
if (!textField.mode) {
if (!processing)
grabSpellData(elementName, textField, linkName, msgs);
} else {
var previewDiv = getObjectByName(elementName + DISPLAY_TAG, TAG_DIV);
setStatus(linkName, "");
textField.mode = 0;
updateTextBox(elementName);
hideDiv(previewDiv);
hideAllMenus();
delete originalSpellValue[elementName];
}
}
function displaySpellText(elementName) {
var sDiv = getObjectByName(elementName + DISPLAY_TAG, TAG_DIV);
var textField = getObjectByName(elementName, TAG_TEXTAREA);
if (textField == null)
textField = getObjectByName(elementName, TAG_INPUT);
var scroll = 'auto';
if (textField.tagName == 'INPUT')
scroll = 'visible';
if (!sDiv) {
sDiv = createEditDiv(elementName + DISPLAY_TAG, textField, scroll);
addChild(sDiv);
}
var displayText = buildDisplayText(elementName, HTML_TEXT);
sDiv.innerHTML = "<pre wrap='wrap' style=\"" +
"margin-top: 0px; margin-bottom: 0px; " +
"font-family: " + FONT_FACE + "; " +
"white-space: pre-wrap; " +
"word-wrap: break-word; " +
"font-size: " + FONT_SIZE + "pt;" +
"\">" + displayText + "</pre>";
saveAllChanges();
showDiv(sDiv);
}
function buildDisplayText(elementName, flatText) {
var rText;
var prevPos = 0;
var curPos = 0;
var spellCheckText = new Array();
var textField = getObjectByName(elementName, TAG_TEXTAREA);
if (textField == null)
textField = getObjectByName(elementName, TAG_INPUT);
var baseText = textField.value;
for(var zo = 0; zo < mods[elementName].length; zo++) {
var mod = mods[elementName][zo];
var zPos = mod[POSITION];
var zWord = mod[WORD];
var zSetWord = mod[SETWORD];
var zMode = mod[MODE];
var fName = buildRefID(elementName, zPos);
if (zPos > 0) {
spellCheckText.push(baseText.substring(prevPos, zPos));
curPos += zPos - prevPos;
}
if (flatText) {
if (zMode == BOX_MODE) {
var iField = getObjectByName(fName, TAG_INPUT);
spellCheckText.push(iField.value);
mod[WORD] = iField.value;
mod[POSITION] = curPos;
} else {
spellCheckText.push(zSetWord);
mod[WORD] = zSetWord;
mod[POSITION] = curPos;
}
} else {
if (zMode == BOX_MODE) {
var iField = getObjectByName(fName, TAG_INPUT);
if (iField)
zSetWord = iField.value;
spellCheckText.push("<input type=input " +
"id=\"" + fName + "\" name=\"" + fName + "\" " +
"style=\"font-weight: bold; font-family: " + FONT_FACE +
"; font-size: " + FONT_SIZE +
"pt; color: black;\"" +
"value=\"" + zSetWord + "\" " +
"size=" + ((zWord.length < 4 ? 4 : zWord.length - 2)) + ">");
} else {
spellCheckText.push("<a " +
"id=\"" + fName + "\" name=\"" + fName + "\" " +
"style=\"color: " +
(zWord == zSetWord ? "red" : "green") +
"; font-weight: bold;\" onclick=\"showSuggestions(" +
zo + ", '" + fName +
"', '" + elementName + "');Event.stop(event);\">" + zSetWord + "</a>");
}
}
prevPos = parseInt(zPos) + (zWord.length);
curPos += mod[WORD].length;
}
spellCheckText.push(baseText.substring(prevPos));
rText = spellCheckText.join("")
return rText;
}
function buildRefID(elementName, position) {
return elementName + "_pos_" + position;
}
function hideDiv(theDiv) {
if (theDiv)
theDiv.style.visibility = "hidden";
}
function showDiv(theDiv) {
if (theDiv)
theDiv.style.visibility = "visible";
}
function createEditDiv(id, field, overflow) {
var menu = document.createElement(TAG_DIV);
menu.id = id;
menu.name = id;
menu.style.borderRight="black " + PREVIEW_BORDER + "px solid";
menu.style.borderLeft="black " + PREVIEW_BORDER + "px solid";
menu.style.borderTop="black " + PREVIEW_BORDER + "px solid";
menu.style.borderBottom="black " + PREVIEW_BORDER + "px solid";
menu.style.paddingRight=PREVIEW_PADDING;
menu.style.paddingLeft=PREVIEW_PADDING;
menu.style.paddingTop=PREVIEW_PADDING;
menu.style.paddingBottom=PREVIEW_PADDING;
menu.style.visibility="hidden";
menu.style.position="absolute";
menu.style.backgroundColor="#CCCCEE";
menu.style.overflow=overflow;
menu.style.fontFamily=FONT_FACE;
menu.style.fontSize=FONT_SIZE + "pt";
menu.style.whiteSpace="pre";
menu.style.wordWrap="break-word";
menu.style.zIndex = 20000;
adjustSpellCheckEditDiv(menu, field);
menu.onclick = hideAllMenus;
menu.onscroll = hideAllMenus;
menu.onkeyup = saveAllChanges;
return menu;
}
function adjustSpellCheckEditDiv(menu, field) {
menu.style.left = grabOffsetLeft(field) + "px";
menu.style.top = grabOffsetTop(field) + "px";
var setWidth = field.offsetWidth;
var setHeight = field.offsetHeight;
if (!isMSIE) {
var borderSizes = ( PREVIEW_BORDER * 2 ) + ( PREVIEW_PADDING * 2);
setHeight -= borderSizes;
setWidth -= borderSizes;
}
menu.style.height = (setHeight - 2) + "px";
menu.style.width = (setWidth - 2) + "px";
}
var hideAllMenus=function() {
var divs = document.getElementsByTagName(TAG_DIV);
for(var ca = 0; ca < divs.length; ca++) {
var daDiv = divs[ca];
var divID = daDiv.id;
if (divID.length > SMENU_TAG.length &&
(divID.substring(divID.length - SMENU_TAG.length) == SMENU_TAG)) {
hideDiv(daDiv);
}
}
return;
}
var saveAllChanges=function() {
var divs = document.getElementsByTagName(TAG_DIV);
for(var ca = 0; ca < divs.length; ca++) {
var daDiv = divs[ca];
var divID = daDiv.id;
var displayTag = elementName + DISPLAY_TAG;
if (divID.length > displayTag.length &&
(divID.substring(divID.length - displayTag.length) == displayTag)) {
var elementName = divID.substring(0, divID.length - DISPLAY_TAG.length);
updateTextBox(elementName);
}
}
return;
}
function createSuggestDiv(link, id, elementName) {
var menu = document.createElement(TAG_DIV);
menu.id = id;
menu.name = menu.id;
menu.elementName = elementName;
menu.style.borderRight="gray 2px outset";
menu.style.borderLeft="white 2px outset";
menu.style.borderTop="white " + SUGGEST_TOP_BORDER + "px outset";
menu.style.borderBottom="gray " + SUGGEST_BOT_BORDER + "px outset";
menu.style.paddingRight="1";
menu.style.paddingLeft="1";
menu.style.paddingTop="2";
menu.style.paddingBottom="2";
menu.style.visibility="hidden";
menu.style.position="absolute";
menu.style.backgroundColor=MENU_BGCOLOR;
menu.style.fontFamily=FONT_FACE;
menu.style.fontSize="8pt";
menu.style.zIndex = 20000;
return menu;
}
function grabSpellData(nam, textField, linkName, msgs) {
processing = true;
mods = new Array();
var request = findXMLObject();
var searchURL = "xmlhttp.do";
var textField = getObjectByName(nam, TAG_TEXTAREA);
if (textField == null)
textField = getObjectByName(nam, TAG_INPUT);
var baseText = textField.value;
originalSpellValue[nam] = baseText;
var aj = new GlideAjax("SpellCheckerAjax");
aj.setEncode(false);
aj.addParam("sysparm_name", encodeText(nam));
aj.addParam("sysparm_chars", encodeText(baseText));
aj.getXML(afterGrabSpellData, null, [nam, textField, linkName, msgs, processing]);
}
function afterGrabSpellData(response, args) {
if (!response || !response.responseXML)
return;
elementName = args[0];
textField = args[1];
linkName = args[2];
msgs = args[3];
processing = args[4];
var changes = extractSpellChanges(response.responseXML);
mods[elementName] = changes;
if (changes.length) {
textField.mode = 1;
displaySpellText(elementName);
if (textField.tagName == 'INPUT')
setStatus(linkName, msgs["Resume"]);
else
setStatus(linkName, msgs["Resume editing"]);
} else {
setStatus(linkName, msgs["No misspellings found"]);
setTimeout("setStatus('" + linkName + "', '');", 3000);
}
processing = false;
}
function extractSpellChanges(responseXML) {
if (responseXML && responseXML.documentElement) {
var items = responseXML.getElementsByTagName("match");
var elementName = responseXML.documentElement.getAttribute("sysparm_name");
var origText = responseXML.documentElement.getAttribute("sysparm_chars");
for(i = 0; i < items.length; i++) {
var item = items[i];
var word = item.getAttribute("word");
var pos = item.getAttribute("position");
var sugs  = item.getElementsByTagName("suggest")
mods[mods.length] = new Array(pos, word, word, TEXT_MODE, sugs);
}
}
return mods;
}
function encodeText(txt) {
if (encodeURIComponent)
return encodeURIComponent(txt);
if (escape)
return escape(txt)
}
function findXMLObject() {
var obj=null;
try {
obj=new ActiveXObject("Msxml2.XMLHTTP")
} catch(e) {
try {
obj=new ActiveXObject("Microsoft.XMLHTTP")
} catch(sc) {
obj=null
}
}
if (!obj && typeof XMLHttpRequest!="undefined") {
obj=new XMLHttpRequest()
}
return obj;
}
function showSuggestions(mod, name, elementName) {
var link = getObjectByName(name, TAG_A);
var widSize = 6;
if (link) {
var previewDiv = getObjectByName(elementName + DISPLAY_TAG, TAG_DIV);
var sugsDiv = getObjectByName(name + "_" + elementName + SMENU_TAG, TAG_DIV);
if (!sugsDiv) {
sugsDiv = createSuggestDiv(link, name + "_" + elementName + SMENU_TAG, elementName);
addChild(sugsDiv);
}
while(sugsDiv.childNodes.length>0)
sugsDiv.removeChild(sugsDiv.childNodes[0]);
for(var gs = 0; gs < mods[elementName][mod][SUGGESTS].length; gs++) {
var itemName = mods[elementName][mod][SUGGESTS][gs].getAttribute("word");
sugsDiv.appendChild(makeMenuItem(TEXT_MODE, mod, itemName));
if (itemName.length > widSize)
widSize = itemName.length;
}
var msg = getMessage('Edit...');
if (msg.length > widSize)
widSize = msg.length;
sugsDiv.appendChild(makeMenuItem(BOX_MODE, mod, "<i>" + msg + "</i>"));
sugsDiv.style.left = grabOffsetLeft(link) + "px";
sugsDiv.style.top = ((grabOffsetTop(link) + link.offsetHeight + 2) - previewDiv.scrollTop) + "px";
sugsDiv.style.width = link.offsetWidth + "px";
var menuItems = mods[elementName][mod][SUGGESTS].length + 1;
var sHeight = (ITEM_HEIGHT * menuItems) + (SUGGEST_TOP_BORDER + SUGGEST_BOT_BORDER);
if (navigator&&navigator.userAgent.toLowerCase().indexOf("msie") != -1) {
sugsDiv.style.height = sHeight;
} else {
sugsDiv.style.height = sHeight - (SUGGEST_TOP_BORDER + SUGGEST_BOT_BORDER);
sugsDiv.style.width = ((FONT_SIZE - 2) * widSize-1) + "px";
}
showDiv(sugsDiv);
}
}
function makeMenuItem(mode, mNum, item) {
var theDiv=document.createElement(TAG_DIV);
var menuRow=document.createElement(TAG_SPAN);
var itemInRow=document.createElement(TAG_SPAN);
theDiv.onmousedown=spellClickedDropDown;
theDiv.onmouseover=spellMouseOverDropDown;
theDiv.onmouseout=spellMouseOutDropDown;
theDiv.cmod = mNum;
theDiv.cmode = mode;
itemInRow.innerHTML = item;
menuRow.appendChild(itemInRow);
theDiv.appendChild(menuRow);
setSpellStyle(menuRow,"dropDownRowStyle");
setSpellStyle(itemInRow,"dropDownItemStyle");
return theDiv;
}
function getObjectByName(name, type) {
var objs = document.getElementsByTagName(type);
for(var ca = 0; ca < objs.length; ca++) {
var daObj = objs[ca];
if (daObj && (daObj.id == name || daObj.name == name))
return daObj;
}
return;
}
function setSpellStyle(child,styleName) {
child.className=styleName;
if (styleName == "nonSelectedItemStyle") {
child.style.backgroundColor=MENU_BGCOLOR;
child.style.color="black";
if (child.displaySpan)
child.displaySpan.style.color="green"
} else if (styleName == "selectedItemStyle") {
child.style.backgroundColor="#000070";
child.style.color="white";
child.style.cursor="pointer";
if (child.displaySpan)
child.displaySpan.style.color="white"
} else if (styleName == "dropDownItemStyle") {
child.style.width="100%";
child.style.cssFloat="left";
} else if (styleName == "dropDownRowStyle") {
child.style.display="block";
child.style.paddingLeft="5";
child.style.paddingRight="5";
child.style.height=ITEM_HEIGHT + "px";
child.style.overflow="hidden";
}
}
function updateTextBox(elementName) {
var textField = getObjectByName(elementName, TAG_TEXTAREA);
if (textField == null)
textField = getObjectByName(elementName, TAG_INPUT);
var newValue = buildDisplayText(elementName, FLAT_TEXT);
if (newValue != originalSpellValue[elementName]) {
textField.value = newValue;
multiModified(textField);
}
}
var spellClickedDropDown=function() {
var elementName = this.parentNode.elementName;
var position = mods[elementName][this.cmod][POSITION];
if (this.cmode == BOX_MODE) {
mods[elementName][this.cmod][MODE] = BOX_MODE;
mods[elementName][this.cmod][SETWORD] = mods[elementName][this.cmod][WORD];
} else {
mods[elementName][this.cmod][MODE] = TEXT_MODE;
mods[elementName][this.cmod][SETWORD] = spellMenuInfo(this);
}
displaySpellText(elementName);
if (this.cmode == BOX_MODE) {
var fName = buildRefID(elementName, position);
setTimeout("fieldFocus('" + fName + "')", 500);
}
hideDiv(this.parentNode);
}
function fieldFocus(fieldName) {
var textField = getObjectByName(fieldName, TAG_INPUT);
if (textField)
textField.focus();
}
var spellMouseOverDropDown=function() {
setSpellStyle(this,"selectedItemStyle");
}
var spellMouseOutDropDown=function() {
setSpellStyle(this,"nonSelectedItemStyle");
}
function spellMenuInfo(j) {
var theStyleType = "dropDownItemStyle";
var spanTag=j.getElementsByTagName(TAG_SPAN);
var spanInfo = new Array();
if (spanTag) {
for(var c=0;c<spanTag.length;++c) {
if ( spanTag[c].className == theStyleType ) {
var spanData=spanTag[c].innerHTML;
if ( spanData != "&nbsp;" ) {
spanInfo = spanData;
}
break;
}
}
}
return spanInfo;
}
function setStatus(elementName, text) {
var link = getObjectByName(elementName, TAG_A);
if (link) {
if (text && text.length > 0) {
link.innerHTML = "<b><u>" + text + "</u></b>";
} else {
link.innerHTML = link.savedHTML;
}
var realName = elementName.substring(5);
var displayField = gel(realName + DISPLAY_TAG);
if (displayField)
adjustSpellCheckEditDiv(displayField, gel(realName));
}
}
;
/*! RESOURCE: scripts/AJAXTextSearchCompleter.js */
var AJAXTextSearchCompleter = Class.create(AJAXTableCompleter, {
PROCESSOR: "TSSuggestProcessor",
initialize: function(name, elementName, horizontalAlign, searchContainer) {
AJAXCompleter.prototype.initialize.call(this, name, elementName);
this.className = "AJAXTextSearchCompleter";
this.element = $(elementName);
this.keyElement = this.element;
this.horizontalAlign = horizontalAlign;
this.enterSubmits = true;
this.searchContainer = searchContainer;
this.allowInvalid = true;
this.ieIFrameAdjust = 2;
this.oneMatchSelects = false;
AJAXReferenceCompleter.prototype._commonSetup.call(this);
},
copyAttributes: function(node) {
var text = node.childNodes[0].nodeValue;
var attributes = new Array();
attributes['label'] = text;
attributes['name'] = text;
return attributes;
},
setTopLeft: function (style, top, left) {
if (this.horizontalAlign == "right")
this._rightAlign(style, parseInt(left, 10));
else
style.left = left;
style.top = top;
},
setInvalid: function() {
},
clearInvalid: function() {
},
onDisplayDropDown: function() {
AJAXTableCompleter.prototype.onDisplayDropDown.call(this);
if (this.horizontalAlign == "right") {
var mLeft = grabOffsetLeft(this.element);
var x = this._rightAlign(this.dropDown.style, mLeft);
this.iFrame.style.left = x;
}
},
_rightAlign: function(style, left) {
var containerWidth = this._getContainerWidth();
var dropWidth = this.dropDown.getWidth();
var adjust = 0;
if (isWebKit)
adjust = 2;
this.log("_rightAlign: " + left + "+" + containerWidth + "-" + dropWidth + "-" + adjust);
var x = left + containerWidth - dropWidth - adjust + "px";
style.left = x;
return	x;
},
_createTable: function() {
AJAXTableCompleter.prototype._createTable.call(this);
var tableWidth = this._getContainerWidth();
if (!g_isInternetExplorer)
tableWidth -= 2;
this.table.style.width = tableWidth + "px";
},
_getContainerWidth: function() {
var adjust = 1;
if (!g_isInternetExplorer)
adjust = 2;
var width = 0;
if (this.searchContainer)
width = $(this.searchContainer).getWidth() - adjust;
return width;
}
});
;
/*! RESOURCE: scripts/CloudApiSCClient.js */
var CloudApiSCClient = {
_fieldsInfo: {},
validateCatItemParameterVariables: function(ajaxProcessor, variableSysId, oldValue, newValue, isLoading, g_form) {
if (isLoading || oldValue == newValue)
return;
var parameters = {};
parameters.variableSysId = variableSysId;
parameters.parameterValue = newValue.trim();
this.callAjax(ajaxProcessor, "validateVariableValue", parameters, function(answer) {
var result = JSON.parse(answer);
result.variableSysId = "IO:" + variableSysId;
CloudApiSCClient._fieldsInfo[result["name"]] = result;
CloudApiSCClient.showAllFieldMessages(g_form);
});
},
callAjax: function(ajaxName, methodName, parameters, callback) {
var glideAjax = new GlideAjax(ajaxName);
glideAjax.addParam("sysparm_name", methodName);
if (parameters) {
for (var name in parameters) {
glideAjax.addParam(name, parameters[name]);
}
}
if (callback) {
glideAjax.getXMLAnswer(callback);
} else {
glideAjax.getXMLWait();
return glideAjax.getAnswer();
}
},
beforeSubmitCloudRsrcTemplate: function(g_form) {
if (this.isFormValid())
return true;
var msg = "Please correct errors to submit order";
g_form.addErrorMessage(msg);
this.showAllFieldMessages(g_form);
return false;
},
isFormValid: function() {
if (!this._fieldsInfo)
return true;
for (var name in this._fieldsInfo) {
if (!this._fieldsInfo[name].isValid)
return false;
}
return true;
},
showAllFieldMessages: function(g_form) {
g_form.hideAllFieldMsgs("error");
g_form.hideAllFieldMsgs("error");
g_form.clearMessages();
for (var name in this._fieldsInfo) {
var fieldInfo = this._fieldsInfo[name];
if (fieldInfo.message.length > 0) {
for (var i = 0; i < fieldInfo.message.length; i++) {
g_form.showFieldMsg(fieldInfo.variableSysId, fieldInfo.message[i], fieldInfo.msgtype);
}
}
}
}
};
;
/*! RESOURCE: /scripts/doctype/html_class_setter.js */
(function () {
if (window.NOW.htmlClassSetterInitialized)
return;
window.NOW.htmlClassSetterInitialized = true;
var df = window.NOW.dateFormat;
var shortDateFormat = window.NOW.shortDateFormat;
var $h = $j('HTML');
$j(function() {
if (!df)
return;
CustomEvent.observe('timeago_set', function(timeAgo) {
df.timeAgo = timeAgo;
df.dateBoth = false;
setDateClass();
setDateTimeVisibilityToSR();
});
CustomEvent.observe('shortdates_set', function(trueFalse) {
shortDateFormat = trueFalse;
setDateClass();
setDateTimeVisibilityToSR();
});
CustomEvent.observe('date_both', function(trueFalse) {
df.dateBoth = trueFalse;
df.timeAgo = false;
setDateClass();
setDateTimeVisibilityToSR();
})
});
function setDateClass() {
$h.removeClass('date-timeago');
$h.removeClass('date-calendar');
$h.removeClass('date-calendar-short');
$h.removeClass('date-both');
if (df.dateBoth) {
$h.addClass('date-both');
if (shortDateFormat)
$h.addClass('date-calendar-short');
else
$h.addClass('date-calendar');
} else if (df.timeAgo)
$h.addClass('date-timeago');
else {
if (shortDateFormat)
$h.addClass('date-calendar-short');
else
$h.addClass('date-calendar');
}
}
setDateClass();
function _showDateCalender(dateCalendarLong, dateCalendarShort) {
if (shortDateFormat) {
_hideDateTimeFormat(dateCalendarLong);
_showDateTimeFormat(dateCalendarShort);
}
else {
_showDateTimeFormat(dateCalendarLong);
_hideDateTimeFormat(dateCalendarShort);
}
}
function _hideDateTimeFormat(element) {
element.attr('aria-hidden', 'true');
}
function _showDateTimeFormat(element) {
element.removeAttr('aria-hidden');
}
function setDateTimeVisibilityToSR() {
if (!window.g_accessibility)
return;
var dateCalendarLong = $j(".datex.date-calendar"),
dateCalendarShort = $j(".datex.date-calendar-short"),
dateTimeAgo = $j(".datex.date-timeago");
if (window.NOW.dateFormat.dateBoth) {
_showDateCalender(dateCalendarLong, dateCalendarShort);
_showDateTimeFormat(dateTimeAgo);
}
else if (window.NOW.dateFormat.timeAgo) {
_hideDateTimeFormat(dateCalendarLong);
_hideDateTimeFormat(dateCalendarShort);
_showDateTimeFormat(dateTimeAgo);
}
else {
_showDateCalender(dateCalendarLong, dateCalendarShort);
_hideDateTimeFormat(dateTimeAgo);
}
}
CustomEvent.observe('list.loaded', setDateTimeVisibilityToSR);
var toggleTemplate = function(trueFalse){
var bool = (typeof trueFalse !== "undefined") ? trueFalse : !window.NOW.templateToggle;
window.NOW.templateToggle = bool;
if (bool) document.body.style.paddingBottom = "100px";
else document.body.style.paddingBottom = "";
setPreference('glide.ui.templateToggle', bool);
setTemplateToggle();
if (CustomEvent.events.templateToggle.length > 1)
CustomEvent.un('templateToggle', toggleTemplate);
};
CustomEvent.observe('templateToggle', toggleTemplate);
CustomEvent.observe('compact', function(trueFalse) {
window.NOW.compact = trueFalse;
setCompact();
});
CustomEvent.observe('cc_listv3_tablerow_striped', function(bool) {
if (bool) {
$j('.table-container table.list-grid').addClass('table-striped');
} else {
$j('.table-container table.list-grid').removeClass('table-striped');
}
});
function setTemplateToggle(){
var toggleBtn = $j('#template-toggle-button'),
ariaLiveEl = $j('#template-bar-aria-live');
var ariaLiveMsg = '';
if (window.NOW.templateToggle) {
$h.addClass('templates');
toggleBtn.attr('aria-expanded', 'true');
ariaLiveMsg = getMessage('Added Template bar landmark to bottom of form.');
}
else {
$h.removeClass('templates');
toggleBtn.removeAttr('aria-expanded');
ariaLiveMsg = getMessage('Removed Template bar landmark from bottom of form.');
}
ariaLiveEl.text(ariaLiveMsg);
}
CustomEvent.observe('form.loaded', setTemplateToggle);
function setCompact() {
try {
var modalDiv = window.top.document.getElementById("settings_modal");
} catch (e) {
}
if (modalDiv)
modalDiv = modalDiv.childNodes[0];
var $pH;
if(parent.$j)
$pH = parent.$j('HTML');
if (window.NOW.compact) {
$h.addClass('compact');
if ($pH)
$pH.addClass('compact');
if (modalDiv && modalDiv.className.indexOf(' compact') == -1)
modalDiv.className += ' compact';
} else {
$h.removeClass('compact');
if ($pH)
$pH.removeClass('compact');
if (modalDiv && modalDiv.className.indexOf(' compact') > -1)
modalDiv.className = modalDiv.className.replace(" compact", "");
}
}
setCompact();
CustomEvent.observe('tabbed', function(trueFalse) {
window.NOW.tabbed = trueFalse;
setTabbed();
});
function setTabbed() {
if (window.NOW.tabbed)
$h.addClass('tabbed');
else
$h.removeClass('tabbed');
}
setTabbed();
function setListTableWrap() {
if (window.NOW.listTableWrap)
$j('HTML').removeClass('list-nowrap-whitespace');
else
$j('HTML').addClass('list-nowrap-whitespace');
}
setListTableWrap();
CustomEvent.observe('table_wrap', function (trueFalse) {
window.NOW.listTableWrap = trueFalse;
setListTableWrap();
CustomEvent.fire('calculate_fixed_headers');
});
})();
function printList(maxRows) {
var mainWin = getMainWindow();
if (mainWin && mainWin.CustomEvent && mainWin.CustomEvent.fire && mainWin.CustomEvent.fire("print", maxRows) === false)
return false;
var veryLargeNumber = "999999999";
var print = true;
var features = "resizable=yes,scrollbars=yes,status=yes,toolbar=no,menubar=yes,location=no";
if (isChrome && isMacintosh)
features = "";
var href = "";
var frame = top.gsft_main;
if (!frame)
frame = top;
if (frame.document.getElementById("printURL") != null) {
href = frame.document.getElementById("printURL").value;
href = printListURLDecode(href);
}
if (!href) {
if (frame.document.getElementById("sysparm_total_rows") != null) {
var mRows = parseInt(maxRows);
if (mRows < 1)
mRows = 5000;
var totalrows = frame.document.getElementById("sysparm_total_rows").value;
if (parseInt(totalrows) > parseInt(mRows))
print = confirm(getMessage("Printing large lists may affect system performance. Continue?"));
}
var formTest;
var f = 0;
var form = frame.document.forms['sys_personalize'];
if (form && form.sysparm_referring_url) {
href = form.sysparm_referring_url.value;
if (href.indexOf("?sys_id=-1") != -1 && !href.startsWith('sys_report_template')) {
alert(getMessage("Please save the current form before printing."));
return false;
}
if (isMSIE) {
var isFormPage = frame.document.getElementById("isFormPage");
if (isFormPage != null && isFormPage.value == "true")
href = href.replace(/javascript%3A/gi, "_javascript_%3A");
}
href = printListURLDecode(href);
} else
href = document.getElementById("gsft_main").contentWindow.location.href;
}
if( href.indexOf("?") <0 )
href += "?";
else
href += "&";
href = href.replace("partial_page=", "syshint_unimportant=");
href = href.replace("sysparm_media=", "syshint_unimportant=");
href += "sysparm_stack=no&sysparm_force_row_count=" + veryLargeNumber + "&sysparm_media=print";
if (print) {
if (href != null && href != "") {
win = window.open(href, "Printer_friendly_format", features);
win.focus();
} else {
alert("Nothing to print");
}
}
function printListURLDecode(href) {
href = href.replace(/@99@/g, "&");
href = href.replace(/@88@/g, "@99@");
href = href.replace(/@77@/g, "@88@");
href = href.replace(/@66@/g, "@77@");
return href;
}
}
function clearCacheSniperly() {
var aj = new GlideAjax("GlideSystemAjax");
aj.addParam("sysparm_name", "cacheFlush");
aj.getXML(clearCacheDone);
}
function clearCacheDone() {
window.status = "Cache flushed";
}
;
/*! RESOURCE: /scripts/doctype/floating_scrollbar.min.js */
!function(t){function o(t){b.toggle(!!t)}function e(){s&&b.scrollLeft(s.scrollLeft())}function n(){var t=$j(".navbar-fixed-bottom");return t.length&&window.NOW.templateToggle?t.outerHeight():0}function i(){if(c=s,s=null,v.each(function(){var o=t(this).offset().top,e=o+t(this).height(),n=h.height();return n>o+u&&e>n?(s=t(this),!1):void 0}),!s)return void o();var i=s.scrollLeft(),l=s.scrollLeft(90019001).scrollLeft(),r=s.innerWidth(),a=r+l;return s.scrollLeft(i),r>=a?void o():(o(!0),c&&c[0]===s[0]||(c&&(c[0].onscroll=void 0),s[0].onscroll=e,s.after(b)),b.css({left:s.offset().left-f.scrollLeft(),width:r,bottom:n()}).scrollLeft(i),void g.width(a))}function l(){var o=t(".custom-form-group");o.length&&(a||(f=t(".section_header_content_no_scroll"),o.floatingScrollbar(),a=!0))}function r(t,o,e){function n(){clearTimeout(r),r=setTimeout(i.bind(null,arguments),s)}function i(o,e,n){l=o,t.apply(e,n)}var l,r,s=o||100;return function(){var t=e||this,o=+new Date,r=arguments;l&&l+s>o?n(o,t,r):i(o,t,r)}}if(!isMSIE9&&window.NOW.floatingScrollbars){var s,c,f,a,d=30,u=30,h=t(this),v=t([]),b=t('<div id="floating-scrollbar"><div/></div>'),g=b.children();b.hide().css({position:"fixed",bottom:n(),height:"30px","overflow-x":"auto","overflow-y":"hidden"}).scroll(function(){s&&s.scrollLeft(b.scrollLeft())}),g.css({border:"1px solid #fff",opacity:.01}),t.fn.floatingScrollbar=function(o){o===!1?(v=v.not(this),this.unbind("scroll",e),v.length||(b.detach(),h.unbind("resize",i),f.unbind("scroll",i))):this.length&&(v=v.add(this),isChrome&&v.each(function(){t(this).css({"-webkit-transform":"translate3d(0,0,0)"})})),h.bind("resize",r(i,d)),f.bind("scroll",r(i,d)),i()},CustomEvent.observe("list.loaded",l),CustomEvent.observe("tab.activated",i),CustomEvent.observe("partial.page.reload",l),CustomEvent.observe("related_lists.render",l),CustomEvent.observe("templateToggle",function(){b.css({bottom:n()})})}}(jQuery);
/*! RESOURCE: /scripts/doctype/page_title.js */
$j(function($) {
var title = $('[data-form-title]').first().attr('data-form-title');
if (!title || title == "null")
title = $( ".tabs2_section" ).first().attr('tab_caption');
if (!title || title == "null")
title = $('.list_title').first().text();
if (!title || title == "null")
title = $('.properties_page_title').first().text();
if (!title || title == "null")
return;
document.title = title + ' | ' + document.title;
});
;
/*! RESOURCE: /scripts/responsive_form_header.js */
(function($) {
var cache = null;
var MIN_HEADER_HEIGHT = 60;
var DEFAULT_TIMEOUT_IN_MS = 100;
addLoadEvent(initializeFormHeader);
function initializeFormHeader() {
if ($('.section_header_div_no_scroll').length === 0) {
return;
}
setupCache();
CustomEvent.observe("frame.resized", adjustFormHeaderElements);
Event.observe(window, "resize", debounceAdjustFormHeaderElements);
}
function adjustFormHeaderElements() {
if (!cache.hasLoaded && cache.$header.height() < MIN_HEADER_HEIGHT) {
cache.hasLoaded = true;
return;
}
if (cache.$navbar.is(":visible")) {
recalculateDynamicHeaderElements();
fitUiActions();
}
cache.$content.css({height: cache.$window.innerHeight() - cache.$header.height()});
}
function debounceAdjustFormHeaderElements() {
clearTimeout(cache.timeout);
cache.timeout = setTimeout(adjustFormHeaderElements, DEFAULT_TIMEOUT_IN_MS);
}
function setupCache() {
if (cache == null) {
cache = {};
cache.timeout = null;
cache.hasLoaded = false;
cache.$window = $(window);
cache.$header = $('.section_header_div_no_scroll');
cache.$content = $('.section_header_content_no_scroll');
cache.$spacer = $('div[data-position-below-header="true"]');
cache.$navbar = $('nav.navbar-default').first();
cache.$primaryContainer = cache.$navbar.find('.ui_action_container_primary');
cache.$overflowContainer = cache.$navbar.find('.ui_action_container_overflow');
cache.$uiActionContainer = cache.$primaryContainer.children(0);
cache.$navbarDisplayValueElement = cache.$navbar.find('.navbar-header:first .navbar-title-display-value');
cache.uiActionWidth = cache.$uiActionContainer.width();
cache.navbarRightWidth = cache.$navbar.find('.navbar-right:first').width() - cache.uiActionWidth;
cache.navbarTitleCaption = cache.$navbar.find('.navbar-header:first .navbar-title-caption').width();
}
}
function recalculateDynamicHeaderElements() {
cache.navbarHeaderWidth = cache.$navbar.find('.navbar-header:first').width();
cache.navbarDisplayWidth = cache.$navbar.find('.navbar-header:first .navbar-title-display-value').width();
}
function fitUiActions() {
cache.$navbarDisplayValueElement.css('max-width', '');
recalculateDynamicHeaderElements();
var navbarWidth = cache.$navbar.width();
var headerSize = cache.navbarHeaderWidth + cache.navbarRightWidth + cache.uiActionWidth;
if ((cache.navbarHeaderWidth + cache.navbarRightWidth) > cache.$window.width()) {
var maxWidth = cache.navbarDisplayWidth - (cache.navbarHeaderWidth - cache.$window.width) - 20;
if (navbarWidth > headerSize - cache.navbarDisplayWidth) {
maxWidth -= cache.navbarRightWidth + cache.uiActionWidth;
}
cache.$navbarDisplayValueElement.css('max-width', Math.max(maxWidth, cache.navbarTitleCaption));
navbarWidth = cache.$navbar.width();
recalculateDynamicHeaderElements();
}
headerSize = cache.navbarHeaderWidth + cache.navbarRightWidth + cache.uiActionWidth;
if (headerSize > navbarWidth) {
if (cache.$uiActionContainer.parent().get(0) === cache.$primaryContainer.get(0)) {
cache.$overflowContainer.append(cache.$uiActionContainer.detach());
}
} else if (cache.$uiActionContainer.parent().get(0) === cache.$overflowContainer.get(0)) {
cache.$primaryContainer.append(cache.$uiActionContainer.detach());
}
}
})(jQuery);
;
/*! RESOURCE: /scripts/classes/doctype/streamButton.js */
$j(function($) {
"use strict";
var closeButtonPadding = 32;
var isOpen = false;
var wrapperSelector = '.list_wrap_n_scroll';
$('.list_stream_button').click(function() {
$('.list_stream_button').attr("aria-expanded", !isOpen);
if (!isOpen){
isOpen = true;
var table = $('table.list_table[data-list_id]');
var listid = table.attr('data-list_id');
var query = table.attr('query');
query = encodeURIComponent(query);
var url = "$stream.do?sysparm_table=" + listid + "&sysparm_nostack=yes&sysparm_query=" + query;
var target = 'parent';
if (shouldUseFormPane())
target = 'form_pane';
url += "&sysparm_link_target=" + target;
createStreamReader(url);
} else {
isOpen = false;
var $readerDiv = $('.list_stream_reader');
closeStreamReader($readerDiv);
}
});
$(document).on('click', '.form_stream_button', function() {
var url = "$stream.do?sysparm_table=" + g_form.getTableName();
url += "&sysparm_sys_id=" + g_form.getUniqueValue();
url += "&sysparm_stack=no";
createStreamReader(url);
});
function shouldUseFormPane() {
try {
if (self == top)
return false;
if (window.top.g_navManager)
return !!window.top.g_navManager.options.formTarget;
} catch (e) {}
return false;
}
function createStreamReader(url) {
if ($('.list_stream_reader').length)
return;
var frame = '	<iframe src="' + url + '" id="list_stream_reader_frame"></iframe>';
var closeActivityLabel = getMessage('Close Activity Stream');
var activityStreamTitle = getMessage('Activity Stream');
var $div = $('<div class="list_stream_reader" aria-labelledby="stream_header">' +
'<span tabindex="0" id="list_stream_focus_bumper_top"> </span>' +
'<div class="list_stream_plank_header">'+
'<span class="list_stream_reader_close"><button id="list_stream_reader_close_button" role="region" aria-label="' +
closeActivityLabel +
'" class="plank_close_button icon-double-chevron-right"></button></span><h2 id="stream_header">'+
activityStreamTitle + '</h2>' +
'</div>' +
frame +
'<span tabindex="0" id="list_stream_focus_bumper_bottom"> </span>' +
'</div>');
$('body').append($div);
$('#list_stream_reader_frame').bind('load', function() {
if (NOW.compact) {
$(this).contents().find('html').addClass('compact');
}
CustomEvent.observe('compact', function(newValue) {
var method = newValue ? 'addClass' : 'removeClass';
$('#list_stream_reader_frame').contents()
.find('html')[method]('compact');
})
});
var focusOnCloseButton = function() {
$("#list_stream_reader_close_button")[0].focus();
};
var focusLastElementInPanel = function () {
try {
var frame = document.getElementById('list_stream_reader_frame');
window.tabbable(frame.contentDocument.body).pop().focus();
} catch (e) {
focusOnCloseButton();
}
};
$('#list_stream_focus_bumper_top').focus(focusLastElementInPanel);
$('#list_stream_focus_bumper_bottom').focus(focusOnCloseButton);
focusOnCloseButton();
resizeStreamReader($div);
$(window).bind('resize.streamreader', function() {
unfreezeTableWidth();
if ($div.parent().length === 0) {
$(window).unbind('resize.streamreader');
return;
}
resizeStreamReader($div);
})
}
function setListWrapperStyles(stylesObject) {
var $listWrapper = $(wrapperSelector);
if ($listWrapper.length === 0){
return;
}
$listWrapper.closest('body').css(stylesObject);
}
function resizeStreamReader($div) {
freezeTableWidth();
var width = $div.outerWidth() + closeButtonPadding;
var listWrapperStyles = {
'padding-right': width,
'position': 'absolute'
};
setListWrapperStyles(listWrapperStyles);
var top = 50;
if (typeof g_form == 'undefined')
top = $('.list_nav_spacer').offset().top;
else
top = $('.section_header_content_no_scroll').offset().top;
$div.css('top', top);
if ("ontouchstart" in window) {
$div.css('absolute');
window.scrollTo(0, top);
}
}
$('body').on('click', '.list_stream_reader_close', function() {
isOpen = false;
var $readerDiv = $(this).closest('.list_stream_reader');
closeStreamReader($readerDiv);
var streamButton = $('.list_stream_button');
if (streamButton.length > 0) {
streamButton.attr("aria-expanded", isOpen);
streamButton.focus();
}
});
function closeStreamReader($readerDiv) {
unfreezeTableWidth();
$readerDiv.remove();
var listWrapperStyles = {
'position': '',
'padding-right': 0
};
setListWrapperStyles(listWrapperStyles);
}
function freezeTableWidth() {
$('table.list_table').each(function(index, el) {
var $el = $(el);
var width = $el.width();
$el.css('width', width);
})
}
function unfreezeTableWidth() {
$('table.list_table').each(function(index, el) {
$(el).css('width', '');
})
}
});
;
/*! RESOURCE: /scripts/js_includes_weba.js */
/*! RESOURCE: /scripts/doctype/GlideWebAnalytics.js */
var GlideWebAnalytics = (function() {
function subscribe() {
window.snWebaConfig = window.snWebaConfig || {};
if (window.snWebaConfig.subscribed && window.snWebaConfig.subscribed == true)
return;
var ambClient = getAMB();
if (ambClient == undefined || ambClient == "")
return;
var webaChannelId = "/weba/config";
var webaCh = ambClient.getChannel(webaChannelId);
webaCh.subscribe(function(response) {
if (window.snWebaConfig == undefined || window.snWebaConfig == null)
window.snWebaConfig = {};
var oldConfig = {
siteId : (window.snWebaConfig.siteId)? window.snWebaConfig.siteId: "0" ,
trackerURL : (window.snWebaConfig.trackerURL)? window.snWebaConfig.trackerURL: ""
};
window.snWebaConfig.siteId = response.data.weba_site_id;
window.snWebaConfig.trackerURL = response.data.weba_rx_url;
window.snWebaConfig.webaScriptPath = response.data.weba_script_path;
handleConfigUpdate(oldConfig, window.snWebaConfig);
});
ambClient.connect();
window.snWebaConfig.subscribed = true;
}
function getAMB(){
var ambClient = window.snWebaConfig.ambClient;
if (ambClient)
return ambClient;
window.snWebaConfig.ambClient = (window.g_ambClient) ? window.g_ambClient : ((window.amb)? window.amb.getClient(): "");
return window.snWebaConfig.ambClient;
}
function handleConfigUpdate(oldConfig, newConfig) {
if (shouldRemoveTracker(oldConfig, newConfig))
removeTracker();
else if (shouldUpdateTracker(oldConfig, newConfig))
updateTracker(oldConfig, newConfig);
else if (shouldInsertTracker(oldConfig, newConfig))
insertTracker(newConfig);
}
function shouldRemoveTracker(oldConfig, newConfig){
if (newConfig.siteId == "0" || newConfig.trackerURL == "")
return true;
return false;
}
function shouldUpdateTracker(oldConfig, newConfig){
if (oldConfig.siteId && oldConfig.siteId != "0" && oldConfig.siteId != newConfig.siteId)
return true;
if (oldConfig.trackerURL && oldConfig.trackerURL != newConfig.trackerURL)
return true;
return false;
}
function shouldInsertTracker(oldConfig, newConfig){
if (oldConfig.siteId == undefined || oldConfig.siteId == "0")
return true;
if (oldConfig.trackerURL == undefined || oldConfig.trackerURL == "")
return true;
return false;
}
function removeTracker() {
if (!trackerExists())
return;
removeWebaTracker();
removeWebaScript();
removeWebaElements();
}
function removeWebaTracker() {
var document =  window.parent.document;
var trackerScriptId = "webaTracker";
var trackEle = document.getElementById(trackerScriptId);
trackEle.parentNode.removeChild(trackEle);
}
function removeWebaScript() {
var document =  window.parent.document;
var asyncTrackEle = document.getElementById('webaScript');
if (asyncTrackEle == undefined)
return;
var src = asyncTrackEle.src;
if (src != undefined && src.indexOf("piwik") > 0)
asyncTrackEle.parentNode.removeChild(asyncTrackEle);
}
function removeWebaElements() {
var document =  window.parent.document;
var webaEle = document.getElementsByClassName("weba");
var webaSize = webaEle.length - 1;
while (webaSize >= 0){
webaEle[webaSize].parentNode.removeChild(webaEle[webaSize]);
webaSize--;
}
}
function updateTracker(oldConfig, newConfig) {
if (!trackerExists())
return;
var document =  window.parent.document;
var head = document.head || document.getElementsByTagName('head')[0];
var updateScript = "_paq.push(['setSiteId', " + newConfig.siteId + "]);" + "_paq.push(['setTrackerUrl', " + "'" + newConfig.trackerURL + "'" + "]);";
var uEle = window.document.createElement("script");
uEle.text = updateScript;
uEle.className = "weba";
head.appendChild(uEle);
}
function insertTracker(newConfig, additionalData) {
var document =  window.parent.document;
var head = document.head || document.getElementsByTagName('head')[0];
if (trackerExists())
return;
if (!isConfigValid(newConfig))
return;
var trackerScript = generateTrackerScript(newConfig, additionalData);
var trackerElement = getOrCreateTracker();
trackerElement.text = trackerScript;
head.appendChild(trackerElement);
}
function applyTracker(additionalData) {
insertTracker(window.snWebaConfig, additionalData);
subscribe();
}
function applyTrackEvent(category, key, value, additionalValue) {
insertEventTracker(category, key, value, additionalValue);
subscribe();
}
function insertEventTracker(category, key, value, additionalValue) {
if (!isConfigValid(window.snWebaConfig))
return;
if (!trackerExists())
insertTracker(window.snWebaConfig);
if (typeof category != "string" || typeof key != "string" || typeof value != "string")
return;
if (additionalValue)
additionalValue = (typeof additionalValue == "number")? additionalValue: 0;
var eventItems = [ "trackEvent", category, key, value, additionalValue ];
var eventScript = "_paq.push(" + JSON.stringify(eventItems) + ");";
var document =  window.parent.document;
var head = document.head || document.getElementsByTagName('head')[0];
var scriptEle = window.document.createElement("script");
scriptEle.className = "weba";
scriptEle.text = eventScript;
head.appendChild(scriptEle);
}
function trackerExists() {
var document =  window.parent.document;
var trackEle = document.getElementById("webaTracker");
if (trackEle)
return true;
return false;
}
function isConfigValid(newConfig) {
var zero = "0";
var webaSiteId = (newConfig && newConfig.siteId) ? newConfig.siteId : zero;
var trackerURL = (newConfig && newConfig.trackerURL) ? newConfig.trackerURL : "";
if (webaSiteId == null || webaSiteId == "")
return false;
if (webaSiteId == zero )
return false;
if (trackerURL == null || trackerURL == "")
return false;
return true;
}
function getOrCreateTracker() {
var trackerScriptId = "webaTracker";
var document = window.parent.document;
var trackEle = document.getElementById(trackerScriptId);
if (trackEle)
return trackEle;
trackEle = document.createElement("script");
trackEle.id = trackerScriptId;
trackEle.type = "text/javascript";
return trackEle;
}
function getUserId(additionalData) {
if (window.NOW && window.NOW.user_id && window.NOW.user_id != "")
return window.NOW.user_id;
else if (additionalData && additionalData.userId){
return additionalData.userId;
}
else if (window.NOW && window.NOW.session_id)
return window.NOW.session_id;
else {
var userObj = (window.NOW)? window.NOW.user: null;
if (userObj && userObj.userID)
return userObj.userID;
}
return "";
}
function generateTrackerScript(webaConfig, additionalData) {
var trackerURL = webaConfig.trackerURL;
if (trackerURL.endsWith("/"))
trackerURL = webaConfig.trackerURL.substring(0, trackerURL.length - 1);
var userId = getUserId(additionalData);
var script = "var _paq = _paq || [];";
if (userId && userId != ""){
script += "_paq.push(['setUserId', '" + userId + "']);";
}
script += "_paq.push(['trackPageView']); _paq.push(['enableLinkTracking']);";
script += "(function() {_paq.push(['setTrackerUrl','" + trackerURL +  "']);"
+ "_paq.push(['setSiteId', " + webaConfig.siteId + "]);"
+ "var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0]; g.type='text/javascript'; g.async=true; "
+ "g.defer=true; g.src='" + webaConfig.webaScriptPath + "'; "
+ "g.id='webaScript';s.parentNode.insertBefore(g,s); })();";
return script;
}
var api = {
trackPage: function(additionalData) {
if (window.document.readyState == "complete")
applyTracker(additionalData);
else
window.addEventListener("load", function() {
applyTracker(additionalData);
},	false);
},
trackEvent: function(category, key, value, additionalValue, delayInMs) {
if (delayInMs == undefined)
delayInMs = 3000;
window.setTimeout(function() {
applyTrackEvent(category, key, value, additionalValue);
}, delayInMs);
}
}
return api;
})();
;
;
;
